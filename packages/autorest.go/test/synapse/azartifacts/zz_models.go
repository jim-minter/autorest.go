//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azartifacts

import "time"

// Activity - A pipeline activity.
type Activity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (a *Activity) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *Activity) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *Activity) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *Activity) GetDependsOn() (rv []*ActivityDependency) {
	if a != nil {
		return a.DependsOn
	}
	return
}

func (a *Activity) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *Activity) GetUserProperties() (rv []*UserProperty) {
	if a != nil {
		return a.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type Activity.
func (a *Activity) GetActivity() *Activity { return a }

// ActivityDependency - Activity dependency information.
type ActivityDependency struct {
	// REQUIRED; Activity name.
	Activity *string

	// REQUIRED; Match-Condition for the dependency.
	DependencyConditions []*DependencyCondition

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

func (a *ActivityDependency) GetActivity() (rv string) {
	if a != nil && a.Activity != nil {
		return *a.Activity
	}
	return
}

func (a *ActivityDependency) GetDependencyConditions() (rv []*DependencyCondition) {
	if a != nil {
		return a.DependencyConditions
	}
	return
}

func (a *ActivityDependency) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

// ActivityPolicy - Execution policy for an activity.
type ActivityPolicy struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Retry any

	// Interval between each retry attempt (in seconds). The default is 30 sec.
	RetryIntervalInSeconds *int32

	// When set to true, Input from activity is considered as secure and will not be logged to monitoring.
	SecureInput *bool

	// When set to true, Output from activity is considered as secure and will not be logged to monitoring.
	SecureOutput *bool

	// Specifies the timeout for the activity to run. The default timeout is 7 days. Type: string (or Expression with resultType
	// string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout any
}

func (a *ActivityPolicy) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *ActivityPolicy) GetRetry() (rv any) {
	if a != nil {
		return a.Retry
	}
	return
}

func (a *ActivityPolicy) GetRetryIntervalInSeconds() (rv int32) {
	if a != nil && a.RetryIntervalInSeconds != nil {
		return *a.RetryIntervalInSeconds
	}
	return
}

func (a *ActivityPolicy) GetSecureInput() (rv bool) {
	if a != nil && a.SecureInput != nil {
		return *a.SecureInput
	}
	return
}

func (a *ActivityPolicy) GetSecureOutput() (rv bool) {
	if a != nil && a.SecureOutput != nil {
		return *a.SecureOutput
	}
	return
}

func (a *ActivityPolicy) GetTimeout() (rv any) {
	if a != nil {
		return a.Timeout
	}
	return
}

// ActivityRun - Information about an activity run in a pipeline.
type ActivityRun struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// READ-ONLY; The name of the activity.
	ActivityName *string

	// READ-ONLY; The end time of the activity run in 'ISO 8601' format.
	ActivityRunEnd *time.Time

	// READ-ONLY; The id of the activity run.
	ActivityRunID *string

	// READ-ONLY; The start time of the activity run in 'ISO 8601' format.
	ActivityRunStart *time.Time

	// READ-ONLY; The type of the activity.
	ActivityType *string

	// READ-ONLY; The duration of the activity run.
	DurationInMs *int32

	// READ-ONLY; The error if any from the activity run.
	Error any

	// READ-ONLY; The input for the activity.
	Input any

	// READ-ONLY; The name of the compute linked service.
	LinkedServiceName *string

	// READ-ONLY; The output for the activity.
	Output any

	// READ-ONLY; The name of the pipeline.
	PipelineName *string

	// READ-ONLY; The id of the pipeline run.
	PipelineRunID *string

	// READ-ONLY; The status of the activity run.
	Status *string
}

func (a *ActivityRun) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *ActivityRun) GetActivityName() (rv string) {
	if a != nil && a.ActivityName != nil {
		return *a.ActivityName
	}
	return
}

func (a *ActivityRun) GetActivityRunEnd() (rv *time.Time) {
	if a != nil {
		return a.ActivityRunEnd
	}
	return
}

func (a *ActivityRun) GetActivityRunID() (rv string) {
	if a != nil && a.ActivityRunID != nil {
		return *a.ActivityRunID
	}
	return
}

func (a *ActivityRun) GetActivityRunStart() (rv *time.Time) {
	if a != nil {
		return a.ActivityRunStart
	}
	return
}

func (a *ActivityRun) GetActivityType() (rv string) {
	if a != nil && a.ActivityType != nil {
		return *a.ActivityType
	}
	return
}

func (a *ActivityRun) GetDurationInMs() (rv int32) {
	if a != nil && a.DurationInMs != nil {
		return *a.DurationInMs
	}
	return
}

func (a *ActivityRun) GetError() (rv any) {
	if a != nil {
		return a.Error
	}
	return
}

func (a *ActivityRun) GetInput() (rv any) {
	if a != nil {
		return a.Input
	}
	return
}

func (a *ActivityRun) GetLinkedServiceName() (rv string) {
	if a != nil && a.LinkedServiceName != nil {
		return *a.LinkedServiceName
	}
	return
}

func (a *ActivityRun) GetOutput() (rv any) {
	if a != nil {
		return a.Output
	}
	return
}

func (a *ActivityRun) GetPipelineName() (rv string) {
	if a != nil && a.PipelineName != nil {
		return *a.PipelineName
	}
	return
}

func (a *ActivityRun) GetPipelineRunID() (rv string) {
	if a != nil && a.PipelineRunID != nil {
		return *a.PipelineRunID
	}
	return
}

func (a *ActivityRun) GetStatus() (rv string) {
	if a != nil && a.Status != nil {
		return *a.Status
	}
	return
}

// ActivityRunsQueryResponse - A list activity runs.
type ActivityRunsQueryResponse struct {
	// REQUIRED; List of activity runs.
	Value []*ActivityRun

	// The continuation token for getting the next page of results, if any remaining results exist, null otherwise.
	ContinuationToken *string
}

func (a *ActivityRunsQueryResponse) GetValue() (rv []*ActivityRun) {
	if a != nil {
		return a.Value
	}
	return
}

func (a *ActivityRunsQueryResponse) GetContinuationToken() (rv string) {
	if a != nil && a.ContinuationToken != nil {
		return *a.ContinuationToken
	}
	return
}

// AddDataFlowToDebugSessionResponse - Response body structure for starting data flow debug session.
type AddDataFlowToDebugSessionResponse struct {
	// The ID of data flow debug job version.
	JobVersion *string
}

func (a *AddDataFlowToDebugSessionResponse) GetJobVersion() (rv string) {
	if a != nil && a.JobVersion != nil {
		return *a.JobVersion
	}
	return
}

// AdditionalColumns - Specify the column name and value of additional columns.
type AdditionalColumns struct {
	// Additional column name. Type: string (or Expression with resultType string).
	Name any

	// Additional column value. Type: string (or Expression with resultType string).
	Value any
}

func (a *AdditionalColumns) GetName() (rv any) {
	if a != nil {
		return a.Name
	}
	return
}

func (a *AdditionalColumns) GetValue() (rv any) {
	if a != nil {
		return a.Value
	}
	return
}

// AmazonMWSLinkedService - Amazon Marketplace Web Service linked service.
type AmazonMWSLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Amazon Marketplace Web Service linked service properties.
	TypeProperties *AmazonMWSLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AmazonMWSLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonMWSLinkedService) GetTypeProperties() (rv *AmazonMWSLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AmazonMWSLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonMWSLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AmazonMWSLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AmazonMWSLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AmazonMWSLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AmazonMWSLinkedService.
func (a *AmazonMWSLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AmazonMWSLinkedServiceTypeProperties - Amazon Marketplace Web Service linked service properties.
type AmazonMWSLinkedServiceTypeProperties struct {
	// REQUIRED; The access key id used to access data.
	AccessKeyID any

	// REQUIRED; The endpoint of the Amazon MWS server, (i.e. mws.amazonservices.com)
	Endpoint any

	// REQUIRED; The Amazon Marketplace ID you want to retrieve data from. To retrieve data from multiple Marketplace IDs, separate
	// them with a comma (,). (i.e. A2EUQ1WTGCTBG2)
	MarketplaceID any

	// REQUIRED; The Amazon seller ID.
	SellerID any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Amazon MWS authentication token.
	MwsAuthToken SecretBaseClassification

	// The secret key used to access data.
	SecretKey SecretBaseClassification

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true.
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification any
}

func (a *AmazonMWSLinkedServiceTypeProperties) GetAccessKeyID() (rv any) {
	if a != nil {
		return a.AccessKeyID
	}
	return
}

func (a *AmazonMWSLinkedServiceTypeProperties) GetEndpoint() (rv any) {
	if a != nil {
		return a.Endpoint
	}
	return
}

func (a *AmazonMWSLinkedServiceTypeProperties) GetMarketplaceID() (rv any) {
	if a != nil {
		return a.MarketplaceID
	}
	return
}

func (a *AmazonMWSLinkedServiceTypeProperties) GetSellerID() (rv any) {
	if a != nil {
		return a.SellerID
	}
	return
}

func (a *AmazonMWSLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AmazonMWSLinkedServiceTypeProperties) GetMwsAuthToken() (rv SecretBaseClassification) {
	if a != nil {
		return a.MwsAuthToken
	}
	return
}

func (a *AmazonMWSLinkedServiceTypeProperties) GetSecretKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.SecretKey
	}
	return
}

func (a *AmazonMWSLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if a != nil {
		return a.UseEncryptedEndpoints
	}
	return
}

func (a *AmazonMWSLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if a != nil {
		return a.UseHostVerification
	}
	return
}

func (a *AmazonMWSLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if a != nil {
		return a.UsePeerVerification
	}
	return
}

// AmazonMWSObjectDataset - Amazon Marketplace Web Service dataset.
type AmazonMWSObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (a *AmazonMWSObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AmazonMWSObjectDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonMWSObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonMWSObjectDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AmazonMWSObjectDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AmazonMWSObjectDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AmazonMWSObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AmazonMWSObjectDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AmazonMWSObjectDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AmazonMWSObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AmazonMWSObjectDataset.
func (a *AmazonMWSObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AmazonMWSSource - A copy activity Amazon Marketplace Web Service source.
type AmazonMWSSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (a *AmazonMWSSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonMWSSource) GetAdditionalColumns() (rv any) {
	if a != nil {
		return a.AdditionalColumns
	}
	return
}

func (a *AmazonMWSSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonMWSSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AmazonMWSSource) GetQuery() (rv any) {
	if a != nil {
		return a.Query
	}
	return
}

func (a *AmazonMWSSource) GetQueryTimeout() (rv any) {
	if a != nil {
		return a.QueryTimeout
	}
	return
}

func (a *AmazonMWSSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AmazonMWSSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AmazonMWSSource.
func (a *AmazonMWSSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type AmazonMWSSource.
func (a *AmazonMWSSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        a.AdditionalColumns,
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		QueryTimeout:             a.QueryTimeout,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AmazonRdsForLinkedServiceTypeProperties - AmazonRdsForOracle database linked service properties.
type AmazonRdsForLinkedServiceTypeProperties struct {
	// REQUIRED; The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Password SecretBaseClassification
}

func (a *AmazonRdsForLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if a != nil {
		return a.ConnectionString
	}
	return
}

func (a *AmazonRdsForLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AmazonRdsForLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if a != nil {
		return a.Password
	}
	return
}

// AmazonRdsForOracleLinkedService - AmazonRdsForOracle database.
type AmazonRdsForOracleLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; AmazonRdsForOracle database linked service properties.
	TypeProperties *AmazonRdsForLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AmazonRdsForOracleLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonRdsForOracleLinkedService) GetTypeProperties() (rv *AmazonRdsForLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AmazonRdsForOracleLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonRdsForOracleLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AmazonRdsForOracleLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AmazonRdsForOracleLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AmazonRdsForOracleLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AmazonRdsForOracleLinkedService.
func (a *AmazonRdsForOracleLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AmazonRdsForOraclePartitionSettings - The settings that will be leveraged for AmazonRdsForOracle source partitioning.
type AmazonRdsForOraclePartitionSettings struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression
	// with resultType string).
	PartitionColumnName any

	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type:
	// string (or Expression with resultType string).
	PartitionLowerBound any

	// Names of the physical partitions of AmazonRdsForOracle table.
	PartitionNames any

	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type:
	// string (or Expression with resultType string).
	PartitionUpperBound any
}

func (a *AmazonRdsForOraclePartitionSettings) GetPartitionColumnName() (rv any) {
	if a != nil {
		return a.PartitionColumnName
	}
	return
}

func (a *AmazonRdsForOraclePartitionSettings) GetPartitionLowerBound() (rv any) {
	if a != nil {
		return a.PartitionLowerBound
	}
	return
}

func (a *AmazonRdsForOraclePartitionSettings) GetPartitionNames() (rv any) {
	if a != nil {
		return a.PartitionNames
	}
	return
}

func (a *AmazonRdsForOraclePartitionSettings) GetPartitionUpperBound() (rv any) {
	if a != nil {
		return a.PartitionUpperBound
	}
	return
}

// AmazonRdsForOracleSource - A copy activity AmazonRdsForOracle source.
type AmazonRdsForOracleSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// AmazonRdsForOracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery any

	// The partition mechanism that will be used for AmazonRdsForOracle read in parallel. Type: string (or Expression with resultType
	// string).
	PartitionOption any

	// The settings that will be leveraged for AmazonRdsForOracle source partitioning.
	PartitionSettings *AmazonRdsForOraclePartitionSettings

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (a *AmazonRdsForOracleSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonRdsForOracleSource) GetAdditionalColumns() (rv any) {
	if a != nil {
		return a.AdditionalColumns
	}
	return
}

func (a *AmazonRdsForOracleSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonRdsForOracleSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AmazonRdsForOracleSource) GetOracleReaderQuery() (rv any) {
	if a != nil {
		return a.OracleReaderQuery
	}
	return
}

func (a *AmazonRdsForOracleSource) GetPartitionOption() (rv any) {
	if a != nil {
		return a.PartitionOption
	}
	return
}

func (a *AmazonRdsForOracleSource) GetPartitionSettings() (rv *AmazonRdsForOraclePartitionSettings) {
	if a != nil {
		return a.PartitionSettings
	}
	return
}

func (a *AmazonRdsForOracleSource) GetQueryTimeout() (rv any) {
	if a != nil {
		return a.QueryTimeout
	}
	return
}

func (a *AmazonRdsForOracleSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AmazonRdsForOracleSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AmazonRdsForOracleSource.
func (a *AmazonRdsForOracleSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AmazonRdsForOracleTableDataset - The AmazonRdsForOracle database dataset.
type AmazonRdsForOracleTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// AmazonRdsForOracle dataset properties.
	TypeProperties *AmazonRdsForOracleTableDatasetTypeProperties
}

func (a *AmazonRdsForOracleTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AmazonRdsForOracleTableDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonRdsForOracleTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonRdsForOracleTableDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AmazonRdsForOracleTableDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AmazonRdsForOracleTableDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AmazonRdsForOracleTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AmazonRdsForOracleTableDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AmazonRdsForOracleTableDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AmazonRdsForOracleTableDataset) GetTypeProperties() (rv *AmazonRdsForOracleTableDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AmazonRdsForOracleTableDataset.
func (a *AmazonRdsForOracleTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AmazonRdsForOracleTableDatasetTypeProperties - AmazonRdsForOracle dataset properties.
type AmazonRdsForOracleTableDatasetTypeProperties struct {
	// The schema name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the AmazonRdsForOracle database. Type: string (or Expression with resultType string).
	Table any
}

func (a *AmazonRdsForOracleTableDatasetTypeProperties) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AmazonRdsForOracleTableDatasetTypeProperties) GetTable() (rv any) {
	if a != nil {
		return a.Table
	}
	return
}

// AmazonRdsForSQLServerLinkedService - Amazon RDS for SQL Server linked service.
type AmazonRdsForSQLServerLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Amazon RDS for SQL Server linked service properties.
	TypeProperties *AmazonRdsForSQLServerLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AmazonRdsForSQLServerLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonRdsForSQLServerLinkedService) GetTypeProperties() (rv *AmazonRdsForSQLServerLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AmazonRdsForSQLServerLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonRdsForSQLServerLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AmazonRdsForSQLServerLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AmazonRdsForSQLServerLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AmazonRdsForSQLServerLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AmazonRdsForSQLServerLinkedService.
func (a *AmazonRdsForSQLServerLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AmazonRdsForSQLServerLinkedServiceTypeProperties - SQL Server linked service properties.
type AmazonRdsForSQLServerLinkedServiceTypeProperties struct {
	// REQUIRED; The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The on-premises Windows authentication password.
	Password SecretBaseClassification

	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName any
}

func (a *AmazonRdsForSQLServerLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if a != nil {
		return a.ConnectionString
	}
	return
}

func (a *AmazonRdsForSQLServerLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AmazonRdsForSQLServerLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if a != nil {
		return a.Password
	}
	return
}

func (a *AmazonRdsForSQLServerLinkedServiceTypeProperties) GetUserName() (rv any) {
	if a != nil {
		return a.UserName
	}
	return
}

// AmazonRdsForSQLServerSource - A copy activity Amazon RDS for SQL Server source.
type AmazonRdsForSQLServerSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable",
	// "DynamicRange".
	PartitionOption any

	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SQLPartitionSettings

	// Which additional types to produce.
	ProduceAdditionalTypes any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// SQL reader query. Type: string (or Expression with resultType string).
	SQLReaderQuery any

	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string
	// (or Expression with resultType string).
	SQLReaderStoredProcedureName any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]*StoredProcedureParameter
}

func (a *AmazonRdsForSQLServerSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonRdsForSQLServerSource) GetAdditionalColumns() (rv any) {
	if a != nil {
		return a.AdditionalColumns
	}
	return
}

func (a *AmazonRdsForSQLServerSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonRdsForSQLServerSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AmazonRdsForSQLServerSource) GetPartitionOption() (rv any) {
	if a != nil {
		return a.PartitionOption
	}
	return
}

func (a *AmazonRdsForSQLServerSource) GetPartitionSettings() (rv *SQLPartitionSettings) {
	if a != nil {
		return a.PartitionSettings
	}
	return
}

func (a *AmazonRdsForSQLServerSource) GetProduceAdditionalTypes() (rv any) {
	if a != nil {
		return a.ProduceAdditionalTypes
	}
	return
}

func (a *AmazonRdsForSQLServerSource) GetQueryTimeout() (rv any) {
	if a != nil {
		return a.QueryTimeout
	}
	return
}

func (a *AmazonRdsForSQLServerSource) GetSQLReaderQuery() (rv any) {
	if a != nil {
		return a.SQLReaderQuery
	}
	return
}

func (a *AmazonRdsForSQLServerSource) GetSQLReaderStoredProcedureName() (rv any) {
	if a != nil {
		return a.SQLReaderStoredProcedureName
	}
	return
}

func (a *AmazonRdsForSQLServerSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AmazonRdsForSQLServerSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

func (a *AmazonRdsForSQLServerSource) GetStoredProcedureParameters() (rv map[string]*StoredProcedureParameter) {
	if a != nil {
		return a.StoredProcedureParameters
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AmazonRdsForSQLServerSource.
func (a *AmazonRdsForSQLServerSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type AmazonRdsForSQLServerSource.
func (a *AmazonRdsForSQLServerSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        a.AdditionalColumns,
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		QueryTimeout:             a.QueryTimeout,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AmazonRdsForSQLServerTableDataset - The Amazon RDS for SQL Server dataset.
type AmazonRdsForSQLServerTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// The Amazon RDS for SQL Server dataset properties.
	TypeProperties *AmazonRdsForSQLServerTableDatasetTypeProperties
}

func (a *AmazonRdsForSQLServerTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AmazonRdsForSQLServerTableDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonRdsForSQLServerTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonRdsForSQLServerTableDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AmazonRdsForSQLServerTableDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AmazonRdsForSQLServerTableDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AmazonRdsForSQLServerTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AmazonRdsForSQLServerTableDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AmazonRdsForSQLServerTableDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AmazonRdsForSQLServerTableDataset) GetTypeProperties() (rv *AmazonRdsForSQLServerTableDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AmazonRdsForSQLServerTableDataset.
func (a *AmazonRdsForSQLServerTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AmazonRdsForSQLServerTableDatasetTypeProperties - The Amazon RDS for SQL Server dataset properties.
type AmazonRdsForSQLServerTableDatasetTypeProperties struct {
	// The schema name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table any
}

func (a *AmazonRdsForSQLServerTableDatasetTypeProperties) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AmazonRdsForSQLServerTableDatasetTypeProperties) GetTable() (rv any) {
	if a != nil {
		return a.Table
	}
	return
}

// AmazonRedshiftLinkedService - Linked service for Amazon Redshift.
type AmazonRedshiftLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Amazon Redshift linked service properties.
	TypeProperties *AmazonRedshiftLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AmazonRedshiftLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonRedshiftLinkedService) GetTypeProperties() (rv *AmazonRedshiftLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AmazonRedshiftLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonRedshiftLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AmazonRedshiftLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AmazonRedshiftLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AmazonRedshiftLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AmazonRedshiftLinkedService.
func (a *AmazonRedshiftLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AmazonRedshiftLinkedServiceTypeProperties - Amazon Redshift linked service properties.
type AmazonRedshiftLinkedServiceTypeProperties struct {
	// REQUIRED; The database name of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Database any

	// REQUIRED; The name of the Amazon Redshift server. Type: string (or Expression with resultType string).
	Server any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The password of the Amazon Redshift source.
	Password SecretBaseClassification

	// The TCP port number that the Amazon Redshift server uses to listen for client connections. The default value is 5439. Type:
	// integer (or Expression with resultType integer).
	Port any

	// The username of the Amazon Redshift source. Type: string (or Expression with resultType string).
	Username any
}

func (a *AmazonRedshiftLinkedServiceTypeProperties) GetDatabase() (rv any) {
	if a != nil {
		return a.Database
	}
	return
}

func (a *AmazonRedshiftLinkedServiceTypeProperties) GetServer() (rv any) {
	if a != nil {
		return a.Server
	}
	return
}

func (a *AmazonRedshiftLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AmazonRedshiftLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if a != nil {
		return a.Password
	}
	return
}

func (a *AmazonRedshiftLinkedServiceTypeProperties) GetPort() (rv any) {
	if a != nil {
		return a.Port
	}
	return
}

func (a *AmazonRedshiftLinkedServiceTypeProperties) GetUsername() (rv any) {
	if a != nil {
		return a.Username
	}
	return
}

// AmazonRedshiftSource - A copy activity source for Amazon Redshift Source.
type AmazonRedshiftSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with unload. With this, data
	// from Amazon Redshift source will be unloaded into S3 first and then copied into
	// the targeted sink from the interim S3.
	RedshiftUnloadSettings *RedshiftUnloadSettings

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (a *AmazonRedshiftSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonRedshiftSource) GetAdditionalColumns() (rv any) {
	if a != nil {
		return a.AdditionalColumns
	}
	return
}

func (a *AmazonRedshiftSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonRedshiftSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AmazonRedshiftSource) GetQuery() (rv any) {
	if a != nil {
		return a.Query
	}
	return
}

func (a *AmazonRedshiftSource) GetQueryTimeout() (rv any) {
	if a != nil {
		return a.QueryTimeout
	}
	return
}

func (a *AmazonRedshiftSource) GetRedshiftUnloadSettings() (rv *RedshiftUnloadSettings) {
	if a != nil {
		return a.RedshiftUnloadSettings
	}
	return
}

func (a *AmazonRedshiftSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AmazonRedshiftSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AmazonRedshiftSource.
func (a *AmazonRedshiftSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type AmazonRedshiftSource.
func (a *AmazonRedshiftSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        a.AdditionalColumns,
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		QueryTimeout:             a.QueryTimeout,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AmazonRedshiftTableDataset - The Amazon Redshift table dataset.
type AmazonRedshiftTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Amazon Redshift table dataset properties.
	TypeProperties *AmazonRedshiftTableDatasetTypeProperties
}

func (a *AmazonRedshiftTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AmazonRedshiftTableDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonRedshiftTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonRedshiftTableDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AmazonRedshiftTableDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AmazonRedshiftTableDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AmazonRedshiftTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AmazonRedshiftTableDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AmazonRedshiftTableDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AmazonRedshiftTableDataset) GetTypeProperties() (rv *AmazonRedshiftTableDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AmazonRedshiftTableDataset.
func (a *AmazonRedshiftTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AmazonRedshiftTableDatasetTypeProperties - Amazon Redshift table dataset properties.
type AmazonRedshiftTableDatasetTypeProperties struct {
	// The Amazon Redshift schema name. Type: string (or Expression with resultType string).
	Schema any

	// The Amazon Redshift table name. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (a *AmazonRedshiftTableDatasetTypeProperties) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AmazonRedshiftTableDatasetTypeProperties) GetTable() (rv any) {
	if a != nil {
		return a.Table
	}
	return
}

func (a *AmazonRedshiftTableDatasetTypeProperties) GetTableName() (rv any) {
	if a != nil {
		return a.TableName
	}
	return
}

// AmazonS3Dataset - A single Amazon Simple Storage Service (S3) object or a set of S3 objects.
type AmazonS3Dataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; Amazon S3 dataset properties.
	TypeProperties *AmazonS3DatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (a *AmazonS3Dataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AmazonS3Dataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonS3Dataset) GetTypeProperties() (rv *AmazonS3DatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AmazonS3Dataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonS3Dataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AmazonS3Dataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AmazonS3Dataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AmazonS3Dataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AmazonS3Dataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AmazonS3Dataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AmazonS3Dataset.
func (a *AmazonS3Dataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AmazonS3DatasetTypeProperties - Amazon S3 dataset properties.
type AmazonS3DatasetTypeProperties struct {
	// REQUIRED; The name of the Amazon S3 bucket. Type: string (or Expression with resultType string).
	BucketName any

	// The data compression method used for the Amazon S3 object.
	Compression *DatasetCompression

	// The format of files.
	Format DatasetStorageFormatClassification

	// The key of the Amazon S3 object. Type: string (or Expression with resultType string).
	Key any

	// The end of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd any

	// The start of S3 object's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart any

	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix any

	// The version for the S3 object. Type: string (or Expression with resultType string).
	Version any
}

func (a *AmazonS3DatasetTypeProperties) GetBucketName() (rv any) {
	if a != nil {
		return a.BucketName
	}
	return
}

func (a *AmazonS3DatasetTypeProperties) GetCompression() (rv *DatasetCompression) {
	if a != nil {
		return a.Compression
	}
	return
}

func (a *AmazonS3DatasetTypeProperties) GetFormat() (rv DatasetStorageFormatClassification) {
	if a != nil {
		return a.Format
	}
	return
}

func (a *AmazonS3DatasetTypeProperties) GetKey() (rv any) {
	if a != nil {
		return a.Key
	}
	return
}

func (a *AmazonS3DatasetTypeProperties) GetModifiedDatetimeEnd() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeEnd
	}
	return
}

func (a *AmazonS3DatasetTypeProperties) GetModifiedDatetimeStart() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeStart
	}
	return
}

func (a *AmazonS3DatasetTypeProperties) GetPrefix() (rv any) {
	if a != nil {
		return a.Prefix
	}
	return
}

func (a *AmazonS3DatasetTypeProperties) GetVersion() (rv any) {
	if a != nil {
		return a.Version
	}
	return
}

// AmazonS3LinkedService - Linked service for Amazon S3.
type AmazonS3LinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Amazon S3 linked service properties.
	TypeProperties *AmazonS3LinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AmazonS3LinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonS3LinkedService) GetTypeProperties() (rv *AmazonS3LinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AmazonS3LinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonS3LinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AmazonS3LinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AmazonS3LinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AmazonS3LinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AmazonS3LinkedService.
func (a *AmazonS3LinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AmazonS3LinkedServiceTypeProperties - Amazon S3 linked service properties.
type AmazonS3LinkedServiceTypeProperties struct {
	// The access key identifier of the Amazon S3 Identity and Access Management (IAM) user. Type: string (or Expression with
	// resultType string).
	AccessKeyID any

	// The authentication type of S3. Allowed value: AccessKey (default) or TemporarySecurityCredentials. Type: string (or Expression
	// with resultType string).
	AuthenticationType any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The secret access key of the Amazon S3 Identity and Access Management (IAM) user.
	SecretAccessKey SecretBaseClassification

	// This value specifies the endpoint to access with the S3 Connector. This is an optional property; change it only if you
	// want to try a different service endpoint or want to switch between https and
	// http. Type: string (or Expression with resultType string).
	ServiceURL any

	// The session token for the S3 temporary security credential.
	SessionToken SecretBaseClassification
}

func (a *AmazonS3LinkedServiceTypeProperties) GetAccessKeyID() (rv any) {
	if a != nil {
		return a.AccessKeyID
	}
	return
}

func (a *AmazonS3LinkedServiceTypeProperties) GetAuthenticationType() (rv any) {
	if a != nil {
		return a.AuthenticationType
	}
	return
}

func (a *AmazonS3LinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AmazonS3LinkedServiceTypeProperties) GetSecretAccessKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.SecretAccessKey
	}
	return
}

func (a *AmazonS3LinkedServiceTypeProperties) GetServiceURL() (rv any) {
	if a != nil {
		return a.ServiceURL
	}
	return
}

func (a *AmazonS3LinkedServiceTypeProperties) GetSessionToken() (rv SecretBaseClassification) {
	if a != nil {
		return a.SessionToken
	}
	return
}

// AmazonS3Location - The location of amazon S3 dataset.
type AmazonS3Location struct {
	// REQUIRED; Type of dataset storage location.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the bucketName of amazon S3. Type: string (or Expression with resultType string)
	BucketName any

	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName any

	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath any

	// Specify the version of amazon S3. Type: string (or Expression with resultType string).
	Version any
}

func (a *AmazonS3Location) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonS3Location) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonS3Location) GetBucketName() (rv any) {
	if a != nil {
		return a.BucketName
	}
	return
}

func (a *AmazonS3Location) GetFileName() (rv any) {
	if a != nil {
		return a.FileName
	}
	return
}

func (a *AmazonS3Location) GetFolderPath() (rv any) {
	if a != nil {
		return a.FolderPath
	}
	return
}

func (a *AmazonS3Location) GetVersion() (rv any) {
	if a != nil {
		return a.Version
	}
	return
}

// GetDatasetLocation implements the DatasetLocationClassification interface for type AmazonS3Location.
func (a *AmazonS3Location) GetDatasetLocation() *DatasetLocation {
	return &DatasetLocation{
		AdditionalProperties: a.AdditionalProperties,
		FileName:             a.FileName,
		FolderPath:           a.FolderPath,
		Type:                 a.Type,
	}
}

// AmazonS3ReadSettings - Azure data lake store read settings.
type AmazonS3ReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression
	// with resultType boolean).
	DeleteFilesAfterCompletion any

	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool

	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy.
	// Type: string (or Expression with resultType string).
	FileListPath any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd any

	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart any

	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath any

	// The prefix filter for the S3 object name. Type: string (or Expression with resultType string).
	Prefix any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// AmazonS3 wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName any

	// AmazonS3 wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath any
}

func (a *AmazonS3ReadSettings) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AmazonS3ReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AmazonS3ReadSettings) GetDeleteFilesAfterCompletion() (rv any) {
	if a != nil {
		return a.DeleteFilesAfterCompletion
	}
	return
}

func (a *AmazonS3ReadSettings) GetEnablePartitionDiscovery() (rv bool) {
	if a != nil && a.EnablePartitionDiscovery != nil {
		return *a.EnablePartitionDiscovery
	}
	return
}

func (a *AmazonS3ReadSettings) GetFileListPath() (rv any) {
	if a != nil {
		return a.FileListPath
	}
	return
}

func (a *AmazonS3ReadSettings) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AmazonS3ReadSettings) GetModifiedDatetimeEnd() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeEnd
	}
	return
}

func (a *AmazonS3ReadSettings) GetModifiedDatetimeStart() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeStart
	}
	return
}

func (a *AmazonS3ReadSettings) GetPartitionRootPath() (rv any) {
	if a != nil {
		return a.PartitionRootPath
	}
	return
}

func (a *AmazonS3ReadSettings) GetPrefix() (rv any) {
	if a != nil {
		return a.Prefix
	}
	return
}

func (a *AmazonS3ReadSettings) GetRecursive() (rv any) {
	if a != nil {
		return a.Recursive
	}
	return
}

func (a *AmazonS3ReadSettings) GetWildcardFileName() (rv any) {
	if a != nil {
		return a.WildcardFileName
	}
	return
}

func (a *AmazonS3ReadSettings) GetWildcardFolderPath() (rv any) {
	if a != nil {
		return a.WildcardFolderPath
	}
	return
}

// GetStoreReadSettings implements the StoreReadSettingsClassification interface for type AmazonS3ReadSettings.
func (a *AmazonS3ReadSettings) GetStoreReadSettings() *StoreReadSettings {
	return &StoreReadSettings{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		Type:                     a.Type,
	}
}

// AppFiguresLinkedService - Linked service for AppFigures.
type AppFiguresLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; AppFigures linked service properties.
	TypeProperties *AppFiguresLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AppFiguresLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AppFiguresLinkedService) GetTypeProperties() (rv *AppFiguresLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AppFiguresLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AppFiguresLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AppFiguresLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AppFiguresLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AppFiguresLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AppFiguresLinkedService.
func (a *AppFiguresLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AppFiguresLinkedServiceTypeProperties - AppFigures linked service type properties.
type AppFiguresLinkedServiceTypeProperties struct {
	// REQUIRED; The client key for the AppFigures source.
	ClientKey SecretBaseClassification

	// REQUIRED; The password of the AppFigures source.
	Password SecretBaseClassification

	// REQUIRED; The username of the Appfigures source.
	UserName any
}

func (a *AppFiguresLinkedServiceTypeProperties) GetClientKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.ClientKey
	}
	return
}

func (a *AppFiguresLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if a != nil {
		return a.Password
	}
	return
}

func (a *AppFiguresLinkedServiceTypeProperties) GetUserName() (rv any) {
	if a != nil {
		return a.UserName
	}
	return
}

// AppendVariableActivity - Append value for a Variable of type Array.
type AppendVariableActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Append Variable activity properties.
	TypeProperties *AppendVariableActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (a *AppendVariableActivity) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AppendVariableActivity) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AppendVariableActivity) GetTypeProperties() (rv *AppendVariableActivityTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AppendVariableActivity) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AppendVariableActivity) GetDependsOn() (rv []*ActivityDependency) {
	if a != nil {
		return a.DependsOn
	}
	return
}

func (a *AppendVariableActivity) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AppendVariableActivity) GetUserProperties() (rv []*UserProperty) {
	if a != nil {
		return a.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type AppendVariableActivity.
func (a *AppendVariableActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: a.AdditionalProperties,
		DependsOn:            a.DependsOn,
		Description:          a.Description,
		Name:                 a.Name,
		Type:                 a.Type,
		UserProperties:       a.UserProperties,
	}
}

// GetControlActivity implements the ControlActivityClassification interface for type AppendVariableActivity.
func (a *AppendVariableActivity) GetControlActivity() *ControlActivity {
	return &ControlActivity{
		AdditionalProperties: a.AdditionalProperties,
		DependsOn:            a.DependsOn,
		Description:          a.Description,
		Name:                 a.Name,
		Type:                 a.Type,
		UserProperties:       a.UserProperties,
	}
}

// AppendVariableActivityTypeProperties - AppendVariable activity properties.
type AppendVariableActivityTypeProperties struct {
	// Value to be appended. Could be a static value or Expression
	Value any

	// Name of the variable whose value needs to be appended to.
	VariableName *string
}

func (a *AppendVariableActivityTypeProperties) GetValue() (rv any) {
	if a != nil {
		return a.Value
	}
	return
}

func (a *AppendVariableActivityTypeProperties) GetVariableName() (rv string) {
	if a != nil && a.VariableName != nil {
		return *a.VariableName
	}
	return
}

// ArtifactRenameRequest - Request body structure for rename artifact.
type ArtifactRenameRequest struct {
	// New name of the artifact.
	NewName *string
}

func (a *ArtifactRenameRequest) GetNewName() (rv string) {
	if a != nil && a.NewName != nil {
		return *a.NewName
	}
	return
}

// AsanaLinkedService - Linked service for Asana.
type AsanaLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Asana linked service properties.
	TypeProperties *AsanaLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AsanaLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AsanaLinkedService) GetTypeProperties() (rv *AsanaLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AsanaLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AsanaLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AsanaLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AsanaLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AsanaLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AsanaLinkedService.
func (a *AsanaLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AsanaLinkedServiceTypeProperties - Asana linked service type properties.
type AsanaLinkedServiceTypeProperties struct {
	// REQUIRED; The api token for the Asana source.
	APIToken SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any
}

func (a *AsanaLinkedServiceTypeProperties) GetAPIToken() (rv SecretBaseClassification) {
	if a != nil {
		return a.APIToken
	}
	return
}

func (a *AsanaLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

// AutoPauseProperties - Auto-pausing properties of a Big Data pool powered by Apache Spark
type AutoPauseProperties struct {
	// Number of minutes of idle time before the Big Data pool is automatically paused.
	DelayInMinutes *int32

	// Whether auto-pausing is enabled for the Big Data pool.
	Enabled *bool
}

func (a *AutoPauseProperties) GetDelayInMinutes() (rv int32) {
	if a != nil && a.DelayInMinutes != nil {
		return *a.DelayInMinutes
	}
	return
}

func (a *AutoPauseProperties) GetEnabled() (rv bool) {
	if a != nil && a.Enabled != nil {
		return *a.Enabled
	}
	return
}

// AutoScaleProperties - Auto-scaling properties of a Big Data pool powered by Apache Spark
type AutoScaleProperties struct {
	// Whether automatic scaling is enabled for the Big Data pool.
	Enabled *bool

	// The maximum number of nodes the Big Data pool can support.
	MaxNodeCount *int32

	// The minimum number of nodes the Big Data pool can support.
	MinNodeCount *int32
}

func (a *AutoScaleProperties) GetEnabled() (rv bool) {
	if a != nil && a.Enabled != nil {
		return *a.Enabled
	}
	return
}

func (a *AutoScaleProperties) GetMaxNodeCount() (rv int32) {
	if a != nil && a.MaxNodeCount != nil {
		return *a.MaxNodeCount
	}
	return
}

func (a *AutoScaleProperties) GetMinNodeCount() (rv int32) {
	if a != nil && a.MinNodeCount != nil {
		return *a.MinNodeCount
	}
	return
}

// AvroDataset - Avro dataset.
type AvroDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Avro dataset properties.
	TypeProperties *AvroDatasetTypeProperties
}

func (a *AvroDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AvroDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AvroDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AvroDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AvroDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AvroDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AvroDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AvroDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AvroDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AvroDataset) GetTypeProperties() (rv *AvroDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AvroDataset.
func (a *AvroDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AvroDatasetTypeProperties - Avro dataset properties.
type AvroDatasetTypeProperties struct {
	// REQUIRED; The location of the avro storage.
	Location DatasetLocationClassification

	// A string from AvroCompressionCodecEnum or an expression
	AvroCompressionCodec any
	AvroCompressionLevel *int32
}

func (a *AvroDatasetTypeProperties) GetLocation() (rv DatasetLocationClassification) {
	if a != nil {
		return a.Location
	}
	return
}

func (a *AvroDatasetTypeProperties) GetAvroCompressionCodec() (rv any) {
	if a != nil {
		return a.AvroCompressionCodec
	}
	return
}

func (a *AvroDatasetTypeProperties) GetAvroCompressionLevel() (rv int32) {
	if a != nil && a.AvroCompressionLevel != nil {
		return *a.AvroCompressionLevel
	}
	return
}

// AvroFormat - The data stored in Avro format.
type AvroFormat struct {
	// REQUIRED; Type of dataset storage format.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer any

	// Serializer. Type: string (or Expression with resultType string).
	Serializer any
}

func (a *AvroFormat) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AvroFormat) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AvroFormat) GetDeserializer() (rv any) {
	if a != nil {
		return a.Deserializer
	}
	return
}

func (a *AvroFormat) GetSerializer() (rv any) {
	if a != nil {
		return a.Serializer
	}
	return
}

// GetDatasetStorageFormat implements the DatasetStorageFormatClassification interface for type AvroFormat.
func (a *AvroFormat) GetDatasetStorageFormat() *DatasetStorageFormat {
	return &DatasetStorageFormat{
		AdditionalProperties: a.AdditionalProperties,
		Deserializer:         a.Deserializer,
		Serializer:           a.Serializer,
		Type:                 a.Type,
	}
}

// AvroSink - A copy activity Avro sink.
type AvroSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Avro format settings.
	FormatSettings *AvroWriteSettings

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Avro store settings.
	StoreSettings StoreWriteSettingsClassification

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (a *AvroSink) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AvroSink) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AvroSink) GetFormatSettings() (rv *AvroWriteSettings) {
	if a != nil {
		return a.FormatSettings
	}
	return
}

func (a *AvroSink) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AvroSink) GetSinkRetryCount() (rv any) {
	if a != nil {
		return a.SinkRetryCount
	}
	return
}

func (a *AvroSink) GetSinkRetryWait() (rv any) {
	if a != nil {
		return a.SinkRetryWait
	}
	return
}

func (a *AvroSink) GetStoreSettings() (rv StoreWriteSettingsClassification) {
	if a != nil {
		return a.StoreSettings
	}
	return
}

func (a *AvroSink) GetWriteBatchSize() (rv any) {
	if a != nil {
		return a.WriteBatchSize
	}
	return
}

func (a *AvroSink) GetWriteBatchTimeout() (rv any) {
	if a != nil {
		return a.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type AvroSink.
func (a *AvroSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SinkRetryCount:           a.SinkRetryCount,
		SinkRetryWait:            a.SinkRetryWait,
		Type:                     a.Type,
		WriteBatchSize:           a.WriteBatchSize,
		WriteBatchTimeout:        a.WriteBatchTimeout,
	}
}

// AvroSource - A copy activity Avro source.
type AvroSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Avro store settings.
	StoreSettings StoreReadSettingsClassification
}

func (a *AvroSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AvroSource) GetAdditionalColumns() (rv any) {
	if a != nil {
		return a.AdditionalColumns
	}
	return
}

func (a *AvroSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AvroSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AvroSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AvroSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

func (a *AvroSource) GetStoreSettings() (rv StoreReadSettingsClassification) {
	if a != nil {
		return a.StoreSettings
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AvroSource.
func (a *AvroSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AvroWriteSettings - Avro write settings.
type AvroWriteSettings struct {
	// REQUIRED; The write setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies the file name pattern _. when copy from non-file based store without partitionOptions. Type: string (or Expression
	// with resultType string).
	FileNamePrefix any

	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with
	// resultType integer).
	MaxRowsPerFile any

	// Top level record name in write result, which is required in AVRO spec.
	RecordName *string

	// Record namespace in the write result.
	RecordNamespace *string
}

func (a *AvroWriteSettings) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AvroWriteSettings) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AvroWriteSettings) GetFileNamePrefix() (rv any) {
	if a != nil {
		return a.FileNamePrefix
	}
	return
}

func (a *AvroWriteSettings) GetMaxRowsPerFile() (rv any) {
	if a != nil {
		return a.MaxRowsPerFile
	}
	return
}

func (a *AvroWriteSettings) GetRecordName() (rv string) {
	if a != nil && a.RecordName != nil {
		return *a.RecordName
	}
	return
}

func (a *AvroWriteSettings) GetRecordNamespace() (rv string) {
	if a != nil && a.RecordNamespace != nil {
		return *a.RecordNamespace
	}
	return
}

// GetFormatWriteSettings implements the FormatWriteSettingsClassification interface for type AvroWriteSettings.
func (a *AvroWriteSettings) GetFormatWriteSettings() *FormatWriteSettings {
	return &FormatWriteSettings{
		AdditionalProperties: a.AdditionalProperties,
		Type:                 a.Type,
	}
}

// AzureBatchLinkedService - Azure Batch linked service.
type AzureBatchLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Batch linked service properties.
	TypeProperties *AzureBatchLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureBatchLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureBatchLinkedService) GetTypeProperties() (rv *AzureBatchLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureBatchLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureBatchLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureBatchLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureBatchLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureBatchLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureBatchLinkedService.
func (a *AzureBatchLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureBatchLinkedServiceTypeProperties - Azure Batch linked service properties.
type AzureBatchLinkedServiceTypeProperties struct {
	// REQUIRED; The Azure Batch account name. Type: string (or Expression with resultType string).
	AccountName any

	// REQUIRED; The Azure Batch URI. Type: string (or Expression with resultType string).
	BatchURI any

	// REQUIRED; The Azure Storage linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; The Azure Batch pool name. Type: string (or Expression with resultType string).
	PoolName any

	// The Azure Batch account access key.
	AccessKey SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any
}

func (a *AzureBatchLinkedServiceTypeProperties) GetAccountName() (rv any) {
	if a != nil {
		return a.AccountName
	}
	return
}

func (a *AzureBatchLinkedServiceTypeProperties) GetBatchURI() (rv any) {
	if a != nil {
		return a.BatchURI
	}
	return
}

func (a *AzureBatchLinkedServiceTypeProperties) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureBatchLinkedServiceTypeProperties) GetPoolName() (rv any) {
	if a != nil {
		return a.PoolName
	}
	return
}

func (a *AzureBatchLinkedServiceTypeProperties) GetAccessKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.AccessKey
	}
	return
}

func (a *AzureBatchLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

// AzureBlobDataset - The Azure Blob storage.
type AzureBlobDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Azure Blob dataset properties.
	TypeProperties *AzureBlobDatasetTypeProperties
}

func (a *AzureBlobDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureBlobDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureBlobDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureBlobDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureBlobDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureBlobDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AzureBlobDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AzureBlobDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureBlobDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AzureBlobDataset) GetTypeProperties() (rv *AzureBlobDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AzureBlobDataset.
func (a *AzureBlobDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AzureBlobDatasetTypeProperties - Azure Blob dataset properties.
type AzureBlobDatasetTypeProperties struct {
	// The data compression method used for the blob storage.
	Compression *DatasetCompression

	// The name of the Azure Blob. Type: string (or Expression with resultType string).
	FileName any

	// The path of the Azure Blob storage. Type: string (or Expression with resultType string).
	FolderPath any

	// The format of the Azure Blob storage.
	Format DatasetStorageFormatClassification

	// The end of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd any

	// The start of Azure Blob's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart any

	// The root of blob path. Type: string (or Expression with resultType string).
	TableRootLocation any
}

func (a *AzureBlobDatasetTypeProperties) GetCompression() (rv *DatasetCompression) {
	if a != nil {
		return a.Compression
	}
	return
}

func (a *AzureBlobDatasetTypeProperties) GetFileName() (rv any) {
	if a != nil {
		return a.FileName
	}
	return
}

func (a *AzureBlobDatasetTypeProperties) GetFolderPath() (rv any) {
	if a != nil {
		return a.FolderPath
	}
	return
}

func (a *AzureBlobDatasetTypeProperties) GetFormat() (rv DatasetStorageFormatClassification) {
	if a != nil {
		return a.Format
	}
	return
}

func (a *AzureBlobDatasetTypeProperties) GetModifiedDatetimeEnd() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeEnd
	}
	return
}

func (a *AzureBlobDatasetTypeProperties) GetModifiedDatetimeStart() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeStart
	}
	return
}

func (a *AzureBlobDatasetTypeProperties) GetTableRootLocation() (rv any) {
	if a != nil {
		return a.TableRootLocation
	}
	return
}

// AzureBlobFSDataset - The Azure Data Lake Storage Gen2 storage.
type AzureBlobFSDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Azure Data Lake Storage Gen2 dataset properties.
	TypeProperties *AzureBlobFSDatasetTypeProperties
}

func (a *AzureBlobFSDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureBlobFSDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureBlobFSDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureBlobFSDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureBlobFSDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureBlobFSDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AzureBlobFSDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AzureBlobFSDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureBlobFSDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AzureBlobFSDataset) GetTypeProperties() (rv *AzureBlobFSDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AzureBlobFSDataset.
func (a *AzureBlobFSDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AzureBlobFSDatasetTypeProperties - Azure Data Lake Storage Gen2 dataset properties.
type AzureBlobFSDatasetTypeProperties struct {
	// The data compression method used for the blob storage.
	Compression *DatasetCompression

	// The name of the Azure Data Lake Storage Gen2. Type: string (or Expression with resultType string).
	FileName any

	// The path of the Azure Data Lake Storage Gen2 storage. Type: string (or Expression with resultType string).
	FolderPath any

	// The format of the Azure Data Lake Storage Gen2 storage.
	Format DatasetStorageFormatClassification
}

func (a *AzureBlobFSDatasetTypeProperties) GetCompression() (rv *DatasetCompression) {
	if a != nil {
		return a.Compression
	}
	return
}

func (a *AzureBlobFSDatasetTypeProperties) GetFileName() (rv any) {
	if a != nil {
		return a.FileName
	}
	return
}

func (a *AzureBlobFSDatasetTypeProperties) GetFolderPath() (rv any) {
	if a != nil {
		return a.FolderPath
	}
	return
}

func (a *AzureBlobFSDatasetTypeProperties) GetFormat() (rv DatasetStorageFormatClassification) {
	if a != nil {
		return a.Format
	}
	return
}

// AzureBlobFSLinkedService - Azure Data Lake Storage Gen2 linked service.
type AzureBlobFSLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Data Lake Storage Gen2 linked service properties.
	TypeProperties *AzureBlobFSLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureBlobFSLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureBlobFSLinkedService) GetTypeProperties() (rv *AzureBlobFSLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureBlobFSLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureBlobFSLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureBlobFSLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureBlobFSLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureBlobFSLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureBlobFSLinkedService.
func (a *AzureBlobFSLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureBlobFSLinkedServiceTypeProperties - Azure Data Lake Storage Gen2 linked service properties.
type AzureBlobFSLinkedServiceTypeProperties struct {
	// Account key for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	AccountKey any

	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment,
	// AzureGermany. Default value is the data factory regions’ cloud type. Type:
	// string (or Expression with resultType string).
	AzureCloudType any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken SecretBaseClassification

	// SAS URI of the Azure Data Lake Storage Gen2 service. Type: string, SecureString or AzureKeyVaultSecretReference.
	SasURI any

	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey',
	// servicePrincipalCredential can be SecureString or
	// AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can
	// only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential SecretBaseClassification

	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret,
	// 'ServicePrincipalCert' for certificate. Type: string (or Expression with
	// resultType string).
	ServicePrincipalCredentialType any

	// The ID of the application used to authenticate against the Azure Data Lake Storage Gen2 account. Type: string (or Expression
	// with resultType string).
	ServicePrincipalID any

	// The Key of the application used to authenticate against the Azure Data Lake Storage Gen2 account.
	ServicePrincipalKey SecretBaseClassification

	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant any

	// Endpoint for the Azure Data Lake Storage Gen2 service. Type: string (or Expression with resultType string).
	URL any
}

func (a *AzureBlobFSLinkedServiceTypeProperties) GetAccountKey() (rv any) {
	if a != nil {
		return a.AccountKey
	}
	return
}

func (a *AzureBlobFSLinkedServiceTypeProperties) GetAzureCloudType() (rv any) {
	if a != nil {
		return a.AzureCloudType
	}
	return
}

func (a *AzureBlobFSLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureBlobFSLinkedServiceTypeProperties) GetSasToken() (rv SecretBaseClassification) {
	if a != nil {
		return a.SasToken
	}
	return
}

func (a *AzureBlobFSLinkedServiceTypeProperties) GetSasURI() (rv any) {
	if a != nil {
		return a.SasURI
	}
	return
}

func (a *AzureBlobFSLinkedServiceTypeProperties) GetServicePrincipalCredential() (rv SecretBaseClassification) {
	if a != nil {
		return a.ServicePrincipalCredential
	}
	return
}

func (a *AzureBlobFSLinkedServiceTypeProperties) GetServicePrincipalCredentialType() (rv any) {
	if a != nil {
		return a.ServicePrincipalCredentialType
	}
	return
}

func (a *AzureBlobFSLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if a != nil {
		return a.ServicePrincipalID
	}
	return
}

func (a *AzureBlobFSLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.ServicePrincipalKey
	}
	return
}

func (a *AzureBlobFSLinkedServiceTypeProperties) GetTenant() (rv any) {
	if a != nil {
		return a.Tenant
	}
	return
}

func (a *AzureBlobFSLinkedServiceTypeProperties) GetURL() (rv any) {
	if a != nil {
		return a.URL
	}
	return
}

// AzureBlobFSLocation - The location of azure blobFS dataset.
type AzureBlobFSLocation struct {
	// REQUIRED; Type of dataset storage location.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName any

	// Specify the fileSystem of azure blobFS. Type: string (or Expression with resultType string).
	FileSystem any

	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath any
}

func (a *AzureBlobFSLocation) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureBlobFSLocation) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureBlobFSLocation) GetFileName() (rv any) {
	if a != nil {
		return a.FileName
	}
	return
}

func (a *AzureBlobFSLocation) GetFileSystem() (rv any) {
	if a != nil {
		return a.FileSystem
	}
	return
}

func (a *AzureBlobFSLocation) GetFolderPath() (rv any) {
	if a != nil {
		return a.FolderPath
	}
	return
}

// GetDatasetLocation implements the DatasetLocationClassification interface for type AzureBlobFSLocation.
func (a *AzureBlobFSLocation) GetDatasetLocation() *DatasetLocation {
	return &DatasetLocation{
		AdditionalProperties: a.AdditionalProperties,
		FileName:             a.FileName,
		FolderPath:           a.FolderPath,
		Type:                 a.Type,
	}
}

// AzureBlobFSReadSettings - Azure blobFS read settings.
type AzureBlobFSReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression
	// with resultType boolean).
	DeleteFilesAfterCompletion any

	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery any

	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy.
	// Type: string (or Expression with resultType string).
	FileListPath any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd any

	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart any

	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// Azure blobFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName any

	// Azure blobFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath any
}

func (a *AzureBlobFSReadSettings) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureBlobFSReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureBlobFSReadSettings) GetDeleteFilesAfterCompletion() (rv any) {
	if a != nil {
		return a.DeleteFilesAfterCompletion
	}
	return
}

func (a *AzureBlobFSReadSettings) GetEnablePartitionDiscovery() (rv any) {
	if a != nil {
		return a.EnablePartitionDiscovery
	}
	return
}

func (a *AzureBlobFSReadSettings) GetFileListPath() (rv any) {
	if a != nil {
		return a.FileListPath
	}
	return
}

func (a *AzureBlobFSReadSettings) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureBlobFSReadSettings) GetModifiedDatetimeEnd() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeEnd
	}
	return
}

func (a *AzureBlobFSReadSettings) GetModifiedDatetimeStart() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeStart
	}
	return
}

func (a *AzureBlobFSReadSettings) GetPartitionRootPath() (rv any) {
	if a != nil {
		return a.PartitionRootPath
	}
	return
}

func (a *AzureBlobFSReadSettings) GetRecursive() (rv any) {
	if a != nil {
		return a.Recursive
	}
	return
}

func (a *AzureBlobFSReadSettings) GetWildcardFileName() (rv any) {
	if a != nil {
		return a.WildcardFileName
	}
	return
}

func (a *AzureBlobFSReadSettings) GetWildcardFolderPath() (rv any) {
	if a != nil {
		return a.WildcardFolderPath
	}
	return
}

// GetStoreReadSettings implements the StoreReadSettingsClassification interface for type AzureBlobFSReadSettings.
func (a *AzureBlobFSReadSettings) GetStoreReadSettings() *StoreReadSettings {
	return &StoreReadSettings{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		Type:                     a.Type,
	}
}

// AzureBlobFSSink - A copy activity Azure Data Lake Storage Gen2 sink.
type AzureBlobFSSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
	CopyBehavior any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (a *AzureBlobFSSink) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureBlobFSSink) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureBlobFSSink) GetCopyBehavior() (rv any) {
	if a != nil {
		return a.CopyBehavior
	}
	return
}

func (a *AzureBlobFSSink) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureBlobFSSink) GetSinkRetryCount() (rv any) {
	if a != nil {
		return a.SinkRetryCount
	}
	return
}

func (a *AzureBlobFSSink) GetSinkRetryWait() (rv any) {
	if a != nil {
		return a.SinkRetryWait
	}
	return
}

func (a *AzureBlobFSSink) GetWriteBatchSize() (rv any) {
	if a != nil {
		return a.WriteBatchSize
	}
	return
}

func (a *AzureBlobFSSink) GetWriteBatchTimeout() (rv any) {
	if a != nil {
		return a.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type AzureBlobFSSink.
func (a *AzureBlobFSSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SinkRetryCount:           a.SinkRetryCount,
		SinkRetryWait:            a.SinkRetryWait,
		Type:                     a.Type,
		WriteBatchSize:           a.WriteBatchSize,
		WriteBatchTimeout:        a.WriteBatchTimeout,
	}
}

// AzureBlobFSSource - A copy activity Azure BlobFS source.
type AzureBlobFSSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull any
}

func (a *AzureBlobFSSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureBlobFSSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureBlobFSSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureBlobFSSource) GetRecursive() (rv any) {
	if a != nil {
		return a.Recursive
	}
	return
}

func (a *AzureBlobFSSource) GetSkipHeaderLineCount() (rv any) {
	if a != nil {
		return a.SkipHeaderLineCount
	}
	return
}

func (a *AzureBlobFSSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AzureBlobFSSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

func (a *AzureBlobFSSource) GetTreatEmptyAsNull() (rv any) {
	if a != nil {
		return a.TreatEmptyAsNull
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AzureBlobFSSource.
func (a *AzureBlobFSSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AzureBlobFSWriteSettings - Azure blobFS write settings.
type AzureBlobFSWriteSettings struct {
	// REQUIRED; The write setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB any

	// The type of copy behavior for copy sink.
	CopyBehavior any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any
}

func (a *AzureBlobFSWriteSettings) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureBlobFSWriteSettings) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureBlobFSWriteSettings) GetBlockSizeInMB() (rv any) {
	if a != nil {
		return a.BlockSizeInMB
	}
	return
}

func (a *AzureBlobFSWriteSettings) GetCopyBehavior() (rv any) {
	if a != nil {
		return a.CopyBehavior
	}
	return
}

func (a *AzureBlobFSWriteSettings) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

// GetStoreWriteSettings implements the StoreWriteSettingsClassification interface for type AzureBlobFSWriteSettings.
func (a *AzureBlobFSWriteSettings) GetStoreWriteSettings() *StoreWriteSettings {
	return &StoreWriteSettings{
		AdditionalProperties:     a.AdditionalProperties,
		CopyBehavior:             a.CopyBehavior,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		Type:                     a.Type,
	}
}

// AzureBlobStorageLinkedService - The azure blob storage linked service.
type AzureBlobStorageLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Blob Storage linked service properties.
	TypeProperties *AzureBlobStorageLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureBlobStorageLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureBlobStorageLinkedService) GetTypeProperties() (rv *AzureBlobStorageLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureBlobStorageLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureBlobStorageLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureBlobStorageLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureBlobStorageLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureBlobStorageLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureBlobStorageLinkedService.
func (a *AzureBlobStorageLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureBlobStorageLinkedServiceTypeProperties - Azure Blob Storage linked service properties.
type AzureBlobStorageLinkedServiceTypeProperties struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference

	// Specify the kind of your storage account. Allowed values are: Storage (general purpose v1), StorageV2 (general purpose
	// v2), BlobStorage, or BlockBlobStorage. Type: string (or Expression with
	// resultType string).
	AccountKind *string

	// The type used for authentication. Type: string.
	AuthenticationType *AzureStorageAuthenticationType

	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment,
	// AzureGermany. Default value is the data factory regions’ cloud type. Type:
	// string (or Expression with resultType string).
	AzureCloudType any

	// The connection string. It is mutually exclusive with sasUri, serviceEndpoint property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// Container uri of the Azure Blob Storage resource only support for anonymous access. Type: string (or Expression with resultType
	// string).
	ContainerURI any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential *string

	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference

	// SAS URI of the Azure Blob Storage resource. It is mutually exclusive with connectionString, serviceEndpoint property. Type:
	// string, SecureString or AzureKeyVaultSecretReference.
	SasURI any

	// Blob service endpoint of the Azure Blob Storage resource. It is mutually exclusive with connectionString, sasUri property.
	ServiceEndpoint *string

	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with
	// resultType string).
	ServicePrincipalID any

	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey SecretBaseClassification

	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant any
}

func (a *AzureBlobStorageLinkedServiceTypeProperties) GetAccountKey() (rv *AzureKeyVaultSecretReference) {
	if a != nil {
		return a.AccountKey
	}
	return
}

func (a *AzureBlobStorageLinkedServiceTypeProperties) GetAccountKind() (rv string) {
	if a != nil && a.AccountKind != nil {
		return *a.AccountKind
	}
	return
}

func (a *AzureBlobStorageLinkedServiceTypeProperties) GetAuthenticationType() (rv *AzureStorageAuthenticationType) {
	if a != nil {
		return a.AuthenticationType
	}
	return
}

func (a *AzureBlobStorageLinkedServiceTypeProperties) GetAzureCloudType() (rv any) {
	if a != nil {
		return a.AzureCloudType
	}
	return
}

func (a *AzureBlobStorageLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if a != nil {
		return a.ConnectionString
	}
	return
}

func (a *AzureBlobStorageLinkedServiceTypeProperties) GetContainerURI() (rv any) {
	if a != nil {
		return a.ContainerURI
	}
	return
}

func (a *AzureBlobStorageLinkedServiceTypeProperties) GetEncryptedCredential() (rv string) {
	if a != nil && a.EncryptedCredential != nil {
		return *a.EncryptedCredential
	}
	return
}

func (a *AzureBlobStorageLinkedServiceTypeProperties) GetSasToken() (rv *AzureKeyVaultSecretReference) {
	if a != nil {
		return a.SasToken
	}
	return
}

func (a *AzureBlobStorageLinkedServiceTypeProperties) GetSasURI() (rv any) {
	if a != nil {
		return a.SasURI
	}
	return
}

func (a *AzureBlobStorageLinkedServiceTypeProperties) GetServiceEndpoint() (rv string) {
	if a != nil && a.ServiceEndpoint != nil {
		return *a.ServiceEndpoint
	}
	return
}

func (a *AzureBlobStorageLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if a != nil {
		return a.ServicePrincipalID
	}
	return
}

func (a *AzureBlobStorageLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.ServicePrincipalKey
	}
	return
}

func (a *AzureBlobStorageLinkedServiceTypeProperties) GetTenant() (rv any) {
	if a != nil {
		return a.Tenant
	}
	return
}

// AzureBlobStorageLocation - The location of azure blob dataset.
type AzureBlobStorageLocation struct {
	// REQUIRED; Type of dataset storage location.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the container of azure blob. Type: string (or Expression with resultType string).
	Container any

	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName any

	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath any
}

func (a *AzureBlobStorageLocation) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureBlobStorageLocation) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureBlobStorageLocation) GetContainer() (rv any) {
	if a != nil {
		return a.Container
	}
	return
}

func (a *AzureBlobStorageLocation) GetFileName() (rv any) {
	if a != nil {
		return a.FileName
	}
	return
}

func (a *AzureBlobStorageLocation) GetFolderPath() (rv any) {
	if a != nil {
		return a.FolderPath
	}
	return
}

// GetDatasetLocation implements the DatasetLocationClassification interface for type AzureBlobStorageLocation.
func (a *AzureBlobStorageLocation) GetDatasetLocation() *DatasetLocation {
	return &DatasetLocation{
		AdditionalProperties: a.AdditionalProperties,
		FileName:             a.FileName,
		FolderPath:           a.FolderPath,
		Type:                 a.Type,
	}
}

// AzureBlobStorageReadSettings - Azure blob read settings.
type AzureBlobStorageReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression
	// with resultType boolean).
	DeleteFilesAfterCompletion any

	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool

	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy.
	// Type: string (or Expression with resultType string).
	FileListPath any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd any

	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart any

	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath any

	// The prefix filter for the Azure Blob name. Type: string (or Expression with resultType string).
	Prefix any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// Azure blob wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName any

	// Azure blob wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath any
}

func (a *AzureBlobStorageReadSettings) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureBlobStorageReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureBlobStorageReadSettings) GetDeleteFilesAfterCompletion() (rv any) {
	if a != nil {
		return a.DeleteFilesAfterCompletion
	}
	return
}

func (a *AzureBlobStorageReadSettings) GetEnablePartitionDiscovery() (rv bool) {
	if a != nil && a.EnablePartitionDiscovery != nil {
		return *a.EnablePartitionDiscovery
	}
	return
}

func (a *AzureBlobStorageReadSettings) GetFileListPath() (rv any) {
	if a != nil {
		return a.FileListPath
	}
	return
}

func (a *AzureBlobStorageReadSettings) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureBlobStorageReadSettings) GetModifiedDatetimeEnd() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeEnd
	}
	return
}

func (a *AzureBlobStorageReadSettings) GetModifiedDatetimeStart() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeStart
	}
	return
}

func (a *AzureBlobStorageReadSettings) GetPartitionRootPath() (rv any) {
	if a != nil {
		return a.PartitionRootPath
	}
	return
}

func (a *AzureBlobStorageReadSettings) GetPrefix() (rv any) {
	if a != nil {
		return a.Prefix
	}
	return
}

func (a *AzureBlobStorageReadSettings) GetRecursive() (rv any) {
	if a != nil {
		return a.Recursive
	}
	return
}

func (a *AzureBlobStorageReadSettings) GetWildcardFileName() (rv any) {
	if a != nil {
		return a.WildcardFileName
	}
	return
}

func (a *AzureBlobStorageReadSettings) GetWildcardFolderPath() (rv any) {
	if a != nil {
		return a.WildcardFolderPath
	}
	return
}

// GetStoreReadSettings implements the StoreReadSettingsClassification interface for type AzureBlobStorageReadSettings.
func (a *AzureBlobStorageReadSettings) GetStoreReadSettings() *StoreReadSettings {
	return &StoreReadSettings{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		Type:                     a.Type,
	}
}

// AzureBlobStorageWriteSettings - Azure blob write settings.
type AzureBlobStorageWriteSettings struct {
	// REQUIRED; The write setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates the block size(MB) when writing data to blob. Type: integer (or Expression with resultType integer).
	BlockSizeInMB any

	// The type of copy behavior for copy sink.
	CopyBehavior any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any
}

func (a *AzureBlobStorageWriteSettings) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureBlobStorageWriteSettings) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureBlobStorageWriteSettings) GetBlockSizeInMB() (rv any) {
	if a != nil {
		return a.BlockSizeInMB
	}
	return
}

func (a *AzureBlobStorageWriteSettings) GetCopyBehavior() (rv any) {
	if a != nil {
		return a.CopyBehavior
	}
	return
}

func (a *AzureBlobStorageWriteSettings) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

// GetStoreWriteSettings implements the StoreWriteSettingsClassification interface for type AzureBlobStorageWriteSettings.
func (a *AzureBlobStorageWriteSettings) GetStoreWriteSettings() *StoreWriteSettings {
	return &StoreWriteSettings{
		AdditionalProperties:     a.AdditionalProperties,
		CopyBehavior:             a.CopyBehavior,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		Type:                     a.Type,
	}
}

// AzureDataExplorerCommandActivity - Azure Data Explorer command activity.
type AzureDataExplorerCommandActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Azure Data Explorer command activity properties.
	TypeProperties *AzureDataExplorerCommandActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (a *AzureDataExplorerCommandActivity) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureDataExplorerCommandActivity) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDataExplorerCommandActivity) GetTypeProperties() (rv *AzureDataExplorerCommandActivityTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureDataExplorerCommandActivity) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDataExplorerCommandActivity) GetDependsOn() (rv []*ActivityDependency) {
	if a != nil {
		return a.DependsOn
	}
	return
}

func (a *AzureDataExplorerCommandActivity) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureDataExplorerCommandActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureDataExplorerCommandActivity) GetPolicy() (rv *ActivityPolicy) {
	if a != nil {
		return a.Policy
	}
	return
}

func (a *AzureDataExplorerCommandActivity) GetUserProperties() (rv []*UserProperty) {
	if a != nil {
		return a.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type AzureDataExplorerCommandActivity.
func (a *AzureDataExplorerCommandActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: a.AdditionalProperties,
		DependsOn:            a.DependsOn,
		Description:          a.Description,
		Name:                 a.Name,
		Type:                 a.Type,
		UserProperties:       a.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type AzureDataExplorerCommandActivity.
func (a *AzureDataExplorerCommandActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: a.AdditionalProperties,
		DependsOn:            a.DependsOn,
		Description:          a.Description,
		LinkedServiceName:    a.LinkedServiceName,
		Name:                 a.Name,
		Policy:               a.Policy,
		Type:                 a.Type,
		UserProperties:       a.UserProperties,
	}
}

// AzureDataExplorerCommandActivityTypeProperties - Azure Data Explorer command activity properties.
type AzureDataExplorerCommandActivityTypeProperties struct {
	// REQUIRED; A control command, according to the Azure Data Explorer command syntax. Type: string (or Expression with resultType
	// string).
	Command any

	// Control command timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..)
	CommandTimeout any
}

func (a *AzureDataExplorerCommandActivityTypeProperties) GetCommand() (rv any) {
	if a != nil {
		return a.Command
	}
	return
}

func (a *AzureDataExplorerCommandActivityTypeProperties) GetCommandTimeout() (rv any) {
	if a != nil {
		return a.CommandTimeout
	}
	return
}

// AzureDataExplorerDatasetTypeProperties - Azure Data Explorer (Kusto) dataset properties.
type AzureDataExplorerDatasetTypeProperties struct {
	// The table name of the Azure Data Explorer database. Type: string (or Expression with resultType string).
	Table any
}

func (a *AzureDataExplorerDatasetTypeProperties) GetTable() (rv any) {
	if a != nil {
		return a.Table
	}
	return
}

// AzureDataExplorerLinkedService - Azure Data Explorer (Kusto) linked service.
type AzureDataExplorerLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Data Explorer (Kusto) linked service properties.
	TypeProperties *AzureDataExplorerLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureDataExplorerLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDataExplorerLinkedService) GetTypeProperties() (rv *AzureDataExplorerLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureDataExplorerLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDataExplorerLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureDataExplorerLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureDataExplorerLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureDataExplorerLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureDataExplorerLinkedService.
func (a *AzureDataExplorerLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureDataExplorerLinkedServiceTypeProperties - Azure Data Explorer (Kusto) linked service properties.
type AzureDataExplorerLinkedServiceTypeProperties struct {
	// REQUIRED; Database name for connection. Type: string (or Expression with resultType string).
	Database any

	// REQUIRED; The endpoint of Azure Data Explorer (the engine's endpoint). URL will be in the format https://..kusto.windows.net.
	// Type: string (or Expression with resultType string)
	Endpoint any

	// The ID of the service principal used to authenticate against Azure Data Explorer. Type: string (or Expression with resultType
	// string).
	ServicePrincipalID any

	// The key of the service principal used to authenticate against Kusto.
	ServicePrincipalKey SecretBaseClassification

	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant any
}

func (a *AzureDataExplorerLinkedServiceTypeProperties) GetDatabase() (rv any) {
	if a != nil {
		return a.Database
	}
	return
}

func (a *AzureDataExplorerLinkedServiceTypeProperties) GetEndpoint() (rv any) {
	if a != nil {
		return a.Endpoint
	}
	return
}

func (a *AzureDataExplorerLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if a != nil {
		return a.ServicePrincipalID
	}
	return
}

func (a *AzureDataExplorerLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.ServicePrincipalKey
	}
	return
}

func (a *AzureDataExplorerLinkedServiceTypeProperties) GetTenant() (rv any) {
	if a != nil {
		return a.Tenant
	}
	return
}

// AzureDataExplorerSink - A copy activity Azure Data Explorer sink.
type AzureDataExplorerSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// If set to true, any aggregation will be skipped. Default is false. Type: boolean.
	FlushImmediately any

	// An explicit column mapping description provided in a json format. Type: string.
	IngestionMappingAsJSON any

	// A name of a pre-created csv mapping that was defined on the target Kusto table. Type: string.
	IngestionMappingName any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (a *AzureDataExplorerSink) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDataExplorerSink) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDataExplorerSink) GetFlushImmediately() (rv any) {
	if a != nil {
		return a.FlushImmediately
	}
	return
}

func (a *AzureDataExplorerSink) GetIngestionMappingAsJSON() (rv any) {
	if a != nil {
		return a.IngestionMappingAsJSON
	}
	return
}

func (a *AzureDataExplorerSink) GetIngestionMappingName() (rv any) {
	if a != nil {
		return a.IngestionMappingName
	}
	return
}

func (a *AzureDataExplorerSink) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureDataExplorerSink) GetSinkRetryCount() (rv any) {
	if a != nil {
		return a.SinkRetryCount
	}
	return
}

func (a *AzureDataExplorerSink) GetSinkRetryWait() (rv any) {
	if a != nil {
		return a.SinkRetryWait
	}
	return
}

func (a *AzureDataExplorerSink) GetWriteBatchSize() (rv any) {
	if a != nil {
		return a.WriteBatchSize
	}
	return
}

func (a *AzureDataExplorerSink) GetWriteBatchTimeout() (rv any) {
	if a != nil {
		return a.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type AzureDataExplorerSink.
func (a *AzureDataExplorerSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SinkRetryCount:           a.SinkRetryCount,
		SinkRetryWait:            a.SinkRetryWait,
		Type:                     a.Type,
		WriteBatchSize:           a.WriteBatchSize,
		WriteBatchTimeout:        a.WriteBatchTimeout,
	}
}

// AzureDataExplorerSource - A copy activity Azure Data Explorer (Kusto) source.
type AzureDataExplorerSource struct {
	// REQUIRED; Database query. Should be a Kusto Query Language (KQL) query. Type: string (or Expression with resultType string).
	Query any

	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The name of the Boolean option that controls whether truncation is applied to result-sets that go beyond a certain row-count
	// limit.
	NoTruncation any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9]))..
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (a *AzureDataExplorerSource) GetQuery() (rv any) {
	if a != nil {
		return a.Query
	}
	return
}

func (a *AzureDataExplorerSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDataExplorerSource) GetAdditionalColumns() (rv any) {
	if a != nil {
		return a.AdditionalColumns
	}
	return
}

func (a *AzureDataExplorerSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDataExplorerSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureDataExplorerSource) GetNoTruncation() (rv any) {
	if a != nil {
		return a.NoTruncation
	}
	return
}

func (a *AzureDataExplorerSource) GetQueryTimeout() (rv any) {
	if a != nil {
		return a.QueryTimeout
	}
	return
}

func (a *AzureDataExplorerSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AzureDataExplorerSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AzureDataExplorerSource.
func (a *AzureDataExplorerSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AzureDataExplorerTableDataset - The Azure Data Explorer (Kusto) dataset.
type AzureDataExplorerTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; Azure Data Explorer (Kusto) dataset properties.
	TypeProperties *AzureDataExplorerDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (a *AzureDataExplorerTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureDataExplorerTableDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDataExplorerTableDataset) GetTypeProperties() (rv *AzureDataExplorerDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureDataExplorerTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDataExplorerTableDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureDataExplorerTableDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureDataExplorerTableDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AzureDataExplorerTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AzureDataExplorerTableDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureDataExplorerTableDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AzureDataExplorerTableDataset.
func (a *AzureDataExplorerTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AzureDataLakeAnalyticsLinkedService - Azure Data Lake Analytics linked service.
type AzureDataLakeAnalyticsLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Data Lake Analytics linked service properties.
	TypeProperties *AzureDataLakeAnalyticsLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureDataLakeAnalyticsLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDataLakeAnalyticsLinkedService) GetTypeProperties() (rv *AzureDataLakeAnalyticsLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureDataLakeAnalyticsLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDataLakeAnalyticsLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureDataLakeAnalyticsLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureDataLakeAnalyticsLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureDataLakeAnalyticsLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureDataLakeAnalyticsLinkedService.
func (a *AzureDataLakeAnalyticsLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureDataLakeAnalyticsLinkedServiceTypeProperties - Azure Data Lake Analytics linked service properties.
type AzureDataLakeAnalyticsLinkedServiceTypeProperties struct {
	// REQUIRED; The Azure Data Lake Analytics account name. Type: string (or Expression with resultType string).
	AccountName any

	// REQUIRED; The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType
	// string).
	Tenant any

	// Azure Data Lake Analytics URI Type: string (or Expression with resultType string).
	DataLakeAnalyticsURI any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Data Lake Analytics account resource group name (if different from Data Factory account). Type: string (or Expression with
	// resultType string).
	ResourceGroupName any

	// The ID of the application used to authenticate against the Azure Data Lake Analytics account. Type: string (or Expression
	// with resultType string).
	ServicePrincipalID any

	// The Key of the application used to authenticate against the Azure Data Lake Analytics account.
	ServicePrincipalKey SecretBaseClassification

	// Data Lake Analytics account subscription ID (if different from Data Factory account). Type: string (or Expression with
	// resultType string).
	SubscriptionID any
}

func (a *AzureDataLakeAnalyticsLinkedServiceTypeProperties) GetAccountName() (rv any) {
	if a != nil {
		return a.AccountName
	}
	return
}

func (a *AzureDataLakeAnalyticsLinkedServiceTypeProperties) GetTenant() (rv any) {
	if a != nil {
		return a.Tenant
	}
	return
}

func (a *AzureDataLakeAnalyticsLinkedServiceTypeProperties) GetDataLakeAnalyticsURI() (rv any) {
	if a != nil {
		return a.DataLakeAnalyticsURI
	}
	return
}

func (a *AzureDataLakeAnalyticsLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureDataLakeAnalyticsLinkedServiceTypeProperties) GetResourceGroupName() (rv any) {
	if a != nil {
		return a.ResourceGroupName
	}
	return
}

func (a *AzureDataLakeAnalyticsLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if a != nil {
		return a.ServicePrincipalID
	}
	return
}

func (a *AzureDataLakeAnalyticsLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.ServicePrincipalKey
	}
	return
}

func (a *AzureDataLakeAnalyticsLinkedServiceTypeProperties) GetSubscriptionID() (rv any) {
	if a != nil {
		return a.SubscriptionID
	}
	return
}

// AzureDataLakeStoreDataset - Azure Data Lake Store dataset.
type AzureDataLakeStoreDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Azure Data Lake Store dataset properties.
	TypeProperties *AzureDataLakeStoreDatasetTypeProperties
}

func (a *AzureDataLakeStoreDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureDataLakeStoreDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDataLakeStoreDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDataLakeStoreDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureDataLakeStoreDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureDataLakeStoreDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AzureDataLakeStoreDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AzureDataLakeStoreDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureDataLakeStoreDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AzureDataLakeStoreDataset) GetTypeProperties() (rv *AzureDataLakeStoreDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AzureDataLakeStoreDataset.
func (a *AzureDataLakeStoreDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AzureDataLakeStoreDatasetTypeProperties - Azure Data Lake Store dataset properties.
type AzureDataLakeStoreDatasetTypeProperties struct {
	// The data compression method used for the item(s) in the Azure Data Lake Store.
	Compression *DatasetCompression

	// The name of the file in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FileName any

	// Path to the folder in the Azure Data Lake Store. Type: string (or Expression with resultType string).
	FolderPath any

	// The format of the Data Lake Store.
	Format DatasetStorageFormatClassification
}

func (a *AzureDataLakeStoreDatasetTypeProperties) GetCompression() (rv *DatasetCompression) {
	if a != nil {
		return a.Compression
	}
	return
}

func (a *AzureDataLakeStoreDatasetTypeProperties) GetFileName() (rv any) {
	if a != nil {
		return a.FileName
	}
	return
}

func (a *AzureDataLakeStoreDatasetTypeProperties) GetFolderPath() (rv any) {
	if a != nil {
		return a.FolderPath
	}
	return
}

func (a *AzureDataLakeStoreDatasetTypeProperties) GetFormat() (rv DatasetStorageFormatClassification) {
	if a != nil {
		return a.Format
	}
	return
}

// AzureDataLakeStoreLinkedService - Azure Data Lake Store linked service.
type AzureDataLakeStoreLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Data Lake Store linked service properties.
	TypeProperties *AzureDataLakeStoreLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureDataLakeStoreLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDataLakeStoreLinkedService) GetTypeProperties() (rv *AzureDataLakeStoreLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureDataLakeStoreLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDataLakeStoreLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureDataLakeStoreLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureDataLakeStoreLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureDataLakeStoreLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureDataLakeStoreLinkedService.
func (a *AzureDataLakeStoreLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureDataLakeStoreLinkedServiceTypeProperties - Azure Data Lake Store linked service properties.
type AzureDataLakeStoreLinkedServiceTypeProperties struct {
	// REQUIRED; Data Lake Store service URI. Type: string (or Expression with resultType string).
	DataLakeStoreURI any

	// Data Lake Store account name. Type: string (or Expression with resultType string).
	AccountName any

	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment,
	// AzureGermany. Default value is the data factory regions’ cloud type. Type:
	// string (or Expression with resultType string).
	AzureCloudType any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Data Lake Store account resource group name (if different from Data Factory account). Type: string (or Expression with
	// resultType string).
	ResourceGroupName any

	// The ID of the application used to authenticate against the Azure Data Lake Store account. Type: string (or Expression with
	// resultType string).
	ServicePrincipalID any

	// The Key of the application used to authenticate against the Azure Data Lake Store account.
	ServicePrincipalKey SecretBaseClassification

	// Data Lake Store account subscription ID (if different from Data Factory account). Type: string (or Expression with resultType
	// string).
	SubscriptionID any

	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant any
}

func (a *AzureDataLakeStoreLinkedServiceTypeProperties) GetDataLakeStoreURI() (rv any) {
	if a != nil {
		return a.DataLakeStoreURI
	}
	return
}

func (a *AzureDataLakeStoreLinkedServiceTypeProperties) GetAccountName() (rv any) {
	if a != nil {
		return a.AccountName
	}
	return
}

func (a *AzureDataLakeStoreLinkedServiceTypeProperties) GetAzureCloudType() (rv any) {
	if a != nil {
		return a.AzureCloudType
	}
	return
}

func (a *AzureDataLakeStoreLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureDataLakeStoreLinkedServiceTypeProperties) GetResourceGroupName() (rv any) {
	if a != nil {
		return a.ResourceGroupName
	}
	return
}

func (a *AzureDataLakeStoreLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if a != nil {
		return a.ServicePrincipalID
	}
	return
}

func (a *AzureDataLakeStoreLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.ServicePrincipalKey
	}
	return
}

func (a *AzureDataLakeStoreLinkedServiceTypeProperties) GetSubscriptionID() (rv any) {
	if a != nil {
		return a.SubscriptionID
	}
	return
}

func (a *AzureDataLakeStoreLinkedServiceTypeProperties) GetTenant() (rv any) {
	if a != nil {
		return a.Tenant
	}
	return
}

// AzureDataLakeStoreLocation - The location of azure data lake store dataset.
type AzureDataLakeStoreLocation struct {
	// REQUIRED; Type of dataset storage location.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName any

	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath any
}

func (a *AzureDataLakeStoreLocation) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDataLakeStoreLocation) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDataLakeStoreLocation) GetFileName() (rv any) {
	if a != nil {
		return a.FileName
	}
	return
}

func (a *AzureDataLakeStoreLocation) GetFolderPath() (rv any) {
	if a != nil {
		return a.FolderPath
	}
	return
}

// GetDatasetLocation implements the DatasetLocationClassification interface for type AzureDataLakeStoreLocation.
func (a *AzureDataLakeStoreLocation) GetDatasetLocation() *DatasetLocation {
	return &DatasetLocation{
		AdditionalProperties: a.AdditionalProperties,
		FileName:             a.FileName,
		FolderPath:           a.FolderPath,
		Type:                 a.Type,
	}
}

// AzureDataLakeStoreReadSettings - Azure data lake store read settings.
type AzureDataLakeStoreReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression
	// with resultType boolean).
	DeleteFilesAfterCompletion any

	// Indicates whether to enable partition discovery. Type: boolean (or Expression with resultType boolean).
	EnablePartitionDiscovery any

	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy.
	// Type: string (or Expression with resultType string).
	FileListPath any

	// Lists files after the value (exclusive) based on file/folder names’ lexicographical order. Applies under the folderPath
	// in data set, and filter files/sub-folders under the folderPath. Type: string (or
	// Expression with resultType string).
	ListAfter any

	// Lists files before the value (inclusive) based on file/folder names’ lexicographical order. Applies under the folderPath
	// in data set, and filter files/sub-folders under the folderPath. Type: string
	// (or Expression with resultType string).
	ListBefore any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd any

	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart any

	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// ADLS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName any

	// ADLS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath any
}

func (a *AzureDataLakeStoreReadSettings) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDataLakeStoreReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDataLakeStoreReadSettings) GetDeleteFilesAfterCompletion() (rv any) {
	if a != nil {
		return a.DeleteFilesAfterCompletion
	}
	return
}

func (a *AzureDataLakeStoreReadSettings) GetEnablePartitionDiscovery() (rv any) {
	if a != nil {
		return a.EnablePartitionDiscovery
	}
	return
}

func (a *AzureDataLakeStoreReadSettings) GetFileListPath() (rv any) {
	if a != nil {
		return a.FileListPath
	}
	return
}

func (a *AzureDataLakeStoreReadSettings) GetListAfter() (rv any) {
	if a != nil {
		return a.ListAfter
	}
	return
}

func (a *AzureDataLakeStoreReadSettings) GetListBefore() (rv any) {
	if a != nil {
		return a.ListBefore
	}
	return
}

func (a *AzureDataLakeStoreReadSettings) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureDataLakeStoreReadSettings) GetModifiedDatetimeEnd() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeEnd
	}
	return
}

func (a *AzureDataLakeStoreReadSettings) GetModifiedDatetimeStart() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeStart
	}
	return
}

func (a *AzureDataLakeStoreReadSettings) GetPartitionRootPath() (rv any) {
	if a != nil {
		return a.PartitionRootPath
	}
	return
}

func (a *AzureDataLakeStoreReadSettings) GetRecursive() (rv any) {
	if a != nil {
		return a.Recursive
	}
	return
}

func (a *AzureDataLakeStoreReadSettings) GetWildcardFileName() (rv any) {
	if a != nil {
		return a.WildcardFileName
	}
	return
}

func (a *AzureDataLakeStoreReadSettings) GetWildcardFolderPath() (rv any) {
	if a != nil {
		return a.WildcardFolderPath
	}
	return
}

// GetStoreReadSettings implements the StoreReadSettingsClassification interface for type AzureDataLakeStoreReadSettings.
func (a *AzureDataLakeStoreReadSettings) GetStoreReadSettings() *StoreReadSettings {
	return &StoreReadSettings{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		Type:                     a.Type,
	}
}

// AzureDataLakeStoreSink - A copy activity Azure Data Lake Store sink.
type AzureDataLakeStoreSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The type of copy behavior for copy sink. Type: string (or Expression with resultType string).
	CopyBehavior any

	// Single File Parallel.
	EnableAdlsSingleFileParallel any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (a *AzureDataLakeStoreSink) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDataLakeStoreSink) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDataLakeStoreSink) GetCopyBehavior() (rv any) {
	if a != nil {
		return a.CopyBehavior
	}
	return
}

func (a *AzureDataLakeStoreSink) GetEnableAdlsSingleFileParallel() (rv any) {
	if a != nil {
		return a.EnableAdlsSingleFileParallel
	}
	return
}

func (a *AzureDataLakeStoreSink) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureDataLakeStoreSink) GetSinkRetryCount() (rv any) {
	if a != nil {
		return a.SinkRetryCount
	}
	return
}

func (a *AzureDataLakeStoreSink) GetSinkRetryWait() (rv any) {
	if a != nil {
		return a.SinkRetryWait
	}
	return
}

func (a *AzureDataLakeStoreSink) GetWriteBatchSize() (rv any) {
	if a != nil {
		return a.WriteBatchSize
	}
	return
}

func (a *AzureDataLakeStoreSink) GetWriteBatchTimeout() (rv any) {
	if a != nil {
		return a.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type AzureDataLakeStoreSink.
func (a *AzureDataLakeStoreSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SinkRetryCount:           a.SinkRetryCount,
		SinkRetryWait:            a.SinkRetryWait,
		Type:                     a.Type,
		WriteBatchSize:           a.WriteBatchSize,
		WriteBatchTimeout:        a.WriteBatchTimeout,
	}
}

// AzureDataLakeStoreSource - A copy activity Azure Data Lake source.
type AzureDataLakeStoreSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (a *AzureDataLakeStoreSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDataLakeStoreSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDataLakeStoreSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureDataLakeStoreSource) GetRecursive() (rv any) {
	if a != nil {
		return a.Recursive
	}
	return
}

func (a *AzureDataLakeStoreSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AzureDataLakeStoreSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AzureDataLakeStoreSource.
func (a *AzureDataLakeStoreSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AzureDataLakeStoreWriteSettings - Azure data lake store write settings.
type AzureDataLakeStoreWriteSettings struct {
	// REQUIRED; The write setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The type of copy behavior for copy sink.
	CopyBehavior any

	// Specifies the expiry time of the written files. The time is applied to the UTC time zone in the format of "2018-12-01T05:00:00Z".
	// Default value is NULL. Type: string (or Expression with resultType
	// string).
	ExpiryDateTime any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any
}

func (a *AzureDataLakeStoreWriteSettings) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDataLakeStoreWriteSettings) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDataLakeStoreWriteSettings) GetCopyBehavior() (rv any) {
	if a != nil {
		return a.CopyBehavior
	}
	return
}

func (a *AzureDataLakeStoreWriteSettings) GetExpiryDateTime() (rv any) {
	if a != nil {
		return a.ExpiryDateTime
	}
	return
}

func (a *AzureDataLakeStoreWriteSettings) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

// GetStoreWriteSettings implements the StoreWriteSettingsClassification interface for type AzureDataLakeStoreWriteSettings.
func (a *AzureDataLakeStoreWriteSettings) GetStoreWriteSettings() *StoreWriteSettings {
	return &StoreWriteSettings{
		AdditionalProperties:     a.AdditionalProperties,
		CopyBehavior:             a.CopyBehavior,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		Type:                     a.Type,
	}
}

// AzureDatabricksDeltaLakeDataset - Azure Databricks Delta Lake dataset.
type AzureDatabricksDeltaLakeDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *AzureDatabricksDeltaLakeDatasetTypeProperties
}

func (a *AzureDatabricksDeltaLakeDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureDatabricksDeltaLakeDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDatabricksDeltaLakeDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDatabricksDeltaLakeDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureDatabricksDeltaLakeDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureDatabricksDeltaLakeDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AzureDatabricksDeltaLakeDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AzureDatabricksDeltaLakeDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureDatabricksDeltaLakeDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AzureDatabricksDeltaLakeDataset) GetTypeProperties() (rv *AzureDatabricksDeltaLakeDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AzureDatabricksDeltaLakeDataset.
func (a *AzureDatabricksDeltaLakeDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AzureDatabricksDeltaLakeDatasetTypeProperties - Azure Databricks Delta Lake Dataset Properties
type AzureDatabricksDeltaLakeDatasetTypeProperties struct {
	// The database name of delta table. Type: string (or Expression with resultType string).
	Database any

	// The name of delta table. Type: string (or Expression with resultType string).
	Table any
}

func (a *AzureDatabricksDeltaLakeDatasetTypeProperties) GetDatabase() (rv any) {
	if a != nil {
		return a.Database
	}
	return
}

func (a *AzureDatabricksDeltaLakeDatasetTypeProperties) GetTable() (rv any) {
	if a != nil {
		return a.Table
	}
	return
}

// AzureDatabricksDeltaLakeExportCommand - Azure Databricks Delta Lake export command settings.
type AzureDatabricksDeltaLakeExportCommand struct {
	// REQUIRED; The export setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the date format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat any

	// Specify the timestamp format for the csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType
	// string).
	TimestampFormat any
}

func (a *AzureDatabricksDeltaLakeExportCommand) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDatabricksDeltaLakeExportCommand) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDatabricksDeltaLakeExportCommand) GetDateFormat() (rv any) {
	if a != nil {
		return a.DateFormat
	}
	return
}

func (a *AzureDatabricksDeltaLakeExportCommand) GetTimestampFormat() (rv any) {
	if a != nil {
		return a.TimestampFormat
	}
	return
}

// GetExportSettings implements the ExportSettingsClassification interface for type AzureDatabricksDeltaLakeExportCommand.
func (a *AzureDatabricksDeltaLakeExportCommand) GetExportSettings() *ExportSettings {
	return &ExportSettings{
		AdditionalProperties: a.AdditionalProperties,
		Type:                 a.Type,
	}
}

// AzureDatabricksDeltaLakeImportCommand - Azure Databricks Delta Lake import command settings.
type AzureDatabricksDeltaLakeImportCommand struct {
	// REQUIRED; The import setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the date format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	DateFormat any

	// Specify the timestamp format for csv in Azure Databricks Delta Lake Copy. Type: string (or Expression with resultType string).
	TimestampFormat any
}

func (a *AzureDatabricksDeltaLakeImportCommand) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDatabricksDeltaLakeImportCommand) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDatabricksDeltaLakeImportCommand) GetDateFormat() (rv any) {
	if a != nil {
		return a.DateFormat
	}
	return
}

func (a *AzureDatabricksDeltaLakeImportCommand) GetTimestampFormat() (rv any) {
	if a != nil {
		return a.TimestampFormat
	}
	return
}

// GetImportSettings implements the ImportSettingsClassification interface for type AzureDatabricksDeltaLakeImportCommand.
func (a *AzureDatabricksDeltaLakeImportCommand) GetImportSettings() *ImportSettings {
	return &ImportSettings{
		AdditionalProperties: a.AdditionalProperties,
		Type:                 a.Type,
	}
}

// AzureDatabricksDeltaLakeLinkedService - Azure Databricks Delta Lake linked service.
type AzureDatabricksDeltaLakeLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Databricks Delta Lake linked service properties.
	TypeProperties *AzureDatabricksDetltaLakeLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureDatabricksDeltaLakeLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDatabricksDeltaLakeLinkedService) GetTypeProperties() (rv *AzureDatabricksDetltaLakeLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureDatabricksDeltaLakeLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDatabricksDeltaLakeLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureDatabricksDeltaLakeLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureDatabricksDeltaLakeLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureDatabricksDeltaLakeLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureDatabricksDeltaLakeLinkedService.
func (a *AzureDatabricksDeltaLakeLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureDatabricksDeltaLakeSink - A copy activity Azure Databricks Delta Lake sink.
type AzureDatabricksDeltaLakeSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Azure Databricks Delta Lake import settings.
	ImportSettings *AzureDatabricksDeltaLakeImportCommand

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (a *AzureDatabricksDeltaLakeSink) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDatabricksDeltaLakeSink) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDatabricksDeltaLakeSink) GetImportSettings() (rv *AzureDatabricksDeltaLakeImportCommand) {
	if a != nil {
		return a.ImportSettings
	}
	return
}

func (a *AzureDatabricksDeltaLakeSink) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureDatabricksDeltaLakeSink) GetPreCopyScript() (rv any) {
	if a != nil {
		return a.PreCopyScript
	}
	return
}

func (a *AzureDatabricksDeltaLakeSink) GetSinkRetryCount() (rv any) {
	if a != nil {
		return a.SinkRetryCount
	}
	return
}

func (a *AzureDatabricksDeltaLakeSink) GetSinkRetryWait() (rv any) {
	if a != nil {
		return a.SinkRetryWait
	}
	return
}

func (a *AzureDatabricksDeltaLakeSink) GetWriteBatchSize() (rv any) {
	if a != nil {
		return a.WriteBatchSize
	}
	return
}

func (a *AzureDatabricksDeltaLakeSink) GetWriteBatchTimeout() (rv any) {
	if a != nil {
		return a.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type AzureDatabricksDeltaLakeSink.
func (a *AzureDatabricksDeltaLakeSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SinkRetryCount:           a.SinkRetryCount,
		SinkRetryWait:            a.SinkRetryWait,
		Type:                     a.Type,
		WriteBatchSize:           a.WriteBatchSize,
		WriteBatchTimeout:        a.WriteBatchTimeout,
	}
}

// AzureDatabricksDeltaLakeSource - A copy activity Azure Databricks Delta Lake source.
type AzureDatabricksDeltaLakeSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Azure Databricks Delta Lake export settings.
	ExportSettings *AzureDatabricksDeltaLakeExportCommand

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Azure Databricks Delta Lake Sql query. Type: string (or Expression with resultType string).
	Query any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (a *AzureDatabricksDeltaLakeSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDatabricksDeltaLakeSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDatabricksDeltaLakeSource) GetExportSettings() (rv *AzureDatabricksDeltaLakeExportCommand) {
	if a != nil {
		return a.ExportSettings
	}
	return
}

func (a *AzureDatabricksDeltaLakeSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureDatabricksDeltaLakeSource) GetQuery() (rv any) {
	if a != nil {
		return a.Query
	}
	return
}

func (a *AzureDatabricksDeltaLakeSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AzureDatabricksDeltaLakeSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AzureDatabricksDeltaLakeSource.
func (a *AzureDatabricksDeltaLakeSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AzureDatabricksDetltaLakeLinkedServiceTypeProperties - Azure Databricks Delta Lake linked service properties.
type AzureDatabricksDetltaLakeLinkedServiceTypeProperties struct {
	// REQUIRED; Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html.
	// Type: string, SecureString or AzureKeyVaultSecretReference.
	AccessToken SecretBaseClassification

	// REQUIRED; .azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType
	// string).
	Domain any

	// The id of an existing interactive cluster that will be used for all runs of this job. Type: string (or Expression with
	// resultType string).
	ClusterID any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any
}

func (a *AzureDatabricksDetltaLakeLinkedServiceTypeProperties) GetAccessToken() (rv SecretBaseClassification) {
	if a != nil {
		return a.AccessToken
	}
	return
}

func (a *AzureDatabricksDetltaLakeLinkedServiceTypeProperties) GetDomain() (rv any) {
	if a != nil {
		return a.Domain
	}
	return
}

func (a *AzureDatabricksDetltaLakeLinkedServiceTypeProperties) GetClusterID() (rv any) {
	if a != nil {
		return a.ClusterID
	}
	return
}

func (a *AzureDatabricksDetltaLakeLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

// AzureDatabricksLinkedService - Azure Databricks linked service.
type AzureDatabricksLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Databricks linked service properties.
	TypeProperties *AzureDatabricksLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureDatabricksLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureDatabricksLinkedService) GetTypeProperties() (rv *AzureDatabricksLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureDatabricksLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureDatabricksLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureDatabricksLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureDatabricksLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureDatabricksLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureDatabricksLinkedService.
func (a *AzureDatabricksLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureDatabricksLinkedServiceTypeProperties - Azure Databricks linked service properties.
type AzureDatabricksLinkedServiceTypeProperties struct {
	// REQUIRED; .azuredatabricks.net, domain name of your Databricks deployment. Type: string (or Expression with resultType
	// string).
	Domain any

	// Access token for databricks REST API. Refer to https://docs.azuredatabricks.net/api/latest/authentication.html. Type: string
	// (or Expression with resultType string).
	AccessToken SecretBaseClassification

	// Required to specify MSI, if using Workspace resource id for databricks REST API. Type: string (or Expression with resultType
	// string).
	Authentication any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The id of an existing interactive cluster that will be used for all runs of this activity. Type: string (or Expression
	// with resultType string).
	ExistingClusterID any

	// The id of an existing instance pool that will be used for all runs of this activity. Type: string (or Expression with resultType
	// string).
	InstancePoolID any

	// Additional tags for cluster resources. This property is ignored in instance pool configurations.
	NewClusterCustomTags map[string]any

	// The driver node type for the new job cluster. This property is ignored in instance pool configurations. Type: string (or
	// Expression with resultType string).
	NewClusterDriverNodeType any

	// Enable the elastic disk on the new cluster. This property is now ignored, and takes the default elastic disk behavior in
	// Databricks (elastic disks are always enabled). Type: boolean (or Expression
	// with resultType boolean).
	NewClusterEnableElasticDisk any

	// User-defined initialization scripts for the new cluster. Type: array of strings (or Expression with resultType array of
	// strings).
	NewClusterInitScripts any

	// Specify a location to deliver Spark driver, worker, and event logs. Type: string (or Expression with resultType string).
	NewClusterLogDestination any

	// The node type of the new job cluster. This property is required if newClusterVersion is specified and instancePoolId is
	// not specified. If instancePoolId is specified, this property is ignored. Type:
	// string (or Expression with resultType string).
	NewClusterNodeType any

	// If not using an existing interactive cluster, this specifies the number of worker nodes to use for the new job cluster
	// or instance pool. For new job clusters, this a string-formatted Int32, like '1'
	// means numOfWorker is 1 or '1:10' means auto-scale from 1 (min) to 10 (max). For instance pools, this is a string-formatted
	// Int32, and can only specify a fixed number of worker nodes, such as '2'.
	// Required if newClusterVersion is specified. Type: string (or Expression with resultType string).
	NewClusterNumOfWorker any

	// A set of optional, user-specified Spark configuration key-value pairs.
	NewClusterSparkConf map[string]any

	// A set of optional, user-specified Spark environment variables key-value pairs.
	NewClusterSparkEnvVars map[string]any

	// If not using an existing interactive cluster, this specifies the Spark version of a new job cluster or instance pool nodes
	// created for each run of this activity. Required if instancePoolId is
	// specified. Type: string (or Expression with resultType string).
	NewClusterVersion any

	// The policy id for limiting the ability to configure clusters based on a user defined set of rules. Type: string (or Expression
	// with resultType string).
	PolicyID any

	// Workspace resource id for databricks REST API. Type: string (or Expression with resultType string).
	WorkspaceResourceID any
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetDomain() (rv any) {
	if a != nil {
		return a.Domain
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetAccessToken() (rv SecretBaseClassification) {
	if a != nil {
		return a.AccessToken
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetAuthentication() (rv any) {
	if a != nil {
		return a.Authentication
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetExistingClusterID() (rv any) {
	if a != nil {
		return a.ExistingClusterID
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetInstancePoolID() (rv any) {
	if a != nil {
		return a.InstancePoolID
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetNewClusterCustomTags() (rv map[string]any) {
	if a != nil {
		return a.NewClusterCustomTags
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetNewClusterDriverNodeType() (rv any) {
	if a != nil {
		return a.NewClusterDriverNodeType
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetNewClusterEnableElasticDisk() (rv any) {
	if a != nil {
		return a.NewClusterEnableElasticDisk
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetNewClusterInitScripts() (rv any) {
	if a != nil {
		return a.NewClusterInitScripts
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetNewClusterLogDestination() (rv any) {
	if a != nil {
		return a.NewClusterLogDestination
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetNewClusterNodeType() (rv any) {
	if a != nil {
		return a.NewClusterNodeType
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetNewClusterNumOfWorker() (rv any) {
	if a != nil {
		return a.NewClusterNumOfWorker
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetNewClusterSparkConf() (rv map[string]any) {
	if a != nil {
		return a.NewClusterSparkConf
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetNewClusterSparkEnvVars() (rv map[string]any) {
	if a != nil {
		return a.NewClusterSparkEnvVars
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetNewClusterVersion() (rv any) {
	if a != nil {
		return a.NewClusterVersion
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetPolicyID() (rv any) {
	if a != nil {
		return a.PolicyID
	}
	return
}

func (a *AzureDatabricksLinkedServiceTypeProperties) GetWorkspaceResourceID() (rv any) {
	if a != nil {
		return a.WorkspaceResourceID
	}
	return
}

// AzureEntityResource - The resource model definition for an Azure Resource Manager resource with an etag.
type AzureEntityResource struct {
	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (a *AzureEntityResource) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *AzureEntityResource) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AzureEntityResource) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureEntityResource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// AzureFileStorageLinkedService - Azure File Storage linked service.
type AzureFileStorageLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure File Storage linked service properties.
	TypeProperties *AzureFileStorageLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureFileStorageLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureFileStorageLinkedService) GetTypeProperties() (rv *AzureFileStorageLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureFileStorageLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureFileStorageLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureFileStorageLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureFileStorageLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureFileStorageLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureFileStorageLinkedService.
func (a *AzureFileStorageLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureFileStorageLinkedServiceTypeProperties - Azure File Storage linked service properties.
type AzureFileStorageLinkedServiceTypeProperties struct {
	// REQUIRED; Host name of the server. Type: string (or Expression with resultType string).
	Host any

	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference

	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The azure file share name. It is required when auth with accountKey/sasToken. Type: string (or Expression with resultType
	// string).
	FileShare any

	// Password to logon the server.
	Password SecretBaseClassification

	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference

	// SAS URI of the Azure File resource. It is mutually exclusive with connectionString property. Type: string, SecureString
	// or AzureKeyVaultSecretReference.
	SasURI any

	// The azure file share snapshot version. Type: string (or Expression with resultType string).
	Snapshot any

	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserID any
}

func (a *AzureFileStorageLinkedServiceTypeProperties) GetHost() (rv any) {
	if a != nil {
		return a.Host
	}
	return
}

func (a *AzureFileStorageLinkedServiceTypeProperties) GetAccountKey() (rv *AzureKeyVaultSecretReference) {
	if a != nil {
		return a.AccountKey
	}
	return
}

func (a *AzureFileStorageLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if a != nil {
		return a.ConnectionString
	}
	return
}

func (a *AzureFileStorageLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureFileStorageLinkedServiceTypeProperties) GetFileShare() (rv any) {
	if a != nil {
		return a.FileShare
	}
	return
}

func (a *AzureFileStorageLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if a != nil {
		return a.Password
	}
	return
}

func (a *AzureFileStorageLinkedServiceTypeProperties) GetSasToken() (rv *AzureKeyVaultSecretReference) {
	if a != nil {
		return a.SasToken
	}
	return
}

func (a *AzureFileStorageLinkedServiceTypeProperties) GetSasURI() (rv any) {
	if a != nil {
		return a.SasURI
	}
	return
}

func (a *AzureFileStorageLinkedServiceTypeProperties) GetSnapshot() (rv any) {
	if a != nil {
		return a.Snapshot
	}
	return
}

func (a *AzureFileStorageLinkedServiceTypeProperties) GetUserID() (rv any) {
	if a != nil {
		return a.UserID
	}
	return
}

// AzureFileStorageLocation - The location of file server dataset.
type AzureFileStorageLocation struct {
	// REQUIRED; Type of dataset storage location.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName any

	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath any
}

func (a *AzureFileStorageLocation) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureFileStorageLocation) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureFileStorageLocation) GetFileName() (rv any) {
	if a != nil {
		return a.FileName
	}
	return
}

func (a *AzureFileStorageLocation) GetFolderPath() (rv any) {
	if a != nil {
		return a.FolderPath
	}
	return
}

// GetDatasetLocation implements the DatasetLocationClassification interface for type AzureFileStorageLocation.
func (a *AzureFileStorageLocation) GetDatasetLocation() *DatasetLocation {
	return &DatasetLocation{
		AdditionalProperties: a.AdditionalProperties,
		FileName:             a.FileName,
		FolderPath:           a.FolderPath,
		Type:                 a.Type,
	}
}

// AzureFileStorageReadSettings - Azure File Storage read settings.
type AzureFileStorageReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression
	// with resultType boolean).
	DeleteFilesAfterCompletion any

	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool

	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy.
	// Type: string (or Expression with resultType string).
	FileListPath any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd any

	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart any

	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath any

	// The prefix filter for the Azure File name starting from root path. Type: string (or Expression with resultType string).
	Prefix any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// Azure File Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName any

	// Azure File Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath any
}

func (a *AzureFileStorageReadSettings) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureFileStorageReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureFileStorageReadSettings) GetDeleteFilesAfterCompletion() (rv any) {
	if a != nil {
		return a.DeleteFilesAfterCompletion
	}
	return
}

func (a *AzureFileStorageReadSettings) GetEnablePartitionDiscovery() (rv bool) {
	if a != nil && a.EnablePartitionDiscovery != nil {
		return *a.EnablePartitionDiscovery
	}
	return
}

func (a *AzureFileStorageReadSettings) GetFileListPath() (rv any) {
	if a != nil {
		return a.FileListPath
	}
	return
}

func (a *AzureFileStorageReadSettings) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureFileStorageReadSettings) GetModifiedDatetimeEnd() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeEnd
	}
	return
}

func (a *AzureFileStorageReadSettings) GetModifiedDatetimeStart() (rv any) {
	if a != nil {
		return a.ModifiedDatetimeStart
	}
	return
}

func (a *AzureFileStorageReadSettings) GetPartitionRootPath() (rv any) {
	if a != nil {
		return a.PartitionRootPath
	}
	return
}

func (a *AzureFileStorageReadSettings) GetPrefix() (rv any) {
	if a != nil {
		return a.Prefix
	}
	return
}

func (a *AzureFileStorageReadSettings) GetRecursive() (rv any) {
	if a != nil {
		return a.Recursive
	}
	return
}

func (a *AzureFileStorageReadSettings) GetWildcardFileName() (rv any) {
	if a != nil {
		return a.WildcardFileName
	}
	return
}

func (a *AzureFileStorageReadSettings) GetWildcardFolderPath() (rv any) {
	if a != nil {
		return a.WildcardFolderPath
	}
	return
}

// GetStoreReadSettings implements the StoreReadSettingsClassification interface for type AzureFileStorageReadSettings.
func (a *AzureFileStorageReadSettings) GetStoreReadSettings() *StoreReadSettings {
	return &StoreReadSettings{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		Type:                     a.Type,
	}
}

// AzureFileStorageWriteSettings - Azure File Storage write settings.
type AzureFileStorageWriteSettings struct {
	// REQUIRED; The write setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The type of copy behavior for copy sink.
	CopyBehavior any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any
}

func (a *AzureFileStorageWriteSettings) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureFileStorageWriteSettings) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureFileStorageWriteSettings) GetCopyBehavior() (rv any) {
	if a != nil {
		return a.CopyBehavior
	}
	return
}

func (a *AzureFileStorageWriteSettings) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

// GetStoreWriteSettings implements the StoreWriteSettingsClassification interface for type AzureFileStorageWriteSettings.
func (a *AzureFileStorageWriteSettings) GetStoreWriteSettings() *StoreWriteSettings {
	return &StoreWriteSettings{
		AdditionalProperties:     a.AdditionalProperties,
		CopyBehavior:             a.CopyBehavior,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		Type:                     a.Type,
	}
}

// AzureFunctionActivity - Azure Function activity.
type AzureFunctionActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Azure Function activity properties.
	TypeProperties *AzureFunctionActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (a *AzureFunctionActivity) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureFunctionActivity) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureFunctionActivity) GetTypeProperties() (rv *AzureFunctionActivityTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureFunctionActivity) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureFunctionActivity) GetDependsOn() (rv []*ActivityDependency) {
	if a != nil {
		return a.DependsOn
	}
	return
}

func (a *AzureFunctionActivity) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureFunctionActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureFunctionActivity) GetPolicy() (rv *ActivityPolicy) {
	if a != nil {
		return a.Policy
	}
	return
}

func (a *AzureFunctionActivity) GetUserProperties() (rv []*UserProperty) {
	if a != nil {
		return a.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type AzureFunctionActivity.
func (a *AzureFunctionActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: a.AdditionalProperties,
		DependsOn:            a.DependsOn,
		Description:          a.Description,
		Name:                 a.Name,
		Type:                 a.Type,
		UserProperties:       a.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type AzureFunctionActivity.
func (a *AzureFunctionActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: a.AdditionalProperties,
		DependsOn:            a.DependsOn,
		Description:          a.Description,
		LinkedServiceName:    a.LinkedServiceName,
		Name:                 a.Name,
		Policy:               a.Policy,
		Type:                 a.Type,
		UserProperties:       a.UserProperties,
	}
}

// AzureFunctionActivityTypeProperties - Azure Function activity type properties.
type AzureFunctionActivityTypeProperties struct {
	// REQUIRED; Name of the Function that the Azure Function Activity will call. Type: string (or Expression with resultType
	// string)
	FunctionName any

	// REQUIRED; Rest API method for target endpoint.
	Method *AzureFunctionActivityMethod

	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type:
	// string (or Expression with resultType string).
	Body any

	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers"
	// : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type:
	// string (or Expression with resultType string).
	Headers any
}

func (a *AzureFunctionActivityTypeProperties) GetFunctionName() (rv any) {
	if a != nil {
		return a.FunctionName
	}
	return
}

func (a *AzureFunctionActivityTypeProperties) GetMethod() (rv *AzureFunctionActivityMethod) {
	if a != nil {
		return a.Method
	}
	return
}

func (a *AzureFunctionActivityTypeProperties) GetBody() (rv any) {
	if a != nil {
		return a.Body
	}
	return
}

func (a *AzureFunctionActivityTypeProperties) GetHeaders() (rv any) {
	if a != nil {
		return a.Headers
	}
	return
}

// AzureFunctionLinkedService - Azure Function linked service.
type AzureFunctionLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Function linked service properties.
	TypeProperties *AzureFunctionLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureFunctionLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureFunctionLinkedService) GetTypeProperties() (rv *AzureFunctionLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureFunctionLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureFunctionLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureFunctionLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureFunctionLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureFunctionLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureFunctionLinkedService.
func (a *AzureFunctionLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureFunctionLinkedServiceTypeProperties - Azure Function linked service properties.
type AzureFunctionLinkedServiceTypeProperties struct {
	// REQUIRED; The endpoint of the Azure Function App. URL will be in the format https://.azurewebsites.net.
	FunctionAppURL any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Function or Host key for Azure Function App.
	FunctionKey SecretBaseClassification
}

func (a *AzureFunctionLinkedServiceTypeProperties) GetFunctionAppURL() (rv any) {
	if a != nil {
		return a.FunctionAppURL
	}
	return
}

func (a *AzureFunctionLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureFunctionLinkedServiceTypeProperties) GetFunctionKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.FunctionKey
	}
	return
}

// AzureKeyVaultLinkedService - Azure Key Vault linked service.
type AzureKeyVaultLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Key Vault linked service properties.
	TypeProperties *AzureKeyVaultLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureKeyVaultLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureKeyVaultLinkedService) GetTypeProperties() (rv *AzureKeyVaultLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureKeyVaultLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureKeyVaultLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureKeyVaultLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureKeyVaultLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureKeyVaultLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureKeyVaultLinkedService.
func (a *AzureKeyVaultLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureKeyVaultLinkedServiceTypeProperties - Azure Key Vault linked service properties.
type AzureKeyVaultLinkedServiceTypeProperties struct {
	// REQUIRED; The base URL of the Azure Key Vault. e.g. https://myakv.vault.azure.net Type: string (or Expression with resultType
	// string).
	BaseURL any
}

func (a *AzureKeyVaultLinkedServiceTypeProperties) GetBaseURL() (rv any) {
	if a != nil {
		return a.BaseURL
	}
	return
}

// AzureKeyVaultSecretReference - Azure Key Vault secret reference.
type AzureKeyVaultSecretReference struct {
	// REQUIRED; The name of the secret in Azure Key Vault. Type: string (or Expression with resultType string).
	SecretName any

	// REQUIRED; The Azure Key Vault linked service reference.
	Store *LinkedServiceReference

	// REQUIRED; Type of the secret.
	Type *string

	// The version of the secret in Azure Key Vault. The default value is the latest version of the secret. Type: string (or Expression
	// with resultType string).
	SecretVersion any
}

func (a *AzureKeyVaultSecretReference) GetSecretName() (rv any) {
	if a != nil {
		return a.SecretName
	}
	return
}

func (a *AzureKeyVaultSecretReference) GetStore() (rv *LinkedServiceReference) {
	if a != nil {
		return a.Store
	}
	return
}

func (a *AzureKeyVaultSecretReference) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureKeyVaultSecretReference) GetSecretVersion() (rv any) {
	if a != nil {
		return a.SecretVersion
	}
	return
}

// GetSecretBase implements the SecretBaseClassification interface for type AzureKeyVaultSecretReference.
func (a *AzureKeyVaultSecretReference) GetSecretBase() *SecretBase {
	return &SecretBase{
		Type: a.Type,
	}
}

// AzureMLBatchExecutionActivity - Azure ML Batch Execution activity.
type AzureMLBatchExecutionActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Azure ML Batch Execution activity properties.
	TypeProperties *AzureMLBatchExecutionActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (a *AzureMLBatchExecutionActivity) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureMLBatchExecutionActivity) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureMLBatchExecutionActivity) GetTypeProperties() (rv *AzureMLBatchExecutionActivityTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureMLBatchExecutionActivity) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureMLBatchExecutionActivity) GetDependsOn() (rv []*ActivityDependency) {
	if a != nil {
		return a.DependsOn
	}
	return
}

func (a *AzureMLBatchExecutionActivity) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureMLBatchExecutionActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureMLBatchExecutionActivity) GetPolicy() (rv *ActivityPolicy) {
	if a != nil {
		return a.Policy
	}
	return
}

func (a *AzureMLBatchExecutionActivity) GetUserProperties() (rv []*UserProperty) {
	if a != nil {
		return a.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type AzureMLBatchExecutionActivity.
func (a *AzureMLBatchExecutionActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: a.AdditionalProperties,
		DependsOn:            a.DependsOn,
		Description:          a.Description,
		Name:                 a.Name,
		Type:                 a.Type,
		UserProperties:       a.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type AzureMLBatchExecutionActivity.
func (a *AzureMLBatchExecutionActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: a.AdditionalProperties,
		DependsOn:            a.DependsOn,
		Description:          a.Description,
		LinkedServiceName:    a.LinkedServiceName,
		Name:                 a.Name,
		Policy:               a.Policy,
		Type:                 a.Type,
		UserProperties:       a.UserProperties,
	}
}

// AzureMLBatchExecutionActivityTypeProperties - Azure ML Batch Execution activity properties.
type AzureMLBatchExecutionActivityTypeProperties struct {
	// Key,Value pairs to be passed to the Azure ML Batch Execution Service endpoint. Keys must match the names of web service
	// parameters defined in the published Azure ML web service. Values will be passed
	// in the GlobalParameters property of the Azure ML batch execution request.
	GlobalParameters map[string]any

	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Inputs to AzureMLWebServiceFile objects specifying
	// the input Blob locations.. This information will be passed in the
	// WebServiceInputs property of the Azure ML batch execution request.
	WebServiceInputs map[string]*AzureMLWebServiceFile

	// Key,Value pairs, mapping the names of Azure ML endpoint's Web Service Outputs to AzureMLWebServiceFile objects specifying
	// the output Blob locations. This information will be passed in the
	// WebServiceOutputs property of the Azure ML batch execution request.
	WebServiceOutputs map[string]*AzureMLWebServiceFile
}

func (a *AzureMLBatchExecutionActivityTypeProperties) GetGlobalParameters() (rv map[string]any) {
	if a != nil {
		return a.GlobalParameters
	}
	return
}

func (a *AzureMLBatchExecutionActivityTypeProperties) GetWebServiceInputs() (rv map[string]*AzureMLWebServiceFile) {
	if a != nil {
		return a.WebServiceInputs
	}
	return
}

func (a *AzureMLBatchExecutionActivityTypeProperties) GetWebServiceOutputs() (rv map[string]*AzureMLWebServiceFile) {
	if a != nil {
		return a.WebServiceOutputs
	}
	return
}

// AzureMLExecutePipelineActivity - Azure ML Execute Pipeline activity.
type AzureMLExecutePipelineActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Azure ML Execute Pipeline activity properties.
	TypeProperties *AzureMLExecutePipelineActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (a *AzureMLExecutePipelineActivity) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureMLExecutePipelineActivity) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureMLExecutePipelineActivity) GetTypeProperties() (rv *AzureMLExecutePipelineActivityTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureMLExecutePipelineActivity) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureMLExecutePipelineActivity) GetDependsOn() (rv []*ActivityDependency) {
	if a != nil {
		return a.DependsOn
	}
	return
}

func (a *AzureMLExecutePipelineActivity) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureMLExecutePipelineActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureMLExecutePipelineActivity) GetPolicy() (rv *ActivityPolicy) {
	if a != nil {
		return a.Policy
	}
	return
}

func (a *AzureMLExecutePipelineActivity) GetUserProperties() (rv []*UserProperty) {
	if a != nil {
		return a.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type AzureMLExecutePipelineActivity.
func (a *AzureMLExecutePipelineActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: a.AdditionalProperties,
		DependsOn:            a.DependsOn,
		Description:          a.Description,
		Name:                 a.Name,
		Type:                 a.Type,
		UserProperties:       a.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type AzureMLExecutePipelineActivity.
func (a *AzureMLExecutePipelineActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: a.AdditionalProperties,
		DependsOn:            a.DependsOn,
		Description:          a.Description,
		LinkedServiceName:    a.LinkedServiceName,
		Name:                 a.Name,
		Policy:               a.Policy,
		Type:                 a.Type,
		UserProperties:       a.UserProperties,
	}
}

// AzureMLExecutePipelineActivityTypeProperties - Azure ML Execute Pipeline activity properties.
type AzureMLExecutePipelineActivityTypeProperties struct {
	// REQUIRED; ID of the published Azure ML pipeline. Type: string (or Expression with resultType string).
	MlPipelineID any

	// Whether to continue execution of other steps in the PipelineRun if a step fails. This information will be passed in the
	// continueOnStepFailure property of the published pipeline execution request.
	// Type: boolean (or Expression with resultType boolean).
	ContinueOnStepFailure any

	// Run history experiment name of the pipeline run. This information will be passed in the ExperimentName property of the
	// published pipeline execution request. Type: string (or Expression with resultType
	// string).
	ExperimentName any

	// The parent Azure ML Service pipeline run id. This information will be passed in the ParentRunId property of the published
	// pipeline execution request. Type: string (or Expression with resultType
	// string).
	MlParentRunID any

	// Key,Value pairs to be passed to the published Azure ML pipeline endpoint. Keys must match the names of pipeline parameters
	// defined in the published pipeline. Values will be passed in the
	// ParameterAssignments property of the published pipeline execution request. Type: object with key value pairs (or Expression
	// with resultType object).
	MlPipelineParameters any
}

func (a *AzureMLExecutePipelineActivityTypeProperties) GetMlPipelineID() (rv any) {
	if a != nil {
		return a.MlPipelineID
	}
	return
}

func (a *AzureMLExecutePipelineActivityTypeProperties) GetContinueOnStepFailure() (rv any) {
	if a != nil {
		return a.ContinueOnStepFailure
	}
	return
}

func (a *AzureMLExecutePipelineActivityTypeProperties) GetExperimentName() (rv any) {
	if a != nil {
		return a.ExperimentName
	}
	return
}

func (a *AzureMLExecutePipelineActivityTypeProperties) GetMlParentRunID() (rv any) {
	if a != nil {
		return a.MlParentRunID
	}
	return
}

func (a *AzureMLExecutePipelineActivityTypeProperties) GetMlPipelineParameters() (rv any) {
	if a != nil {
		return a.MlPipelineParameters
	}
	return
}

// AzureMLLinkedService - Azure ML Studio Web Service linked service.
type AzureMLLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure ML Studio Web Service linked service properties.
	TypeProperties *AzureMLLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureMLLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureMLLinkedService) GetTypeProperties() (rv *AzureMLLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureMLLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureMLLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureMLLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureMLLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureMLLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureMLLinkedService.
func (a *AzureMLLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureMLLinkedServiceTypeProperties - Azure ML Studio Web Service linked service properties.
type AzureMLLinkedServiceTypeProperties struct {
	// REQUIRED; The API key for accessing the Azure ML model endpoint.
	APIKey SecretBaseClassification

	// REQUIRED; The Batch Execution REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType
	// string).
	MlEndpoint any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The ID of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio
	// web service. Type: string (or Expression with resultType string).
	ServicePrincipalID any

	// The key of the service principal used to authenticate against the ARM-based updateResourceEndpoint of an Azure ML Studio
	// web service.
	ServicePrincipalKey SecretBaseClassification

	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant any

	// The Update Resource REST URL for an Azure ML Studio Web Service endpoint. Type: string (or Expression with resultType string).
	UpdateResourceEndpoint any
}

func (a *AzureMLLinkedServiceTypeProperties) GetAPIKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.APIKey
	}
	return
}

func (a *AzureMLLinkedServiceTypeProperties) GetMlEndpoint() (rv any) {
	if a != nil {
		return a.MlEndpoint
	}
	return
}

func (a *AzureMLLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureMLLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if a != nil {
		return a.ServicePrincipalID
	}
	return
}

func (a *AzureMLLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.ServicePrincipalKey
	}
	return
}

func (a *AzureMLLinkedServiceTypeProperties) GetTenant() (rv any) {
	if a != nil {
		return a.Tenant
	}
	return
}

func (a *AzureMLLinkedServiceTypeProperties) GetUpdateResourceEndpoint() (rv any) {
	if a != nil {
		return a.UpdateResourceEndpoint
	}
	return
}

// AzureMLServiceLinkedService - Azure ML Service linked service.
type AzureMLServiceLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure ML Service linked service properties.
	TypeProperties *AzureMLServiceLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureMLServiceLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureMLServiceLinkedService) GetTypeProperties() (rv *AzureMLServiceLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureMLServiceLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureMLServiceLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureMLServiceLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureMLServiceLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureMLServiceLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureMLServiceLinkedService.
func (a *AzureMLServiceLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureMLServiceLinkedServiceTypeProperties - Azure ML Service linked service properties.
type AzureMLServiceLinkedServiceTypeProperties struct {
	// REQUIRED; Azure ML Service workspace name. Type: string (or Expression with resultType string).
	MlWorkspaceName any

	// REQUIRED; Azure ML Service workspace resource group name. Type: string (or Expression with resultType string).
	ResourceGroupName any

	// REQUIRED; Azure ML Service workspace subscription ID. Type: string (or Expression with resultType string).
	SubscriptionID any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The ID of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline. Type:
	// string (or Expression with resultType string).
	ServicePrincipalID any

	// The key of the service principal used to authenticate against the endpoint of a published Azure ML Service pipeline.
	ServicePrincipalKey SecretBaseClassification

	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant any
}

func (a *AzureMLServiceLinkedServiceTypeProperties) GetMlWorkspaceName() (rv any) {
	if a != nil {
		return a.MlWorkspaceName
	}
	return
}

func (a *AzureMLServiceLinkedServiceTypeProperties) GetResourceGroupName() (rv any) {
	if a != nil {
		return a.ResourceGroupName
	}
	return
}

func (a *AzureMLServiceLinkedServiceTypeProperties) GetSubscriptionID() (rv any) {
	if a != nil {
		return a.SubscriptionID
	}
	return
}

func (a *AzureMLServiceLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureMLServiceLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if a != nil {
		return a.ServicePrincipalID
	}
	return
}

func (a *AzureMLServiceLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.ServicePrincipalKey
	}
	return
}

func (a *AzureMLServiceLinkedServiceTypeProperties) GetTenant() (rv any) {
	if a != nil {
		return a.Tenant
	}
	return
}

// AzureMLUpdateResourceActivity - Azure ML Update Resource management activity.
type AzureMLUpdateResourceActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Azure ML Update Resource management activity properties.
	TypeProperties *AzureMLUpdateResourceActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (a *AzureMLUpdateResourceActivity) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureMLUpdateResourceActivity) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureMLUpdateResourceActivity) GetTypeProperties() (rv *AzureMLUpdateResourceActivityTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureMLUpdateResourceActivity) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureMLUpdateResourceActivity) GetDependsOn() (rv []*ActivityDependency) {
	if a != nil {
		return a.DependsOn
	}
	return
}

func (a *AzureMLUpdateResourceActivity) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureMLUpdateResourceActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureMLUpdateResourceActivity) GetPolicy() (rv *ActivityPolicy) {
	if a != nil {
		return a.Policy
	}
	return
}

func (a *AzureMLUpdateResourceActivity) GetUserProperties() (rv []*UserProperty) {
	if a != nil {
		return a.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type AzureMLUpdateResourceActivity.
func (a *AzureMLUpdateResourceActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: a.AdditionalProperties,
		DependsOn:            a.DependsOn,
		Description:          a.Description,
		Name:                 a.Name,
		Type:                 a.Type,
		UserProperties:       a.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type AzureMLUpdateResourceActivity.
func (a *AzureMLUpdateResourceActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: a.AdditionalProperties,
		DependsOn:            a.DependsOn,
		Description:          a.Description,
		LinkedServiceName:    a.LinkedServiceName,
		Name:                 a.Name,
		Policy:               a.Policy,
		Type:                 a.Type,
		UserProperties:       a.UserProperties,
	}
}

// AzureMLUpdateResourceActivityTypeProperties - Azure ML Update Resource activity properties.
type AzureMLUpdateResourceActivityTypeProperties struct {
	// REQUIRED; The relative file path in trainedModelLinkedService to represent the .ilearner file that will be uploaded by
	// the update operation. Type: string (or Expression with resultType string).
	TrainedModelFilePath any

	// REQUIRED; Name of Azure Storage linked service holding the .ilearner file that will be uploaded by the update operation.
	TrainedModelLinkedServiceName *LinkedServiceReference

	// REQUIRED; Name of the Trained Model module in the Web Service experiment to be updated. Type: string (or Expression with
	// resultType string).
	TrainedModelName any
}

func (a *AzureMLUpdateResourceActivityTypeProperties) GetTrainedModelFilePath() (rv any) {
	if a != nil {
		return a.TrainedModelFilePath
	}
	return
}

func (a *AzureMLUpdateResourceActivityTypeProperties) GetTrainedModelLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.TrainedModelLinkedServiceName
	}
	return
}

func (a *AzureMLUpdateResourceActivityTypeProperties) GetTrainedModelName() (rv any) {
	if a != nil {
		return a.TrainedModelName
	}
	return
}

// AzureMLWebServiceFile - Azure ML WebService Input/Output file
type AzureMLWebServiceFile struct {
	// REQUIRED; The relative file path, including container name, in the Azure Blob Storage specified by the LinkedService. Type:
	// string (or Expression with resultType string).
	FilePath any

	// REQUIRED; Reference to an Azure Storage LinkedService, where Azure ML WebService Input/Output file located.
	LinkedServiceName *LinkedServiceReference
}

func (a *AzureMLWebServiceFile) GetFilePath() (rv any) {
	if a != nil {
		return a.FilePath
	}
	return
}

func (a *AzureMLWebServiceFile) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

// AzureMariaDBLinkedService - Azure Database for MariaDB linked service.
type AzureMariaDBLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Database for MariaDB linked service properties.
	TypeProperties *AzureMariaDBLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureMariaDBLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureMariaDBLinkedService) GetTypeProperties() (rv *AzureMariaDBLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureMariaDBLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureMariaDBLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureMariaDBLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureMariaDBLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureMariaDBLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureMariaDBLinkedService.
func (a *AzureMariaDBLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureMariaDBLinkedServiceTypeProperties - Azure Database for MariaDB linked service properties.
type AzureMariaDBLinkedServiceTypeProperties struct {
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference
}

func (a *AzureMariaDBLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if a != nil {
		return a.ConnectionString
	}
	return
}

func (a *AzureMariaDBLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureMariaDBLinkedServiceTypeProperties) GetPwd() (rv *AzureKeyVaultSecretReference) {
	if a != nil {
		return a.Pwd
	}
	return
}

// AzureMariaDBSource - A copy activity Azure MariaDB source.
type AzureMariaDBSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (a *AzureMariaDBSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureMariaDBSource) GetAdditionalColumns() (rv any) {
	if a != nil {
		return a.AdditionalColumns
	}
	return
}

func (a *AzureMariaDBSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureMariaDBSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureMariaDBSource) GetQuery() (rv any) {
	if a != nil {
		return a.Query
	}
	return
}

func (a *AzureMariaDBSource) GetQueryTimeout() (rv any) {
	if a != nil {
		return a.QueryTimeout
	}
	return
}

func (a *AzureMariaDBSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AzureMariaDBSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AzureMariaDBSource.
func (a *AzureMariaDBSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type AzureMariaDBSource.
func (a *AzureMariaDBSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        a.AdditionalColumns,
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		QueryTimeout:             a.QueryTimeout,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AzureMariaDBTableDataset - Azure Database for MariaDB dataset.
type AzureMariaDBTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (a *AzureMariaDBTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureMariaDBTableDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureMariaDBTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureMariaDBTableDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureMariaDBTableDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureMariaDBTableDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AzureMariaDBTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AzureMariaDBTableDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureMariaDBTableDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AzureMariaDBTableDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AzureMariaDBTableDataset.
func (a *AzureMariaDBTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AzureMySQLLinkedService - Azure MySQL database linked service.
type AzureMySQLLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure MySQL database linked service properties.
	TypeProperties *AzureMySQLLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureMySQLLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureMySQLLinkedService) GetTypeProperties() (rv *AzureMySQLLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureMySQLLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureMySQLLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureMySQLLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureMySQLLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureMySQLLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureMySQLLinkedService.
func (a *AzureMySQLLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureMySQLLinkedServiceTypeProperties - Azure MySQL database linked service properties.
type AzureMySQLLinkedServiceTypeProperties struct {
	// REQUIRED; The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference
}

func (a *AzureMySQLLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if a != nil {
		return a.ConnectionString
	}
	return
}

func (a *AzureMySQLLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureMySQLLinkedServiceTypeProperties) GetPassword() (rv *AzureKeyVaultSecretReference) {
	if a != nil {
		return a.Password
	}
	return
}

// AzureMySQLSink - A copy activity Azure MySql sink.
type AzureMySQLSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (a *AzureMySQLSink) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureMySQLSink) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureMySQLSink) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureMySQLSink) GetPreCopyScript() (rv any) {
	if a != nil {
		return a.PreCopyScript
	}
	return
}

func (a *AzureMySQLSink) GetSinkRetryCount() (rv any) {
	if a != nil {
		return a.SinkRetryCount
	}
	return
}

func (a *AzureMySQLSink) GetSinkRetryWait() (rv any) {
	if a != nil {
		return a.SinkRetryWait
	}
	return
}

func (a *AzureMySQLSink) GetWriteBatchSize() (rv any) {
	if a != nil {
		return a.WriteBatchSize
	}
	return
}

func (a *AzureMySQLSink) GetWriteBatchTimeout() (rv any) {
	if a != nil {
		return a.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type AzureMySQLSink.
func (a *AzureMySQLSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SinkRetryCount:           a.SinkRetryCount,
		SinkRetryWait:            a.SinkRetryWait,
		Type:                     a.Type,
		WriteBatchSize:           a.WriteBatchSize,
		WriteBatchTimeout:        a.WriteBatchTimeout,
	}
}

// AzureMySQLSource - A copy activity Azure MySQL source.
type AzureMySQLSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (a *AzureMySQLSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureMySQLSource) GetAdditionalColumns() (rv any) {
	if a != nil {
		return a.AdditionalColumns
	}
	return
}

func (a *AzureMySQLSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureMySQLSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureMySQLSource) GetQuery() (rv any) {
	if a != nil {
		return a.Query
	}
	return
}

func (a *AzureMySQLSource) GetQueryTimeout() (rv any) {
	if a != nil {
		return a.QueryTimeout
	}
	return
}

func (a *AzureMySQLSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AzureMySQLSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AzureMySQLSource.
func (a *AzureMySQLSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type AzureMySQLSource.
func (a *AzureMySQLSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        a.AdditionalColumns,
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		QueryTimeout:             a.QueryTimeout,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AzureMySQLTableDataset - The Azure MySQL database dataset.
type AzureMySQLTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; Azure MySQL database dataset properties.
	TypeProperties *AzureMySQLTableDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (a *AzureMySQLTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureMySQLTableDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureMySQLTableDataset) GetTypeProperties() (rv *AzureMySQLTableDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureMySQLTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureMySQLTableDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureMySQLTableDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureMySQLTableDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AzureMySQLTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AzureMySQLTableDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureMySQLTableDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AzureMySQLTableDataset.
func (a *AzureMySQLTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AzureMySQLTableDatasetTypeProperties - Azure MySQL database dataset properties.
type AzureMySQLTableDatasetTypeProperties struct {
	// The name of Azure MySQL database table. Type: string (or Expression with resultType string).
	Table any

	// The Azure MySQL database table name. Type: string (or Expression with resultType string).
	TableName any
}

func (a *AzureMySQLTableDatasetTypeProperties) GetTable() (rv any) {
	if a != nil {
		return a.Table
	}
	return
}

func (a *AzureMySQLTableDatasetTypeProperties) GetTableName() (rv any) {
	if a != nil {
		return a.TableName
	}
	return
}

// AzurePostgreSQLLinkedService - Azure PostgreSQL linked service.
type AzurePostgreSQLLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure PostgreSQL linked service properties.
	TypeProperties *AzurePostgreSQLLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzurePostgreSQLLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzurePostgreSQLLinkedService) GetTypeProperties() (rv *AzurePostgreSQLLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzurePostgreSQLLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzurePostgreSQLLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzurePostgreSQLLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzurePostgreSQLLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzurePostgreSQLLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzurePostgreSQLLinkedService.
func (a *AzurePostgreSQLLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzurePostgreSQLLinkedServiceTypeProperties - Azure PostgreSQL linked service properties.
type AzurePostgreSQLLinkedServiceTypeProperties struct {
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference
}

func (a *AzurePostgreSQLLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if a != nil {
		return a.ConnectionString
	}
	return
}

func (a *AzurePostgreSQLLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzurePostgreSQLLinkedServiceTypeProperties) GetPassword() (rv *AzureKeyVaultSecretReference) {
	if a != nil {
		return a.Password
	}
	return
}

// AzurePostgreSQLSink - A copy activity Azure PostgreSQL sink.
type AzurePostgreSQLSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (a *AzurePostgreSQLSink) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzurePostgreSQLSink) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzurePostgreSQLSink) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzurePostgreSQLSink) GetPreCopyScript() (rv any) {
	if a != nil {
		return a.PreCopyScript
	}
	return
}

func (a *AzurePostgreSQLSink) GetSinkRetryCount() (rv any) {
	if a != nil {
		return a.SinkRetryCount
	}
	return
}

func (a *AzurePostgreSQLSink) GetSinkRetryWait() (rv any) {
	if a != nil {
		return a.SinkRetryWait
	}
	return
}

func (a *AzurePostgreSQLSink) GetWriteBatchSize() (rv any) {
	if a != nil {
		return a.WriteBatchSize
	}
	return
}

func (a *AzurePostgreSQLSink) GetWriteBatchTimeout() (rv any) {
	if a != nil {
		return a.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type AzurePostgreSQLSink.
func (a *AzurePostgreSQLSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SinkRetryCount:           a.SinkRetryCount,
		SinkRetryWait:            a.SinkRetryWait,
		Type:                     a.Type,
		WriteBatchSize:           a.WriteBatchSize,
		WriteBatchTimeout:        a.WriteBatchTimeout,
	}
}

// AzurePostgreSQLSource - A copy activity Azure PostgreSQL source.
type AzurePostgreSQLSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (a *AzurePostgreSQLSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzurePostgreSQLSource) GetAdditionalColumns() (rv any) {
	if a != nil {
		return a.AdditionalColumns
	}
	return
}

func (a *AzurePostgreSQLSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzurePostgreSQLSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzurePostgreSQLSource) GetQuery() (rv any) {
	if a != nil {
		return a.Query
	}
	return
}

func (a *AzurePostgreSQLSource) GetQueryTimeout() (rv any) {
	if a != nil {
		return a.QueryTimeout
	}
	return
}

func (a *AzurePostgreSQLSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AzurePostgreSQLSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AzurePostgreSQLSource.
func (a *AzurePostgreSQLSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type AzurePostgreSQLSource.
func (a *AzurePostgreSQLSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        a.AdditionalColumns,
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		QueryTimeout:             a.QueryTimeout,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AzurePostgreSQLTableDataset - Azure PostgreSQL dataset.
type AzurePostgreSQLTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *AzurePostgreSQLTableDatasetTypeProperties
}

func (a *AzurePostgreSQLTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzurePostgreSQLTableDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzurePostgreSQLTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzurePostgreSQLTableDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzurePostgreSQLTableDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzurePostgreSQLTableDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AzurePostgreSQLTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AzurePostgreSQLTableDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzurePostgreSQLTableDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AzurePostgreSQLTableDataset) GetTypeProperties() (rv *AzurePostgreSQLTableDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AzurePostgreSQLTableDataset.
func (a *AzurePostgreSQLTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AzurePostgreSQLTableDatasetTypeProperties - Azure PostgreSQL dataset properties.
type AzurePostgreSQLTableDatasetTypeProperties struct {
	// The schema name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the Azure PostgreSQL database. Type: string (or Expression with resultType string).
	Table any

	// The table name of the Azure PostgreSQL database which includes both schema and table. Type: string (or Expression with
	// resultType string).
	TableName any
}

func (a *AzurePostgreSQLTableDatasetTypeProperties) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzurePostgreSQLTableDatasetTypeProperties) GetTable() (rv any) {
	if a != nil {
		return a.Table
	}
	return
}

func (a *AzurePostgreSQLTableDatasetTypeProperties) GetTableName() (rv any) {
	if a != nil {
		return a.TableName
	}
	return
}

// AzureQueueSink - A copy activity Azure Queue sink.
type AzureQueueSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (a *AzureQueueSink) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureQueueSink) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureQueueSink) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureQueueSink) GetSinkRetryCount() (rv any) {
	if a != nil {
		return a.SinkRetryCount
	}
	return
}

func (a *AzureQueueSink) GetSinkRetryWait() (rv any) {
	if a != nil {
		return a.SinkRetryWait
	}
	return
}

func (a *AzureQueueSink) GetWriteBatchSize() (rv any) {
	if a != nil {
		return a.WriteBatchSize
	}
	return
}

func (a *AzureQueueSink) GetWriteBatchTimeout() (rv any) {
	if a != nil {
		return a.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type AzureQueueSink.
func (a *AzureQueueSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SinkRetryCount:           a.SinkRetryCount,
		SinkRetryWait:            a.SinkRetryWait,
		Type:                     a.Type,
		WriteBatchSize:           a.WriteBatchSize,
		WriteBatchTimeout:        a.WriteBatchTimeout,
	}
}

// AzureSQLDWLinkedService - Azure SQL Data Warehouse linked service.
type AzureSQLDWLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure SQL Data Warehouse linked service properties.
	TypeProperties *AzureSQLDWLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureSQLDWLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureSQLDWLinkedService) GetTypeProperties() (rv *AzureSQLDWLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureSQLDWLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureSQLDWLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureSQLDWLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureSQLDWLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureSQLDWLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureSQLDWLinkedService.
func (a *AzureSQLDWLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureSQLDWLinkedServiceTypeProperties - Azure SQL Data Warehouse linked service properties.
type AzureSQLDWLinkedServiceTypeProperties struct {
	// REQUIRED; The connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString
	// or AzureKeyVaultSecretReference.
	ConnectionString any

	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment,
	// AzureGermany. Default value is the data factory regions’ cloud type. Type:
	// string (or Expression with resultType string).
	AzureCloudType any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference

	// The ID of the service principal used to authenticate against Azure SQL Data Warehouse. Type: string (or Expression with
	// resultType string).
	ServicePrincipalID any

	// The key of the service principal used to authenticate against Azure SQL Data Warehouse.
	ServicePrincipalKey SecretBaseClassification

	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant any
}

func (a *AzureSQLDWLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if a != nil {
		return a.ConnectionString
	}
	return
}

func (a *AzureSQLDWLinkedServiceTypeProperties) GetAzureCloudType() (rv any) {
	if a != nil {
		return a.AzureCloudType
	}
	return
}

func (a *AzureSQLDWLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureSQLDWLinkedServiceTypeProperties) GetPassword() (rv *AzureKeyVaultSecretReference) {
	if a != nil {
		return a.Password
	}
	return
}

func (a *AzureSQLDWLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if a != nil {
		return a.ServicePrincipalID
	}
	return
}

func (a *AzureSQLDWLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.ServicePrincipalKey
	}
	return
}

func (a *AzureSQLDWLinkedServiceTypeProperties) GetTenant() (rv any) {
	if a != nil {
		return a.Tenant
	}
	return
}

// AzureSQLDWTableDataset - The Azure SQL Data Warehouse dataset.
type AzureSQLDWTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Azure SQL Data Warehouse dataset properties.
	TypeProperties *AzureSQLDWTableDatasetTypeProperties
}

func (a *AzureSQLDWTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureSQLDWTableDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureSQLDWTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureSQLDWTableDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureSQLDWTableDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureSQLDWTableDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AzureSQLDWTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AzureSQLDWTableDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureSQLDWTableDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AzureSQLDWTableDataset) GetTypeProperties() (rv *AzureSQLDWTableDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AzureSQLDWTableDataset.
func (a *AzureSQLDWTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AzureSQLDWTableDatasetTypeProperties - Azure SQL Data Warehouse dataset properties.
type AzureSQLDWTableDatasetTypeProperties struct {
	// The schema name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the Azure SQL Data Warehouse. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (a *AzureSQLDWTableDatasetTypeProperties) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureSQLDWTableDatasetTypeProperties) GetTable() (rv any) {
	if a != nil {
		return a.Table
	}
	return
}

func (a *AzureSQLDWTableDatasetTypeProperties) GetTableName() (rv any) {
	if a != nil {
		return a.TableName
	}
	return
}

// AzureSQLDatabaseLinkedService - Microsoft Azure SQL Database linked service.
type AzureSQLDatabaseLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure SQL Database linked service properties.
	TypeProperties *AzureSQLDatabaseLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureSQLDatabaseLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureSQLDatabaseLinkedService) GetTypeProperties() (rv *AzureSQLDatabaseLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureSQLDatabaseLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureSQLDatabaseLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureSQLDatabaseLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureSQLDatabaseLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureSQLDatabaseLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureSQLDatabaseLinkedService.
func (a *AzureSQLDatabaseLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureSQLDatabaseLinkedServiceTypeProperties - Azure SQL Database linked service properties.
type AzureSQLDatabaseLinkedServiceTypeProperties struct {
	// REQUIRED; The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment,
	// AzureGermany. Default value is the data factory regions’ cloud type. Type:
	// string (or Expression with resultType string).
	AzureCloudType any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference

	// The ID of the service principal used to authenticate against Azure SQL Database. Type: string (or Expression with resultType
	// string).
	ServicePrincipalID any

	// The key of the service principal used to authenticate against Azure SQL Database.
	ServicePrincipalKey SecretBaseClassification

	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant any
}

func (a *AzureSQLDatabaseLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if a != nil {
		return a.ConnectionString
	}
	return
}

func (a *AzureSQLDatabaseLinkedServiceTypeProperties) GetAzureCloudType() (rv any) {
	if a != nil {
		return a.AzureCloudType
	}
	return
}

func (a *AzureSQLDatabaseLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureSQLDatabaseLinkedServiceTypeProperties) GetPassword() (rv *AzureKeyVaultSecretReference) {
	if a != nil {
		return a.Password
	}
	return
}

func (a *AzureSQLDatabaseLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if a != nil {
		return a.ServicePrincipalID
	}
	return
}

func (a *AzureSQLDatabaseLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.ServicePrincipalKey
	}
	return
}

func (a *AzureSQLDatabaseLinkedServiceTypeProperties) GetTenant() (rv any) {
	if a != nil {
		return a.Tenant
	}
	return
}

// AzureSQLMILinkedService - Azure SQL Managed Instance linked service.
type AzureSQLMILinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure SQL Managed Instance linked service properties.
	TypeProperties *AzureSQLMILinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureSQLMILinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureSQLMILinkedService) GetTypeProperties() (rv *AzureSQLMILinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureSQLMILinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureSQLMILinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureSQLMILinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureSQLMILinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureSQLMILinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureSQLMILinkedService.
func (a *AzureSQLMILinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureSQLMILinkedServiceTypeProperties - Azure SQL Managed Instance linked service properties.
type AzureSQLMILinkedServiceTypeProperties struct {
	// REQUIRED; The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment,
	// AzureGermany. Default value is the data factory regions’ cloud type. Type:
	// string (or Expression with resultType string).
	AzureCloudType any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference

	// The ID of the service principal used to authenticate against Azure SQL Managed Instance. Type: string (or Expression with
	// resultType string).
	ServicePrincipalID any

	// The key of the service principal used to authenticate against Azure SQL Managed Instance.
	ServicePrincipalKey SecretBaseClassification

	// The name or ID of the tenant to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant any
}

func (a *AzureSQLMILinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if a != nil {
		return a.ConnectionString
	}
	return
}

func (a *AzureSQLMILinkedServiceTypeProperties) GetAzureCloudType() (rv any) {
	if a != nil {
		return a.AzureCloudType
	}
	return
}

func (a *AzureSQLMILinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureSQLMILinkedServiceTypeProperties) GetPassword() (rv *AzureKeyVaultSecretReference) {
	if a != nil {
		return a.Password
	}
	return
}

func (a *AzureSQLMILinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if a != nil {
		return a.ServicePrincipalID
	}
	return
}

func (a *AzureSQLMILinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.ServicePrincipalKey
	}
	return
}

func (a *AzureSQLMILinkedServiceTypeProperties) GetTenant() (rv any) {
	if a != nil {
		return a.Tenant
	}
	return
}

// AzureSQLMITableDataset - The Azure SQL Managed Instance dataset.
type AzureSQLMITableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Azure SQL Managed Instance dataset properties.
	TypeProperties *AzureSQLMITableDatasetTypeProperties
}

func (a *AzureSQLMITableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureSQLMITableDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureSQLMITableDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureSQLMITableDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureSQLMITableDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureSQLMITableDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AzureSQLMITableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AzureSQLMITableDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureSQLMITableDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AzureSQLMITableDataset) GetTypeProperties() (rv *AzureSQLMITableDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AzureSQLMITableDataset.
func (a *AzureSQLMITableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AzureSQLMITableDatasetTypeProperties - Azure SQL Managed Instance dataset properties.
type AzureSQLMITableDatasetTypeProperties struct {
	// The schema name of the Azure SQL Managed Instance. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the Azure SQL Managed Instance dataset. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (a *AzureSQLMITableDatasetTypeProperties) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureSQLMITableDatasetTypeProperties) GetTable() (rv any) {
	if a != nil {
		return a.Table
	}
	return
}

func (a *AzureSQLMITableDatasetTypeProperties) GetTableName() (rv any) {
	if a != nil {
		return a.TableName
	}
	return
}

// AzureSQLSink - A copy activity Azure SQL sink.
type AzureSQLSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript any

	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SQLWriterStoredProcedureName any

	// SQL writer table type. Type: string (or Expression with resultType string).
	SQLWriterTableType any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// SQL stored procedure parameters.
	StoredProcedureParameters map[string]*StoredProcedureParameter

	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName any

	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression
	// with resultType string).
	TableOption any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (a *AzureSQLSink) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureSQLSink) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureSQLSink) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureSQLSink) GetPreCopyScript() (rv any) {
	if a != nil {
		return a.PreCopyScript
	}
	return
}

func (a *AzureSQLSink) GetSQLWriterStoredProcedureName() (rv any) {
	if a != nil {
		return a.SQLWriterStoredProcedureName
	}
	return
}

func (a *AzureSQLSink) GetSQLWriterTableType() (rv any) {
	if a != nil {
		return a.SQLWriterTableType
	}
	return
}

func (a *AzureSQLSink) GetSinkRetryCount() (rv any) {
	if a != nil {
		return a.SinkRetryCount
	}
	return
}

func (a *AzureSQLSink) GetSinkRetryWait() (rv any) {
	if a != nil {
		return a.SinkRetryWait
	}
	return
}

func (a *AzureSQLSink) GetStoredProcedureParameters() (rv map[string]*StoredProcedureParameter) {
	if a != nil {
		return a.StoredProcedureParameters
	}
	return
}

func (a *AzureSQLSink) GetStoredProcedureTableTypeParameterName() (rv any) {
	if a != nil {
		return a.StoredProcedureTableTypeParameterName
	}
	return
}

func (a *AzureSQLSink) GetTableOption() (rv any) {
	if a != nil {
		return a.TableOption
	}
	return
}

func (a *AzureSQLSink) GetWriteBatchSize() (rv any) {
	if a != nil {
		return a.WriteBatchSize
	}
	return
}

func (a *AzureSQLSink) GetWriteBatchTimeout() (rv any) {
	if a != nil {
		return a.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type AzureSQLSink.
func (a *AzureSQLSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SinkRetryCount:           a.SinkRetryCount,
		SinkRetryWait:            a.SinkRetryWait,
		Type:                     a.Type,
		WriteBatchSize:           a.WriteBatchSize,
		WriteBatchTimeout:        a.WriteBatchTimeout,
	}
}

// AzureSQLSource - A copy activity Azure SQL source.
type AzureSQLSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable",
	// "DynamicRange".
	PartitionOption any

	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SQLPartitionSettings

	// Which additional types to produce.
	ProduceAdditionalTypes any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// SQL reader query. Type: string (or Expression with resultType string).
	SQLReaderQuery any

	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string
	// (or Expression with resultType string).
	SQLReaderStoredProcedureName any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]*StoredProcedureParameter
}

func (a *AzureSQLSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureSQLSource) GetAdditionalColumns() (rv any) {
	if a != nil {
		return a.AdditionalColumns
	}
	return
}

func (a *AzureSQLSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureSQLSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureSQLSource) GetPartitionOption() (rv any) {
	if a != nil {
		return a.PartitionOption
	}
	return
}

func (a *AzureSQLSource) GetPartitionSettings() (rv *SQLPartitionSettings) {
	if a != nil {
		return a.PartitionSettings
	}
	return
}

func (a *AzureSQLSource) GetProduceAdditionalTypes() (rv any) {
	if a != nil {
		return a.ProduceAdditionalTypes
	}
	return
}

func (a *AzureSQLSource) GetQueryTimeout() (rv any) {
	if a != nil {
		return a.QueryTimeout
	}
	return
}

func (a *AzureSQLSource) GetSQLReaderQuery() (rv any) {
	if a != nil {
		return a.SQLReaderQuery
	}
	return
}

func (a *AzureSQLSource) GetSQLReaderStoredProcedureName() (rv any) {
	if a != nil {
		return a.SQLReaderStoredProcedureName
	}
	return
}

func (a *AzureSQLSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AzureSQLSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

func (a *AzureSQLSource) GetStoredProcedureParameters() (rv map[string]*StoredProcedureParameter) {
	if a != nil {
		return a.StoredProcedureParameters
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AzureSQLSource.
func (a *AzureSQLSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type AzureSQLSource.
func (a *AzureSQLSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        a.AdditionalColumns,
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		QueryTimeout:             a.QueryTimeout,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AzureSQLTableDataset - The Azure SQL Server database dataset.
type AzureSQLTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Azure SQL dataset properties.
	TypeProperties *AzureSQLTableDatasetTypeProperties
}

func (a *AzureSQLTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureSQLTableDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureSQLTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureSQLTableDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureSQLTableDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureSQLTableDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AzureSQLTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AzureSQLTableDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureSQLTableDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

func (a *AzureSQLTableDataset) GetTypeProperties() (rv *AzureSQLTableDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AzureSQLTableDataset.
func (a *AzureSQLTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AzureSQLTableDatasetTypeProperties - Azure SQL dataset properties.
type AzureSQLTableDatasetTypeProperties struct {
	// The schema name of the Azure SQL database. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the Azure SQL database. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (a *AzureSQLTableDatasetTypeProperties) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureSQLTableDatasetTypeProperties) GetTable() (rv any) {
	if a != nil {
		return a.Table
	}
	return
}

func (a *AzureSQLTableDatasetTypeProperties) GetTableName() (rv any) {
	if a != nil {
		return a.TableName
	}
	return
}

// AzureSearchIndexDataset - The Azure Search Index.
type AzureSearchIndexDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; Properties specific to this dataset type.
	TypeProperties *AzureSearchIndexDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (a *AzureSearchIndexDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureSearchIndexDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureSearchIndexDataset) GetTypeProperties() (rv *AzureSearchIndexDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureSearchIndexDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureSearchIndexDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureSearchIndexDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureSearchIndexDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AzureSearchIndexDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AzureSearchIndexDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureSearchIndexDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AzureSearchIndexDataset.
func (a *AzureSearchIndexDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AzureSearchIndexDatasetTypeProperties - Properties specific to this dataset type.
type AzureSearchIndexDatasetTypeProperties struct {
	// REQUIRED; The name of the Azure Search Index. Type: string (or Expression with resultType string).
	IndexName any
}

func (a *AzureSearchIndexDatasetTypeProperties) GetIndexName() (rv any) {
	if a != nil {
		return a.IndexName
	}
	return
}

// AzureSearchIndexSink - A copy activity Azure Search Index sink.
type AzureSearchIndexSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any

	// Specify the write behavior when upserting documents into Azure Search Index.
	WriteBehavior *AzureSearchIndexWriteBehaviorType
}

func (a *AzureSearchIndexSink) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureSearchIndexSink) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureSearchIndexSink) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureSearchIndexSink) GetSinkRetryCount() (rv any) {
	if a != nil {
		return a.SinkRetryCount
	}
	return
}

func (a *AzureSearchIndexSink) GetSinkRetryWait() (rv any) {
	if a != nil {
		return a.SinkRetryWait
	}
	return
}

func (a *AzureSearchIndexSink) GetWriteBatchSize() (rv any) {
	if a != nil {
		return a.WriteBatchSize
	}
	return
}

func (a *AzureSearchIndexSink) GetWriteBatchTimeout() (rv any) {
	if a != nil {
		return a.WriteBatchTimeout
	}
	return
}

func (a *AzureSearchIndexSink) GetWriteBehavior() (rv *AzureSearchIndexWriteBehaviorType) {
	if a != nil {
		return a.WriteBehavior
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type AzureSearchIndexSink.
func (a *AzureSearchIndexSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SinkRetryCount:           a.SinkRetryCount,
		SinkRetryWait:            a.SinkRetryWait,
		Type:                     a.Type,
		WriteBatchSize:           a.WriteBatchSize,
		WriteBatchTimeout:        a.WriteBatchTimeout,
	}
}

// AzureSearchLinkedService - Linked service for Windows Azure Search Service.
type AzureSearchLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Windows Azure Search Service linked service properties.
	TypeProperties *AzureSearchLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureSearchLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureSearchLinkedService) GetTypeProperties() (rv *AzureSearchLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureSearchLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureSearchLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureSearchLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureSearchLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureSearchLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureSearchLinkedService.
func (a *AzureSearchLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureSearchLinkedServiceTypeProperties - Windows Azure Search Service linked service properties.
type AzureSearchLinkedServiceTypeProperties struct {
	// REQUIRED; URL for Azure Search service. Type: string (or Expression with resultType string).
	URL any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Admin Key for Azure Search service
	Key SecretBaseClassification
}

func (a *AzureSearchLinkedServiceTypeProperties) GetURL() (rv any) {
	if a != nil {
		return a.URL
	}
	return
}

func (a *AzureSearchLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if a != nil {
		return a.EncryptedCredential
	}
	return
}

func (a *AzureSearchLinkedServiceTypeProperties) GetKey() (rv SecretBaseClassification) {
	if a != nil {
		return a.Key
	}
	return
}

// AzureStorageLinkedService - The storage account linked service.
type AzureStorageLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Storage linked service properties.
	TypeProperties *AzureStorageLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureStorageLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureStorageLinkedService) GetTypeProperties() (rv *AzureStorageLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureStorageLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureStorageLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureStorageLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureStorageLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureStorageLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureStorageLinkedService.
func (a *AzureStorageLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureStorageLinkedServiceTypeProperties - Azure Storage linked service properties.
type AzureStorageLinkedServiceTypeProperties struct {
	// The Azure key vault secret reference of accountKey in connection string.
	AccountKey *AzureKeyVaultSecretReference

	// The connection string. It is mutually exclusive with sasUri property. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential *string

	// The Azure key vault secret reference of sasToken in sas uri.
	SasToken *AzureKeyVaultSecretReference

	// SAS URI of the Azure Storage resource. It is mutually exclusive with connectionString property. Type: string, SecureString
	// or AzureKeyVaultSecretReference.
	SasURI any
}

func (a *AzureStorageLinkedServiceTypeProperties) GetAccountKey() (rv *AzureKeyVaultSecretReference) {
	if a != nil {
		return a.AccountKey
	}
	return
}

func (a *AzureStorageLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if a != nil {
		return a.ConnectionString
	}
	return
}

func (a *AzureStorageLinkedServiceTypeProperties) GetEncryptedCredential() (rv string) {
	if a != nil && a.EncryptedCredential != nil {
		return *a.EncryptedCredential
	}
	return
}

func (a *AzureStorageLinkedServiceTypeProperties) GetSasToken() (rv *AzureKeyVaultSecretReference) {
	if a != nil {
		return a.SasToken
	}
	return
}

func (a *AzureStorageLinkedServiceTypeProperties) GetSasURI() (rv any) {
	if a != nil {
		return a.SasURI
	}
	return
}

// AzureSynapseArtifactsLinkedService - Azure Synapse Analytics (Artifacts) linked service.
type AzureSynapseArtifactsLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Synapse Analytics (Artifacts) linked service properties.
	TypeProperties *AzureSynapseArtifactsLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureSynapseArtifactsLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureSynapseArtifactsLinkedService) GetTypeProperties() (rv *AzureSynapseArtifactsLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureSynapseArtifactsLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureSynapseArtifactsLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureSynapseArtifactsLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureSynapseArtifactsLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureSynapseArtifactsLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureSynapseArtifactsLinkedService.
func (a *AzureSynapseArtifactsLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// AzureSynapseArtifactsLinkedServiceTypeProperties - Azure Synapse Analytics (Artifacts) linked service properties.
type AzureSynapseArtifactsLinkedServiceTypeProperties struct {
	// REQUIRED; https://.dev.azuresynapse.net, Azure Synapse Analytics workspace URL. Type: string (or Expression with resultType
	// string).
	Endpoint any

	// Required to specify MSI, if using system assigned managed identity as authentication method. Type: string (or Expression
	// with resultType string).
	Authentication any

	// The resource ID of the Synapse workspace. The format should be: /subscriptions/{subscriptionID}/resourceGroups/{resourceGroup}/providers/Microsoft.Synapse/workspaces/{workspaceName}.
	// Type: string (or
	// Expression with resultType string).
	WorkspaceResourceID any
}

func (a *AzureSynapseArtifactsLinkedServiceTypeProperties) GetEndpoint() (rv any) {
	if a != nil {
		return a.Endpoint
	}
	return
}

func (a *AzureSynapseArtifactsLinkedServiceTypeProperties) GetAuthentication() (rv any) {
	if a != nil {
		return a.Authentication
	}
	return
}

func (a *AzureSynapseArtifactsLinkedServiceTypeProperties) GetWorkspaceResourceID() (rv any) {
	if a != nil {
		return a.WorkspaceResourceID
	}
	return
}

// AzureTableDataset - The Azure Table storage dataset.
type AzureTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; Azure Table dataset properties.
	TypeProperties *AzureTableDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (a *AzureTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if a != nil {
		return a.LinkedServiceName
	}
	return
}

func (a *AzureTableDataset) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureTableDataset) GetTypeProperties() (rv *AzureTableDatasetTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureTableDataset) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureTableDataset) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureTableDataset) GetFolder() (rv *DatasetFolder) {
	if a != nil {
		return a.Folder
	}
	return
}

func (a *AzureTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *AzureTableDataset) GetSchema() (rv any) {
	if a != nil {
		return a.Schema
	}
	return
}

func (a *AzureTableDataset) GetStructure() (rv any) {
	if a != nil {
		return a.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type AzureTableDataset.
func (a *AzureTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		Description:          a.Description,
		Folder:               a.Folder,
		LinkedServiceName:    a.LinkedServiceName,
		Parameters:           a.Parameters,
		Schema:               a.Schema,
		Structure:            a.Structure,
		Type:                 a.Type,
	}
}

// AzureTableDatasetTypeProperties - Azure Table dataset properties.
type AzureTableDatasetTypeProperties struct {
	// REQUIRED; The table name of the Azure Table storage. Type: string (or Expression with resultType string).
	TableName any
}

func (a *AzureTableDatasetTypeProperties) GetTableName() (rv any) {
	if a != nil {
		return a.TableName
	}
	return
}

// AzureTableSink - A copy activity Azure Table sink.
type AzureTableSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Azure Table default partition key value. Type: string (or Expression with resultType string).
	AzureTableDefaultPartitionKeyValue any

	// Azure Table insert type. Type: string (or Expression with resultType string).
	AzureTableInsertType any

	// Azure Table partition key name. Type: string (or Expression with resultType string).
	AzureTablePartitionKeyName any

	// Azure Table row key name. Type: string (or Expression with resultType string).
	AzureTableRowKeyName any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (a *AzureTableSink) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureTableSink) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureTableSink) GetAzureTableDefaultPartitionKeyValue() (rv any) {
	if a != nil {
		return a.AzureTableDefaultPartitionKeyValue
	}
	return
}

func (a *AzureTableSink) GetAzureTableInsertType() (rv any) {
	if a != nil {
		return a.AzureTableInsertType
	}
	return
}

func (a *AzureTableSink) GetAzureTablePartitionKeyName() (rv any) {
	if a != nil {
		return a.AzureTablePartitionKeyName
	}
	return
}

func (a *AzureTableSink) GetAzureTableRowKeyName() (rv any) {
	if a != nil {
		return a.AzureTableRowKeyName
	}
	return
}

func (a *AzureTableSink) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureTableSink) GetSinkRetryCount() (rv any) {
	if a != nil {
		return a.SinkRetryCount
	}
	return
}

func (a *AzureTableSink) GetSinkRetryWait() (rv any) {
	if a != nil {
		return a.SinkRetryWait
	}
	return
}

func (a *AzureTableSink) GetWriteBatchSize() (rv any) {
	if a != nil {
		return a.WriteBatchSize
	}
	return
}

func (a *AzureTableSink) GetWriteBatchTimeout() (rv any) {
	if a != nil {
		return a.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type AzureTableSink.
func (a *AzureTableSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SinkRetryCount:           a.SinkRetryCount,
		SinkRetryWait:            a.SinkRetryWait,
		Type:                     a.Type,
		WriteBatchSize:           a.WriteBatchSize,
		WriteBatchTimeout:        a.WriteBatchTimeout,
	}
}

// AzureTableSource - A copy activity Azure Table source.
type AzureTableSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Azure Table source ignore table not found. Type: boolean (or Expression with resultType boolean).
	AzureTableSourceIgnoreTableNotFound any

	// Azure Table source query. Type: string (or Expression with resultType string).
	AzureTableSourceQuery any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (a *AzureTableSource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureTableSource) GetAdditionalColumns() (rv any) {
	if a != nil {
		return a.AdditionalColumns
	}
	return
}

func (a *AzureTableSource) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureTableSource) GetAzureTableSourceIgnoreTableNotFound() (rv any) {
	if a != nil {
		return a.AzureTableSourceIgnoreTableNotFound
	}
	return
}

func (a *AzureTableSource) GetAzureTableSourceQuery() (rv any) {
	if a != nil {
		return a.AzureTableSourceQuery
	}
	return
}

func (a *AzureTableSource) GetMaxConcurrentConnections() (rv any) {
	if a != nil {
		return a.MaxConcurrentConnections
	}
	return
}

func (a *AzureTableSource) GetQueryTimeout() (rv any) {
	if a != nil {
		return a.QueryTimeout
	}
	return
}

func (a *AzureTableSource) GetSourceRetryCount() (rv any) {
	if a != nil {
		return a.SourceRetryCount
	}
	return
}

func (a *AzureTableSource) GetSourceRetryWait() (rv any) {
	if a != nil {
		return a.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type AzureTableSource.
func (a *AzureTableSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type AzureTableSource.
func (a *AzureTableSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        a.AdditionalColumns,
		AdditionalProperties:     a.AdditionalProperties,
		MaxConcurrentConnections: a.MaxConcurrentConnections,
		QueryTimeout:             a.QueryTimeout,
		SourceRetryCount:         a.SourceRetryCount,
		SourceRetryWait:          a.SourceRetryWait,
		Type:                     a.Type,
	}
}

// AzureTableStorageLinkedService - The azure table storage linked service.
type AzureTableStorageLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Azure Table Storage linked service properties.
	TypeProperties *AzureStorageLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (a *AzureTableStorageLinkedService) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

func (a *AzureTableStorageLinkedService) GetTypeProperties() (rv *AzureStorageLinkedServiceTypeProperties) {
	if a != nil {
		return a.TypeProperties
	}
	return
}

func (a *AzureTableStorageLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureTableStorageLinkedService) GetAnnotations() (rv []any) {
	if a != nil {
		return a.Annotations
	}
	return
}

func (a *AzureTableStorageLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if a != nil {
		return a.ConnectVia
	}
	return
}

func (a *AzureTableStorageLinkedService) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureTableStorageLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if a != nil {
		return a.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type AzureTableStorageLinkedService.
func (a *AzureTableStorageLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: a.AdditionalProperties,
		Annotations:          a.Annotations,
		ConnectVia:           a.ConnectVia,
		Description:          a.Description,
		Parameters:           a.Parameters,
		Type:                 a.Type,
	}
}

// BigDataPoolParametrizationReference - Big data pool reference type.
type BigDataPoolParametrizationReference struct {
	// REQUIRED; Reference big data pool name. Type: string (or Expression with resultType string).
	ReferenceName any

	// REQUIRED; Big data pool reference type.
	Type *BigDataPoolReferenceType
}

func (b *BigDataPoolParametrizationReference) GetReferenceName() (rv any) {
	if b != nil {
		return b.ReferenceName
	}
	return
}

func (b *BigDataPoolParametrizationReference) GetType() (rv *BigDataPoolReferenceType) {
	if b != nil {
		return b.Type
	}
	return
}

// BigDataPoolReference - Big data pool reference.
type BigDataPoolReference struct {
	// REQUIRED; Reference big data pool name.
	ReferenceName *string

	// REQUIRED; Big data pool reference type.
	Type *BigDataPoolReferenceType
}

func (b *BigDataPoolReference) GetReferenceName() (rv string) {
	if b != nil && b.ReferenceName != nil {
		return *b.ReferenceName
	}
	return
}

func (b *BigDataPoolReference) GetType() (rv *BigDataPoolReferenceType) {
	if b != nil {
		return b.Type
	}
	return
}

// BigDataPoolResourceInfo - A Big Data pool
type BigDataPoolResourceInfo struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Big Data pool properties
	Properties *BigDataPoolResourceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (b *BigDataPoolResourceInfo) GetLocation() (rv string) {
	if b != nil && b.Location != nil {
		return *b.Location
	}
	return
}

func (b *BigDataPoolResourceInfo) GetProperties() (rv *BigDataPoolResourceProperties) {
	if b != nil {
		return b.Properties
	}
	return
}

func (b *BigDataPoolResourceInfo) GetTags() (rv map[string]*string) {
	if b != nil {
		return b.Tags
	}
	return
}

func (b *BigDataPoolResourceInfo) GetID() (rv string) {
	if b != nil && b.ID != nil {
		return *b.ID
	}
	return
}

func (b *BigDataPoolResourceInfo) GetName() (rv string) {
	if b != nil && b.Name != nil {
		return *b.Name
	}
	return
}

func (b *BigDataPoolResourceInfo) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

// BigDataPoolResourceInfoListResult - Collection of Big Data pool information
type BigDataPoolResourceInfoListResult struct {
	// Link to the next page of results
	NextLink *string

	// List of Big Data pools
	Value []*BigDataPoolResourceInfo
}

func (b *BigDataPoolResourceInfoListResult) GetNextLink() (rv string) {
	if b != nil && b.NextLink != nil {
		return *b.NextLink
	}
	return
}

func (b *BigDataPoolResourceInfoListResult) GetValue() (rv []*BigDataPoolResourceInfo) {
	if b != nil {
		return b.Value
	}
	return
}

// BigDataPoolResourceProperties - Properties of a Big Data pool powered by Apache Spark
type BigDataPoolResourceProperties struct {
	// Auto-pausing properties
	AutoPause *AutoPauseProperties

	// Auto-scaling properties
	AutoScale *AutoScaleProperties

	// The cache size
	CacheSize *int32

	// The time when the Big Data pool was created.
	CreationDate *time.Time

	// List of custom libraries/packages associated with the spark pool.
	CustomLibraries []*LibraryInfo

	// The default folder where Spark logs will be written.
	DefaultSparkLogFolder *string

	// Dynamic Executor Allocation
	DynamicExecutorAllocation *DynamicExecutorAllocation

	// Whether compute isolation is required or not.
	IsComputeIsolationEnabled *bool

	// Library version requirements
	LibraryRequirements *LibraryRequirements

	// The number of nodes in the Big Data pool.
	NodeCount *int32

	// The level of compute power that each node in the Big Data pool has.
	NodeSize *NodeSize

	// The kind of nodes that the Big Data pool provides.
	NodeSizeFamily *NodeSizeFamily

	// The state of the Big Data pool.
	ProvisioningState *string

	// Whether session level packages enabled.
	SessionLevelPackagesEnabled *bool

	// Spark configuration file to specify additional properties
	SparkConfigProperties *LibraryRequirements

	// The Spark events folder
	SparkEventsFolder *string

	// The Apache Spark version.
	SparkVersion *string

	// READ-ONLY; The time when the Big Data pool was updated successfully.
	LastSucceededTimestamp *time.Time
}

func (b *BigDataPoolResourceProperties) GetAutoPause() (rv *AutoPauseProperties) {
	if b != nil {
		return b.AutoPause
	}
	return
}

func (b *BigDataPoolResourceProperties) GetAutoScale() (rv *AutoScaleProperties) {
	if b != nil {
		return b.AutoScale
	}
	return
}

func (b *BigDataPoolResourceProperties) GetCacheSize() (rv int32) {
	if b != nil && b.CacheSize != nil {
		return *b.CacheSize
	}
	return
}

func (b *BigDataPoolResourceProperties) GetCreationDate() (rv *time.Time) {
	if b != nil {
		return b.CreationDate
	}
	return
}

func (b *BigDataPoolResourceProperties) GetCustomLibraries() (rv []*LibraryInfo) {
	if b != nil {
		return b.CustomLibraries
	}
	return
}

func (b *BigDataPoolResourceProperties) GetDefaultSparkLogFolder() (rv string) {
	if b != nil && b.DefaultSparkLogFolder != nil {
		return *b.DefaultSparkLogFolder
	}
	return
}

func (b *BigDataPoolResourceProperties) GetDynamicExecutorAllocation() (rv *DynamicExecutorAllocation) {
	if b != nil {
		return b.DynamicExecutorAllocation
	}
	return
}

func (b *BigDataPoolResourceProperties) GetIsComputeIsolationEnabled() (rv bool) {
	if b != nil && b.IsComputeIsolationEnabled != nil {
		return *b.IsComputeIsolationEnabled
	}
	return
}

func (b *BigDataPoolResourceProperties) GetLibraryRequirements() (rv *LibraryRequirements) {
	if b != nil {
		return b.LibraryRequirements
	}
	return
}

func (b *BigDataPoolResourceProperties) GetNodeCount() (rv int32) {
	if b != nil && b.NodeCount != nil {
		return *b.NodeCount
	}
	return
}

func (b *BigDataPoolResourceProperties) GetNodeSize() (rv *NodeSize) {
	if b != nil {
		return b.NodeSize
	}
	return
}

func (b *BigDataPoolResourceProperties) GetNodeSizeFamily() (rv *NodeSizeFamily) {
	if b != nil {
		return b.NodeSizeFamily
	}
	return
}

func (b *BigDataPoolResourceProperties) GetProvisioningState() (rv string) {
	if b != nil && b.ProvisioningState != nil {
		return *b.ProvisioningState
	}
	return
}

func (b *BigDataPoolResourceProperties) GetSessionLevelPackagesEnabled() (rv bool) {
	if b != nil && b.SessionLevelPackagesEnabled != nil {
		return *b.SessionLevelPackagesEnabled
	}
	return
}

func (b *BigDataPoolResourceProperties) GetSparkConfigProperties() (rv *LibraryRequirements) {
	if b != nil {
		return b.SparkConfigProperties
	}
	return
}

func (b *BigDataPoolResourceProperties) GetSparkEventsFolder() (rv string) {
	if b != nil && b.SparkEventsFolder != nil {
		return *b.SparkEventsFolder
	}
	return
}

func (b *BigDataPoolResourceProperties) GetSparkVersion() (rv string) {
	if b != nil && b.SparkVersion != nil {
		return *b.SparkVersion
	}
	return
}

func (b *BigDataPoolResourceProperties) GetLastSucceededTimestamp() (rv *time.Time) {
	if b != nil {
		return b.LastSucceededTimestamp
	}
	return
}

// BinaryDataset - Binary dataset.
type BinaryDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Binary dataset properties.
	TypeProperties *BinaryDatasetTypeProperties
}

func (b *BinaryDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if b != nil {
		return b.LinkedServiceName
	}
	return
}

func (b *BinaryDataset) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

func (b *BinaryDataset) GetAdditionalProperties() (rv map[string]any) {
	if b != nil {
		return b.AdditionalProperties
	}
	return
}

func (b *BinaryDataset) GetAnnotations() (rv []any) {
	if b != nil {
		return b.Annotations
	}
	return
}

func (b *BinaryDataset) GetDescription() (rv string) {
	if b != nil && b.Description != nil {
		return *b.Description
	}
	return
}

func (b *BinaryDataset) GetFolder() (rv *DatasetFolder) {
	if b != nil {
		return b.Folder
	}
	return
}

func (b *BinaryDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if b != nil {
		return b.Parameters
	}
	return
}

func (b *BinaryDataset) GetSchema() (rv any) {
	if b != nil {
		return b.Schema
	}
	return
}

func (b *BinaryDataset) GetStructure() (rv any) {
	if b != nil {
		return b.Structure
	}
	return
}

func (b *BinaryDataset) GetTypeProperties() (rv *BinaryDatasetTypeProperties) {
	if b != nil {
		return b.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type BinaryDataset.
func (b *BinaryDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: b.AdditionalProperties,
		Annotations:          b.Annotations,
		Description:          b.Description,
		Folder:               b.Folder,
		LinkedServiceName:    b.LinkedServiceName,
		Parameters:           b.Parameters,
		Schema:               b.Schema,
		Structure:            b.Structure,
		Type:                 b.Type,
	}
}

// BinaryDatasetTypeProperties - Binary dataset properties.
type BinaryDatasetTypeProperties struct {
	// REQUIRED; The location of the Binary storage.
	Location DatasetLocationClassification

	// The data compression method used for the binary dataset.
	Compression *DatasetCompression
}

func (b *BinaryDatasetTypeProperties) GetLocation() (rv DatasetLocationClassification) {
	if b != nil {
		return b.Location
	}
	return
}

func (b *BinaryDatasetTypeProperties) GetCompression() (rv *DatasetCompression) {
	if b != nil {
		return b.Compression
	}
	return
}

// BinaryReadSettings - Binary read settings.
type BinaryReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Compression settings.
	CompressionProperties CompressionReadSettingsClassification
}

func (b *BinaryReadSettings) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

func (b *BinaryReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if b != nil {
		return b.AdditionalProperties
	}
	return
}

func (b *BinaryReadSettings) GetCompressionProperties() (rv CompressionReadSettingsClassification) {
	if b != nil {
		return b.CompressionProperties
	}
	return
}

// GetFormatReadSettings implements the FormatReadSettingsClassification interface for type BinaryReadSettings.
func (b *BinaryReadSettings) GetFormatReadSettings() *FormatReadSettings {
	return &FormatReadSettings{
		AdditionalProperties: b.AdditionalProperties,
		Type:                 b.Type,
	}
}

// BinarySink - A copy activity Binary sink.
type BinarySink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Binary store settings.
	StoreSettings StoreWriteSettingsClassification

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (b *BinarySink) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

func (b *BinarySink) GetAdditionalProperties() (rv map[string]any) {
	if b != nil {
		return b.AdditionalProperties
	}
	return
}

func (b *BinarySink) GetMaxConcurrentConnections() (rv any) {
	if b != nil {
		return b.MaxConcurrentConnections
	}
	return
}

func (b *BinarySink) GetSinkRetryCount() (rv any) {
	if b != nil {
		return b.SinkRetryCount
	}
	return
}

func (b *BinarySink) GetSinkRetryWait() (rv any) {
	if b != nil {
		return b.SinkRetryWait
	}
	return
}

func (b *BinarySink) GetStoreSettings() (rv StoreWriteSettingsClassification) {
	if b != nil {
		return b.StoreSettings
	}
	return
}

func (b *BinarySink) GetWriteBatchSize() (rv any) {
	if b != nil {
		return b.WriteBatchSize
	}
	return
}

func (b *BinarySink) GetWriteBatchTimeout() (rv any) {
	if b != nil {
		return b.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type BinarySink.
func (b *BinarySink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     b.AdditionalProperties,
		MaxConcurrentConnections: b.MaxConcurrentConnections,
		SinkRetryCount:           b.SinkRetryCount,
		SinkRetryWait:            b.SinkRetryWait,
		Type:                     b.Type,
		WriteBatchSize:           b.WriteBatchSize,
		WriteBatchTimeout:        b.WriteBatchTimeout,
	}
}

// BinarySource - A copy activity Binary source.
type BinarySource struct {
	// REQUIRED; Copy source type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Binary format settings.
	FormatSettings *BinaryReadSettings

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Binary store settings.
	StoreSettings StoreReadSettingsClassification
}

func (b *BinarySource) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

func (b *BinarySource) GetAdditionalProperties() (rv map[string]any) {
	if b != nil {
		return b.AdditionalProperties
	}
	return
}

func (b *BinarySource) GetFormatSettings() (rv *BinaryReadSettings) {
	if b != nil {
		return b.FormatSettings
	}
	return
}

func (b *BinarySource) GetMaxConcurrentConnections() (rv any) {
	if b != nil {
		return b.MaxConcurrentConnections
	}
	return
}

func (b *BinarySource) GetSourceRetryCount() (rv any) {
	if b != nil {
		return b.SourceRetryCount
	}
	return
}

func (b *BinarySource) GetSourceRetryWait() (rv any) {
	if b != nil {
		return b.SourceRetryWait
	}
	return
}

func (b *BinarySource) GetStoreSettings() (rv StoreReadSettingsClassification) {
	if b != nil {
		return b.StoreSettings
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type BinarySource.
func (b *BinarySource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     b.AdditionalProperties,
		MaxConcurrentConnections: b.MaxConcurrentConnections,
		SourceRetryCount:         b.SourceRetryCount,
		SourceRetryWait:          b.SourceRetryWait,
		Type:                     b.Type,
	}
}

// BlobEventsTrigger - Trigger that runs every time a Blob event occurs.
type BlobEventsTrigger struct {
	// REQUIRED; Trigger type.
	Type *string

	// REQUIRED; Blob Events Trigger properties.
	TypeProperties *BlobEventsTriggerTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the trigger.
	Annotations []any

	// Trigger description.
	Description *string

	// Pipelines that need to be started.
	Pipelines []*TriggerPipelineReference

	// READ-ONLY; Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState *TriggerRuntimeState
}

func (b *BlobEventsTrigger) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

func (b *BlobEventsTrigger) GetTypeProperties() (rv *BlobEventsTriggerTypeProperties) {
	if b != nil {
		return b.TypeProperties
	}
	return
}

func (b *BlobEventsTrigger) GetAdditionalProperties() (rv map[string]any) {
	if b != nil {
		return b.AdditionalProperties
	}
	return
}

func (b *BlobEventsTrigger) GetAnnotations() (rv []any) {
	if b != nil {
		return b.Annotations
	}
	return
}

func (b *BlobEventsTrigger) GetDescription() (rv string) {
	if b != nil && b.Description != nil {
		return *b.Description
	}
	return
}

func (b *BlobEventsTrigger) GetPipelines() (rv []*TriggerPipelineReference) {
	if b != nil {
		return b.Pipelines
	}
	return
}

func (b *BlobEventsTrigger) GetRuntimeState() (rv *TriggerRuntimeState) {
	if b != nil {
		return b.RuntimeState
	}
	return
}

// GetMultiplePipelineTrigger implements the MultiplePipelineTriggerClassification interface for type BlobEventsTrigger.
func (b *BlobEventsTrigger) GetMultiplePipelineTrigger() *MultiplePipelineTrigger {
	return &MultiplePipelineTrigger{
		AdditionalProperties: b.AdditionalProperties,
		Annotations:          b.Annotations,
		Description:          b.Description,
		Pipelines:            b.Pipelines,
		RuntimeState:         b.RuntimeState,
		Type:                 b.Type,
	}
}

// GetTrigger implements the TriggerClassification interface for type BlobEventsTrigger.
func (b *BlobEventsTrigger) GetTrigger() *Trigger {
	return &Trigger{
		AdditionalProperties: b.AdditionalProperties,
		Annotations:          b.Annotations,
		Description:          b.Description,
		RuntimeState:         b.RuntimeState,
		Type:                 b.Type,
	}
}

// BlobEventsTriggerTypeProperties - Blob Events Trigger properties.
type BlobEventsTriggerTypeProperties struct {
	// REQUIRED; The type of events that cause this trigger to fire.
	Events []*BlobEventType

	// REQUIRED; The ARM resource ID of the Storage Account.
	Scope *string

	// The blob path must begin with the pattern provided for trigger to fire. For example, '/records/blobs/december/' will only
	// fire the trigger for blobs in the december folder under the records container.
	// At least one of these must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathBeginsWith *string

	// The blob path must end with the pattern provided for trigger to fire. For example, 'december/boxes.csv' will only fire
	// the trigger for blobs named boxes in a december folder. At least one of these
	// must be provided: blobPathBeginsWith, blobPathEndsWith.
	BlobPathEndsWith *string

	// If set to true, blobs with zero bytes will be ignored.
	IgnoreEmptyBlobs *bool
}

func (b *BlobEventsTriggerTypeProperties) GetEvents() (rv []*BlobEventType) {
	if b != nil {
		return b.Events
	}
	return
}

func (b *BlobEventsTriggerTypeProperties) GetScope() (rv string) {
	if b != nil && b.Scope != nil {
		return *b.Scope
	}
	return
}

func (b *BlobEventsTriggerTypeProperties) GetBlobPathBeginsWith() (rv string) {
	if b != nil && b.BlobPathBeginsWith != nil {
		return *b.BlobPathBeginsWith
	}
	return
}

func (b *BlobEventsTriggerTypeProperties) GetBlobPathEndsWith() (rv string) {
	if b != nil && b.BlobPathEndsWith != nil {
		return *b.BlobPathEndsWith
	}
	return
}

func (b *BlobEventsTriggerTypeProperties) GetIgnoreEmptyBlobs() (rv bool) {
	if b != nil && b.IgnoreEmptyBlobs != nil {
		return *b.IgnoreEmptyBlobs
	}
	return
}

// BlobSink - A copy activity Azure Blob sink.
type BlobSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Blob writer add header. Type: boolean (or Expression with resultType boolean).
	BlobWriterAddHeader any

	// Blob writer date time format. Type: string (or Expression with resultType string).
	BlobWriterDateTimeFormat any

	// Blob writer overwrite files. Type: boolean (or Expression with resultType boolean).
	BlobWriterOverwriteFiles any

	// The type of copy behavior for copy sink.
	CopyBehavior any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (b *BlobSink) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

func (b *BlobSink) GetAdditionalProperties() (rv map[string]any) {
	if b != nil {
		return b.AdditionalProperties
	}
	return
}

func (b *BlobSink) GetBlobWriterAddHeader() (rv any) {
	if b != nil {
		return b.BlobWriterAddHeader
	}
	return
}

func (b *BlobSink) GetBlobWriterDateTimeFormat() (rv any) {
	if b != nil {
		return b.BlobWriterDateTimeFormat
	}
	return
}

func (b *BlobSink) GetBlobWriterOverwriteFiles() (rv any) {
	if b != nil {
		return b.BlobWriterOverwriteFiles
	}
	return
}

func (b *BlobSink) GetCopyBehavior() (rv any) {
	if b != nil {
		return b.CopyBehavior
	}
	return
}

func (b *BlobSink) GetMaxConcurrentConnections() (rv any) {
	if b != nil {
		return b.MaxConcurrentConnections
	}
	return
}

func (b *BlobSink) GetSinkRetryCount() (rv any) {
	if b != nil {
		return b.SinkRetryCount
	}
	return
}

func (b *BlobSink) GetSinkRetryWait() (rv any) {
	if b != nil {
		return b.SinkRetryWait
	}
	return
}

func (b *BlobSink) GetWriteBatchSize() (rv any) {
	if b != nil {
		return b.WriteBatchSize
	}
	return
}

func (b *BlobSink) GetWriteBatchTimeout() (rv any) {
	if b != nil {
		return b.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type BlobSink.
func (b *BlobSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     b.AdditionalProperties,
		MaxConcurrentConnections: b.MaxConcurrentConnections,
		SinkRetryCount:           b.SinkRetryCount,
		SinkRetryWait:            b.SinkRetryWait,
		Type:                     b.Type,
		WriteBatchSize:           b.WriteBatchSize,
		WriteBatchTimeout:        b.WriteBatchTimeout,
	}
}

// BlobSource - A copy activity Azure Blob source.
type BlobSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// Number of header lines to skip from each blob. Type: integer (or Expression with resultType integer).
	SkipHeaderLineCount any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Treat empty as null. Type: boolean (or Expression with resultType boolean).
	TreatEmptyAsNull any
}

func (b *BlobSource) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

func (b *BlobSource) GetAdditionalProperties() (rv map[string]any) {
	if b != nil {
		return b.AdditionalProperties
	}
	return
}

func (b *BlobSource) GetMaxConcurrentConnections() (rv any) {
	if b != nil {
		return b.MaxConcurrentConnections
	}
	return
}

func (b *BlobSource) GetRecursive() (rv any) {
	if b != nil {
		return b.Recursive
	}
	return
}

func (b *BlobSource) GetSkipHeaderLineCount() (rv any) {
	if b != nil {
		return b.SkipHeaderLineCount
	}
	return
}

func (b *BlobSource) GetSourceRetryCount() (rv any) {
	if b != nil {
		return b.SourceRetryCount
	}
	return
}

func (b *BlobSource) GetSourceRetryWait() (rv any) {
	if b != nil {
		return b.SourceRetryWait
	}
	return
}

func (b *BlobSource) GetTreatEmptyAsNull() (rv any) {
	if b != nil {
		return b.TreatEmptyAsNull
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type BlobSource.
func (b *BlobSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     b.AdditionalProperties,
		MaxConcurrentConnections: b.MaxConcurrentConnections,
		SourceRetryCount:         b.SourceRetryCount,
		SourceRetryWait:          b.SourceRetryWait,
		Type:                     b.Type,
	}
}

// BlobTrigger - Trigger that runs every time the selected Blob container changes.
type BlobTrigger struct {
	// REQUIRED; Trigger type.
	Type *string

	// REQUIRED; Blob Trigger properties.
	TypeProperties *BlobTriggerTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the trigger.
	Annotations []any

	// Trigger description.
	Description *string

	// Pipelines that need to be started.
	Pipelines []*TriggerPipelineReference

	// READ-ONLY; Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState *TriggerRuntimeState
}

func (b *BlobTrigger) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

func (b *BlobTrigger) GetTypeProperties() (rv *BlobTriggerTypeProperties) {
	if b != nil {
		return b.TypeProperties
	}
	return
}

func (b *BlobTrigger) GetAdditionalProperties() (rv map[string]any) {
	if b != nil {
		return b.AdditionalProperties
	}
	return
}

func (b *BlobTrigger) GetAnnotations() (rv []any) {
	if b != nil {
		return b.Annotations
	}
	return
}

func (b *BlobTrigger) GetDescription() (rv string) {
	if b != nil && b.Description != nil {
		return *b.Description
	}
	return
}

func (b *BlobTrigger) GetPipelines() (rv []*TriggerPipelineReference) {
	if b != nil {
		return b.Pipelines
	}
	return
}

func (b *BlobTrigger) GetRuntimeState() (rv *TriggerRuntimeState) {
	if b != nil {
		return b.RuntimeState
	}
	return
}

// GetMultiplePipelineTrigger implements the MultiplePipelineTriggerClassification interface for type BlobTrigger.
func (b *BlobTrigger) GetMultiplePipelineTrigger() *MultiplePipelineTrigger {
	return &MultiplePipelineTrigger{
		AdditionalProperties: b.AdditionalProperties,
		Annotations:          b.Annotations,
		Description:          b.Description,
		Pipelines:            b.Pipelines,
		RuntimeState:         b.RuntimeState,
		Type:                 b.Type,
	}
}

// GetTrigger implements the TriggerClassification interface for type BlobTrigger.
func (b *BlobTrigger) GetTrigger() *Trigger {
	return &Trigger{
		AdditionalProperties: b.AdditionalProperties,
		Annotations:          b.Annotations,
		Description:          b.Description,
		RuntimeState:         b.RuntimeState,
		Type:                 b.Type,
	}
}

// BlobTriggerTypeProperties - Blob Trigger properties.
type BlobTriggerTypeProperties struct {
	// REQUIRED; The path of the container/folder that will trigger the pipeline.
	FolderPath *string

	// REQUIRED; The Azure Storage linked service reference.
	LinkedService *LinkedServiceReference

	// REQUIRED; The max number of parallel files to handle when it is triggered.
	MaxConcurrency *int32
}

func (b *BlobTriggerTypeProperties) GetFolderPath() (rv string) {
	if b != nil && b.FolderPath != nil {
		return *b.FolderPath
	}
	return
}

func (b *BlobTriggerTypeProperties) GetLinkedService() (rv *LinkedServiceReference) {
	if b != nil {
		return b.LinkedService
	}
	return
}

func (b *BlobTriggerTypeProperties) GetMaxConcurrency() (rv int32) {
	if b != nil && b.MaxConcurrency != nil {
		return *b.MaxConcurrency
	}
	return
}

// CassandraLinkedService - Linked service for Cassandra data source.
type CassandraLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Cassandra linked service properties.
	TypeProperties *CassandraLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (c *CassandraLinkedService) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CassandraLinkedService) GetTypeProperties() (rv *CassandraLinkedServiceTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

func (c *CassandraLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CassandraLinkedService) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *CassandraLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if c != nil {
		return c.ConnectVia
	}
	return
}

func (c *CassandraLinkedService) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CassandraLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type CassandraLinkedService.
func (c *CassandraLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		ConnectVia:           c.ConnectVia,
		Description:          c.Description,
		Parameters:           c.Parameters,
		Type:                 c.Type,
	}
}

// CassandraLinkedServiceTypeProperties - Cassandra linked service properties.
type CassandraLinkedServiceTypeProperties struct {
	// REQUIRED; Host name for connection. Type: string (or Expression with resultType string).
	Host any

	// AuthenticationType to be used for connection. Type: string (or Expression with resultType string).
	AuthenticationType any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password for authentication.
	Password SecretBaseClassification

	// The port for the connection. Type: integer (or Expression with resultType integer).
	Port any

	// Username for authentication. Type: string (or Expression with resultType string).
	Username any
}

func (c *CassandraLinkedServiceTypeProperties) GetHost() (rv any) {
	if c != nil {
		return c.Host
	}
	return
}

func (c *CassandraLinkedServiceTypeProperties) GetAuthenticationType() (rv any) {
	if c != nil {
		return c.AuthenticationType
	}
	return
}

func (c *CassandraLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if c != nil {
		return c.EncryptedCredential
	}
	return
}

func (c *CassandraLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if c != nil {
		return c.Password
	}
	return
}

func (c *CassandraLinkedServiceTypeProperties) GetPort() (rv any) {
	if c != nil {
		return c.Port
	}
	return
}

func (c *CassandraLinkedServiceTypeProperties) GetUsername() (rv any) {
	if c != nil {
		return c.Username
	}
	return
}

// CassandraSource - A copy activity source for a Cassandra database.
type CassandraSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The consistency level specifies how many Cassandra servers must respond to a read request before returning data to the
	// client application. Cassandra checks the specified number of Cassandra servers
	// for data to satisfy the read request. Must be one of cassandraSourceReadConsistencyLevels. The default value is 'ONE'.
	// It is case-insensitive.
	ConsistencyLevel *CassandraSourceReadConsistencyLevels

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Should be a SQL-92 query expression or Cassandra Query Language (CQL) command. Type: string (or Expression
	// with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (c *CassandraSource) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CassandraSource) GetAdditionalColumns() (rv any) {
	if c != nil {
		return c.AdditionalColumns
	}
	return
}

func (c *CassandraSource) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CassandraSource) GetConsistencyLevel() (rv *CassandraSourceReadConsistencyLevels) {
	if c != nil {
		return c.ConsistencyLevel
	}
	return
}

func (c *CassandraSource) GetMaxConcurrentConnections() (rv any) {
	if c != nil {
		return c.MaxConcurrentConnections
	}
	return
}

func (c *CassandraSource) GetQuery() (rv any) {
	if c != nil {
		return c.Query
	}
	return
}

func (c *CassandraSource) GetQueryTimeout() (rv any) {
	if c != nil {
		return c.QueryTimeout
	}
	return
}

func (c *CassandraSource) GetSourceRetryCount() (rv any) {
	if c != nil {
		return c.SourceRetryCount
	}
	return
}

func (c *CassandraSource) GetSourceRetryWait() (rv any) {
	if c != nil {
		return c.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type CassandraSource.
func (c *CassandraSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     c.AdditionalProperties,
		MaxConcurrentConnections: c.MaxConcurrentConnections,
		SourceRetryCount:         c.SourceRetryCount,
		SourceRetryWait:          c.SourceRetryWait,
		Type:                     c.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type CassandraSource.
func (c *CassandraSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        c.AdditionalColumns,
		AdditionalProperties:     c.AdditionalProperties,
		MaxConcurrentConnections: c.MaxConcurrentConnections,
		QueryTimeout:             c.QueryTimeout,
		SourceRetryCount:         c.SourceRetryCount,
		SourceRetryWait:          c.SourceRetryWait,
		Type:                     c.Type,
	}
}

// CassandraTableDataset - The Cassandra database dataset.
type CassandraTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Cassandra dataset properties.
	TypeProperties *CassandraTableDatasetTypeProperties
}

func (c *CassandraTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if c != nil {
		return c.LinkedServiceName
	}
	return
}

func (c *CassandraTableDataset) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CassandraTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CassandraTableDataset) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *CassandraTableDataset) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CassandraTableDataset) GetFolder() (rv *DatasetFolder) {
	if c != nil {
		return c.Folder
	}
	return
}

func (c *CassandraTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

func (c *CassandraTableDataset) GetSchema() (rv any) {
	if c != nil {
		return c.Schema
	}
	return
}

func (c *CassandraTableDataset) GetStructure() (rv any) {
	if c != nil {
		return c.Structure
	}
	return
}

func (c *CassandraTableDataset) GetTypeProperties() (rv *CassandraTableDatasetTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type CassandraTableDataset.
func (c *CassandraTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		Description:          c.Description,
		Folder:               c.Folder,
		LinkedServiceName:    c.LinkedServiceName,
		Parameters:           c.Parameters,
		Schema:               c.Schema,
		Structure:            c.Structure,
		Type:                 c.Type,
	}
}

// CassandraTableDatasetTypeProperties - Cassandra dataset properties.
type CassandraTableDatasetTypeProperties struct {
	// The keyspace of the Cassandra database. Type: string (or Expression with resultType string).
	Keyspace any

	// The table name of the Cassandra database. Type: string (or Expression with resultType string).
	TableName any
}

func (c *CassandraTableDatasetTypeProperties) GetKeyspace() (rv any) {
	if c != nil {
		return c.Keyspace
	}
	return
}

func (c *CassandraTableDatasetTypeProperties) GetTableName() (rv any) {
	if c != nil {
		return c.TableName
	}
	return
}

// ChainingTrigger - Trigger that allows the referenced pipeline to depend on other pipeline runs based on runDimension Name/Value
// pairs. Upstream pipelines should declare the same runDimension Name and their runs should
// have the values for those runDimensions. The referenced pipeline run would be triggered if the values for the runDimension
// match for all upstream pipeline runs.
type ChainingTrigger struct {
	// REQUIRED; Pipeline for which runs are created when all upstream pipelines complete successfully.
	Pipeline *TriggerPipelineReference

	// REQUIRED; Trigger type.
	Type *string

	// REQUIRED; Chaining Trigger properties.
	TypeProperties *ChainingTriggerTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the trigger.
	Annotations []any

	// Trigger description.
	Description *string

	// READ-ONLY; Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState *TriggerRuntimeState
}

func (c *ChainingTrigger) GetPipeline() (rv *TriggerPipelineReference) {
	if c != nil {
		return c.Pipeline
	}
	return
}

func (c *ChainingTrigger) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *ChainingTrigger) GetTypeProperties() (rv *ChainingTriggerTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

func (c *ChainingTrigger) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *ChainingTrigger) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *ChainingTrigger) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *ChainingTrigger) GetRuntimeState() (rv *TriggerRuntimeState) {
	if c != nil {
		return c.RuntimeState
	}
	return
}

// GetTrigger implements the TriggerClassification interface for type ChainingTrigger.
func (c *ChainingTrigger) GetTrigger() *Trigger {
	return &Trigger{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		Description:          c.Description,
		RuntimeState:         c.RuntimeState,
		Type:                 c.Type,
	}
}

// ChainingTriggerTypeProperties - Chaining Trigger properties.
type ChainingTriggerTypeProperties struct {
	// REQUIRED; Upstream Pipelines.
	DependsOn []*PipelineReference

	// REQUIRED; Run Dimension property that needs to be emitted by upstream pipelines.
	RunDimension *string
}

func (c *ChainingTriggerTypeProperties) GetDependsOn() (rv []*PipelineReference) {
	if c != nil {
		return c.DependsOn
	}
	return
}

func (c *ChainingTriggerTypeProperties) GetRunDimension() (rv string) {
	if c != nil && c.RunDimension != nil {
		return *c.RunDimension
	}
	return
}

// CommonDataServiceForAppsEntityDataset - The Common Data Service for Apps entity dataset.
type CommonDataServiceForAppsEntityDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Common Data Service for Apps entity dataset properties.
	TypeProperties *CommonDataServiceForAppsEntityDatasetTypeProperties
}

func (c *CommonDataServiceForAppsEntityDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if c != nil {
		return c.LinkedServiceName
	}
	return
}

func (c *CommonDataServiceForAppsEntityDataset) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CommonDataServiceForAppsEntityDataset) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CommonDataServiceForAppsEntityDataset) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *CommonDataServiceForAppsEntityDataset) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CommonDataServiceForAppsEntityDataset) GetFolder() (rv *DatasetFolder) {
	if c != nil {
		return c.Folder
	}
	return
}

func (c *CommonDataServiceForAppsEntityDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

func (c *CommonDataServiceForAppsEntityDataset) GetSchema() (rv any) {
	if c != nil {
		return c.Schema
	}
	return
}

func (c *CommonDataServiceForAppsEntityDataset) GetStructure() (rv any) {
	if c != nil {
		return c.Structure
	}
	return
}

func (c *CommonDataServiceForAppsEntityDataset) GetTypeProperties() (rv *CommonDataServiceForAppsEntityDatasetTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type CommonDataServiceForAppsEntityDataset.
func (c *CommonDataServiceForAppsEntityDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		Description:          c.Description,
		Folder:               c.Folder,
		LinkedServiceName:    c.LinkedServiceName,
		Parameters:           c.Parameters,
		Schema:               c.Schema,
		Structure:            c.Structure,
		Type:                 c.Type,
	}
}

// CommonDataServiceForAppsEntityDatasetTypeProperties - Common Data Service for Apps entity dataset properties.
type CommonDataServiceForAppsEntityDatasetTypeProperties struct {
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName any
}

func (c *CommonDataServiceForAppsEntityDatasetTypeProperties) GetEntityName() (rv any) {
	if c != nil {
		return c.EntityName
	}
	return
}

// CommonDataServiceForAppsLinkedService - Common Data Service for Apps linked service.
type CommonDataServiceForAppsLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Common Data Service for Apps linked service properties.
	TypeProperties *CommonDataServiceForAppsLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (c *CommonDataServiceForAppsLinkedService) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CommonDataServiceForAppsLinkedService) GetTypeProperties() (rv *CommonDataServiceForAppsLinkedServiceTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

func (c *CommonDataServiceForAppsLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CommonDataServiceForAppsLinkedService) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *CommonDataServiceForAppsLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if c != nil {
		return c.ConnectVia
	}
	return
}

func (c *CommonDataServiceForAppsLinkedService) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CommonDataServiceForAppsLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type CommonDataServiceForAppsLinkedService.
func (c *CommonDataServiceForAppsLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		ConnectVia:           c.ConnectVia,
		Description:          c.Description,
		Parameters:           c.Parameters,
		Type:                 c.Type,
	}
}

// CommonDataServiceForAppsLinkedServiceTypeProperties - Common Data Service for Apps linked service properties.
type CommonDataServiceForAppsLinkedServiceTypeProperties struct {
	// REQUIRED; The authentication type to connect to Common Data Service for Apps server. 'Office365' for online scenario, 'Ifd'
	// for on-premises with Ifd scenario. 'AADServicePrincipal' for Server-To-Server
	// authentication in online scenario. Type: string (or Expression with resultType string).
	AuthenticationType any

	// REQUIRED; The deployment type of the Common Data Service for Apps instance. 'Online' for Common Data Service for Apps Online
	// and 'OnPremisesWithIfd' for Common Data Service for Apps on-premises with Ifd. Type:
	// string (or Expression with resultType string).
	DeploymentType any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The host name of the on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed
	// for online. Type: string (or Expression with resultType string).
	HostName any

	// The organization name of the Common Data Service for Apps instance. The property is required for on-prem and required for
	// online when there are more than one Common Data Service for Apps instances
	// associated with the user. Type: string (or Expression with resultType string).
	OrganizationName any

	// Password to access the Common Data Service for Apps instance.
	Password SecretBaseClassification

	// The port of on-premises Common Data Service for Apps server. The property is required for on-prem and not allowed for online.
	// Default is 443. Type: integer (or Expression with resultType integer),
	// minimum: 0.
	Port any

	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey',
	// servicePrincipalCredential can be SecureString or
	// AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can
	// only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential SecretBaseClassification

	// A string from ServicePrincipalCredentialEnum or an expression
	ServicePrincipalCredentialType any

	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression
	// with resultType string).
	ServicePrincipalID any

	// The URL to the Microsoft Common Data Service for Apps server. The property is required for on-line and not allowed for
	// on-prem. Type: string (or Expression with resultType string).
	ServiceURI any

	// User name to access the Common Data Service for Apps instance. Type: string (or Expression with resultType string).
	Username any
}

func (c *CommonDataServiceForAppsLinkedServiceTypeProperties) GetAuthenticationType() (rv any) {
	if c != nil {
		return c.AuthenticationType
	}
	return
}

func (c *CommonDataServiceForAppsLinkedServiceTypeProperties) GetDeploymentType() (rv any) {
	if c != nil {
		return c.DeploymentType
	}
	return
}

func (c *CommonDataServiceForAppsLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if c != nil {
		return c.EncryptedCredential
	}
	return
}

func (c *CommonDataServiceForAppsLinkedServiceTypeProperties) GetHostName() (rv any) {
	if c != nil {
		return c.HostName
	}
	return
}

func (c *CommonDataServiceForAppsLinkedServiceTypeProperties) GetOrganizationName() (rv any) {
	if c != nil {
		return c.OrganizationName
	}
	return
}

func (c *CommonDataServiceForAppsLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if c != nil {
		return c.Password
	}
	return
}

func (c *CommonDataServiceForAppsLinkedServiceTypeProperties) GetPort() (rv any) {
	if c != nil {
		return c.Port
	}
	return
}

func (c *CommonDataServiceForAppsLinkedServiceTypeProperties) GetServicePrincipalCredential() (rv SecretBaseClassification) {
	if c != nil {
		return c.ServicePrincipalCredential
	}
	return
}

func (c *CommonDataServiceForAppsLinkedServiceTypeProperties) GetServicePrincipalCredentialType() (rv any) {
	if c != nil {
		return c.ServicePrincipalCredentialType
	}
	return
}

func (c *CommonDataServiceForAppsLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if c != nil {
		return c.ServicePrincipalID
	}
	return
}

func (c *CommonDataServiceForAppsLinkedServiceTypeProperties) GetServiceURI() (rv any) {
	if c != nil {
		return c.ServiceURI
	}
	return
}

func (c *CommonDataServiceForAppsLinkedServiceTypeProperties) GetUsername() (rv any) {
	if c != nil {
		return c.Username
	}
	return
}

// CommonDataServiceForAppsSink - A copy activity Common Data Service for Apps sink.
type CommonDataServiceForAppsSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// REQUIRED; The write behavior for the operation.
	WriteBehavior *DynamicsSinkWriteBehavior

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType
	// string).
	AlternateKeyName any

	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default
	// is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (c *CommonDataServiceForAppsSink) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CommonDataServiceForAppsSink) GetWriteBehavior() (rv *DynamicsSinkWriteBehavior) {
	if c != nil {
		return c.WriteBehavior
	}
	return
}

func (c *CommonDataServiceForAppsSink) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CommonDataServiceForAppsSink) GetAlternateKeyName() (rv any) {
	if c != nil {
		return c.AlternateKeyName
	}
	return
}

func (c *CommonDataServiceForAppsSink) GetIgnoreNullValues() (rv any) {
	if c != nil {
		return c.IgnoreNullValues
	}
	return
}

func (c *CommonDataServiceForAppsSink) GetMaxConcurrentConnections() (rv any) {
	if c != nil {
		return c.MaxConcurrentConnections
	}
	return
}

func (c *CommonDataServiceForAppsSink) GetSinkRetryCount() (rv any) {
	if c != nil {
		return c.SinkRetryCount
	}
	return
}

func (c *CommonDataServiceForAppsSink) GetSinkRetryWait() (rv any) {
	if c != nil {
		return c.SinkRetryWait
	}
	return
}

func (c *CommonDataServiceForAppsSink) GetWriteBatchSize() (rv any) {
	if c != nil {
		return c.WriteBatchSize
	}
	return
}

func (c *CommonDataServiceForAppsSink) GetWriteBatchTimeout() (rv any) {
	if c != nil {
		return c.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type CommonDataServiceForAppsSink.
func (c *CommonDataServiceForAppsSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     c.AdditionalProperties,
		MaxConcurrentConnections: c.MaxConcurrentConnections,
		SinkRetryCount:           c.SinkRetryCount,
		SinkRetryWait:            c.SinkRetryWait,
		Type:                     c.Type,
		WriteBatchSize:           c.WriteBatchSize,
		WriteBatchTimeout:        c.WriteBatchTimeout,
	}
}

// CommonDataServiceForAppsSource - A copy activity Common Data Service for Apps source.
type CommonDataServiceForAppsSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// FetchXML is a proprietary query language that is used in Microsoft Common Data Service for Apps (online & on-premises).
	// Type: string (or Expression with resultType string).
	Query any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (c *CommonDataServiceForAppsSource) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CommonDataServiceForAppsSource) GetAdditionalColumns() (rv any) {
	if c != nil {
		return c.AdditionalColumns
	}
	return
}

func (c *CommonDataServiceForAppsSource) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CommonDataServiceForAppsSource) GetMaxConcurrentConnections() (rv any) {
	if c != nil {
		return c.MaxConcurrentConnections
	}
	return
}

func (c *CommonDataServiceForAppsSource) GetQuery() (rv any) {
	if c != nil {
		return c.Query
	}
	return
}

func (c *CommonDataServiceForAppsSource) GetSourceRetryCount() (rv any) {
	if c != nil {
		return c.SourceRetryCount
	}
	return
}

func (c *CommonDataServiceForAppsSource) GetSourceRetryWait() (rv any) {
	if c != nil {
		return c.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type CommonDataServiceForAppsSource.
func (c *CommonDataServiceForAppsSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     c.AdditionalProperties,
		MaxConcurrentConnections: c.MaxConcurrentConnections,
		SourceRetryCount:         c.SourceRetryCount,
		SourceRetryWait:          c.SourceRetryWait,
		Type:                     c.Type,
	}
}

// CompressionReadSettings - Compression read settings.
type CompressionReadSettings struct {
	// REQUIRED; The Compression setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

func (c *CompressionReadSettings) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CompressionReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

// GetCompressionReadSettings implements the CompressionReadSettingsClassification interface for type CompressionReadSettings.
func (c *CompressionReadSettings) GetCompressionReadSettings() *CompressionReadSettings { return c }

// ConcurLinkedService - Concur Service linked service.
type ConcurLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Concur Service linked service properties.
	TypeProperties *ConcurLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (c *ConcurLinkedService) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *ConcurLinkedService) GetTypeProperties() (rv *ConcurLinkedServiceTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

func (c *ConcurLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *ConcurLinkedService) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *ConcurLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if c != nil {
		return c.ConnectVia
	}
	return
}

func (c *ConcurLinkedService) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *ConcurLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type ConcurLinkedService.
func (c *ConcurLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		ConnectVia:           c.ConnectVia,
		Description:          c.Description,
		Parameters:           c.Parameters,
		Type:                 c.Type,
	}
}

// ConcurLinkedServiceTypeProperties - Concur Service linked service properties.
type ConcurLinkedServiceTypeProperties struct {
	// REQUIRED; Application client_id supplied by Concur App Management.
	ClientID any

	// REQUIRED; The user name that you use to access Concur Service.
	Username any

	// Properties used to connect to Concur. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The password corresponding to the user name that you provided in the username field.
	Password SecretBaseClassification

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true.
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification any
}

func (c *ConcurLinkedServiceTypeProperties) GetClientID() (rv any) {
	if c != nil {
		return c.ClientID
	}
	return
}

func (c *ConcurLinkedServiceTypeProperties) GetUsername() (rv any) {
	if c != nil {
		return c.Username
	}
	return
}

func (c *ConcurLinkedServiceTypeProperties) GetConnectionProperties() (rv any) {
	if c != nil {
		return c.ConnectionProperties
	}
	return
}

func (c *ConcurLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if c != nil {
		return c.EncryptedCredential
	}
	return
}

func (c *ConcurLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if c != nil {
		return c.Password
	}
	return
}

func (c *ConcurLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if c != nil {
		return c.UseEncryptedEndpoints
	}
	return
}

func (c *ConcurLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if c != nil {
		return c.UseHostVerification
	}
	return
}

func (c *ConcurLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if c != nil {
		return c.UsePeerVerification
	}
	return
}

// ConcurObjectDataset - Concur Service dataset.
type ConcurObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (c *ConcurObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if c != nil {
		return c.LinkedServiceName
	}
	return
}

func (c *ConcurObjectDataset) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *ConcurObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *ConcurObjectDataset) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *ConcurObjectDataset) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *ConcurObjectDataset) GetFolder() (rv *DatasetFolder) {
	if c != nil {
		return c.Folder
	}
	return
}

func (c *ConcurObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

func (c *ConcurObjectDataset) GetSchema() (rv any) {
	if c != nil {
		return c.Schema
	}
	return
}

func (c *ConcurObjectDataset) GetStructure() (rv any) {
	if c != nil {
		return c.Structure
	}
	return
}

func (c *ConcurObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type ConcurObjectDataset.
func (c *ConcurObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		Description:          c.Description,
		Folder:               c.Folder,
		LinkedServiceName:    c.LinkedServiceName,
		Parameters:           c.Parameters,
		Schema:               c.Schema,
		Structure:            c.Structure,
		Type:                 c.Type,
	}
}

// ConcurSource - A copy activity Concur Service source.
type ConcurSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (c *ConcurSource) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *ConcurSource) GetAdditionalColumns() (rv any) {
	if c != nil {
		return c.AdditionalColumns
	}
	return
}

func (c *ConcurSource) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *ConcurSource) GetMaxConcurrentConnections() (rv any) {
	if c != nil {
		return c.MaxConcurrentConnections
	}
	return
}

func (c *ConcurSource) GetQuery() (rv any) {
	if c != nil {
		return c.Query
	}
	return
}

func (c *ConcurSource) GetQueryTimeout() (rv any) {
	if c != nil {
		return c.QueryTimeout
	}
	return
}

func (c *ConcurSource) GetSourceRetryCount() (rv any) {
	if c != nil {
		return c.SourceRetryCount
	}
	return
}

func (c *ConcurSource) GetSourceRetryWait() (rv any) {
	if c != nil {
		return c.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type ConcurSource.
func (c *ConcurSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     c.AdditionalProperties,
		MaxConcurrentConnections: c.MaxConcurrentConnections,
		SourceRetryCount:         c.SourceRetryCount,
		SourceRetryWait:          c.SourceRetryWait,
		Type:                     c.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type ConcurSource.
func (c *ConcurSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        c.AdditionalColumns,
		AdditionalProperties:     c.AdditionalProperties,
		MaxConcurrentConnections: c.MaxConcurrentConnections,
		QueryTimeout:             c.QueryTimeout,
		SourceRetryCount:         c.SourceRetryCount,
		SourceRetryWait:          c.SourceRetryWait,
		Type:                     c.Type,
	}
}

// ControlActivity - Base class for all control activities like IfCondition, ForEach , Until.
type ControlActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (c *ControlActivity) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *ControlActivity) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *ControlActivity) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *ControlActivity) GetDependsOn() (rv []*ActivityDependency) {
	if c != nil {
		return c.DependsOn
	}
	return
}

func (c *ControlActivity) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *ControlActivity) GetUserProperties() (rv []*UserProperty) {
	if c != nil {
		return c.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type ControlActivity.
func (c *ControlActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: c.AdditionalProperties,
		DependsOn:            c.DependsOn,
		Description:          c.Description,
		Name:                 c.Name,
		Type:                 c.Type,
		UserProperties:       c.UserProperties,
	}
}

// GetControlActivity implements the ControlActivityClassification interface for type ControlActivity.
func (c *ControlActivity) GetControlActivity() *ControlActivity { return c }

// CopyActivity - Copy activity.
type CopyActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Copy activity properties.
	TypeProperties *CopyActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// List of inputs for the activity.
	Inputs []*DatasetReference

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// List of outputs for the activity.
	Outputs []*DatasetReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (c *CopyActivity) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CopyActivity) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CopyActivity) GetTypeProperties() (rv *CopyActivityTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

func (c *CopyActivity) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CopyActivity) GetDependsOn() (rv []*ActivityDependency) {
	if c != nil {
		return c.DependsOn
	}
	return
}

func (c *CopyActivity) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CopyActivity) GetInputs() (rv []*DatasetReference) {
	if c != nil {
		return c.Inputs
	}
	return
}

func (c *CopyActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if c != nil {
		return c.LinkedServiceName
	}
	return
}

func (c *CopyActivity) GetOutputs() (rv []*DatasetReference) {
	if c != nil {
		return c.Outputs
	}
	return
}

func (c *CopyActivity) GetPolicy() (rv *ActivityPolicy) {
	if c != nil {
		return c.Policy
	}
	return
}

func (c *CopyActivity) GetUserProperties() (rv []*UserProperty) {
	if c != nil {
		return c.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type CopyActivity.
func (c *CopyActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: c.AdditionalProperties,
		DependsOn:            c.DependsOn,
		Description:          c.Description,
		Name:                 c.Name,
		Type:                 c.Type,
		UserProperties:       c.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type CopyActivity.
func (c *CopyActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: c.AdditionalProperties,
		DependsOn:            c.DependsOn,
		Description:          c.Description,
		LinkedServiceName:    c.LinkedServiceName,
		Name:                 c.Name,
		Policy:               c.Policy,
		Type:                 c.Type,
		UserProperties:       c.UserProperties,
	}
}

// CopyActivityLogSettings - Settings for copy activity log.
type CopyActivityLogSettings struct {
	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging any

	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel any
}

func (c *CopyActivityLogSettings) GetEnableReliableLogging() (rv any) {
	if c != nil {
		return c.EnableReliableLogging
	}
	return
}

func (c *CopyActivityLogSettings) GetLogLevel() (rv any) {
	if c != nil {
		return c.LogLevel
	}
	return
}

// CopyActivityTypeProperties - Copy activity properties.
type CopyActivityTypeProperties struct {
	// REQUIRED; Copy activity sink.
	Sink CopySinkClassification

	// REQUIRED; Copy activity source.
	Source CopySourceClassification

	// Maximum number of data integration units that can be used to perform this data movement. Type: integer (or Expression with
	// resultType integer), minimum: 0.
	DataIntegrationUnits any

	// Whether to skip incompatible row. Default value is false. Type: boolean (or Expression with resultType boolean).
	EnableSkipIncompatibleRow any

	// Specifies whether to copy data via an interim staging. Default value is false. Type: boolean (or Expression with resultType
	// boolean).
	EnableStaging any

	// Log settings customer needs provide when enabling log.
	LogSettings *LogSettings

	// (Deprecated. Please use LogSettings) Log storage settings customer need to provide when enabling session log.
	LogStorageSettings *LogStorageSettings

	// Maximum number of concurrent sessions opened on the source or sink to avoid overloading the data store. Type: integer (or
	// Expression with resultType integer), minimum: 0.
	ParallelCopies any

	// Preserve rules.
	Preserve []any

	// Preserve Rules.
	PreserveRules []any

	// Redirect incompatible row settings when EnableSkipIncompatibleRow is true.
	RedirectIncompatibleRowSettings *RedirectIncompatibleRowSettings

	// Specify the fault tolerance for data consistency.
	SkipErrorFile *SkipErrorFile

	// Specifies interim staging settings when EnableStaging is true.
	StagingSettings *StagingSettings

	// Copy activity translator. If not specified, tabular translator is used.
	Translator any

	// Whether to enable Data Consistency validation. Type: boolean (or Expression with resultType boolean).
	ValidateDataConsistency any
}

func (c *CopyActivityTypeProperties) GetSink() (rv CopySinkClassification) {
	if c != nil {
		return c.Sink
	}
	return
}

func (c *CopyActivityTypeProperties) GetSource() (rv CopySourceClassification) {
	if c != nil {
		return c.Source
	}
	return
}

func (c *CopyActivityTypeProperties) GetDataIntegrationUnits() (rv any) {
	if c != nil {
		return c.DataIntegrationUnits
	}
	return
}

func (c *CopyActivityTypeProperties) GetEnableSkipIncompatibleRow() (rv any) {
	if c != nil {
		return c.EnableSkipIncompatibleRow
	}
	return
}

func (c *CopyActivityTypeProperties) GetEnableStaging() (rv any) {
	if c != nil {
		return c.EnableStaging
	}
	return
}

func (c *CopyActivityTypeProperties) GetLogSettings() (rv *LogSettings) {
	if c != nil {
		return c.LogSettings
	}
	return
}

func (c *CopyActivityTypeProperties) GetLogStorageSettings() (rv *LogStorageSettings) {
	if c != nil {
		return c.LogStorageSettings
	}
	return
}

func (c *CopyActivityTypeProperties) GetParallelCopies() (rv any) {
	if c != nil {
		return c.ParallelCopies
	}
	return
}

func (c *CopyActivityTypeProperties) GetPreserve() (rv []any) {
	if c != nil {
		return c.Preserve
	}
	return
}

func (c *CopyActivityTypeProperties) GetPreserveRules() (rv []any) {
	if c != nil {
		return c.PreserveRules
	}
	return
}

func (c *CopyActivityTypeProperties) GetRedirectIncompatibleRowSettings() (rv *RedirectIncompatibleRowSettings) {
	if c != nil {
		return c.RedirectIncompatibleRowSettings
	}
	return
}

func (c *CopyActivityTypeProperties) GetSkipErrorFile() (rv *SkipErrorFile) {
	if c != nil {
		return c.SkipErrorFile
	}
	return
}

func (c *CopyActivityTypeProperties) GetStagingSettings() (rv *StagingSettings) {
	if c != nil {
		return c.StagingSettings
	}
	return
}

func (c *CopyActivityTypeProperties) GetTranslator() (rv any) {
	if c != nil {
		return c.Translator
	}
	return
}

func (c *CopyActivityTypeProperties) GetValidateDataConsistency() (rv any) {
	if c != nil {
		return c.ValidateDataConsistency
	}
	return
}

// CopySink - A copy activity sink.
type CopySink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (c *CopySink) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CopySink) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CopySink) GetMaxConcurrentConnections() (rv any) {
	if c != nil {
		return c.MaxConcurrentConnections
	}
	return
}

func (c *CopySink) GetSinkRetryCount() (rv any) {
	if c != nil {
		return c.SinkRetryCount
	}
	return
}

func (c *CopySink) GetSinkRetryWait() (rv any) {
	if c != nil {
		return c.SinkRetryWait
	}
	return
}

func (c *CopySink) GetWriteBatchSize() (rv any) {
	if c != nil {
		return c.WriteBatchSize
	}
	return
}

func (c *CopySink) GetWriteBatchTimeout() (rv any) {
	if c != nil {
		return c.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type CopySink.
func (c *CopySink) GetCopySink() *CopySink { return c }

// CopySource - A copy activity source.
type CopySource struct {
	// REQUIRED; Copy source type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (c *CopySource) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CopySource) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CopySource) GetMaxConcurrentConnections() (rv any) {
	if c != nil {
		return c.MaxConcurrentConnections
	}
	return
}

func (c *CopySource) GetSourceRetryCount() (rv any) {
	if c != nil {
		return c.SourceRetryCount
	}
	return
}

func (c *CopySource) GetSourceRetryWait() (rv any) {
	if c != nil {
		return c.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type CopySource.
func (c *CopySource) GetCopySource() *CopySource { return c }

// CopyTranslator - A copy activity translator.
type CopyTranslator struct {
	// REQUIRED; Copy translator type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

func (c *CopyTranslator) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CopyTranslator) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

// GetCopyTranslator implements the CopyTranslatorClassification interface for type CopyTranslator.
func (c *CopyTranslator) GetCopyTranslator() *CopyTranslator { return c }

// CosmosDbLinkedService - Microsoft Azure Cosmos Database (CosmosDB) linked service.
type CosmosDbLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; CosmosDB linked service properties.
	TypeProperties *CosmosDbLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (c *CosmosDbLinkedService) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CosmosDbLinkedService) GetTypeProperties() (rv *CosmosDbLinkedServiceTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

func (c *CosmosDbLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CosmosDbLinkedService) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *CosmosDbLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if c != nil {
		return c.ConnectVia
	}
	return
}

func (c *CosmosDbLinkedService) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CosmosDbLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type CosmosDbLinkedService.
func (c *CosmosDbLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		ConnectVia:           c.ConnectVia,
		Description:          c.Description,
		Parameters:           c.Parameters,
		Type:                 c.Type,
	}
}

// CosmosDbLinkedServiceTypeProperties - CosmosDB linked service properties.
type CosmosDbLinkedServiceTypeProperties struct {
	// The endpoint of the Azure CosmosDB account. Type: string (or Expression with resultType string)
	AccountEndpoint any

	// The account key of the Azure CosmosDB account. Type: SecureString or AzureKeyVaultSecretReference.
	AccountKey SecretBaseClassification

	// The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The name of the database. Type: string (or Expression with resultType string)
	Database any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any
}

func (c *CosmosDbLinkedServiceTypeProperties) GetAccountEndpoint() (rv any) {
	if c != nil {
		return c.AccountEndpoint
	}
	return
}

func (c *CosmosDbLinkedServiceTypeProperties) GetAccountKey() (rv SecretBaseClassification) {
	if c != nil {
		return c.AccountKey
	}
	return
}

func (c *CosmosDbLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if c != nil {
		return c.ConnectionString
	}
	return
}

func (c *CosmosDbLinkedServiceTypeProperties) GetDatabase() (rv any) {
	if c != nil {
		return c.Database
	}
	return
}

func (c *CosmosDbLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if c != nil {
		return c.EncryptedCredential
	}
	return
}

// CosmosDbMongoDbAPICollectionDataset - The CosmosDB (MongoDB API) database dataset.
type CosmosDbMongoDbAPICollectionDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; CosmosDB (MongoDB API) database dataset properties.
	TypeProperties *CosmosDbMongoDbAPICollectionDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (c *CosmosDbMongoDbAPICollectionDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if c != nil {
		return c.LinkedServiceName
	}
	return
}

func (c *CosmosDbMongoDbAPICollectionDataset) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CosmosDbMongoDbAPICollectionDataset) GetTypeProperties() (rv *CosmosDbMongoDbAPICollectionDatasetTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

func (c *CosmosDbMongoDbAPICollectionDataset) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CosmosDbMongoDbAPICollectionDataset) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *CosmosDbMongoDbAPICollectionDataset) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CosmosDbMongoDbAPICollectionDataset) GetFolder() (rv *DatasetFolder) {
	if c != nil {
		return c.Folder
	}
	return
}

func (c *CosmosDbMongoDbAPICollectionDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

func (c *CosmosDbMongoDbAPICollectionDataset) GetSchema() (rv any) {
	if c != nil {
		return c.Schema
	}
	return
}

func (c *CosmosDbMongoDbAPICollectionDataset) GetStructure() (rv any) {
	if c != nil {
		return c.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type CosmosDbMongoDbAPICollectionDataset.
func (c *CosmosDbMongoDbAPICollectionDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		Description:          c.Description,
		Folder:               c.Folder,
		LinkedServiceName:    c.LinkedServiceName,
		Parameters:           c.Parameters,
		Schema:               c.Schema,
		Structure:            c.Structure,
		Type:                 c.Type,
	}
}

// CosmosDbMongoDbAPICollectionDatasetTypeProperties - CosmosDB (MongoDB API) database dataset properties.
type CosmosDbMongoDbAPICollectionDatasetTypeProperties struct {
	// REQUIRED; The collection name of the CosmosDB (MongoDB API) database. Type: string (or Expression with resultType string).
	Collection any
}

func (c *CosmosDbMongoDbAPICollectionDatasetTypeProperties) GetCollection() (rv any) {
	if c != nil {
		return c.Collection
	}
	return
}

// CosmosDbMongoDbAPILinkedService - Linked service for CosmosDB (MongoDB API) data source.
type CosmosDbMongoDbAPILinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; CosmosDB (MongoDB API) linked service properties.
	TypeProperties *CosmosDbMongoDbAPILinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (c *CosmosDbMongoDbAPILinkedService) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CosmosDbMongoDbAPILinkedService) GetTypeProperties() (rv *CosmosDbMongoDbAPILinkedServiceTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

func (c *CosmosDbMongoDbAPILinkedService) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CosmosDbMongoDbAPILinkedService) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *CosmosDbMongoDbAPILinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if c != nil {
		return c.ConnectVia
	}
	return
}

func (c *CosmosDbMongoDbAPILinkedService) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CosmosDbMongoDbAPILinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type CosmosDbMongoDbAPILinkedService.
func (c *CosmosDbMongoDbAPILinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		ConnectVia:           c.ConnectVia,
		Description:          c.Description,
		Parameters:           c.Parameters,
		Type:                 c.Type,
	}
}

// CosmosDbMongoDbAPILinkedServiceTypeProperties - CosmosDB (MongoDB API) linked service properties.
type CosmosDbMongoDbAPILinkedServiceTypeProperties struct {
	// REQUIRED; The CosmosDB (MongoDB API) connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type:
	// string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// REQUIRED; The name of the CosmosDB (MongoDB API) database that you want to access. Type: string (or Expression with resultType
	// string).
	Database any
}

func (c *CosmosDbMongoDbAPILinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if c != nil {
		return c.ConnectionString
	}
	return
}

func (c *CosmosDbMongoDbAPILinkedServiceTypeProperties) GetDatabase() (rv any) {
	if c != nil {
		return c.Database
	}
	return
}

// CosmosDbMongoDbAPISink - A copy activity sink for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbAPISink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any

	// Specifies whether the document with same key to be overwritten (upsert) rather than throw exception (insert). The default
	// value is "insert". Type: string (or Expression with resultType string). Type:
	// string (or Expression with resultType string).
	WriteBehavior any
}

func (c *CosmosDbMongoDbAPISink) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CosmosDbMongoDbAPISink) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CosmosDbMongoDbAPISink) GetMaxConcurrentConnections() (rv any) {
	if c != nil {
		return c.MaxConcurrentConnections
	}
	return
}

func (c *CosmosDbMongoDbAPISink) GetSinkRetryCount() (rv any) {
	if c != nil {
		return c.SinkRetryCount
	}
	return
}

func (c *CosmosDbMongoDbAPISink) GetSinkRetryWait() (rv any) {
	if c != nil {
		return c.SinkRetryWait
	}
	return
}

func (c *CosmosDbMongoDbAPISink) GetWriteBatchSize() (rv any) {
	if c != nil {
		return c.WriteBatchSize
	}
	return
}

func (c *CosmosDbMongoDbAPISink) GetWriteBatchTimeout() (rv any) {
	if c != nil {
		return c.WriteBatchTimeout
	}
	return
}

func (c *CosmosDbMongoDbAPISink) GetWriteBehavior() (rv any) {
	if c != nil {
		return c.WriteBehavior
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type CosmosDbMongoDbAPISink.
func (c *CosmosDbMongoDbAPISink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     c.AdditionalProperties,
		MaxConcurrentConnections: c.MaxConcurrentConnections,
		SinkRetryCount:           c.SinkRetryCount,
		SinkRetryWait:            c.SinkRetryWait,
		Type:                     c.Type,
		WriteBatchSize:           c.WriteBatchSize,
		WriteBatchTimeout:        c.WriteBatchTimeout,
	}
}

// CosmosDbMongoDbAPISource - A copy activity source for a CosmosDB (MongoDB API) database.
type CosmosDbMongoDbAPISource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying
	// the batch size will not affect the user or the application. This property's
	// main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize any

	// Cursor methods for Mongodb query.
	CursorMethods *MongoDbCursorMethodsProperties

	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass
	// an empty document ({}). Type: string (or Expression with resultType string).
	Filter any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (c *CosmosDbMongoDbAPISource) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CosmosDbMongoDbAPISource) GetAdditionalColumns() (rv any) {
	if c != nil {
		return c.AdditionalColumns
	}
	return
}

func (c *CosmosDbMongoDbAPISource) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CosmosDbMongoDbAPISource) GetBatchSize() (rv any) {
	if c != nil {
		return c.BatchSize
	}
	return
}

func (c *CosmosDbMongoDbAPISource) GetCursorMethods() (rv *MongoDbCursorMethodsProperties) {
	if c != nil {
		return c.CursorMethods
	}
	return
}

func (c *CosmosDbMongoDbAPISource) GetFilter() (rv any) {
	if c != nil {
		return c.Filter
	}
	return
}

func (c *CosmosDbMongoDbAPISource) GetMaxConcurrentConnections() (rv any) {
	if c != nil {
		return c.MaxConcurrentConnections
	}
	return
}

func (c *CosmosDbMongoDbAPISource) GetQueryTimeout() (rv any) {
	if c != nil {
		return c.QueryTimeout
	}
	return
}

func (c *CosmosDbMongoDbAPISource) GetSourceRetryCount() (rv any) {
	if c != nil {
		return c.SourceRetryCount
	}
	return
}

func (c *CosmosDbMongoDbAPISource) GetSourceRetryWait() (rv any) {
	if c != nil {
		return c.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type CosmosDbMongoDbAPISource.
func (c *CosmosDbMongoDbAPISource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     c.AdditionalProperties,
		MaxConcurrentConnections: c.MaxConcurrentConnections,
		SourceRetryCount:         c.SourceRetryCount,
		SourceRetryWait:          c.SourceRetryWait,
		Type:                     c.Type,
	}
}

// CosmosDbSQLAPICollectionDataset - Microsoft Azure CosmosDB (SQL API) Collection dataset.
type CosmosDbSQLAPICollectionDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; CosmosDB (SQL API) Collection dataset properties.
	TypeProperties *CosmosDbSQLAPICollectionDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (c *CosmosDbSQLAPICollectionDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if c != nil {
		return c.LinkedServiceName
	}
	return
}

func (c *CosmosDbSQLAPICollectionDataset) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CosmosDbSQLAPICollectionDataset) GetTypeProperties() (rv *CosmosDbSQLAPICollectionDatasetTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

func (c *CosmosDbSQLAPICollectionDataset) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CosmosDbSQLAPICollectionDataset) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *CosmosDbSQLAPICollectionDataset) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CosmosDbSQLAPICollectionDataset) GetFolder() (rv *DatasetFolder) {
	if c != nil {
		return c.Folder
	}
	return
}

func (c *CosmosDbSQLAPICollectionDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

func (c *CosmosDbSQLAPICollectionDataset) GetSchema() (rv any) {
	if c != nil {
		return c.Schema
	}
	return
}

func (c *CosmosDbSQLAPICollectionDataset) GetStructure() (rv any) {
	if c != nil {
		return c.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type CosmosDbSQLAPICollectionDataset.
func (c *CosmosDbSQLAPICollectionDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		Description:          c.Description,
		Folder:               c.Folder,
		LinkedServiceName:    c.LinkedServiceName,
		Parameters:           c.Parameters,
		Schema:               c.Schema,
		Structure:            c.Structure,
		Type:                 c.Type,
	}
}

// CosmosDbSQLAPICollectionDatasetTypeProperties - CosmosDB (SQL API) Collection dataset properties.
type CosmosDbSQLAPICollectionDatasetTypeProperties struct {
	// REQUIRED; CosmosDB (SQL API) collection name. Type: string (or Expression with resultType string).
	CollectionName any
}

func (c *CosmosDbSQLAPICollectionDatasetTypeProperties) GetCollectionName() (rv any) {
	if c != nil {
		return c.CollectionName
	}
	return
}

// CosmosDbSQLAPISink - A copy activity Azure CosmosDB (SQL API) Collection sink.
type CosmosDbSQLAPISink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any

	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert
	// and upsert.
	WriteBehavior any
}

func (c *CosmosDbSQLAPISink) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CosmosDbSQLAPISink) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CosmosDbSQLAPISink) GetMaxConcurrentConnections() (rv any) {
	if c != nil {
		return c.MaxConcurrentConnections
	}
	return
}

func (c *CosmosDbSQLAPISink) GetSinkRetryCount() (rv any) {
	if c != nil {
		return c.SinkRetryCount
	}
	return
}

func (c *CosmosDbSQLAPISink) GetSinkRetryWait() (rv any) {
	if c != nil {
		return c.SinkRetryWait
	}
	return
}

func (c *CosmosDbSQLAPISink) GetWriteBatchSize() (rv any) {
	if c != nil {
		return c.WriteBatchSize
	}
	return
}

func (c *CosmosDbSQLAPISink) GetWriteBatchTimeout() (rv any) {
	if c != nil {
		return c.WriteBatchTimeout
	}
	return
}

func (c *CosmosDbSQLAPISink) GetWriteBehavior() (rv any) {
	if c != nil {
		return c.WriteBehavior
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type CosmosDbSQLAPISink.
func (c *CosmosDbSQLAPISink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     c.AdditionalProperties,
		MaxConcurrentConnections: c.MaxConcurrentConnections,
		SinkRetryCount:           c.SinkRetryCount,
		SinkRetryWait:            c.SinkRetryWait,
		Type:                     c.Type,
		WriteBatchSize:           c.WriteBatchSize,
		WriteBatchTimeout:        c.WriteBatchTimeout,
	}
}

// CosmosDbSQLAPISource - A copy activity Azure CosmosDB (SQL API) Collection source.
type CosmosDbSQLAPISource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Whether detect primitive values as datetime values. Type: boolean (or Expression with resultType boolean).
	DetectDatetime any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Page size of the result. Type: integer (or Expression with resultType integer).
	PageSize any

	// Preferred regions. Type: array of strings (or Expression with resultType array of strings).
	PreferredRegions any

	// SQL API query. Type: string (or Expression with resultType string).
	Query any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (c *CosmosDbSQLAPISource) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CosmosDbSQLAPISource) GetAdditionalColumns() (rv any) {
	if c != nil {
		return c.AdditionalColumns
	}
	return
}

func (c *CosmosDbSQLAPISource) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CosmosDbSQLAPISource) GetDetectDatetime() (rv any) {
	if c != nil {
		return c.DetectDatetime
	}
	return
}

func (c *CosmosDbSQLAPISource) GetMaxConcurrentConnections() (rv any) {
	if c != nil {
		return c.MaxConcurrentConnections
	}
	return
}

func (c *CosmosDbSQLAPISource) GetPageSize() (rv any) {
	if c != nil {
		return c.PageSize
	}
	return
}

func (c *CosmosDbSQLAPISource) GetPreferredRegions() (rv any) {
	if c != nil {
		return c.PreferredRegions
	}
	return
}

func (c *CosmosDbSQLAPISource) GetQuery() (rv any) {
	if c != nil {
		return c.Query
	}
	return
}

func (c *CosmosDbSQLAPISource) GetSourceRetryCount() (rv any) {
	if c != nil {
		return c.SourceRetryCount
	}
	return
}

func (c *CosmosDbSQLAPISource) GetSourceRetryWait() (rv any) {
	if c != nil {
		return c.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type CosmosDbSQLAPISource.
func (c *CosmosDbSQLAPISource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     c.AdditionalProperties,
		MaxConcurrentConnections: c.MaxConcurrentConnections,
		SourceRetryCount:         c.SourceRetryCount,
		SourceRetryWait:          c.SourceRetryWait,
		Type:                     c.Type,
	}
}

// CouchbaseLinkedService - Couchbase server linked service.
type CouchbaseLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Couchbase server linked service properties.
	TypeProperties *CouchbaseLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (c *CouchbaseLinkedService) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CouchbaseLinkedService) GetTypeProperties() (rv *CouchbaseLinkedServiceTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

func (c *CouchbaseLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CouchbaseLinkedService) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *CouchbaseLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if c != nil {
		return c.ConnectVia
	}
	return
}

func (c *CouchbaseLinkedService) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CouchbaseLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type CouchbaseLinkedService.
func (c *CouchbaseLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		ConnectVia:           c.ConnectVia,
		Description:          c.Description,
		Parameters:           c.Parameters,
		Type:                 c.Type,
	}
}

// CouchbaseLinkedServiceTypeProperties - Couchbase server linked service properties.
type CouchbaseLinkedServiceTypeProperties struct {
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The Azure key vault secret reference of credString in connection string.
	CredString *AzureKeyVaultSecretReference

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any
}

func (c *CouchbaseLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if c != nil {
		return c.ConnectionString
	}
	return
}

func (c *CouchbaseLinkedServiceTypeProperties) GetCredString() (rv *AzureKeyVaultSecretReference) {
	if c != nil {
		return c.CredString
	}
	return
}

func (c *CouchbaseLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if c != nil {
		return c.EncryptedCredential
	}
	return
}

// CouchbaseSource - A copy activity Couchbase server source.
type CouchbaseSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (c *CouchbaseSource) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CouchbaseSource) GetAdditionalColumns() (rv any) {
	if c != nil {
		return c.AdditionalColumns
	}
	return
}

func (c *CouchbaseSource) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CouchbaseSource) GetMaxConcurrentConnections() (rv any) {
	if c != nil {
		return c.MaxConcurrentConnections
	}
	return
}

func (c *CouchbaseSource) GetQuery() (rv any) {
	if c != nil {
		return c.Query
	}
	return
}

func (c *CouchbaseSource) GetQueryTimeout() (rv any) {
	if c != nil {
		return c.QueryTimeout
	}
	return
}

func (c *CouchbaseSource) GetSourceRetryCount() (rv any) {
	if c != nil {
		return c.SourceRetryCount
	}
	return
}

func (c *CouchbaseSource) GetSourceRetryWait() (rv any) {
	if c != nil {
		return c.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type CouchbaseSource.
func (c *CouchbaseSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     c.AdditionalProperties,
		MaxConcurrentConnections: c.MaxConcurrentConnections,
		SourceRetryCount:         c.SourceRetryCount,
		SourceRetryWait:          c.SourceRetryWait,
		Type:                     c.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type CouchbaseSource.
func (c *CouchbaseSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        c.AdditionalColumns,
		AdditionalProperties:     c.AdditionalProperties,
		MaxConcurrentConnections: c.MaxConcurrentConnections,
		QueryTimeout:             c.QueryTimeout,
		SourceRetryCount:         c.SourceRetryCount,
		SourceRetryWait:          c.SourceRetryWait,
		Type:                     c.Type,
	}
}

// CouchbaseTableDataset - Couchbase server dataset.
type CouchbaseTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (c *CouchbaseTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if c != nil {
		return c.LinkedServiceName
	}
	return
}

func (c *CouchbaseTableDataset) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CouchbaseTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CouchbaseTableDataset) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *CouchbaseTableDataset) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CouchbaseTableDataset) GetFolder() (rv *DatasetFolder) {
	if c != nil {
		return c.Folder
	}
	return
}

func (c *CouchbaseTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

func (c *CouchbaseTableDataset) GetSchema() (rv any) {
	if c != nil {
		return c.Schema
	}
	return
}

func (c *CouchbaseTableDataset) GetStructure() (rv any) {
	if c != nil {
		return c.Structure
	}
	return
}

func (c *CouchbaseTableDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type CouchbaseTableDataset.
func (c *CouchbaseTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		Description:          c.Description,
		Folder:               c.Folder,
		LinkedServiceName:    c.LinkedServiceName,
		Parameters:           c.Parameters,
		Schema:               c.Schema,
		Structure:            c.Structure,
		Type:                 c.Type,
	}
}

// CreateDataFlowDebugSessionRequest - Request body structure for creating data flow debug session.
type CreateDataFlowDebugSessionRequest struct {
	// Compute type of the cluster. The value will be overwritten by the same setting in integration runtime if provided.
	ComputeType *string

	// Core count of the cluster. The value will be overwritten by the same setting in integration runtime if provided.
	CoreCount *int32

	// Set to use integration runtime setting for data flow debug session.
	IntegrationRuntime *IntegrationRuntimeDebugResource

	// Time to live setting of the cluster in minutes.
	TimeToLive *int32
}

func (c *CreateDataFlowDebugSessionRequest) GetComputeType() (rv string) {
	if c != nil && c.ComputeType != nil {
		return *c.ComputeType
	}
	return
}

func (c *CreateDataFlowDebugSessionRequest) GetCoreCount() (rv int32) {
	if c != nil && c.CoreCount != nil {
		return *c.CoreCount
	}
	return
}

func (c *CreateDataFlowDebugSessionRequest) GetIntegrationRuntime() (rv *IntegrationRuntimeDebugResource) {
	if c != nil {
		return c.IntegrationRuntime
	}
	return
}

func (c *CreateDataFlowDebugSessionRequest) GetTimeToLive() (rv int32) {
	if c != nil && c.TimeToLive != nil {
		return *c.TimeToLive
	}
	return
}

// CreateDataFlowDebugSessionResponse - Response body structure for creating data flow debug session.
type CreateDataFlowDebugSessionResponse struct {
	// The ID of data flow debug session.
	SessionID *string
}

func (c *CreateDataFlowDebugSessionResponse) GetSessionID() (rv string) {
	if c != nil && c.SessionID != nil {
		return *c.SessionID
	}
	return
}

// CreateRunResponse - Response body with a run identifier.
type CreateRunResponse struct {
	// REQUIRED; Identifier of a run.
	RunID *string
}

func (c *CreateRunResponse) GetRunID() (rv string) {
	if c != nil && c.RunID != nil {
		return *c.RunID
	}
	return
}

// CustomActivity - Custom activity type.
type CustomActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Custom activity properties.
	TypeProperties *CustomActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (c *CustomActivity) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CustomActivity) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CustomActivity) GetTypeProperties() (rv *CustomActivityTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

func (c *CustomActivity) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CustomActivity) GetDependsOn() (rv []*ActivityDependency) {
	if c != nil {
		return c.DependsOn
	}
	return
}

func (c *CustomActivity) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CustomActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if c != nil {
		return c.LinkedServiceName
	}
	return
}

func (c *CustomActivity) GetPolicy() (rv *ActivityPolicy) {
	if c != nil {
		return c.Policy
	}
	return
}

func (c *CustomActivity) GetUserProperties() (rv []*UserProperty) {
	if c != nil {
		return c.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type CustomActivity.
func (c *CustomActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: c.AdditionalProperties,
		DependsOn:            c.DependsOn,
		Description:          c.Description,
		Name:                 c.Name,
		Type:                 c.Type,
		UserProperties:       c.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type CustomActivity.
func (c *CustomActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: c.AdditionalProperties,
		DependsOn:            c.DependsOn,
		Description:          c.Description,
		LinkedServiceName:    c.LinkedServiceName,
		Name:                 c.Name,
		Policy:               c.Policy,
		Type:                 c.Type,
		UserProperties:       c.UserProperties,
	}
}

// CustomActivityReferenceObject - Reference objects for custom activity
type CustomActivityReferenceObject struct {
	// Dataset references.
	Datasets []*DatasetReference

	// Linked service references.
	LinkedServices []*LinkedServiceReference
}

func (c *CustomActivityReferenceObject) GetDatasets() (rv []*DatasetReference) {
	if c != nil {
		return c.Datasets
	}
	return
}

func (c *CustomActivityReferenceObject) GetLinkedServices() (rv []*LinkedServiceReference) {
	if c != nil {
		return c.LinkedServices
	}
	return
}

// CustomActivityTypeProperties - Custom activity properties.
type CustomActivityTypeProperties struct {
	// REQUIRED; Command for custom activity Type: string (or Expression with resultType string).
	Command any

	// Elevation level and scope for the user, default is nonadmin task. Type: string (or Expression with resultType double).
	AutoUserSpecification any

	// User defined property bag. There is no restriction on the keys or values that can be used. The user specified custom activity
	// has the full responsibility to consume and interpret the content defined.
	ExtendedProperties map[string]any

	// Folder path for resource files Type: string (or Expression with resultType string).
	FolderPath any

	// Reference objects
	ReferenceObjects *CustomActivityReferenceObject

	// Resource linked service reference.
	ResourceLinkedService *LinkedServiceReference

	// The retention time for the files submitted for custom activity. Type: double (or Expression with resultType double).
	RetentionTimeInDays any
}

func (c *CustomActivityTypeProperties) GetCommand() (rv any) {
	if c != nil {
		return c.Command
	}
	return
}

func (c *CustomActivityTypeProperties) GetAutoUserSpecification() (rv any) {
	if c != nil {
		return c.AutoUserSpecification
	}
	return
}

func (c *CustomActivityTypeProperties) GetExtendedProperties() (rv map[string]any) {
	if c != nil {
		return c.ExtendedProperties
	}
	return
}

func (c *CustomActivityTypeProperties) GetFolderPath() (rv any) {
	if c != nil {
		return c.FolderPath
	}
	return
}

func (c *CustomActivityTypeProperties) GetReferenceObjects() (rv *CustomActivityReferenceObject) {
	if c != nil {
		return c.ReferenceObjects
	}
	return
}

func (c *CustomActivityTypeProperties) GetResourceLinkedService() (rv *LinkedServiceReference) {
	if c != nil {
		return c.ResourceLinkedService
	}
	return
}

func (c *CustomActivityTypeProperties) GetRetentionTimeInDays() (rv any) {
	if c != nil {
		return c.RetentionTimeInDays
	}
	return
}

// CustomDataSourceLinkedService - Custom linked service.
type CustomDataSourceLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Custom linked service properties.
	TypeProperties any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (c *CustomDataSourceLinkedService) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CustomDataSourceLinkedService) GetTypeProperties() (rv any) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

func (c *CustomDataSourceLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CustomDataSourceLinkedService) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *CustomDataSourceLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if c != nil {
		return c.ConnectVia
	}
	return
}

func (c *CustomDataSourceLinkedService) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CustomDataSourceLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type CustomDataSourceLinkedService.
func (c *CustomDataSourceLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		ConnectVia:           c.ConnectVia,
		Description:          c.Description,
		Parameters:           c.Parameters,
		Type:                 c.Type,
	}
}

// CustomDataset - The custom dataset.
type CustomDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Custom dataset properties.
	TypeProperties any
}

func (c *CustomDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if c != nil {
		return c.LinkedServiceName
	}
	return
}

func (c *CustomDataset) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CustomDataset) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CustomDataset) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *CustomDataset) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CustomDataset) GetFolder() (rv *DatasetFolder) {
	if c != nil {
		return c.Folder
	}
	return
}

func (c *CustomDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if c != nil {
		return c.Parameters
	}
	return
}

func (c *CustomDataset) GetSchema() (rv any) {
	if c != nil {
		return c.Schema
	}
	return
}

func (c *CustomDataset) GetStructure() (rv any) {
	if c != nil {
		return c.Structure
	}
	return
}

func (c *CustomDataset) GetTypeProperties() (rv any) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type CustomDataset.
func (c *CustomDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		Description:          c.Description,
		Folder:               c.Folder,
		LinkedServiceName:    c.LinkedServiceName,
		Parameters:           c.Parameters,
		Schema:               c.Schema,
		Structure:            c.Structure,
		Type:                 c.Type,
	}
}

// CustomEventsTrigger - Trigger that runs every time a custom event is received.
type CustomEventsTrigger struct {
	// REQUIRED; Trigger type.
	Type *string

	// REQUIRED; Custom Events Trigger properties.
	TypeProperties *CustomEventsTriggerTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the trigger.
	Annotations []any

	// Trigger description.
	Description *string

	// Pipelines that need to be started.
	Pipelines []*TriggerPipelineReference

	// READ-ONLY; Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState *TriggerRuntimeState
}

func (c *CustomEventsTrigger) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CustomEventsTrigger) GetTypeProperties() (rv *CustomEventsTriggerTypeProperties) {
	if c != nil {
		return c.TypeProperties
	}
	return
}

func (c *CustomEventsTrigger) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CustomEventsTrigger) GetAnnotations() (rv []any) {
	if c != nil {
		return c.Annotations
	}
	return
}

func (c *CustomEventsTrigger) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *CustomEventsTrigger) GetPipelines() (rv []*TriggerPipelineReference) {
	if c != nil {
		return c.Pipelines
	}
	return
}

func (c *CustomEventsTrigger) GetRuntimeState() (rv *TriggerRuntimeState) {
	if c != nil {
		return c.RuntimeState
	}
	return
}

// GetMultiplePipelineTrigger implements the MultiplePipelineTriggerClassification interface for type CustomEventsTrigger.
func (c *CustomEventsTrigger) GetMultiplePipelineTrigger() *MultiplePipelineTrigger {
	return &MultiplePipelineTrigger{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		Description:          c.Description,
		Pipelines:            c.Pipelines,
		RuntimeState:         c.RuntimeState,
		Type:                 c.Type,
	}
}

// GetTrigger implements the TriggerClassification interface for type CustomEventsTrigger.
func (c *CustomEventsTrigger) GetTrigger() *Trigger {
	return &Trigger{
		AdditionalProperties: c.AdditionalProperties,
		Annotations:          c.Annotations,
		Description:          c.Description,
		RuntimeState:         c.RuntimeState,
		Type:                 c.Type,
	}
}

// CustomEventsTriggerTypeProperties - Custom Events Trigger properties.
type CustomEventsTriggerTypeProperties struct {
	// REQUIRED; The list of event types that cause this trigger to fire.
	Events []any

	// REQUIRED; The ARM resource ID of the Azure Event Grid Topic.
	Scope *string

	// The event subject must begin with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith,
	// subjectEndsWith.
	SubjectBeginsWith *string

	// The event subject must end with the pattern provided for trigger to fire. At least one of these must be provided: subjectBeginsWith,
	// subjectEndsWith.
	SubjectEndsWith *string
}

func (c *CustomEventsTriggerTypeProperties) GetEvents() (rv []any) {
	if c != nil {
		return c.Events
	}
	return
}

func (c *CustomEventsTriggerTypeProperties) GetScope() (rv string) {
	if c != nil && c.Scope != nil {
		return *c.Scope
	}
	return
}

func (c *CustomEventsTriggerTypeProperties) GetSubjectBeginsWith() (rv string) {
	if c != nil && c.SubjectBeginsWith != nil {
		return *c.SubjectBeginsWith
	}
	return
}

func (c *CustomEventsTriggerTypeProperties) GetSubjectEndsWith() (rv string) {
	if c != nil && c.SubjectEndsWith != nil {
		return *c.SubjectEndsWith
	}
	return
}

// CustomSetupBase - The base definition of the custom setup.
type CustomSetupBase struct {
	// REQUIRED; The type of custom setup.
	Type *string
}

func (c *CustomSetupBase) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// GetCustomSetupBase implements the CustomSetupBaseClassification interface for type CustomSetupBase.
func (c *CustomSetupBase) GetCustomSetupBase() *CustomSetupBase { return c }

// CustomerManagedKeyDetails - Details of the customer managed key associated with the workspace
type CustomerManagedKeyDetails struct {
	// The key object of the workspace
	Key *WorkspaceKeyDetails

	// READ-ONLY; The customer managed key status on the workspace
	Status *string
}

func (c *CustomerManagedKeyDetails) GetKey() (rv *WorkspaceKeyDetails) {
	if c != nil {
		return c.Key
	}
	return
}

func (c *CustomerManagedKeyDetails) GetStatus() (rv string) {
	if c != nil && c.Status != nil {
		return *c.Status
	}
	return
}

// DWCopyCommandDefaultValue - Default value.
type DWCopyCommandDefaultValue struct {
	// Column name. Type: object (or Expression with resultType string).
	ColumnName any

	// The default value of the column. Type: object (or Expression with resultType string).
	DefaultValue any
}

func (d *DWCopyCommandDefaultValue) GetColumnName() (rv any) {
	if d != nil {
		return d.ColumnName
	}
	return
}

func (d *DWCopyCommandDefaultValue) GetDefaultValue() (rv any) {
	if d != nil {
		return d.DefaultValue
	}
	return
}

// DWCopyCommandSettings - DW Copy Command settings.
type DWCopyCommandSettings struct {
	// Additional options directly passed to SQL DW in Copy Command. Type: key value pairs (value should be string type) (or Expression
	// with resultType object). Example: "additionalOptions": { "MAXERRORS":
	// "1000", "DATEFORMAT": "'ymd'" }
	AdditionalOptions map[string]*string

	// Specifies the default values for each target column in SQL DW. The default values in the property overwrite the DEFAULT
	// constraint set in the DB, and identity column cannot have a default value. Type:
	// array of objects (or Expression with resultType array of objects).
	DefaultValues []*DWCopyCommandDefaultValue
}

func (d *DWCopyCommandSettings) GetAdditionalOptions() (rv map[string]*string) {
	if d != nil {
		return d.AdditionalOptions
	}
	return
}

func (d *DWCopyCommandSettings) GetDefaultValues() (rv []*DWCopyCommandDefaultValue) {
	if d != nil {
		return d.DefaultValues
	}
	return
}

// DataFlow - Azure Synapse nested object which contains a flow with data movements and transformations.
type DataFlow struct {
	// REQUIRED; Type of data flow.
	Type *string

	// List of tags that can be used for describing the data flow.
	Annotations []any

	// The description of the data flow.
	Description *string

	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowFolder
}

func (d *DataFlow) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DataFlow) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *DataFlow) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DataFlow) GetFolder() (rv *DataFlowFolder) {
	if d != nil {
		return d.Folder
	}
	return
}

// GetDataFlow implements the DataFlowClassification interface for type DataFlow.
func (d *DataFlow) GetDataFlow() *DataFlow { return d }

// DataFlowDebugCommandPayload - Structure of command payload.
type DataFlowDebugCommandPayload struct {
	// REQUIRED; The stream name which is used for preview.
	StreamName *string

	// Array of column names.
	Columns []*string

	// The expression which is used for preview.
	Expression *string

	// Row limits for preview response.
	RowLimits *int32
}

func (d *DataFlowDebugCommandPayload) GetStreamName() (rv string) {
	if d != nil && d.StreamName != nil {
		return *d.StreamName
	}
	return
}

func (d *DataFlowDebugCommandPayload) GetColumns() (rv []*string) {
	if d != nil {
		return d.Columns
	}
	return
}

func (d *DataFlowDebugCommandPayload) GetExpression() (rv string) {
	if d != nil && d.Expression != nil {
		return *d.Expression
	}
	return
}

func (d *DataFlowDebugCommandPayload) GetRowLimits() (rv int32) {
	if d != nil && d.RowLimits != nil {
		return *d.RowLimits
	}
	return
}

// DataFlowDebugCommandRequest - Request body structure for data flow expression preview.
type DataFlowDebugCommandRequest struct {
	// The command type.
	Command *DataFlowDebugCommandType

	// The command payload object.
	CommandPayload *DataFlowDebugCommandPayload

	// The ID of data flow debug session.
	SessionID *string
}

func (d *DataFlowDebugCommandRequest) GetCommand() (rv *DataFlowDebugCommandType) {
	if d != nil {
		return d.Command
	}
	return
}

func (d *DataFlowDebugCommandRequest) GetCommandPayload() (rv *DataFlowDebugCommandPayload) {
	if d != nil {
		return d.CommandPayload
	}
	return
}

func (d *DataFlowDebugCommandRequest) GetSessionID() (rv string) {
	if d != nil && d.SessionID != nil {
		return *d.SessionID
	}
	return
}

// DataFlowDebugCommandResponse - Response body structure of data flow result for data preview, statistics or expression preview.
type DataFlowDebugCommandResponse struct {
	// The result data of data preview, statistics or expression preview.
	Data *string

	// The run status of data preview, statistics or expression preview.
	Status *string
}

func (d *DataFlowDebugCommandResponse) GetData() (rv string) {
	if d != nil && d.Data != nil {
		return *d.Data
	}
	return
}

func (d *DataFlowDebugCommandResponse) GetStatus() (rv string) {
	if d != nil && d.Status != nil {
		return *d.Status
	}
	return
}

// DataFlowDebugPackage - Request body structure for starting data flow debug session.
type DataFlowDebugPackage struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Data flow instance.
	DataFlow *DataFlowDebugResource

	// List of Data flows
	DataFlows []*DataFlowDebugResource

	// List of datasets.
	Datasets []*DatasetDebugResource

	// Data flow debug settings.
	DebugSettings *DataFlowDebugPackageDebugSettings

	// List of linked services.
	LinkedServices []*LinkedServiceDebugResource

	// The ID of data flow debug session.
	SessionID *string

	// Staging info for debug session.
	Staging *DataFlowStagingInfo
}

func (d *DataFlowDebugPackage) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DataFlowDebugPackage) GetDataFlow() (rv *DataFlowDebugResource) {
	if d != nil {
		return d.DataFlow
	}
	return
}

func (d *DataFlowDebugPackage) GetDataFlows() (rv []*DataFlowDebugResource) {
	if d != nil {
		return d.DataFlows
	}
	return
}

func (d *DataFlowDebugPackage) GetDatasets() (rv []*DatasetDebugResource) {
	if d != nil {
		return d.Datasets
	}
	return
}

func (d *DataFlowDebugPackage) GetDebugSettings() (rv *DataFlowDebugPackageDebugSettings) {
	if d != nil {
		return d.DebugSettings
	}
	return
}

func (d *DataFlowDebugPackage) GetLinkedServices() (rv []*LinkedServiceDebugResource) {
	if d != nil {
		return d.LinkedServices
	}
	return
}

func (d *DataFlowDebugPackage) GetSessionID() (rv string) {
	if d != nil && d.SessionID != nil {
		return *d.SessionID
	}
	return
}

func (d *DataFlowDebugPackage) GetStaging() (rv *DataFlowStagingInfo) {
	if d != nil {
		return d.Staging
	}
	return
}

// DataFlowDebugPackageDebugSettings - Data flow debug settings.
type DataFlowDebugPackageDebugSettings struct {
	// Parameters for dataset.
	DatasetParameters any

	// Data flow parameters.
	Parameters map[string]any

	// Source setting for data flow debug.
	SourceSettings []*DataFlowSourceSetting
}

func (d *DataFlowDebugPackageDebugSettings) GetDatasetParameters() (rv any) {
	if d != nil {
		return d.DatasetParameters
	}
	return
}

func (d *DataFlowDebugPackageDebugSettings) GetParameters() (rv map[string]any) {
	if d != nil {
		return d.Parameters
	}
	return
}

func (d *DataFlowDebugPackageDebugSettings) GetSourceSettings() (rv []*DataFlowSourceSetting) {
	if d != nil {
		return d.SourceSettings
	}
	return
}

// DataFlowDebugPreviewDataRequest - Request body structure for data flow preview data.
type DataFlowDebugPreviewDataRequest struct {
	// The data flow which contains the debug session.
	DataFlowName *string

	// The row limit for preview request.
	RowLimits *int32

	// The ID of data flow debug session.
	SessionID *string

	// The output stream name.
	StreamName *string
}

func (d *DataFlowDebugPreviewDataRequest) GetDataFlowName() (rv string) {
	if d != nil && d.DataFlowName != nil {
		return *d.DataFlowName
	}
	return
}

func (d *DataFlowDebugPreviewDataRequest) GetRowLimits() (rv int32) {
	if d != nil && d.RowLimits != nil {
		return *d.RowLimits
	}
	return
}

func (d *DataFlowDebugPreviewDataRequest) GetSessionID() (rv string) {
	if d != nil && d.SessionID != nil {
		return *d.SessionID
	}
	return
}

func (d *DataFlowDebugPreviewDataRequest) GetStreamName() (rv string) {
	if d != nil && d.StreamName != nil {
		return *d.StreamName
	}
	return
}

// DataFlowDebugQueryResponse - Response body structure of data flow query for data preview, statistics or expression preview.
type DataFlowDebugQueryResponse struct {
	// The run ID of data flow debug session.
	RunID *string
}

func (d *DataFlowDebugQueryResponse) GetRunID() (rv string) {
	if d != nil && d.RunID != nil {
		return *d.RunID
	}
	return
}

// DataFlowDebugResource - Data flow debug resource.
type DataFlowDebugResource struct {
	// REQUIRED; Data flow properties.
	Properties DataFlowClassification

	// The resource name.
	Name *string
}

func (d *DataFlowDebugResource) GetProperties() (rv DataFlowClassification) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DataFlowDebugResource) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

// DataFlowDebugResultResponse - Response body structure of data flow result for data preview, statistics or expression preview.
type DataFlowDebugResultResponse struct {
	// The result data of data preview, statistics or expression preview.
	Data *string

	// The run status of data preview, statistics or expression preview.
	Status *string
}

func (d *DataFlowDebugResultResponse) GetData() (rv string) {
	if d != nil && d.Data != nil {
		return *d.Data
	}
	return
}

func (d *DataFlowDebugResultResponse) GetStatus() (rv string) {
	if d != nil && d.Status != nil {
		return *d.Status
	}
	return
}

// DataFlowDebugSessionInfo - Data flow debug session info.
type DataFlowDebugSessionInfo struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Compute type of the cluster.
	ComputeType *string

	// Core count of the cluster.
	CoreCount *int32

	// The name of the data flow.
	DataFlowName *string

	// Attached integration runtime name of data flow debug session.
	IntegrationRuntimeName *string

	// Last activity time of data flow debug session.
	LastActivityTime *string

	// Node count of the cluster. (deprecated property)
	NodeCount *int32

	// The ID of data flow debug session.
	SessionID *string

	// Start time of data flow debug session.
	StartTime *string

	// Compute type of the cluster.
	TimeToLiveInMinutes *int32
}

func (d *DataFlowDebugSessionInfo) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DataFlowDebugSessionInfo) GetComputeType() (rv string) {
	if d != nil && d.ComputeType != nil {
		return *d.ComputeType
	}
	return
}

func (d *DataFlowDebugSessionInfo) GetCoreCount() (rv int32) {
	if d != nil && d.CoreCount != nil {
		return *d.CoreCount
	}
	return
}

func (d *DataFlowDebugSessionInfo) GetDataFlowName() (rv string) {
	if d != nil && d.DataFlowName != nil {
		return *d.DataFlowName
	}
	return
}

func (d *DataFlowDebugSessionInfo) GetIntegrationRuntimeName() (rv string) {
	if d != nil && d.IntegrationRuntimeName != nil {
		return *d.IntegrationRuntimeName
	}
	return
}

func (d *DataFlowDebugSessionInfo) GetLastActivityTime() (rv string) {
	if d != nil && d.LastActivityTime != nil {
		return *d.LastActivityTime
	}
	return
}

func (d *DataFlowDebugSessionInfo) GetNodeCount() (rv int32) {
	if d != nil && d.NodeCount != nil {
		return *d.NodeCount
	}
	return
}

func (d *DataFlowDebugSessionInfo) GetSessionID() (rv string) {
	if d != nil && d.SessionID != nil {
		return *d.SessionID
	}
	return
}

func (d *DataFlowDebugSessionInfo) GetStartTime() (rv string) {
	if d != nil && d.StartTime != nil {
		return *d.StartTime
	}
	return
}

func (d *DataFlowDebugSessionInfo) GetTimeToLiveInMinutes() (rv int32) {
	if d != nil && d.TimeToLiveInMinutes != nil {
		return *d.TimeToLiveInMinutes
	}
	return
}

// DataFlowDebugStatisticsRequest - Request body structure for data flow statistics.
type DataFlowDebugStatisticsRequest struct {
	// List of column names.
	Columns []*string

	// The data flow which contains the debug session.
	DataFlowName *string

	// The ID of data flow debug session.
	SessionID *string

	// The output stream name.
	StreamName *string
}

func (d *DataFlowDebugStatisticsRequest) GetColumns() (rv []*string) {
	if d != nil {
		return d.Columns
	}
	return
}

func (d *DataFlowDebugStatisticsRequest) GetDataFlowName() (rv string) {
	if d != nil && d.DataFlowName != nil {
		return *d.DataFlowName
	}
	return
}

func (d *DataFlowDebugStatisticsRequest) GetSessionID() (rv string) {
	if d != nil && d.SessionID != nil {
		return *d.SessionID
	}
	return
}

func (d *DataFlowDebugStatisticsRequest) GetStreamName() (rv string) {
	if d != nil && d.StreamName != nil {
		return *d.StreamName
	}
	return
}

// DataFlowFolder - The folder that this data flow is in. If not specified, Data flow will appear at the root level.
type DataFlowFolder struct {
	// The name of the folder that this data flow is in.
	Name *string
}

func (d *DataFlowFolder) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

// DataFlowListResponse - A list of data flow resources.
type DataFlowListResponse struct {
	// REQUIRED; List of data flows.
	Value []*DataFlowResource

	// The link to the next page of results, if any remaining results exist.
	NextLink *string
}

func (d *DataFlowListResponse) GetValue() (rv []*DataFlowResource) {
	if d != nil {
		return d.Value
	}
	return
}

func (d *DataFlowListResponse) GetNextLink() (rv string) {
	if d != nil && d.NextLink != nil {
		return *d.NextLink
	}
	return
}

// DataFlowReference - Data flow reference type.
type DataFlowReference struct {
	// REQUIRED; Reference data flow name.
	ReferenceName *string

	// REQUIRED; Data flow reference type.
	Type *DataFlowReferenceType

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Reference data flow parameters from dataset.
	DatasetParameters any

	// Data flow parameters
	Parameters map[string]any
}

func (d *DataFlowReference) GetReferenceName() (rv string) {
	if d != nil && d.ReferenceName != nil {
		return *d.ReferenceName
	}
	return
}

func (d *DataFlowReference) GetType() (rv *DataFlowReferenceType) {
	if d != nil {
		return d.Type
	}
	return
}

func (d *DataFlowReference) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DataFlowReference) GetDatasetParameters() (rv any) {
	if d != nil {
		return d.DatasetParameters
	}
	return
}

func (d *DataFlowReference) GetParameters() (rv map[string]any) {
	if d != nil {
		return d.Parameters
	}
	return
}

// DataFlowResource - Data flow resource type.
type DataFlowResource struct {
	// REQUIRED; Data flow properties.
	Properties DataFlowClassification

	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (d *DataFlowResource) GetProperties() (rv DataFlowClassification) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DataFlowResource) GetEtag() (rv string) {
	if d != nil && d.Etag != nil {
		return *d.Etag
	}
	return
}

func (d *DataFlowResource) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *DataFlowResource) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DataFlowResource) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

// DataFlowSink - Transformation for data flow sink.
type DataFlowSink struct {
	// REQUIRED; Transformation name.
	Name *string

	// Dataset reference.
	Dataset *DatasetReference

	// Transformation description.
	Description *string

	// Flowlet Reference
	Flowlet *DataFlowReference

	// Linked service reference.
	LinkedService *LinkedServiceReference

	// Rejected data linked service reference.
	RejectedDataLinkedService *LinkedServiceReference

	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference
}

func (d *DataFlowSink) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DataFlowSink) GetDataset() (rv *DatasetReference) {
	if d != nil {
		return d.Dataset
	}
	return
}

func (d *DataFlowSink) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DataFlowSink) GetFlowlet() (rv *DataFlowReference) {
	if d != nil {
		return d.Flowlet
	}
	return
}

func (d *DataFlowSink) GetLinkedService() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedService
	}
	return
}

func (d *DataFlowSink) GetRejectedDataLinkedService() (rv *LinkedServiceReference) {
	if d != nil {
		return d.RejectedDataLinkedService
	}
	return
}

func (d *DataFlowSink) GetSchemaLinkedService() (rv *LinkedServiceReference) {
	if d != nil {
		return d.SchemaLinkedService
	}
	return
}

// DataFlowSource - Transformation for data flow source.
type DataFlowSource struct {
	// REQUIRED; Transformation name.
	Name *string

	// Dataset reference.
	Dataset *DatasetReference

	// Transformation description.
	Description *string

	// Flowlet Reference
	Flowlet *DataFlowReference

	// Linked service reference.
	LinkedService *LinkedServiceReference

	// Schema linked service reference.
	SchemaLinkedService *LinkedServiceReference
}

func (d *DataFlowSource) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DataFlowSource) GetDataset() (rv *DatasetReference) {
	if d != nil {
		return d.Dataset
	}
	return
}

func (d *DataFlowSource) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DataFlowSource) GetFlowlet() (rv *DataFlowReference) {
	if d != nil {
		return d.Flowlet
	}
	return
}

func (d *DataFlowSource) GetLinkedService() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedService
	}
	return
}

func (d *DataFlowSource) GetSchemaLinkedService() (rv *LinkedServiceReference) {
	if d != nil {
		return d.SchemaLinkedService
	}
	return
}

// DataFlowSourceSetting - Definition of data flow source setting for debug.
type DataFlowSourceSetting struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Defines the row limit of data flow source in debug.
	RowLimit *int32

	// The data flow source name.
	SourceName *string
}

func (d *DataFlowSourceSetting) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DataFlowSourceSetting) GetRowLimit() (rv int32) {
	if d != nil && d.RowLimit != nil {
		return *d.RowLimit
	}
	return
}

func (d *DataFlowSourceSetting) GetSourceName() (rv string) {
	if d != nil && d.SourceName != nil {
		return *d.SourceName
	}
	return
}

// DataFlowStagingInfo - Staging info for execute data flow activity.
type DataFlowStagingInfo struct {
	// Folder path for staging blob.
	FolderPath any

	// Staging linked service reference.
	LinkedService *LinkedServiceReference
}

func (d *DataFlowStagingInfo) GetFolderPath() (rv any) {
	if d != nil {
		return d.FolderPath
	}
	return
}

func (d *DataFlowStagingInfo) GetLinkedService() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedService
	}
	return
}

// DataLakeAnalyticsUSQLActivity - Data Lake Analytics U-SQL activity.
type DataLakeAnalyticsUSQLActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Data Lake Analytics U-SQL activity properties.
	TypeProperties *DataLakeAnalyticsUSQLActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (d *DataLakeAnalyticsUSQLActivity) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivity) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivity) GetTypeProperties() (rv *DataLakeAnalyticsUSQLActivityTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivity) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivity) GetDependsOn() (rv []*ActivityDependency) {
	if d != nil {
		return d.DependsOn
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivity) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedServiceName
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivity) GetPolicy() (rv *ActivityPolicy) {
	if d != nil {
		return d.Policy
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivity) GetUserProperties() (rv []*UserProperty) {
	if d != nil {
		return d.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type DataLakeAnalyticsUSQLActivity.
func (d *DataLakeAnalyticsUSQLActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: d.AdditionalProperties,
		DependsOn:            d.DependsOn,
		Description:          d.Description,
		Name:                 d.Name,
		Type:                 d.Type,
		UserProperties:       d.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type DataLakeAnalyticsUSQLActivity.
func (d *DataLakeAnalyticsUSQLActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: d.AdditionalProperties,
		DependsOn:            d.DependsOn,
		Description:          d.Description,
		LinkedServiceName:    d.LinkedServiceName,
		Name:                 d.Name,
		Policy:               d.Policy,
		Type:                 d.Type,
		UserProperties:       d.UserProperties,
	}
}

// DataLakeAnalyticsUSQLActivityTypeProperties - DataLakeAnalyticsU-SQL activity properties.
type DataLakeAnalyticsUSQLActivityTypeProperties struct {
	// REQUIRED; Script linked service reference.
	ScriptLinkedService *LinkedServiceReference

	// REQUIRED; Case-sensitive path to folder that contains the U-SQL script. Type: string (or Expression with resultType string).
	ScriptPath any

	// Compilation mode of U-SQL. Must be one of these values : Semantic, Full and SingleBox. Type: string (or Expression with
	// resultType string).
	CompilationMode any

	// The maximum number of nodes simultaneously used to run the job. Default value is 1. Type: integer (or Expression with resultType
	// integer), minimum: 1.
	DegreeOfParallelism any

	// Parameters for U-SQL job request.
	Parameters map[string]any

	// Determines which jobs out of all that are queued should be selected to run first. The lower the number, the higher the
	// priority. Default value is 1000. Type: integer (or Expression with resultType
	// integer), minimum: 1.
	Priority any

	// Runtime version of the U-SQL engine to use. Type: string (or Expression with resultType string).
	RuntimeVersion any
}

func (d *DataLakeAnalyticsUSQLActivityTypeProperties) GetScriptLinkedService() (rv *LinkedServiceReference) {
	if d != nil {
		return d.ScriptLinkedService
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivityTypeProperties) GetScriptPath() (rv any) {
	if d != nil {
		return d.ScriptPath
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivityTypeProperties) GetCompilationMode() (rv any) {
	if d != nil {
		return d.CompilationMode
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivityTypeProperties) GetDegreeOfParallelism() (rv any) {
	if d != nil {
		return d.DegreeOfParallelism
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivityTypeProperties) GetParameters() (rv map[string]any) {
	if d != nil {
		return d.Parameters
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivityTypeProperties) GetPriority() (rv any) {
	if d != nil {
		return d.Priority
	}
	return
}

func (d *DataLakeAnalyticsUSQLActivityTypeProperties) GetRuntimeVersion() (rv any) {
	if d != nil {
		return d.RuntimeVersion
	}
	return
}

// DataLakeStorageAccountDetails - Details of the data lake storage account associated with the workspace
type DataLakeStorageAccountDetails struct {
	// Account URL
	AccountURL *string

	// Filesystem name
	Filesystem *string
}

func (d *DataLakeStorageAccountDetails) GetAccountURL() (rv string) {
	if d != nil && d.AccountURL != nil {
		return *d.AccountURL
	}
	return
}

func (d *DataLakeStorageAccountDetails) GetFilesystem() (rv string) {
	if d != nil && d.Filesystem != nil {
		return *d.Filesystem
	}
	return
}

// DatabricksNotebookActivity - DatabricksNotebook activity.
type DatabricksNotebookActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Databricks Notebook activity properties.
	TypeProperties *DatabricksNotebookActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (d *DatabricksNotebookActivity) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DatabricksNotebookActivity) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DatabricksNotebookActivity) GetTypeProperties() (rv *DatabricksNotebookActivityTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

func (d *DatabricksNotebookActivity) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DatabricksNotebookActivity) GetDependsOn() (rv []*ActivityDependency) {
	if d != nil {
		return d.DependsOn
	}
	return
}

func (d *DatabricksNotebookActivity) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DatabricksNotebookActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedServiceName
	}
	return
}

func (d *DatabricksNotebookActivity) GetPolicy() (rv *ActivityPolicy) {
	if d != nil {
		return d.Policy
	}
	return
}

func (d *DatabricksNotebookActivity) GetUserProperties() (rv []*UserProperty) {
	if d != nil {
		return d.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type DatabricksNotebookActivity.
func (d *DatabricksNotebookActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: d.AdditionalProperties,
		DependsOn:            d.DependsOn,
		Description:          d.Description,
		Name:                 d.Name,
		Type:                 d.Type,
		UserProperties:       d.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type DatabricksNotebookActivity.
func (d *DatabricksNotebookActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: d.AdditionalProperties,
		DependsOn:            d.DependsOn,
		Description:          d.Description,
		LinkedServiceName:    d.LinkedServiceName,
		Name:                 d.Name,
		Policy:               d.Policy,
		Type:                 d.Type,
		UserProperties:       d.UserProperties,
	}
}

// DatabricksNotebookActivityTypeProperties - Databricks Notebook activity properties.
type DatabricksNotebookActivityTypeProperties struct {
	// REQUIRED; The absolute path of the notebook to be run in the Databricks Workspace. This path must begin with a slash. Type:
	// string (or Expression with resultType string).
	NotebookPath any

	// Base parameters to be used for each run of this job.If the notebook takes a parameter that is not specified, the default
	// value from the notebook will be used.
	BaseParameters map[string]any

	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]any
}

func (d *DatabricksNotebookActivityTypeProperties) GetNotebookPath() (rv any) {
	if d != nil {
		return d.NotebookPath
	}
	return
}

func (d *DatabricksNotebookActivityTypeProperties) GetBaseParameters() (rv map[string]any) {
	if d != nil {
		return d.BaseParameters
	}
	return
}

func (d *DatabricksNotebookActivityTypeProperties) GetLibraries() (rv []map[string]any) {
	if d != nil {
		return d.Libraries
	}
	return
}

// DatabricksSparkJarActivity - DatabricksSparkJar activity.
type DatabricksSparkJarActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Databricks SparkJar activity properties.
	TypeProperties *DatabricksSparkJarActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (d *DatabricksSparkJarActivity) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DatabricksSparkJarActivity) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DatabricksSparkJarActivity) GetTypeProperties() (rv *DatabricksSparkJarActivityTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

func (d *DatabricksSparkJarActivity) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DatabricksSparkJarActivity) GetDependsOn() (rv []*ActivityDependency) {
	if d != nil {
		return d.DependsOn
	}
	return
}

func (d *DatabricksSparkJarActivity) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DatabricksSparkJarActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedServiceName
	}
	return
}

func (d *DatabricksSparkJarActivity) GetPolicy() (rv *ActivityPolicy) {
	if d != nil {
		return d.Policy
	}
	return
}

func (d *DatabricksSparkJarActivity) GetUserProperties() (rv []*UserProperty) {
	if d != nil {
		return d.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type DatabricksSparkJarActivity.
func (d *DatabricksSparkJarActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: d.AdditionalProperties,
		DependsOn:            d.DependsOn,
		Description:          d.Description,
		Name:                 d.Name,
		Type:                 d.Type,
		UserProperties:       d.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type DatabricksSparkJarActivity.
func (d *DatabricksSparkJarActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: d.AdditionalProperties,
		DependsOn:            d.DependsOn,
		Description:          d.Description,
		LinkedServiceName:    d.LinkedServiceName,
		Name:                 d.Name,
		Policy:               d.Policy,
		Type:                 d.Type,
		UserProperties:       d.UserProperties,
	}
}

// DatabricksSparkJarActivityTypeProperties - Databricks SparkJar activity properties.
type DatabricksSparkJarActivityTypeProperties struct {
	// REQUIRED; The full name of the class containing the main method to be executed. This class must be contained in a JAR provided
	// as a library. Type: string (or Expression with resultType string).
	MainClassName any

	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]any

	// Parameters that will be passed to the main method.
	Parameters []any
}

func (d *DatabricksSparkJarActivityTypeProperties) GetMainClassName() (rv any) {
	if d != nil {
		return d.MainClassName
	}
	return
}

func (d *DatabricksSparkJarActivityTypeProperties) GetLibraries() (rv []map[string]any) {
	if d != nil {
		return d.Libraries
	}
	return
}

func (d *DatabricksSparkJarActivityTypeProperties) GetParameters() (rv []any) {
	if d != nil {
		return d.Parameters
	}
	return
}

// DatabricksSparkPythonActivity - DatabricksSparkPython activity.
type DatabricksSparkPythonActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Databricks SparkPython activity properties.
	TypeProperties *DatabricksSparkPythonActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (d *DatabricksSparkPythonActivity) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DatabricksSparkPythonActivity) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DatabricksSparkPythonActivity) GetTypeProperties() (rv *DatabricksSparkPythonActivityTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

func (d *DatabricksSparkPythonActivity) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DatabricksSparkPythonActivity) GetDependsOn() (rv []*ActivityDependency) {
	if d != nil {
		return d.DependsOn
	}
	return
}

func (d *DatabricksSparkPythonActivity) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DatabricksSparkPythonActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedServiceName
	}
	return
}

func (d *DatabricksSparkPythonActivity) GetPolicy() (rv *ActivityPolicy) {
	if d != nil {
		return d.Policy
	}
	return
}

func (d *DatabricksSparkPythonActivity) GetUserProperties() (rv []*UserProperty) {
	if d != nil {
		return d.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type DatabricksSparkPythonActivity.
func (d *DatabricksSparkPythonActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: d.AdditionalProperties,
		DependsOn:            d.DependsOn,
		Description:          d.Description,
		Name:                 d.Name,
		Type:                 d.Type,
		UserProperties:       d.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type DatabricksSparkPythonActivity.
func (d *DatabricksSparkPythonActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: d.AdditionalProperties,
		DependsOn:            d.DependsOn,
		Description:          d.Description,
		LinkedServiceName:    d.LinkedServiceName,
		Name:                 d.Name,
		Policy:               d.Policy,
		Type:                 d.Type,
		UserProperties:       d.UserProperties,
	}
}

// DatabricksSparkPythonActivityTypeProperties - Databricks SparkPython activity properties.
type DatabricksSparkPythonActivityTypeProperties struct {
	// REQUIRED; The URI of the Python file to be executed. DBFS paths are supported. Type: string (or Expression with resultType
	// string).
	PythonFile any

	// A list of libraries to be installed on the cluster that will execute the job.
	Libraries []map[string]any

	// Command line parameters that will be passed to the Python file.
	Parameters []any
}

func (d *DatabricksSparkPythonActivityTypeProperties) GetPythonFile() (rv any) {
	if d != nil {
		return d.PythonFile
	}
	return
}

func (d *DatabricksSparkPythonActivityTypeProperties) GetLibraries() (rv []map[string]any) {
	if d != nil {
		return d.Libraries
	}
	return
}

func (d *DatabricksSparkPythonActivityTypeProperties) GetParameters() (rv []any) {
	if d != nil {
		return d.Parameters
	}
	return
}

// Dataset - The Azure Data Factory nested object which identifies data within different data stores, such as tables, files,
// folders, and documents.
type Dataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (d *Dataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedServiceName
	}
	return
}

func (d *Dataset) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *Dataset) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *Dataset) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *Dataset) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *Dataset) GetFolder() (rv *DatasetFolder) {
	if d != nil {
		return d.Folder
	}
	return
}

func (d *Dataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

func (d *Dataset) GetSchema() (rv any) {
	if d != nil {
		return d.Schema
	}
	return
}

func (d *Dataset) GetStructure() (rv any) {
	if d != nil {
		return d.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type Dataset.
func (d *Dataset) GetDataset() *Dataset { return d }

// DatasetCompression - The compression method used on a dataset.
type DatasetCompression struct {
	// REQUIRED; Type of dataset compression. Type: string (or Expression with resultType string).
	Type any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The dataset compression level. Type: string (or Expression with resultType string).
	Level any
}

func (d *DatasetCompression) GetType() (rv any) {
	if d != nil {
		return d.Type
	}
	return
}

func (d *DatasetCompression) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DatasetCompression) GetLevel() (rv any) {
	if d != nil {
		return d.Level
	}
	return
}

// DatasetDataElement - Columns that define the structure of the dataset.
type DatasetDataElement struct {
	// Name of the column. Type: string (or Expression with resultType string).
	Name any

	// Type of the column. Type: string (or Expression with resultType string).
	Type any
}

func (d *DatasetDataElement) GetName() (rv any) {
	if d != nil {
		return d.Name
	}
	return
}

func (d *DatasetDataElement) GetType() (rv any) {
	if d != nil {
		return d.Type
	}
	return
}

// DatasetDebugResource - Dataset debug resource.
type DatasetDebugResource struct {
	// REQUIRED; Dataset properties.
	Properties DatasetClassification

	// The resource name.
	Name *string
}

func (d *DatasetDebugResource) GetProperties() (rv DatasetClassification) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DatasetDebugResource) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

// DatasetFolder - The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
type DatasetFolder struct {
	// The name of the folder that this Dataset is in.
	Name *string
}

func (d *DatasetFolder) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

// DatasetListResponse - A list of dataset resources.
type DatasetListResponse struct {
	// REQUIRED; List of datasets.
	Value []*DatasetResource

	// The link to the next page of results, if any remaining results exist.
	NextLink *string
}

func (d *DatasetListResponse) GetValue() (rv []*DatasetResource) {
	if d != nil {
		return d.Value
	}
	return
}

func (d *DatasetListResponse) GetNextLink() (rv string) {
	if d != nil && d.NextLink != nil {
		return *d.NextLink
	}
	return
}

// DatasetLocation - Dataset location.
type DatasetLocation struct {
	// REQUIRED; Type of dataset storage location.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName any

	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath any
}

func (d *DatasetLocation) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DatasetLocation) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DatasetLocation) GetFileName() (rv any) {
	if d != nil {
		return d.FileName
	}
	return
}

func (d *DatasetLocation) GetFolderPath() (rv any) {
	if d != nil {
		return d.FolderPath
	}
	return
}

// GetDatasetLocation implements the DatasetLocationClassification interface for type DatasetLocation.
func (d *DatasetLocation) GetDatasetLocation() *DatasetLocation { return d }

// DatasetReference - Dataset reference type.
type DatasetReference struct {
	// REQUIRED; Reference dataset name.
	ReferenceName *string

	// REQUIRED; Dataset reference type.
	Type *DatasetReferenceType

	// Arguments for dataset.
	Parameters map[string]any
}

func (d *DatasetReference) GetReferenceName() (rv string) {
	if d != nil && d.ReferenceName != nil {
		return *d.ReferenceName
	}
	return
}

func (d *DatasetReference) GetType() (rv *DatasetReferenceType) {
	if d != nil {
		return d.Type
	}
	return
}

func (d *DatasetReference) GetParameters() (rv map[string]any) {
	if d != nil {
		return d.Parameters
	}
	return
}

// DatasetResource - Dataset resource type.
type DatasetResource struct {
	// REQUIRED; Dataset properties.
	Properties DatasetClassification

	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (d *DatasetResource) GetProperties() (rv DatasetClassification) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DatasetResource) GetEtag() (rv string) {
	if d != nil && d.Etag != nil {
		return *d.Etag
	}
	return
}

func (d *DatasetResource) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *DatasetResource) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DatasetResource) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

// DatasetSchemaDataElement - Columns that define the physical type schema of the dataset.
type DatasetSchemaDataElement struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Name of the schema column. Type: string (or Expression with resultType string).
	Name any

	// Type of the schema column. Type: string (or Expression with resultType string).
	Type any
}

func (d *DatasetSchemaDataElement) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DatasetSchemaDataElement) GetName() (rv any) {
	if d != nil {
		return d.Name
	}
	return
}

func (d *DatasetSchemaDataElement) GetType() (rv any) {
	if d != nil {
		return d.Type
	}
	return
}

// DatasetStorageFormat - The format definition of a storage.
type DatasetStorageFormat struct {
	// REQUIRED; Type of dataset storage format.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer any

	// Serializer. Type: string (or Expression with resultType string).
	Serializer any
}

func (d *DatasetStorageFormat) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DatasetStorageFormat) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DatasetStorageFormat) GetDeserializer() (rv any) {
	if d != nil {
		return d.Deserializer
	}
	return
}

func (d *DatasetStorageFormat) GetSerializer() (rv any) {
	if d != nil {
		return d.Serializer
	}
	return
}

// GetDatasetStorageFormat implements the DatasetStorageFormatClassification interface for type DatasetStorageFormat.
func (d *DatasetStorageFormat) GetDatasetStorageFormat() *DatasetStorageFormat { return d }

// DataworldLinkedService - Linked service for Dataworld.
type DataworldLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Dataworld linked service properties.
	TypeProperties *DataworldLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (d *DataworldLinkedService) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DataworldLinkedService) GetTypeProperties() (rv *DataworldLinkedServiceTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

func (d *DataworldLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DataworldLinkedService) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *DataworldLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if d != nil {
		return d.ConnectVia
	}
	return
}

func (d *DataworldLinkedService) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DataworldLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type DataworldLinkedService.
func (d *DataworldLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: d.AdditionalProperties,
		Annotations:          d.Annotations,
		ConnectVia:           d.ConnectVia,
		Description:          d.Description,
		Parameters:           d.Parameters,
		Type:                 d.Type,
	}
}

// DataworldLinkedServiceTypeProperties - Dataworld linked service type properties.
type DataworldLinkedServiceTypeProperties struct {
	// REQUIRED; The api token for the Dataworld source.
	APIToken SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any
}

func (d *DataworldLinkedServiceTypeProperties) GetAPIToken() (rv SecretBaseClassification) {
	if d != nil {
		return d.APIToken
	}
	return
}

func (d *DataworldLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if d != nil {
		return d.EncryptedCredential
	}
	return
}

// Db2LinkedService - Linked service for DB2 data source.
type Db2LinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; DB2 linked service properties.
	TypeProperties *Db2LinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (d *Db2LinkedService) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *Db2LinkedService) GetTypeProperties() (rv *Db2LinkedServiceTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

func (d *Db2LinkedService) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *Db2LinkedService) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *Db2LinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if d != nil {
		return d.ConnectVia
	}
	return
}

func (d *Db2LinkedService) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *Db2LinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type Db2LinkedService.
func (d *Db2LinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: d.AdditionalProperties,
		Annotations:          d.Annotations,
		ConnectVia:           d.ConnectVia,
		Description:          d.Description,
		Parameters:           d.Parameters,
		Type:                 d.Type,
	}
}

// Db2LinkedServiceTypeProperties - DB2 linked service properties.
type Db2LinkedServiceTypeProperties struct {
	// REQUIRED; Database name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression
	// with resultType string).
	Database any

	// REQUIRED; Server name for connection. It is mutually exclusive with connectionString property. Type: string (or Expression
	// with resultType string).
	Server any

	// AuthenticationType to be used for connection. It is mutually exclusive with connectionString property.
	AuthenticationType *Db2AuthenticationType

	// Certificate Common Name when TLS is enabled. It is mutually exclusive with connectionString property. Type: string (or
	// Expression with resultType string).
	CertificateCommonName any

	// The connection string. It is mutually exclusive with server, database, authenticationType, userName, packageCollection
	// and certificateCommonName property. Type: string, SecureString or
	// AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// It is mutually exclusive with connectionString property. Type: string (or
	// Expression with resultType string).
	EncryptedCredential any

	// Under where packages are created when querying database. It is mutually exclusive with connectionString property. Type:
	// string (or Expression with resultType string).
	PackageCollection any

	// Password for authentication.
	Password SecretBaseClassification

	// Username for authentication. It is mutually exclusive with connectionString property. Type: string (or Expression with
	// resultType string).
	Username any
}

func (d *Db2LinkedServiceTypeProperties) GetDatabase() (rv any) {
	if d != nil {
		return d.Database
	}
	return
}

func (d *Db2LinkedServiceTypeProperties) GetServer() (rv any) {
	if d != nil {
		return d.Server
	}
	return
}

func (d *Db2LinkedServiceTypeProperties) GetAuthenticationType() (rv *Db2AuthenticationType) {
	if d != nil {
		return d.AuthenticationType
	}
	return
}

func (d *Db2LinkedServiceTypeProperties) GetCertificateCommonName() (rv any) {
	if d != nil {
		return d.CertificateCommonName
	}
	return
}

func (d *Db2LinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if d != nil {
		return d.ConnectionString
	}
	return
}

func (d *Db2LinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if d != nil {
		return d.EncryptedCredential
	}
	return
}

func (d *Db2LinkedServiceTypeProperties) GetPackageCollection() (rv any) {
	if d != nil {
		return d.PackageCollection
	}
	return
}

func (d *Db2LinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if d != nil {
		return d.Password
	}
	return
}

func (d *Db2LinkedServiceTypeProperties) GetUsername() (rv any) {
	if d != nil {
		return d.Username
	}
	return
}

// Db2Source - A copy activity source for Db2 databases.
type Db2Source struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (d *Db2Source) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *Db2Source) GetAdditionalColumns() (rv any) {
	if d != nil {
		return d.AdditionalColumns
	}
	return
}

func (d *Db2Source) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *Db2Source) GetMaxConcurrentConnections() (rv any) {
	if d != nil {
		return d.MaxConcurrentConnections
	}
	return
}

func (d *Db2Source) GetQuery() (rv any) {
	if d != nil {
		return d.Query
	}
	return
}

func (d *Db2Source) GetQueryTimeout() (rv any) {
	if d != nil {
		return d.QueryTimeout
	}
	return
}

func (d *Db2Source) GetSourceRetryCount() (rv any) {
	if d != nil {
		return d.SourceRetryCount
	}
	return
}

func (d *Db2Source) GetSourceRetryWait() (rv any) {
	if d != nil {
		return d.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type Db2Source.
func (d *Db2Source) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		SourceRetryCount:         d.SourceRetryCount,
		SourceRetryWait:          d.SourceRetryWait,
		Type:                     d.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type Db2Source.
func (d *Db2Source) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        d.AdditionalColumns,
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		QueryTimeout:             d.QueryTimeout,
		SourceRetryCount:         d.SourceRetryCount,
		SourceRetryWait:          d.SourceRetryWait,
		Type:                     d.Type,
	}
}

// Db2TableDataset - The Db2 table dataset.
type Db2TableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Db2 table dataset properties.
	TypeProperties *Db2TableDatasetTypeProperties
}

func (d *Db2TableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedServiceName
	}
	return
}

func (d *Db2TableDataset) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *Db2TableDataset) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *Db2TableDataset) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *Db2TableDataset) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *Db2TableDataset) GetFolder() (rv *DatasetFolder) {
	if d != nil {
		return d.Folder
	}
	return
}

func (d *Db2TableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

func (d *Db2TableDataset) GetSchema() (rv any) {
	if d != nil {
		return d.Schema
	}
	return
}

func (d *Db2TableDataset) GetStructure() (rv any) {
	if d != nil {
		return d.Structure
	}
	return
}

func (d *Db2TableDataset) GetTypeProperties() (rv *Db2TableDatasetTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type Db2TableDataset.
func (d *Db2TableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: d.AdditionalProperties,
		Annotations:          d.Annotations,
		Description:          d.Description,
		Folder:               d.Folder,
		LinkedServiceName:    d.LinkedServiceName,
		Parameters:           d.Parameters,
		Schema:               d.Schema,
		Structure:            d.Structure,
		Type:                 d.Type,
	}
}

// Db2TableDatasetTypeProperties - Db2 table dataset properties.
type Db2TableDatasetTypeProperties struct {
	// The Db2 schema name. Type: string (or Expression with resultType string).
	Schema any

	// The Db2 table name. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (d *Db2TableDatasetTypeProperties) GetSchema() (rv any) {
	if d != nil {
		return d.Schema
	}
	return
}

func (d *Db2TableDatasetTypeProperties) GetTable() (rv any) {
	if d != nil {
		return d.Table
	}
	return
}

func (d *Db2TableDatasetTypeProperties) GetTableName() (rv any) {
	if d != nil {
		return d.TableName
	}
	return
}

// DeleteActivity - Delete activity.
type DeleteActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Delete activity properties.
	TypeProperties *DeleteActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (d *DeleteActivity) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DeleteActivity) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DeleteActivity) GetTypeProperties() (rv *DeleteActivityTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

func (d *DeleteActivity) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DeleteActivity) GetDependsOn() (rv []*ActivityDependency) {
	if d != nil {
		return d.DependsOn
	}
	return
}

func (d *DeleteActivity) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DeleteActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedServiceName
	}
	return
}

func (d *DeleteActivity) GetPolicy() (rv *ActivityPolicy) {
	if d != nil {
		return d.Policy
	}
	return
}

func (d *DeleteActivity) GetUserProperties() (rv []*UserProperty) {
	if d != nil {
		return d.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type DeleteActivity.
func (d *DeleteActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: d.AdditionalProperties,
		DependsOn:            d.DependsOn,
		Description:          d.Description,
		Name:                 d.Name,
		Type:                 d.Type,
		UserProperties:       d.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type DeleteActivity.
func (d *DeleteActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: d.AdditionalProperties,
		DependsOn:            d.DependsOn,
		Description:          d.Description,
		LinkedServiceName:    d.LinkedServiceName,
		Name:                 d.Name,
		Policy:               d.Policy,
		Type:                 d.Type,
		UserProperties:       d.UserProperties,
	}
}

// DeleteActivityTypeProperties - Delete activity properties.
type DeleteActivityTypeProperties struct {
	// REQUIRED; Delete activity dataset reference.
	Dataset *DatasetReference

	// Whether to record detailed logs of delete-activity execution. Default value is false. Type: boolean (or Expression with
	// resultType boolean).
	EnableLogging any

	// Log storage settings customer need to provide when enableLogging is true.
	LogStorageSettings *LogStorageSettings

	// The max concurrent connections to connect data source at the same time.
	MaxConcurrentConnections *int32

	// If true, files or sub-folders under current folder path will be deleted recursively. Default is false. Type: boolean (or
	// Expression with resultType boolean).
	Recursive any

	// Delete activity store settings.
	StoreSettings StoreReadSettingsClassification
}

func (d *DeleteActivityTypeProperties) GetDataset() (rv *DatasetReference) {
	if d != nil {
		return d.Dataset
	}
	return
}

func (d *DeleteActivityTypeProperties) GetEnableLogging() (rv any) {
	if d != nil {
		return d.EnableLogging
	}
	return
}

func (d *DeleteActivityTypeProperties) GetLogStorageSettings() (rv *LogStorageSettings) {
	if d != nil {
		return d.LogStorageSettings
	}
	return
}

func (d *DeleteActivityTypeProperties) GetMaxConcurrentConnections() (rv int32) {
	if d != nil && d.MaxConcurrentConnections != nil {
		return *d.MaxConcurrentConnections
	}
	return
}

func (d *DeleteActivityTypeProperties) GetRecursive() (rv any) {
	if d != nil {
		return d.Recursive
	}
	return
}

func (d *DeleteActivityTypeProperties) GetStoreSettings() (rv StoreReadSettingsClassification) {
	if d != nil {
		return d.StoreSettings
	}
	return
}

// DeleteDataFlowDebugSessionRequest - Request body structure for deleting data flow debug session.
type DeleteDataFlowDebugSessionRequest struct {
	// The data flow which contains the debug session.
	DataFlowName *string

	// The ID of data flow debug session.
	SessionID *string
}

func (d *DeleteDataFlowDebugSessionRequest) GetDataFlowName() (rv string) {
	if d != nil && d.DataFlowName != nil {
		return *d.DataFlowName
	}
	return
}

func (d *DeleteDataFlowDebugSessionRequest) GetSessionID() (rv string) {
	if d != nil && d.SessionID != nil {
		return *d.SessionID
	}
	return
}

// DelimitedTextDataset - Delimited text dataset.
type DelimitedTextDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Delimited text dataset properties.
	TypeProperties *DelimitedTextDatasetTypeProperties
}

func (d *DelimitedTextDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedServiceName
	}
	return
}

func (d *DelimitedTextDataset) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DelimitedTextDataset) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DelimitedTextDataset) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *DelimitedTextDataset) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DelimitedTextDataset) GetFolder() (rv *DatasetFolder) {
	if d != nil {
		return d.Folder
	}
	return
}

func (d *DelimitedTextDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

func (d *DelimitedTextDataset) GetSchema() (rv any) {
	if d != nil {
		return d.Schema
	}
	return
}

func (d *DelimitedTextDataset) GetStructure() (rv any) {
	if d != nil {
		return d.Structure
	}
	return
}

func (d *DelimitedTextDataset) GetTypeProperties() (rv *DelimitedTextDatasetTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type DelimitedTextDataset.
func (d *DelimitedTextDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: d.AdditionalProperties,
		Annotations:          d.Annotations,
		Description:          d.Description,
		Folder:               d.Folder,
		LinkedServiceName:    d.LinkedServiceName,
		Parameters:           d.Parameters,
		Schema:               d.Schema,
		Structure:            d.Structure,
		Type:                 d.Type,
	}
}

// DelimitedTextDatasetTypeProperties - DelimitedText dataset properties.
type DelimitedTextDatasetTypeProperties struct {
	// REQUIRED; The location of the delimited text storage.
	Location DatasetLocationClassification

	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter any

	// The data compressionCodec. Type: string (or Expression with resultType string).
	CompressionCodec any

	// The data compression method used for DelimitedText.
	CompressionLevel any

	// The code page name of the preferred encoding. If miss, the default value is UTF-8, unless BOM denotes another Unicode encoding.
	// Refer to the name column of the table in the following link to set
	// supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType
	// string).
	EncodingName any

	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar any

	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the
	// first row of data. The default value is false. Type: boolean (or Expression
	// with resultType boolean).
	FirstRowAsHeader any

	// The null value string. Type: string (or Expression with resultType string).
	NullValue any

	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar any

	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter any
}

func (d *DelimitedTextDatasetTypeProperties) GetLocation() (rv DatasetLocationClassification) {
	if d != nil {
		return d.Location
	}
	return
}

func (d *DelimitedTextDatasetTypeProperties) GetColumnDelimiter() (rv any) {
	if d != nil {
		return d.ColumnDelimiter
	}
	return
}

func (d *DelimitedTextDatasetTypeProperties) GetCompressionCodec() (rv any) {
	if d != nil {
		return d.CompressionCodec
	}
	return
}

func (d *DelimitedTextDatasetTypeProperties) GetCompressionLevel() (rv any) {
	if d != nil {
		return d.CompressionLevel
	}
	return
}

func (d *DelimitedTextDatasetTypeProperties) GetEncodingName() (rv any) {
	if d != nil {
		return d.EncodingName
	}
	return
}

func (d *DelimitedTextDatasetTypeProperties) GetEscapeChar() (rv any) {
	if d != nil {
		return d.EscapeChar
	}
	return
}

func (d *DelimitedTextDatasetTypeProperties) GetFirstRowAsHeader() (rv any) {
	if d != nil {
		return d.FirstRowAsHeader
	}
	return
}

func (d *DelimitedTextDatasetTypeProperties) GetNullValue() (rv any) {
	if d != nil {
		return d.NullValue
	}
	return
}

func (d *DelimitedTextDatasetTypeProperties) GetQuoteChar() (rv any) {
	if d != nil {
		return d.QuoteChar
	}
	return
}

func (d *DelimitedTextDatasetTypeProperties) GetRowDelimiter() (rv any) {
	if d != nil {
		return d.RowDelimiter
	}
	return
}

// DelimitedTextReadSettings - Delimited text read settings.
type DelimitedTextReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Compression settings.
	CompressionProperties CompressionReadSettingsClassification

	// Indicates the number of non-empty rows to skip when reading data from input files. Type: integer (or Expression with resultType
	// integer).
	SkipLineCount any
}

func (d *DelimitedTextReadSettings) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DelimitedTextReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DelimitedTextReadSettings) GetCompressionProperties() (rv CompressionReadSettingsClassification) {
	if d != nil {
		return d.CompressionProperties
	}
	return
}

func (d *DelimitedTextReadSettings) GetSkipLineCount() (rv any) {
	if d != nil {
		return d.SkipLineCount
	}
	return
}

// GetFormatReadSettings implements the FormatReadSettingsClassification interface for type DelimitedTextReadSettings.
func (d *DelimitedTextReadSettings) GetFormatReadSettings() *FormatReadSettings {
	return &FormatReadSettings{
		AdditionalProperties: d.AdditionalProperties,
		Type:                 d.Type,
	}
}

// DelimitedTextSink - A copy activity DelimitedText sink.
type DelimitedTextSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// DelimitedText format settings.
	FormatSettings *DelimitedTextWriteSettings

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// DelimitedText store settings.
	StoreSettings StoreWriteSettingsClassification

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (d *DelimitedTextSink) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DelimitedTextSink) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DelimitedTextSink) GetFormatSettings() (rv *DelimitedTextWriteSettings) {
	if d != nil {
		return d.FormatSettings
	}
	return
}

func (d *DelimitedTextSink) GetMaxConcurrentConnections() (rv any) {
	if d != nil {
		return d.MaxConcurrentConnections
	}
	return
}

func (d *DelimitedTextSink) GetSinkRetryCount() (rv any) {
	if d != nil {
		return d.SinkRetryCount
	}
	return
}

func (d *DelimitedTextSink) GetSinkRetryWait() (rv any) {
	if d != nil {
		return d.SinkRetryWait
	}
	return
}

func (d *DelimitedTextSink) GetStoreSettings() (rv StoreWriteSettingsClassification) {
	if d != nil {
		return d.StoreSettings
	}
	return
}

func (d *DelimitedTextSink) GetWriteBatchSize() (rv any) {
	if d != nil {
		return d.WriteBatchSize
	}
	return
}

func (d *DelimitedTextSink) GetWriteBatchTimeout() (rv any) {
	if d != nil {
		return d.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type DelimitedTextSink.
func (d *DelimitedTextSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		SinkRetryCount:           d.SinkRetryCount,
		SinkRetryWait:            d.SinkRetryWait,
		Type:                     d.Type,
		WriteBatchSize:           d.WriteBatchSize,
		WriteBatchTimeout:        d.WriteBatchTimeout,
	}
}

// DelimitedTextSource - A copy activity DelimitedText source.
type DelimitedTextSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// DelimitedText format settings.
	FormatSettings *DelimitedTextReadSettings

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// DelimitedText store settings.
	StoreSettings StoreReadSettingsClassification
}

func (d *DelimitedTextSource) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DelimitedTextSource) GetAdditionalColumns() (rv any) {
	if d != nil {
		return d.AdditionalColumns
	}
	return
}

func (d *DelimitedTextSource) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DelimitedTextSource) GetFormatSettings() (rv *DelimitedTextReadSettings) {
	if d != nil {
		return d.FormatSettings
	}
	return
}

func (d *DelimitedTextSource) GetMaxConcurrentConnections() (rv any) {
	if d != nil {
		return d.MaxConcurrentConnections
	}
	return
}

func (d *DelimitedTextSource) GetSourceRetryCount() (rv any) {
	if d != nil {
		return d.SourceRetryCount
	}
	return
}

func (d *DelimitedTextSource) GetSourceRetryWait() (rv any) {
	if d != nil {
		return d.SourceRetryWait
	}
	return
}

func (d *DelimitedTextSource) GetStoreSettings() (rv StoreReadSettingsClassification) {
	if d != nil {
		return d.StoreSettings
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type DelimitedTextSource.
func (d *DelimitedTextSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		SourceRetryCount:         d.SourceRetryCount,
		SourceRetryWait:          d.SourceRetryWait,
		Type:                     d.Type,
	}
}

// DelimitedTextWriteSettings - Delimited text write settings.
type DelimitedTextWriteSettings struct {
	// REQUIRED; The file extension used to create the files. Type: string (or Expression with resultType string).
	FileExtension any

	// REQUIRED; The write setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies the file name pattern _. when copy from non-file based store without partitionOptions. Type: string (or Expression
	// with resultType string).
	FileNamePrefix any

	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with
	// resultType integer).
	MaxRowsPerFile any

	// Indicates whether string values should always be enclosed with quotes. Type: boolean (or Expression with resultType boolean).
	QuoteAllText any
}

func (d *DelimitedTextWriteSettings) GetFileExtension() (rv any) {
	if d != nil {
		return d.FileExtension
	}
	return
}

func (d *DelimitedTextWriteSettings) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DelimitedTextWriteSettings) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DelimitedTextWriteSettings) GetFileNamePrefix() (rv any) {
	if d != nil {
		return d.FileNamePrefix
	}
	return
}

func (d *DelimitedTextWriteSettings) GetMaxRowsPerFile() (rv any) {
	if d != nil {
		return d.MaxRowsPerFile
	}
	return
}

func (d *DelimitedTextWriteSettings) GetQuoteAllText() (rv any) {
	if d != nil {
		return d.QuoteAllText
	}
	return
}

// GetFormatWriteSettings implements the FormatWriteSettingsClassification interface for type DelimitedTextWriteSettings.
func (d *DelimitedTextWriteSettings) GetFormatWriteSettings() *FormatWriteSettings {
	return &FormatWriteSettings{
		AdditionalProperties: d.AdditionalProperties,
		Type:                 d.Type,
	}
}

// DependencyReference - Referenced dependency.
type DependencyReference struct {
	// REQUIRED; The type of dependency reference.
	Type *string
}

func (d *DependencyReference) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

// GetDependencyReference implements the DependencyReferenceClassification interface for type DependencyReference.
func (d *DependencyReference) GetDependencyReference() *DependencyReference { return d }

// DistcpSettings - Distcp settings.
type DistcpSettings struct {
	// REQUIRED; Specifies the Yarn ResourceManager endpoint. Type: string (or Expression with resultType string).
	ResourceManagerEndpoint any

	// REQUIRED; Specifies an existing folder path which will be used to store temp Distcp command script. The script file is
	// generated by ADF and will be removed after Copy job finished. Type: string (or Expression
	// with resultType string).
	TempScriptPath any

	// Specifies the Distcp options. Type: string (or Expression with resultType string).
	DistcpOptions any
}

func (d *DistcpSettings) GetResourceManagerEndpoint() (rv any) {
	if d != nil {
		return d.ResourceManagerEndpoint
	}
	return
}

func (d *DistcpSettings) GetTempScriptPath() (rv any) {
	if d != nil {
		return d.TempScriptPath
	}
	return
}

func (d *DistcpSettings) GetDistcpOptions() (rv any) {
	if d != nil {
		return d.DistcpOptions
	}
	return
}

// DocumentDbCollectionDataset - Microsoft Azure Document Database Collection dataset.
type DocumentDbCollectionDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; DocumentDB Collection dataset properties.
	TypeProperties *DocumentDbCollectionDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (d *DocumentDbCollectionDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedServiceName
	}
	return
}

func (d *DocumentDbCollectionDataset) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DocumentDbCollectionDataset) GetTypeProperties() (rv *DocumentDbCollectionDatasetTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

func (d *DocumentDbCollectionDataset) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DocumentDbCollectionDataset) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *DocumentDbCollectionDataset) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DocumentDbCollectionDataset) GetFolder() (rv *DatasetFolder) {
	if d != nil {
		return d.Folder
	}
	return
}

func (d *DocumentDbCollectionDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

func (d *DocumentDbCollectionDataset) GetSchema() (rv any) {
	if d != nil {
		return d.Schema
	}
	return
}

func (d *DocumentDbCollectionDataset) GetStructure() (rv any) {
	if d != nil {
		return d.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type DocumentDbCollectionDataset.
func (d *DocumentDbCollectionDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: d.AdditionalProperties,
		Annotations:          d.Annotations,
		Description:          d.Description,
		Folder:               d.Folder,
		LinkedServiceName:    d.LinkedServiceName,
		Parameters:           d.Parameters,
		Schema:               d.Schema,
		Structure:            d.Structure,
		Type:                 d.Type,
	}
}

// DocumentDbCollectionDatasetTypeProperties - DocumentDB Collection dataset properties.
type DocumentDbCollectionDatasetTypeProperties struct {
	// REQUIRED; Document Database collection name. Type: string (or Expression with resultType string).
	CollectionName any
}

func (d *DocumentDbCollectionDatasetTypeProperties) GetCollectionName() (rv any) {
	if d != nil {
		return d.CollectionName
	}
	return
}

// DocumentDbCollectionSink - A copy activity Document Database Collection sink.
type DocumentDbCollectionSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Nested properties separator. Default is . (dot). Type: string (or Expression with resultType string).
	NestingSeparator any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any

	// Describes how to write data to Azure Cosmos DB. Type: string (or Expression with resultType string). Allowed values: insert
	// and upsert.
	WriteBehavior any
}

func (d *DocumentDbCollectionSink) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DocumentDbCollectionSink) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DocumentDbCollectionSink) GetMaxConcurrentConnections() (rv any) {
	if d != nil {
		return d.MaxConcurrentConnections
	}
	return
}

func (d *DocumentDbCollectionSink) GetNestingSeparator() (rv any) {
	if d != nil {
		return d.NestingSeparator
	}
	return
}

func (d *DocumentDbCollectionSink) GetSinkRetryCount() (rv any) {
	if d != nil {
		return d.SinkRetryCount
	}
	return
}

func (d *DocumentDbCollectionSink) GetSinkRetryWait() (rv any) {
	if d != nil {
		return d.SinkRetryWait
	}
	return
}

func (d *DocumentDbCollectionSink) GetWriteBatchSize() (rv any) {
	if d != nil {
		return d.WriteBatchSize
	}
	return
}

func (d *DocumentDbCollectionSink) GetWriteBatchTimeout() (rv any) {
	if d != nil {
		return d.WriteBatchTimeout
	}
	return
}

func (d *DocumentDbCollectionSink) GetWriteBehavior() (rv any) {
	if d != nil {
		return d.WriteBehavior
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type DocumentDbCollectionSink.
func (d *DocumentDbCollectionSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		SinkRetryCount:           d.SinkRetryCount,
		SinkRetryWait:            d.SinkRetryWait,
		Type:                     d.Type,
		WriteBatchSize:           d.WriteBatchSize,
		WriteBatchTimeout:        d.WriteBatchTimeout,
	}
}

// DocumentDbCollectionSource - A copy activity Document Database Collection source.
type DocumentDbCollectionSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Nested properties separator. Type: string (or Expression with resultType string).
	NestingSeparator any

	// Documents query. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (d *DocumentDbCollectionSource) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DocumentDbCollectionSource) GetAdditionalColumns() (rv any) {
	if d != nil {
		return d.AdditionalColumns
	}
	return
}

func (d *DocumentDbCollectionSource) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DocumentDbCollectionSource) GetMaxConcurrentConnections() (rv any) {
	if d != nil {
		return d.MaxConcurrentConnections
	}
	return
}

func (d *DocumentDbCollectionSource) GetNestingSeparator() (rv any) {
	if d != nil {
		return d.NestingSeparator
	}
	return
}

func (d *DocumentDbCollectionSource) GetQuery() (rv any) {
	if d != nil {
		return d.Query
	}
	return
}

func (d *DocumentDbCollectionSource) GetQueryTimeout() (rv any) {
	if d != nil {
		return d.QueryTimeout
	}
	return
}

func (d *DocumentDbCollectionSource) GetSourceRetryCount() (rv any) {
	if d != nil {
		return d.SourceRetryCount
	}
	return
}

func (d *DocumentDbCollectionSource) GetSourceRetryWait() (rv any) {
	if d != nil {
		return d.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type DocumentDbCollectionSource.
func (d *DocumentDbCollectionSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		SourceRetryCount:         d.SourceRetryCount,
		SourceRetryWait:          d.SourceRetryWait,
		Type:                     d.Type,
	}
}

// DrillDatasetTypeProperties - Drill Dataset Properties
type DrillDatasetTypeProperties struct {
	// The schema name of the Drill. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the Drill. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (d *DrillDatasetTypeProperties) GetSchema() (rv any) {
	if d != nil {
		return d.Schema
	}
	return
}

func (d *DrillDatasetTypeProperties) GetTable() (rv any) {
	if d != nil {
		return d.Table
	}
	return
}

func (d *DrillDatasetTypeProperties) GetTableName() (rv any) {
	if d != nil {
		return d.TableName
	}
	return
}

// DrillLinkedService - Drill server linked service.
type DrillLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Drill server linked service properties.
	TypeProperties *DrillLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (d *DrillLinkedService) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DrillLinkedService) GetTypeProperties() (rv *DrillLinkedServiceTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

func (d *DrillLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DrillLinkedService) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *DrillLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if d != nil {
		return d.ConnectVia
	}
	return
}

func (d *DrillLinkedService) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DrillLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type DrillLinkedService.
func (d *DrillLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: d.AdditionalProperties,
		Annotations:          d.Annotations,
		ConnectVia:           d.ConnectVia,
		Description:          d.Description,
		Parameters:           d.Parameters,
		Type:                 d.Type,
	}
}

// DrillLinkedServiceTypeProperties - Drill server linked service properties.
type DrillLinkedServiceTypeProperties struct {
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference
}

func (d *DrillLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if d != nil {
		return d.ConnectionString
	}
	return
}

func (d *DrillLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if d != nil {
		return d.EncryptedCredential
	}
	return
}

func (d *DrillLinkedServiceTypeProperties) GetPwd() (rv *AzureKeyVaultSecretReference) {
	if d != nil {
		return d.Pwd
	}
	return
}

// DrillSource - A copy activity Drill server source.
type DrillSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (d *DrillSource) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DrillSource) GetAdditionalColumns() (rv any) {
	if d != nil {
		return d.AdditionalColumns
	}
	return
}

func (d *DrillSource) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DrillSource) GetMaxConcurrentConnections() (rv any) {
	if d != nil {
		return d.MaxConcurrentConnections
	}
	return
}

func (d *DrillSource) GetQuery() (rv any) {
	if d != nil {
		return d.Query
	}
	return
}

func (d *DrillSource) GetQueryTimeout() (rv any) {
	if d != nil {
		return d.QueryTimeout
	}
	return
}

func (d *DrillSource) GetSourceRetryCount() (rv any) {
	if d != nil {
		return d.SourceRetryCount
	}
	return
}

func (d *DrillSource) GetSourceRetryWait() (rv any) {
	if d != nil {
		return d.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type DrillSource.
func (d *DrillSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		SourceRetryCount:         d.SourceRetryCount,
		SourceRetryWait:          d.SourceRetryWait,
		Type:                     d.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type DrillSource.
func (d *DrillSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        d.AdditionalColumns,
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		QueryTimeout:             d.QueryTimeout,
		SourceRetryCount:         d.SourceRetryCount,
		SourceRetryWait:          d.SourceRetryWait,
		Type:                     d.Type,
	}
}

// DrillTableDataset - Drill server dataset.
type DrillTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *DrillDatasetTypeProperties
}

func (d *DrillTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedServiceName
	}
	return
}

func (d *DrillTableDataset) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DrillTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DrillTableDataset) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *DrillTableDataset) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DrillTableDataset) GetFolder() (rv *DatasetFolder) {
	if d != nil {
		return d.Folder
	}
	return
}

func (d *DrillTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

func (d *DrillTableDataset) GetSchema() (rv any) {
	if d != nil {
		return d.Schema
	}
	return
}

func (d *DrillTableDataset) GetStructure() (rv any) {
	if d != nil {
		return d.Structure
	}
	return
}

func (d *DrillTableDataset) GetTypeProperties() (rv *DrillDatasetTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type DrillTableDataset.
func (d *DrillTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: d.AdditionalProperties,
		Annotations:          d.Annotations,
		Description:          d.Description,
		Folder:               d.Folder,
		LinkedServiceName:    d.LinkedServiceName,
		Parameters:           d.Parameters,
		Schema:               d.Schema,
		Structure:            d.Structure,
		Type:                 d.Type,
	}
}

// DynamicExecutorAllocation - Dynamic Executor Allocation Properties
type DynamicExecutorAllocation struct {
	// Indicates whether Dynamic Executor Allocation is enabled or not.
	Enabled *bool
}

func (d *DynamicExecutorAllocation) GetEnabled() (rv bool) {
	if d != nil && d.Enabled != nil {
		return *d.Enabled
	}
	return
}

// DynamicsAXLinkedService - Dynamics AX linked service.
type DynamicsAXLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Dynamics AX linked service properties.
	TypeProperties *DynamicsAXLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (d *DynamicsAXLinkedService) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DynamicsAXLinkedService) GetTypeProperties() (rv *DynamicsAXLinkedServiceTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

func (d *DynamicsAXLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DynamicsAXLinkedService) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *DynamicsAXLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if d != nil {
		return d.ConnectVia
	}
	return
}

func (d *DynamicsAXLinkedService) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DynamicsAXLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type DynamicsAXLinkedService.
func (d *DynamicsAXLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: d.AdditionalProperties,
		Annotations:          d.Annotations,
		ConnectVia:           d.ConnectVia,
		Description:          d.Description,
		Parameters:           d.Parameters,
		Type:                 d.Type,
	}
}

// DynamicsAXLinkedServiceTypeProperties - Dynamics AX linked service properties.
type DynamicsAXLinkedServiceTypeProperties struct {
	// REQUIRED; Specify the resource you are requesting authorization. Type: string (or Expression with resultType string).
	AADResourceID any

	// REQUIRED; Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalID any

	// REQUIRED; Specify the application's key. Mark this field as a SecureString to store it securely in Data Factory, or reference
	// a secret stored in Azure Key Vault. Type: string (or Expression with resultType
	// string).
	ServicePrincipalKey SecretBaseClassification

	// REQUIRED; Specify the tenant information (domain name or tenant ID) under which your application resides. Retrieve it by
	// hovering the mouse in the top-right corner of the Azure portal. Type: string (or
	// Expression with resultType string).
	Tenant any

	// REQUIRED; The Dynamics AX (or Dynamics 365 Finance and Operations) instance OData endpoint.
	URL any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any
}

func (d *DynamicsAXLinkedServiceTypeProperties) GetAADResourceID() (rv any) {
	if d != nil {
		return d.AADResourceID
	}
	return
}

func (d *DynamicsAXLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if d != nil {
		return d.ServicePrincipalID
	}
	return
}

func (d *DynamicsAXLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if d != nil {
		return d.ServicePrincipalKey
	}
	return
}

func (d *DynamicsAXLinkedServiceTypeProperties) GetTenant() (rv any) {
	if d != nil {
		return d.Tenant
	}
	return
}

func (d *DynamicsAXLinkedServiceTypeProperties) GetURL() (rv any) {
	if d != nil {
		return d.URL
	}
	return
}

func (d *DynamicsAXLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if d != nil {
		return d.EncryptedCredential
	}
	return
}

// DynamicsAXResourceDataset - The path of the Dynamics AX OData entity.
type DynamicsAXResourceDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; Dynamics AX OData resource dataset properties.
	TypeProperties *DynamicsAXResourceDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (d *DynamicsAXResourceDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedServiceName
	}
	return
}

func (d *DynamicsAXResourceDataset) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DynamicsAXResourceDataset) GetTypeProperties() (rv *DynamicsAXResourceDatasetTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

func (d *DynamicsAXResourceDataset) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DynamicsAXResourceDataset) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *DynamicsAXResourceDataset) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DynamicsAXResourceDataset) GetFolder() (rv *DatasetFolder) {
	if d != nil {
		return d.Folder
	}
	return
}

func (d *DynamicsAXResourceDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

func (d *DynamicsAXResourceDataset) GetSchema() (rv any) {
	if d != nil {
		return d.Schema
	}
	return
}

func (d *DynamicsAXResourceDataset) GetStructure() (rv any) {
	if d != nil {
		return d.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type DynamicsAXResourceDataset.
func (d *DynamicsAXResourceDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: d.AdditionalProperties,
		Annotations:          d.Annotations,
		Description:          d.Description,
		Folder:               d.Folder,
		LinkedServiceName:    d.LinkedServiceName,
		Parameters:           d.Parameters,
		Schema:               d.Schema,
		Structure:            d.Structure,
		Type:                 d.Type,
	}
}

// DynamicsAXResourceDatasetTypeProperties - Dynamics AX OData resource dataset properties.
type DynamicsAXResourceDatasetTypeProperties struct {
	// REQUIRED; The path of the Dynamics AX OData entity. Type: string (or Expression with resultType string).
	Path any
}

func (d *DynamicsAXResourceDatasetTypeProperties) GetPath() (rv any) {
	if d != nil {
		return d.Path
	}
	return
}

// DynamicsAXSource - A copy activity Dynamics AX source.
type DynamicsAXSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data.
	// Default value: 00:05:00. Type: string (or Expression with resultType
	// string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HTTPRequestTimeout any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (d *DynamicsAXSource) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DynamicsAXSource) GetAdditionalColumns() (rv any) {
	if d != nil {
		return d.AdditionalColumns
	}
	return
}

func (d *DynamicsAXSource) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DynamicsAXSource) GetHTTPRequestTimeout() (rv any) {
	if d != nil {
		return d.HTTPRequestTimeout
	}
	return
}

func (d *DynamicsAXSource) GetMaxConcurrentConnections() (rv any) {
	if d != nil {
		return d.MaxConcurrentConnections
	}
	return
}

func (d *DynamicsAXSource) GetQuery() (rv any) {
	if d != nil {
		return d.Query
	}
	return
}

func (d *DynamicsAXSource) GetQueryTimeout() (rv any) {
	if d != nil {
		return d.QueryTimeout
	}
	return
}

func (d *DynamicsAXSource) GetSourceRetryCount() (rv any) {
	if d != nil {
		return d.SourceRetryCount
	}
	return
}

func (d *DynamicsAXSource) GetSourceRetryWait() (rv any) {
	if d != nil {
		return d.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type DynamicsAXSource.
func (d *DynamicsAXSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		SourceRetryCount:         d.SourceRetryCount,
		SourceRetryWait:          d.SourceRetryWait,
		Type:                     d.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type DynamicsAXSource.
func (d *DynamicsAXSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        d.AdditionalColumns,
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		QueryTimeout:             d.QueryTimeout,
		SourceRetryCount:         d.SourceRetryCount,
		SourceRetryWait:          d.SourceRetryWait,
		Type:                     d.Type,
	}
}

// DynamicsCrmEntityDataset - The Dynamics CRM entity dataset.
type DynamicsCrmEntityDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Dynamics CRM entity dataset properties.
	TypeProperties *DynamicsCrmEntityDatasetTypeProperties
}

func (d *DynamicsCrmEntityDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedServiceName
	}
	return
}

func (d *DynamicsCrmEntityDataset) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DynamicsCrmEntityDataset) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DynamicsCrmEntityDataset) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *DynamicsCrmEntityDataset) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DynamicsCrmEntityDataset) GetFolder() (rv *DatasetFolder) {
	if d != nil {
		return d.Folder
	}
	return
}

func (d *DynamicsCrmEntityDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

func (d *DynamicsCrmEntityDataset) GetSchema() (rv any) {
	if d != nil {
		return d.Schema
	}
	return
}

func (d *DynamicsCrmEntityDataset) GetStructure() (rv any) {
	if d != nil {
		return d.Structure
	}
	return
}

func (d *DynamicsCrmEntityDataset) GetTypeProperties() (rv *DynamicsCrmEntityDatasetTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type DynamicsCrmEntityDataset.
func (d *DynamicsCrmEntityDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: d.AdditionalProperties,
		Annotations:          d.Annotations,
		Description:          d.Description,
		Folder:               d.Folder,
		LinkedServiceName:    d.LinkedServiceName,
		Parameters:           d.Parameters,
		Schema:               d.Schema,
		Structure:            d.Structure,
		Type:                 d.Type,
	}
}

// DynamicsCrmEntityDatasetTypeProperties - Dynamics CRM entity dataset properties.
type DynamicsCrmEntityDatasetTypeProperties struct {
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName any
}

func (d *DynamicsCrmEntityDatasetTypeProperties) GetEntityName() (rv any) {
	if d != nil {
		return d.EntityName
	}
	return
}

// DynamicsCrmLinkedService - Dynamics CRM linked service.
type DynamicsCrmLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Dynamics CRM linked service properties.
	TypeProperties *DynamicsCrmLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (d *DynamicsCrmLinkedService) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DynamicsCrmLinkedService) GetTypeProperties() (rv *DynamicsCrmLinkedServiceTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

func (d *DynamicsCrmLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DynamicsCrmLinkedService) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *DynamicsCrmLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if d != nil {
		return d.ConnectVia
	}
	return
}

func (d *DynamicsCrmLinkedService) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DynamicsCrmLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type DynamicsCrmLinkedService.
func (d *DynamicsCrmLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: d.AdditionalProperties,
		Annotations:          d.Annotations,
		ConnectVia:           d.ConnectVia,
		Description:          d.Description,
		Parameters:           d.Parameters,
		Type:                 d.Type,
	}
}

// DynamicsCrmLinkedServiceTypeProperties - Dynamics CRM linked service properties.
type DynamicsCrmLinkedServiceTypeProperties struct {
	// REQUIRED; The authentication type to connect to Dynamics CRM server. 'Office365' for online scenario, 'Ifd' for on-premises
	// with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online
	// scenario. Type: string (or Expression with resultType string).
	AuthenticationType any

	// REQUIRED; The deployment type of the Dynamics CRM instance. 'Online' for Dynamics CRM Online and 'OnPremisesWithIfd' for
	// Dynamics CRM on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The host name of the on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online.
	// Type: string (or Expression with resultType string).
	HostName any

	// The organization name of the Dynamics CRM instance. The property is required for on-prem and required for online when there
	// are more than one Dynamics CRM instances associated with the user. Type:
	// string (or Expression with resultType string).
	OrganizationName any

	// Password to access the Dynamics CRM instance.
	Password SecretBaseClassification

	// The port of on-premises Dynamics CRM server. The property is required for on-prem and not allowed for online. Default is
	// 443. Type: integer (or Expression with resultType integer), minimum: 0.
	Port any

	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey',
	// servicePrincipalCredential can be SecureString or
	// AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can
	// only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential SecretBaseClassification

	// A string from ServicePrincipalCredentialEnum or an expression
	ServicePrincipalCredentialType any

	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression
	// with resultType string).
	ServicePrincipalID any

	// The URL to the Microsoft Dynamics CRM server. The property is required for on-line and not allowed for on-prem. Type: string
	// (or Expression with resultType string).
	ServiceURI any

	// User name to access the Dynamics CRM instance. Type: string (or Expression with resultType string).
	Username any
}

func (d *DynamicsCrmLinkedServiceTypeProperties) GetAuthenticationType() (rv any) {
	if d != nil {
		return d.AuthenticationType
	}
	return
}

func (d *DynamicsCrmLinkedServiceTypeProperties) GetDeploymentType() (rv any) {
	if d != nil {
		return d.DeploymentType
	}
	return
}

func (d *DynamicsCrmLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if d != nil {
		return d.EncryptedCredential
	}
	return
}

func (d *DynamicsCrmLinkedServiceTypeProperties) GetHostName() (rv any) {
	if d != nil {
		return d.HostName
	}
	return
}

func (d *DynamicsCrmLinkedServiceTypeProperties) GetOrganizationName() (rv any) {
	if d != nil {
		return d.OrganizationName
	}
	return
}

func (d *DynamicsCrmLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if d != nil {
		return d.Password
	}
	return
}

func (d *DynamicsCrmLinkedServiceTypeProperties) GetPort() (rv any) {
	if d != nil {
		return d.Port
	}
	return
}

func (d *DynamicsCrmLinkedServiceTypeProperties) GetServicePrincipalCredential() (rv SecretBaseClassification) {
	if d != nil {
		return d.ServicePrincipalCredential
	}
	return
}

func (d *DynamicsCrmLinkedServiceTypeProperties) GetServicePrincipalCredentialType() (rv any) {
	if d != nil {
		return d.ServicePrincipalCredentialType
	}
	return
}

func (d *DynamicsCrmLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if d != nil {
		return d.ServicePrincipalID
	}
	return
}

func (d *DynamicsCrmLinkedServiceTypeProperties) GetServiceURI() (rv any) {
	if d != nil {
		return d.ServiceURI
	}
	return
}

func (d *DynamicsCrmLinkedServiceTypeProperties) GetUsername() (rv any) {
	if d != nil {
		return d.Username
	}
	return
}

// DynamicsCrmSink - A copy activity Dynamics CRM sink.
type DynamicsCrmSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// REQUIRED; The write behavior for the operation.
	WriteBehavior *DynamicsSinkWriteBehavior

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType
	// string).
	AlternateKeyName any

	// The flag indicating whether to ignore null values from input dataset (except key fields) during write operation. Default
	// is false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (d *DynamicsCrmSink) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DynamicsCrmSink) GetWriteBehavior() (rv *DynamicsSinkWriteBehavior) {
	if d != nil {
		return d.WriteBehavior
	}
	return
}

func (d *DynamicsCrmSink) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DynamicsCrmSink) GetAlternateKeyName() (rv any) {
	if d != nil {
		return d.AlternateKeyName
	}
	return
}

func (d *DynamicsCrmSink) GetIgnoreNullValues() (rv any) {
	if d != nil {
		return d.IgnoreNullValues
	}
	return
}

func (d *DynamicsCrmSink) GetMaxConcurrentConnections() (rv any) {
	if d != nil {
		return d.MaxConcurrentConnections
	}
	return
}

func (d *DynamicsCrmSink) GetSinkRetryCount() (rv any) {
	if d != nil {
		return d.SinkRetryCount
	}
	return
}

func (d *DynamicsCrmSink) GetSinkRetryWait() (rv any) {
	if d != nil {
		return d.SinkRetryWait
	}
	return
}

func (d *DynamicsCrmSink) GetWriteBatchSize() (rv any) {
	if d != nil {
		return d.WriteBatchSize
	}
	return
}

func (d *DynamicsCrmSink) GetWriteBatchTimeout() (rv any) {
	if d != nil {
		return d.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type DynamicsCrmSink.
func (d *DynamicsCrmSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		SinkRetryCount:           d.SinkRetryCount,
		SinkRetryWait:            d.SinkRetryWait,
		Type:                     d.Type,
		WriteBatchSize:           d.WriteBatchSize,
		WriteBatchTimeout:        d.WriteBatchTimeout,
	}
}

// DynamicsCrmSource - A copy activity Dynamics CRM source.
type DynamicsCrmSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// FetchXML is a proprietary query language that is used in Microsoft Dynamics CRM (online & on-premises). Type: string (or
	// Expression with resultType string).
	Query any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (d *DynamicsCrmSource) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DynamicsCrmSource) GetAdditionalColumns() (rv any) {
	if d != nil {
		return d.AdditionalColumns
	}
	return
}

func (d *DynamicsCrmSource) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DynamicsCrmSource) GetMaxConcurrentConnections() (rv any) {
	if d != nil {
		return d.MaxConcurrentConnections
	}
	return
}

func (d *DynamicsCrmSource) GetQuery() (rv any) {
	if d != nil {
		return d.Query
	}
	return
}

func (d *DynamicsCrmSource) GetSourceRetryCount() (rv any) {
	if d != nil {
		return d.SourceRetryCount
	}
	return
}

func (d *DynamicsCrmSource) GetSourceRetryWait() (rv any) {
	if d != nil {
		return d.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type DynamicsCrmSource.
func (d *DynamicsCrmSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		SourceRetryCount:         d.SourceRetryCount,
		SourceRetryWait:          d.SourceRetryWait,
		Type:                     d.Type,
	}
}

// DynamicsEntityDataset - The Dynamics entity dataset.
type DynamicsEntityDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Dynamics entity dataset properties.
	TypeProperties *DynamicsEntityDatasetTypeProperties
}

func (d *DynamicsEntityDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if d != nil {
		return d.LinkedServiceName
	}
	return
}

func (d *DynamicsEntityDataset) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DynamicsEntityDataset) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DynamicsEntityDataset) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *DynamicsEntityDataset) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DynamicsEntityDataset) GetFolder() (rv *DatasetFolder) {
	if d != nil {
		return d.Folder
	}
	return
}

func (d *DynamicsEntityDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

func (d *DynamicsEntityDataset) GetSchema() (rv any) {
	if d != nil {
		return d.Schema
	}
	return
}

func (d *DynamicsEntityDataset) GetStructure() (rv any) {
	if d != nil {
		return d.Structure
	}
	return
}

func (d *DynamicsEntityDataset) GetTypeProperties() (rv *DynamicsEntityDatasetTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type DynamicsEntityDataset.
func (d *DynamicsEntityDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: d.AdditionalProperties,
		Annotations:          d.Annotations,
		Description:          d.Description,
		Folder:               d.Folder,
		LinkedServiceName:    d.LinkedServiceName,
		Parameters:           d.Parameters,
		Schema:               d.Schema,
		Structure:            d.Structure,
		Type:                 d.Type,
	}
}

// DynamicsEntityDatasetTypeProperties - Dynamics entity dataset properties.
type DynamicsEntityDatasetTypeProperties struct {
	// The logical name of the entity. Type: string (or Expression with resultType string).
	EntityName any
}

func (d *DynamicsEntityDatasetTypeProperties) GetEntityName() (rv any) {
	if d != nil {
		return d.EntityName
	}
	return
}

// DynamicsLinkedService - Dynamics linked service.
type DynamicsLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Dynamics linked service properties.
	TypeProperties *DynamicsLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (d *DynamicsLinkedService) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DynamicsLinkedService) GetTypeProperties() (rv *DynamicsLinkedServiceTypeProperties) {
	if d != nil {
		return d.TypeProperties
	}
	return
}

func (d *DynamicsLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DynamicsLinkedService) GetAnnotations() (rv []any) {
	if d != nil {
		return d.Annotations
	}
	return
}

func (d *DynamicsLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if d != nil {
		return d.ConnectVia
	}
	return
}

func (d *DynamicsLinkedService) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DynamicsLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if d != nil {
		return d.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type DynamicsLinkedService.
func (d *DynamicsLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: d.AdditionalProperties,
		Annotations:          d.Annotations,
		ConnectVia:           d.ConnectVia,
		Description:          d.Description,
		Parameters:           d.Parameters,
		Type:                 d.Type,
	}
}

// DynamicsLinkedServiceTypeProperties - Dynamics linked service properties.
type DynamicsLinkedServiceTypeProperties struct {
	// REQUIRED; The authentication type to connect to Dynamics server. 'Office365' for online scenario, 'Ifd' for on-premises
	// with Ifd scenario, 'AADServicePrincipal' for Server-To-Server authentication in online
	// scenario. Type: string (or Expression with resultType string).
	AuthenticationType any

	// REQUIRED; The deployment type of the Dynamics instance. 'Online' for Dynamics Online and 'OnPremisesWithIfd' for Dynamics
	// on-premises with Ifd. Type: string (or Expression with resultType string).
	DeploymentType any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The host name of the on-premises Dynamics server. The property is required for on-prem and not allowed for online. Type:
	// string (or Expression with resultType string).
	HostName any

	// The organization name of the Dynamics instance. The property is required for on-prem and required for online when there
	// are more than one Dynamics instances associated with the user. Type: string (or
	// Expression with resultType string).
	OrganizationName any

	// Password to access the Dynamics instance.
	Password SecretBaseClassification

	// The port of on-premises Dynamics server. The property is required for on-prem and not allowed for online. Default is 443.
	// Type: integer (or Expression with resultType integer), minimum: 0.
	Port any

	// The credential of the service principal object in Azure Active Directory. If servicePrincipalCredentialType is 'ServicePrincipalKey',
	// servicePrincipalCredential can be SecureString or
	// AzureKeyVaultSecretReference. If servicePrincipalCredentialType is 'ServicePrincipalCert', servicePrincipalCredential can
	// only be AzureKeyVaultSecretReference.
	ServicePrincipalCredential SecretBaseClassification

	// The service principal credential type to use in Server-To-Server authentication. 'ServicePrincipalKey' for key/secret,
	// 'ServicePrincipalCert' for certificate. Type: string (or Expression with
	// resultType string).
	ServicePrincipalCredentialType any

	// The client ID of the application in Azure Active Directory used for Server-To-Server authentication. Type: string (or Expression
	// with resultType string).
	ServicePrincipalID any

	// The URL to the Microsoft Dynamics server. The property is required for on-line and not allowed for on-prem. Type: string
	// (or Expression with resultType string).
	ServiceURI any

	// User name to access the Dynamics instance. Type: string (or Expression with resultType string).
	Username any
}

func (d *DynamicsLinkedServiceTypeProperties) GetAuthenticationType() (rv any) {
	if d != nil {
		return d.AuthenticationType
	}
	return
}

func (d *DynamicsLinkedServiceTypeProperties) GetDeploymentType() (rv any) {
	if d != nil {
		return d.DeploymentType
	}
	return
}

func (d *DynamicsLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if d != nil {
		return d.EncryptedCredential
	}
	return
}

func (d *DynamicsLinkedServiceTypeProperties) GetHostName() (rv any) {
	if d != nil {
		return d.HostName
	}
	return
}

func (d *DynamicsLinkedServiceTypeProperties) GetOrganizationName() (rv any) {
	if d != nil {
		return d.OrganizationName
	}
	return
}

func (d *DynamicsLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if d != nil {
		return d.Password
	}
	return
}

func (d *DynamicsLinkedServiceTypeProperties) GetPort() (rv any) {
	if d != nil {
		return d.Port
	}
	return
}

func (d *DynamicsLinkedServiceTypeProperties) GetServicePrincipalCredential() (rv SecretBaseClassification) {
	if d != nil {
		return d.ServicePrincipalCredential
	}
	return
}

func (d *DynamicsLinkedServiceTypeProperties) GetServicePrincipalCredentialType() (rv any) {
	if d != nil {
		return d.ServicePrincipalCredentialType
	}
	return
}

func (d *DynamicsLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if d != nil {
		return d.ServicePrincipalID
	}
	return
}

func (d *DynamicsLinkedServiceTypeProperties) GetServiceURI() (rv any) {
	if d != nil {
		return d.ServiceURI
	}
	return
}

func (d *DynamicsLinkedServiceTypeProperties) GetUsername() (rv any) {
	if d != nil {
		return d.Username
	}
	return
}

// DynamicsSink - A copy activity Dynamics sink.
type DynamicsSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// REQUIRED; The write behavior for the operation.
	WriteBehavior *DynamicsSinkWriteBehavior

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The logical name of the alternate key which will be used when upserting records. Type: string (or Expression with resultType
	// string).
	AlternateKeyName any

	// The flag indicating whether ignore null values from input dataset (except key fields) during write operation. Default is
	// false. Type: boolean (or Expression with resultType boolean).
	IgnoreNullValues any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (d *DynamicsSink) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DynamicsSink) GetWriteBehavior() (rv *DynamicsSinkWriteBehavior) {
	if d != nil {
		return d.WriteBehavior
	}
	return
}

func (d *DynamicsSink) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DynamicsSink) GetAlternateKeyName() (rv any) {
	if d != nil {
		return d.AlternateKeyName
	}
	return
}

func (d *DynamicsSink) GetIgnoreNullValues() (rv any) {
	if d != nil {
		return d.IgnoreNullValues
	}
	return
}

func (d *DynamicsSink) GetMaxConcurrentConnections() (rv any) {
	if d != nil {
		return d.MaxConcurrentConnections
	}
	return
}

func (d *DynamicsSink) GetSinkRetryCount() (rv any) {
	if d != nil {
		return d.SinkRetryCount
	}
	return
}

func (d *DynamicsSink) GetSinkRetryWait() (rv any) {
	if d != nil {
		return d.SinkRetryWait
	}
	return
}

func (d *DynamicsSink) GetWriteBatchSize() (rv any) {
	if d != nil {
		return d.WriteBatchSize
	}
	return
}

func (d *DynamicsSink) GetWriteBatchTimeout() (rv any) {
	if d != nil {
		return d.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type DynamicsSink.
func (d *DynamicsSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		SinkRetryCount:           d.SinkRetryCount,
		SinkRetryWait:            d.SinkRetryWait,
		Type:                     d.Type,
		WriteBatchSize:           d.WriteBatchSize,
		WriteBatchTimeout:        d.WriteBatchTimeout,
	}
}

// DynamicsSource - A copy activity Dynamics source.
type DynamicsSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// FetchXML is a proprietary query language that is used in Microsoft Dynamics (online & on-premises). Type: string (or Expression
	// with resultType string).
	Query any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (d *DynamicsSource) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *DynamicsSource) GetAdditionalColumns() (rv any) {
	if d != nil {
		return d.AdditionalColumns
	}
	return
}

func (d *DynamicsSource) GetAdditionalProperties() (rv map[string]any) {
	if d != nil {
		return d.AdditionalProperties
	}
	return
}

func (d *DynamicsSource) GetMaxConcurrentConnections() (rv any) {
	if d != nil {
		return d.MaxConcurrentConnections
	}
	return
}

func (d *DynamicsSource) GetQuery() (rv any) {
	if d != nil {
		return d.Query
	}
	return
}

func (d *DynamicsSource) GetSourceRetryCount() (rv any) {
	if d != nil {
		return d.SourceRetryCount
	}
	return
}

func (d *DynamicsSource) GetSourceRetryWait() (rv any) {
	if d != nil {
		return d.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type DynamicsSource.
func (d *DynamicsSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     d.AdditionalProperties,
		MaxConcurrentConnections: d.MaxConcurrentConnections,
		SourceRetryCount:         d.SourceRetryCount,
		SourceRetryWait:          d.SourceRetryWait,
		Type:                     d.Type,
	}
}

type EditTablesRequest struct {
	// Edit link tables request
	LinkTables []*LinkTableRequest
}

func (e *EditTablesRequest) GetLinkTables() (rv []*LinkTableRequest) {
	if e != nil {
		return e.LinkTables
	}
	return
}

// EloquaLinkedService - Eloqua server linked service.
type EloquaLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Eloqua server linked service properties.
	TypeProperties *EloquaLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (e *EloquaLinkedService) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

func (e *EloquaLinkedService) GetTypeProperties() (rv *EloquaLinkedServiceTypeProperties) {
	if e != nil {
		return e.TypeProperties
	}
	return
}

func (e *EloquaLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if e != nil {
		return e.AdditionalProperties
	}
	return
}

func (e *EloquaLinkedService) GetAnnotations() (rv []any) {
	if e != nil {
		return e.Annotations
	}
	return
}

func (e *EloquaLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if e != nil {
		return e.ConnectVia
	}
	return
}

func (e *EloquaLinkedService) GetDescription() (rv string) {
	if e != nil && e.Description != nil {
		return *e.Description
	}
	return
}

func (e *EloquaLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if e != nil {
		return e.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type EloquaLinkedService.
func (e *EloquaLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: e.AdditionalProperties,
		Annotations:          e.Annotations,
		ConnectVia:           e.ConnectVia,
		Description:          e.Description,
		Parameters:           e.Parameters,
		Type:                 e.Type,
	}
}

// EloquaLinkedServiceTypeProperties - Eloqua server linked service properties.
type EloquaLinkedServiceTypeProperties struct {
	// REQUIRED; The endpoint of the Eloqua server. (i.e. eloqua.example.com)
	Endpoint any

	// REQUIRED; The site name and user name of your Eloqua account in the form: sitename/username. (i.e. Eloqua/Alice)
	Username any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The password corresponding to the user name.
	Password SecretBaseClassification

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true.
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification any
}

func (e *EloquaLinkedServiceTypeProperties) GetEndpoint() (rv any) {
	if e != nil {
		return e.Endpoint
	}
	return
}

func (e *EloquaLinkedServiceTypeProperties) GetUsername() (rv any) {
	if e != nil {
		return e.Username
	}
	return
}

func (e *EloquaLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if e != nil {
		return e.EncryptedCredential
	}
	return
}

func (e *EloquaLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if e != nil {
		return e.Password
	}
	return
}

func (e *EloquaLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if e != nil {
		return e.UseEncryptedEndpoints
	}
	return
}

func (e *EloquaLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if e != nil {
		return e.UseHostVerification
	}
	return
}

func (e *EloquaLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if e != nil {
		return e.UsePeerVerification
	}
	return
}

// EloquaObjectDataset - Eloqua server dataset.
type EloquaObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (e *EloquaObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if e != nil {
		return e.LinkedServiceName
	}
	return
}

func (e *EloquaObjectDataset) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

func (e *EloquaObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if e != nil {
		return e.AdditionalProperties
	}
	return
}

func (e *EloquaObjectDataset) GetAnnotations() (rv []any) {
	if e != nil {
		return e.Annotations
	}
	return
}

func (e *EloquaObjectDataset) GetDescription() (rv string) {
	if e != nil && e.Description != nil {
		return *e.Description
	}
	return
}

func (e *EloquaObjectDataset) GetFolder() (rv *DatasetFolder) {
	if e != nil {
		return e.Folder
	}
	return
}

func (e *EloquaObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if e != nil {
		return e.Parameters
	}
	return
}

func (e *EloquaObjectDataset) GetSchema() (rv any) {
	if e != nil {
		return e.Schema
	}
	return
}

func (e *EloquaObjectDataset) GetStructure() (rv any) {
	if e != nil {
		return e.Structure
	}
	return
}

func (e *EloquaObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if e != nil {
		return e.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type EloquaObjectDataset.
func (e *EloquaObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: e.AdditionalProperties,
		Annotations:          e.Annotations,
		Description:          e.Description,
		Folder:               e.Folder,
		LinkedServiceName:    e.LinkedServiceName,
		Parameters:           e.Parameters,
		Schema:               e.Schema,
		Structure:            e.Structure,
		Type:                 e.Type,
	}
}

// EloquaSource - A copy activity Eloqua server source.
type EloquaSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (e *EloquaSource) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

func (e *EloquaSource) GetAdditionalColumns() (rv any) {
	if e != nil {
		return e.AdditionalColumns
	}
	return
}

func (e *EloquaSource) GetAdditionalProperties() (rv map[string]any) {
	if e != nil {
		return e.AdditionalProperties
	}
	return
}

func (e *EloquaSource) GetMaxConcurrentConnections() (rv any) {
	if e != nil {
		return e.MaxConcurrentConnections
	}
	return
}

func (e *EloquaSource) GetQuery() (rv any) {
	if e != nil {
		return e.Query
	}
	return
}

func (e *EloquaSource) GetQueryTimeout() (rv any) {
	if e != nil {
		return e.QueryTimeout
	}
	return
}

func (e *EloquaSource) GetSourceRetryCount() (rv any) {
	if e != nil {
		return e.SourceRetryCount
	}
	return
}

func (e *EloquaSource) GetSourceRetryWait() (rv any) {
	if e != nil {
		return e.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type EloquaSource.
func (e *EloquaSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     e.AdditionalProperties,
		MaxConcurrentConnections: e.MaxConcurrentConnections,
		SourceRetryCount:         e.SourceRetryCount,
		SourceRetryWait:          e.SourceRetryWait,
		Type:                     e.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type EloquaSource.
func (e *EloquaSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        e.AdditionalColumns,
		AdditionalProperties:     e.AdditionalProperties,
		MaxConcurrentConnections: e.MaxConcurrentConnections,
		QueryTimeout:             e.QueryTimeout,
		SourceRetryCount:         e.SourceRetryCount,
		SourceRetryWait:          e.SourceRetryWait,
		Type:                     e.Type,
	}
}

// EncryptionDetails - Details of the encryption associated with the workspace
type EncryptionDetails struct {
	// Customer Managed Key Details
	Cmk *CustomerManagedKeyDetails

	// READ-ONLY; Double Encryption enabled
	DoubleEncryptionEnabled *bool
}

func (e *EncryptionDetails) GetCmk() (rv *CustomerManagedKeyDetails) {
	if e != nil {
		return e.Cmk
	}
	return
}

func (e *EncryptionDetails) GetDoubleEncryptionEnabled() (rv bool) {
	if e != nil && e.DoubleEncryptionEnabled != nil {
		return *e.DoubleEncryptionEnabled
	}
	return
}

// EntityReference - The entity reference.
type EntityReference struct {
	// The name of this referenced entity.
	ReferenceName *string

	// The type of this referenced entity.
	Type *IntegrationRuntimeEntityReferenceType
}

func (e *EntityReference) GetReferenceName() (rv string) {
	if e != nil && e.ReferenceName != nil {
		return *e.ReferenceName
	}
	return
}

func (e *EntityReference) GetType() (rv *IntegrationRuntimeEntityReferenceType) {
	if e != nil {
		return e.Type
	}
	return
}

// ErrorAdditionalInfo - The resource management error additional info.
type ErrorAdditionalInfo struct {
	// READ-ONLY; The additional info.
	Info any

	// READ-ONLY; The additional info type.
	Type *string
}

func (e *ErrorAdditionalInfo) GetInfo() (rv any) {
	if e != nil {
		return e.Info
	}
	return
}

func (e *ErrorAdditionalInfo) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// ErrorContract - Contains details when the response code indicates an error.
type ErrorContract struct {
	// The error details.
	Error *ErrorResponse
}

func (e *ErrorContract) GetError() (rv *ErrorResponse) {
	if e != nil {
		return e.Error
	}
	return
}

// ErrorResponse - Common error response for all Azure Resource Manager APIs to return error details for failed operations.
// (This also follows the OData error response format.)
type ErrorResponse struct {
	// READ-ONLY; The error additional info.
	AdditionalInfo []*ErrorAdditionalInfo

	// READ-ONLY; The error code.
	Code *string

	// READ-ONLY; The error details.
	Details []*ErrorResponse

	// READ-ONLY; The error message.
	Message *string

	// READ-ONLY; The error target.
	Target *string
}

func (e *ErrorResponse) GetAdditionalInfo() (rv []*ErrorAdditionalInfo) {
	if e != nil {
		return e.AdditionalInfo
	}
	return
}

func (e *ErrorResponse) GetCode() (rv string) {
	if e != nil && e.Code != nil {
		return *e.Code
	}
	return
}

func (e *ErrorResponse) GetDetails() (rv []*ErrorResponse) {
	if e != nil {
		return e.Details
	}
	return
}

func (e *ErrorResponse) GetMessage() (rv string) {
	if e != nil && e.Message != nil {
		return *e.Message
	}
	return
}

func (e *ErrorResponse) GetTarget() (rv string) {
	if e != nil && e.Target != nil {
		return *e.Target
	}
	return
}

// EvaluateDataFlowExpressionRequest - Request body structure for data flow expression preview.
type EvaluateDataFlowExpressionRequest struct {
	// The data flow which contains the debug session.
	DataFlowName *string

	// The expression for preview.
	Expression *string

	// The row limit for preview request.
	RowLimits *int32

	// The ID of data flow debug session.
	SessionID *string

	// The output stream name.
	StreamName *string
}

func (e *EvaluateDataFlowExpressionRequest) GetDataFlowName() (rv string) {
	if e != nil && e.DataFlowName != nil {
		return *e.DataFlowName
	}
	return
}

func (e *EvaluateDataFlowExpressionRequest) GetExpression() (rv string) {
	if e != nil && e.Expression != nil {
		return *e.Expression
	}
	return
}

func (e *EvaluateDataFlowExpressionRequest) GetRowLimits() (rv int32) {
	if e != nil && e.RowLimits != nil {
		return *e.RowLimits
	}
	return
}

func (e *EvaluateDataFlowExpressionRequest) GetSessionID() (rv string) {
	if e != nil && e.SessionID != nil {
		return *e.SessionID
	}
	return
}

func (e *EvaluateDataFlowExpressionRequest) GetStreamName() (rv string) {
	if e != nil && e.StreamName != nil {
		return *e.StreamName
	}
	return
}

// ExcelDataset - Excel dataset.
type ExcelDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Excel dataset properties.
	TypeProperties *ExcelDatasetTypeProperties
}

func (e *ExcelDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if e != nil {
		return e.LinkedServiceName
	}
	return
}

func (e *ExcelDataset) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

func (e *ExcelDataset) GetAdditionalProperties() (rv map[string]any) {
	if e != nil {
		return e.AdditionalProperties
	}
	return
}

func (e *ExcelDataset) GetAnnotations() (rv []any) {
	if e != nil {
		return e.Annotations
	}
	return
}

func (e *ExcelDataset) GetDescription() (rv string) {
	if e != nil && e.Description != nil {
		return *e.Description
	}
	return
}

func (e *ExcelDataset) GetFolder() (rv *DatasetFolder) {
	if e != nil {
		return e.Folder
	}
	return
}

func (e *ExcelDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if e != nil {
		return e.Parameters
	}
	return
}

func (e *ExcelDataset) GetSchema() (rv any) {
	if e != nil {
		return e.Schema
	}
	return
}

func (e *ExcelDataset) GetStructure() (rv any) {
	if e != nil {
		return e.Structure
	}
	return
}

func (e *ExcelDataset) GetTypeProperties() (rv *ExcelDatasetTypeProperties) {
	if e != nil {
		return e.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type ExcelDataset.
func (e *ExcelDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: e.AdditionalProperties,
		Annotations:          e.Annotations,
		Description:          e.Description,
		Folder:               e.Folder,
		LinkedServiceName:    e.LinkedServiceName,
		Parameters:           e.Parameters,
		Schema:               e.Schema,
		Structure:            e.Structure,
		Type:                 e.Type,
	}
}

// ExcelDatasetTypeProperties - Excel dataset properties.
type ExcelDatasetTypeProperties struct {
	// REQUIRED; The location of the excel storage.
	Location DatasetLocationClassification

	// The data compression method used for the json dataset.
	Compression *DatasetCompression

	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the
	// first row of data. The default value is false. Type: boolean (or Expression
	// with resultType boolean).
	FirstRowAsHeader any

	// The null value string. Type: string (or Expression with resultType string).
	NullValue any

	// The partial data of one sheet. Type: string (or Expression with resultType string).
	Range any

	// The sheet index of excel file and default value is 0. Type: integer (or Expression with resultType integer)
	SheetIndex any

	// The sheet name of excel file. Type: string (or Expression with resultType string).
	SheetName any
}

func (e *ExcelDatasetTypeProperties) GetLocation() (rv DatasetLocationClassification) {
	if e != nil {
		return e.Location
	}
	return
}

func (e *ExcelDatasetTypeProperties) GetCompression() (rv *DatasetCompression) {
	if e != nil {
		return e.Compression
	}
	return
}

func (e *ExcelDatasetTypeProperties) GetFirstRowAsHeader() (rv any) {
	if e != nil {
		return e.FirstRowAsHeader
	}
	return
}

func (e *ExcelDatasetTypeProperties) GetNullValue() (rv any) {
	if e != nil {
		return e.NullValue
	}
	return
}

func (e *ExcelDatasetTypeProperties) GetRange() (rv any) {
	if e != nil {
		return e.Range
	}
	return
}

func (e *ExcelDatasetTypeProperties) GetSheetIndex() (rv any) {
	if e != nil {
		return e.SheetIndex
	}
	return
}

func (e *ExcelDatasetTypeProperties) GetSheetName() (rv any) {
	if e != nil {
		return e.SheetName
	}
	return
}

// ExcelSource - A copy activity excel source.
type ExcelSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Excel store settings.
	StoreSettings StoreReadSettingsClassification
}

func (e *ExcelSource) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

func (e *ExcelSource) GetAdditionalColumns() (rv any) {
	if e != nil {
		return e.AdditionalColumns
	}
	return
}

func (e *ExcelSource) GetAdditionalProperties() (rv map[string]any) {
	if e != nil {
		return e.AdditionalProperties
	}
	return
}

func (e *ExcelSource) GetMaxConcurrentConnections() (rv any) {
	if e != nil {
		return e.MaxConcurrentConnections
	}
	return
}

func (e *ExcelSource) GetSourceRetryCount() (rv any) {
	if e != nil {
		return e.SourceRetryCount
	}
	return
}

func (e *ExcelSource) GetSourceRetryWait() (rv any) {
	if e != nil {
		return e.SourceRetryWait
	}
	return
}

func (e *ExcelSource) GetStoreSettings() (rv StoreReadSettingsClassification) {
	if e != nil {
		return e.StoreSettings
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type ExcelSource.
func (e *ExcelSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     e.AdditionalProperties,
		MaxConcurrentConnections: e.MaxConcurrentConnections,
		SourceRetryCount:         e.SourceRetryCount,
		SourceRetryWait:          e.SourceRetryWait,
		Type:                     e.Type,
	}
}

// ExecuteDataFlowActivity - Execute data flow activity.
type ExecuteDataFlowActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Execute data flow activity properties.
	TypeProperties *ExecuteDataFlowActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (e *ExecuteDataFlowActivity) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExecuteDataFlowActivity) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

func (e *ExecuteDataFlowActivity) GetTypeProperties() (rv *ExecuteDataFlowActivityTypeProperties) {
	if e != nil {
		return e.TypeProperties
	}
	return
}

func (e *ExecuteDataFlowActivity) GetAdditionalProperties() (rv map[string]any) {
	if e != nil {
		return e.AdditionalProperties
	}
	return
}

func (e *ExecuteDataFlowActivity) GetDependsOn() (rv []*ActivityDependency) {
	if e != nil {
		return e.DependsOn
	}
	return
}

func (e *ExecuteDataFlowActivity) GetDescription() (rv string) {
	if e != nil && e.Description != nil {
		return *e.Description
	}
	return
}

func (e *ExecuteDataFlowActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if e != nil {
		return e.LinkedServiceName
	}
	return
}

func (e *ExecuteDataFlowActivity) GetPolicy() (rv *ActivityPolicy) {
	if e != nil {
		return e.Policy
	}
	return
}

func (e *ExecuteDataFlowActivity) GetUserProperties() (rv []*UserProperty) {
	if e != nil {
		return e.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type ExecuteDataFlowActivity.
func (e *ExecuteDataFlowActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: e.AdditionalProperties,
		DependsOn:            e.DependsOn,
		Description:          e.Description,
		Name:                 e.Name,
		Type:                 e.Type,
		UserProperties:       e.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type ExecuteDataFlowActivity.
func (e *ExecuteDataFlowActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: e.AdditionalProperties,
		DependsOn:            e.DependsOn,
		Description:          e.Description,
		LinkedServiceName:    e.LinkedServiceName,
		Name:                 e.Name,
		Policy:               e.Policy,
		Type:                 e.Type,
		UserProperties:       e.UserProperties,
	}
}

// ExecuteDataFlowActivityTypeProperties - Execute data flow activity properties.
type ExecuteDataFlowActivityTypeProperties struct {
	// REQUIRED; Data flow reference.
	Dataflow *DataFlowReference

	// Compute properties for data flow activity.
	Compute *ExecuteDataFlowActivityTypePropertiesCompute

	// Continue on error setting used for data flow execution. Enables processing to continue if a sink fails. Type: boolean (or
	// Expression with resultType boolean)
	ContinueOnError any

	// The integration runtime reference.
	IntegrationRuntime *IntegrationRuntimeReference

	// Concurrent run setting used for data flow execution. Allows sinks with the same save order to be processed concurrently.
	// Type: boolean (or Expression with resultType boolean)
	RunConcurrently any

	// Specify number of parallel staging for sources applicable to the sink. Type: integer (or Expression with resultType integer)
	SourceStagingConcurrency any

	// Staging info for execute data flow activity.
	Staging *DataFlowStagingInfo

	// Trace level setting used for data flow monitoring output. Supported values are: 'coarse', 'fine', and 'none'. Type: string
	// (or Expression with resultType string)
	TraceLevel any
}

func (e *ExecuteDataFlowActivityTypeProperties) GetDataflow() (rv *DataFlowReference) {
	if e != nil {
		return e.Dataflow
	}
	return
}

func (e *ExecuteDataFlowActivityTypeProperties) GetCompute() (rv *ExecuteDataFlowActivityTypePropertiesCompute) {
	if e != nil {
		return e.Compute
	}
	return
}

func (e *ExecuteDataFlowActivityTypeProperties) GetContinueOnError() (rv any) {
	if e != nil {
		return e.ContinueOnError
	}
	return
}

func (e *ExecuteDataFlowActivityTypeProperties) GetIntegrationRuntime() (rv *IntegrationRuntimeReference) {
	if e != nil {
		return e.IntegrationRuntime
	}
	return
}

func (e *ExecuteDataFlowActivityTypeProperties) GetRunConcurrently() (rv any) {
	if e != nil {
		return e.RunConcurrently
	}
	return
}

func (e *ExecuteDataFlowActivityTypeProperties) GetSourceStagingConcurrency() (rv any) {
	if e != nil {
		return e.SourceStagingConcurrency
	}
	return
}

func (e *ExecuteDataFlowActivityTypeProperties) GetStaging() (rv *DataFlowStagingInfo) {
	if e != nil {
		return e.Staging
	}
	return
}

func (e *ExecuteDataFlowActivityTypeProperties) GetTraceLevel() (rv any) {
	if e != nil {
		return e.TraceLevel
	}
	return
}

// ExecuteDataFlowActivityTypePropertiesCompute - Compute properties for data flow activity.
type ExecuteDataFlowActivityTypePropertiesCompute struct {
	// Compute type of the cluster which will execute data flow job.
	ComputeType *DataFlowComputeType

	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
	CoreCount *int32
}

func (e *ExecuteDataFlowActivityTypePropertiesCompute) GetComputeType() (rv *DataFlowComputeType) {
	if e != nil {
		return e.ComputeType
	}
	return
}

func (e *ExecuteDataFlowActivityTypePropertiesCompute) GetCoreCount() (rv int32) {
	if e != nil && e.CoreCount != nil {
		return *e.CoreCount
	}
	return
}

// ExecutePipelineActivity - Execute pipeline activity.
type ExecutePipelineActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Execute pipeline activity properties.
	TypeProperties *ExecutePipelineActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (e *ExecutePipelineActivity) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExecutePipelineActivity) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

func (e *ExecutePipelineActivity) GetTypeProperties() (rv *ExecutePipelineActivityTypeProperties) {
	if e != nil {
		return e.TypeProperties
	}
	return
}

func (e *ExecutePipelineActivity) GetAdditionalProperties() (rv map[string]any) {
	if e != nil {
		return e.AdditionalProperties
	}
	return
}

func (e *ExecutePipelineActivity) GetDependsOn() (rv []*ActivityDependency) {
	if e != nil {
		return e.DependsOn
	}
	return
}

func (e *ExecutePipelineActivity) GetDescription() (rv string) {
	if e != nil && e.Description != nil {
		return *e.Description
	}
	return
}

func (e *ExecutePipelineActivity) GetUserProperties() (rv []*UserProperty) {
	if e != nil {
		return e.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type ExecutePipelineActivity.
func (e *ExecutePipelineActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: e.AdditionalProperties,
		DependsOn:            e.DependsOn,
		Description:          e.Description,
		Name:                 e.Name,
		Type:                 e.Type,
		UserProperties:       e.UserProperties,
	}
}

// GetControlActivity implements the ControlActivityClassification interface for type ExecutePipelineActivity.
func (e *ExecutePipelineActivity) GetControlActivity() *ControlActivity {
	return &ControlActivity{
		AdditionalProperties: e.AdditionalProperties,
		DependsOn:            e.DependsOn,
		Description:          e.Description,
		Name:                 e.Name,
		Type:                 e.Type,
		UserProperties:       e.UserProperties,
	}
}

// ExecutePipelineActivityTypeProperties - Execute pipeline activity properties.
type ExecutePipelineActivityTypeProperties struct {
	// REQUIRED; Pipeline reference.
	Pipeline *PipelineReference

	// Pipeline parameters.
	Parameters map[string]any

	// Defines whether activity execution will wait for the dependent pipeline execution to finish. Default is false.
	WaitOnCompletion *bool
}

func (e *ExecutePipelineActivityTypeProperties) GetPipeline() (rv *PipelineReference) {
	if e != nil {
		return e.Pipeline
	}
	return
}

func (e *ExecutePipelineActivityTypeProperties) GetParameters() (rv map[string]any) {
	if e != nil {
		return e.Parameters
	}
	return
}

func (e *ExecutePipelineActivityTypeProperties) GetWaitOnCompletion() (rv bool) {
	if e != nil && e.WaitOnCompletion != nil {
		return *e.WaitOnCompletion
	}
	return
}

// ExecuteSSISPackageActivity - Execute SSIS package activity.
type ExecuteSSISPackageActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Execute SSIS package activity properties.
	TypeProperties *ExecuteSSISPackageActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (e *ExecuteSSISPackageActivity) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExecuteSSISPackageActivity) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

func (e *ExecuteSSISPackageActivity) GetTypeProperties() (rv *ExecuteSSISPackageActivityTypeProperties) {
	if e != nil {
		return e.TypeProperties
	}
	return
}

func (e *ExecuteSSISPackageActivity) GetAdditionalProperties() (rv map[string]any) {
	if e != nil {
		return e.AdditionalProperties
	}
	return
}

func (e *ExecuteSSISPackageActivity) GetDependsOn() (rv []*ActivityDependency) {
	if e != nil {
		return e.DependsOn
	}
	return
}

func (e *ExecuteSSISPackageActivity) GetDescription() (rv string) {
	if e != nil && e.Description != nil {
		return *e.Description
	}
	return
}

func (e *ExecuteSSISPackageActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if e != nil {
		return e.LinkedServiceName
	}
	return
}

func (e *ExecuteSSISPackageActivity) GetPolicy() (rv *ActivityPolicy) {
	if e != nil {
		return e.Policy
	}
	return
}

func (e *ExecuteSSISPackageActivity) GetUserProperties() (rv []*UserProperty) {
	if e != nil {
		return e.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type ExecuteSSISPackageActivity.
func (e *ExecuteSSISPackageActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: e.AdditionalProperties,
		DependsOn:            e.DependsOn,
		Description:          e.Description,
		Name:                 e.Name,
		Type:                 e.Type,
		UserProperties:       e.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type ExecuteSSISPackageActivity.
func (e *ExecuteSSISPackageActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: e.AdditionalProperties,
		DependsOn:            e.DependsOn,
		Description:          e.Description,
		LinkedServiceName:    e.LinkedServiceName,
		Name:                 e.Name,
		Policy:               e.Policy,
		Type:                 e.Type,
		UserProperties:       e.UserProperties,
	}
}

// ExecuteSSISPackageActivityTypeProperties - Execute SSIS package activity properties.
type ExecuteSSISPackageActivityTypeProperties struct {
	// REQUIRED; The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// REQUIRED; SSIS package location.
	PackageLocation *SSISPackageLocation

	// The environment path to execute the SSIS package. Type: string (or Expression with resultType string).
	EnvironmentPath any

	// The package execution credential.
	ExecutionCredential *SSISExecutionCredential

	// SSIS package execution log location.
	LogLocation *SSISLogLocation

	// The logging level of SSIS package execution. Type: string (or Expression with resultType string).
	LoggingLevel any

	// The package level connection managers to execute the SSIS package.
	PackageConnectionManagers map[string]map[string]*SSISExecutionParameter

	// The package level parameters to execute the SSIS package.
	PackageParameters map[string]*SSISExecutionParameter

	// The project level connection managers to execute the SSIS package.
	ProjectConnectionManagers map[string]map[string]*SSISExecutionParameter

	// The project level parameters to execute the SSIS package.
	ProjectParameters map[string]*SSISExecutionParameter

	// The property overrides to execute the SSIS package.
	PropertyOverrides map[string]*SSISPropertyOverride

	// Specifies the runtime to execute SSIS package. The value should be "x86" or "x64". Type: string (or Expression with resultType
	// string).
	Runtime any
}

func (e *ExecuteSSISPackageActivityTypeProperties) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if e != nil {
		return e.ConnectVia
	}
	return
}

func (e *ExecuteSSISPackageActivityTypeProperties) GetPackageLocation() (rv *SSISPackageLocation) {
	if e != nil {
		return e.PackageLocation
	}
	return
}

func (e *ExecuteSSISPackageActivityTypeProperties) GetEnvironmentPath() (rv any) {
	if e != nil {
		return e.EnvironmentPath
	}
	return
}

func (e *ExecuteSSISPackageActivityTypeProperties) GetExecutionCredential() (rv *SSISExecutionCredential) {
	if e != nil {
		return e.ExecutionCredential
	}
	return
}

func (e *ExecuteSSISPackageActivityTypeProperties) GetLogLocation() (rv *SSISLogLocation) {
	if e != nil {
		return e.LogLocation
	}
	return
}

func (e *ExecuteSSISPackageActivityTypeProperties) GetLoggingLevel() (rv any) {
	if e != nil {
		return e.LoggingLevel
	}
	return
}

func (e *ExecuteSSISPackageActivityTypeProperties) GetPackageConnectionManagers() (rv map[string]map[string]*SSISExecutionParameter) {
	if e != nil {
		return e.PackageConnectionManagers
	}
	return
}

func (e *ExecuteSSISPackageActivityTypeProperties) GetPackageParameters() (rv map[string]*SSISExecutionParameter) {
	if e != nil {
		return e.PackageParameters
	}
	return
}

func (e *ExecuteSSISPackageActivityTypeProperties) GetProjectConnectionManagers() (rv map[string]map[string]*SSISExecutionParameter) {
	if e != nil {
		return e.ProjectConnectionManagers
	}
	return
}

func (e *ExecuteSSISPackageActivityTypeProperties) GetProjectParameters() (rv map[string]*SSISExecutionParameter) {
	if e != nil {
		return e.ProjectParameters
	}
	return
}

func (e *ExecuteSSISPackageActivityTypeProperties) GetPropertyOverrides() (rv map[string]*SSISPropertyOverride) {
	if e != nil {
		return e.PropertyOverrides
	}
	return
}

func (e *ExecuteSSISPackageActivityTypeProperties) GetRuntime() (rv any) {
	if e != nil {
		return e.Runtime
	}
	return
}

// ExecutionActivity - Base class for all execution activities.
type ExecutionActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (e *ExecutionActivity) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExecutionActivity) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

func (e *ExecutionActivity) GetAdditionalProperties() (rv map[string]any) {
	if e != nil {
		return e.AdditionalProperties
	}
	return
}

func (e *ExecutionActivity) GetDependsOn() (rv []*ActivityDependency) {
	if e != nil {
		return e.DependsOn
	}
	return
}

func (e *ExecutionActivity) GetDescription() (rv string) {
	if e != nil && e.Description != nil {
		return *e.Description
	}
	return
}

func (e *ExecutionActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if e != nil {
		return e.LinkedServiceName
	}
	return
}

func (e *ExecutionActivity) GetPolicy() (rv *ActivityPolicy) {
	if e != nil {
		return e.Policy
	}
	return
}

func (e *ExecutionActivity) GetUserProperties() (rv []*UserProperty) {
	if e != nil {
		return e.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type ExecutionActivity.
func (e *ExecutionActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: e.AdditionalProperties,
		DependsOn:            e.DependsOn,
		Description:          e.Description,
		Name:                 e.Name,
		Type:                 e.Type,
		UserProperties:       e.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type ExecutionActivity.
func (e *ExecutionActivity) GetExecutionActivity() *ExecutionActivity { return e }

// ExportSettings - Export command settings.
type ExportSettings struct {
	// REQUIRED; The export setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

func (e *ExportSettings) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

func (e *ExportSettings) GetAdditionalProperties() (rv map[string]any) {
	if e != nil {
		return e.AdditionalProperties
	}
	return
}

// GetExportSettings implements the ExportSettingsClassification interface for type ExportSettings.
func (e *ExportSettings) GetExportSettings() *ExportSettings { return e }

// ExposureControlRequest - The exposure control request.
type ExposureControlRequest struct {
	// The feature name.
	FeatureName *string

	// The feature type.
	FeatureType *string
}

func (e *ExposureControlRequest) GetFeatureName() (rv string) {
	if e != nil && e.FeatureName != nil {
		return *e.FeatureName
	}
	return
}

func (e *ExposureControlRequest) GetFeatureType() (rv string) {
	if e != nil && e.FeatureType != nil {
		return *e.FeatureType
	}
	return
}

// ExposureControlResponse - The exposure control response.
type ExposureControlResponse struct {
	// READ-ONLY; The feature name.
	FeatureName *string

	// READ-ONLY; The feature value.
	Value *string
}

func (e *ExposureControlResponse) GetFeatureName() (rv string) {
	if e != nil && e.FeatureName != nil {
		return *e.FeatureName
	}
	return
}

func (e *ExposureControlResponse) GetValue() (rv string) {
	if e != nil && e.Value != nil {
		return *e.Value
	}
	return
}

// Expression - Azure Synapse expression definition.
type Expression struct {
	// REQUIRED; Expression type.
	Type *ExpressionType

	// REQUIRED; Expression value.
	Value *string
}

func (e *Expression) GetType() (rv *ExpressionType) {
	if e != nil {
		return e.Type
	}
	return
}

func (e *Expression) GetValue() (rv string) {
	if e != nil && e.Value != nil {
		return *e.Value
	}
	return
}

// FailActivity - This activity will fail within its own scope and output a custom error message and error code. The error
// message and code can provided either as a string literal or as an expression that can be
// evaluated to a string at runtime. The activity scope can be the whole pipeline or a control activity (e.g. foreach, switch,
// until), if the fail activity is contained in it.
type FailActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Fail activity properties.
	TypeProperties *FailActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (f *FailActivity) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

func (f *FailActivity) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FailActivity) GetTypeProperties() (rv *FailActivityTypeProperties) {
	if f != nil {
		return f.TypeProperties
	}
	return
}

func (f *FailActivity) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

func (f *FailActivity) GetDependsOn() (rv []*ActivityDependency) {
	if f != nil {
		return f.DependsOn
	}
	return
}

func (f *FailActivity) GetDescription() (rv string) {
	if f != nil && f.Description != nil {
		return *f.Description
	}
	return
}

func (f *FailActivity) GetUserProperties() (rv []*UserProperty) {
	if f != nil {
		return f.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type FailActivity.
func (f *FailActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: f.AdditionalProperties,
		DependsOn:            f.DependsOn,
		Description:          f.Description,
		Name:                 f.Name,
		Type:                 f.Type,
		UserProperties:       f.UserProperties,
	}
}

// GetControlActivity implements the ControlActivityClassification interface for type FailActivity.
func (f *FailActivity) GetControlActivity() *ControlActivity {
	return &ControlActivity{
		AdditionalProperties: f.AdditionalProperties,
		DependsOn:            f.DependsOn,
		Description:          f.Description,
		Name:                 f.Name,
		Type:                 f.Type,
		UserProperties:       f.UserProperties,
	}
}

// FailActivityTypeProperties - Fail activity properties.
type FailActivityTypeProperties struct {
	// REQUIRED; The error code that categorizes the error type of the Fail activity. It can be dynamic content that's evaluated
	// to a non empty/blank string at runtime. Type: string (or Expression with resultType
	// string).
	ErrorCode any

	// REQUIRED; The error message that surfaced in the Fail activity. It can be dynamic content that's evaluated to a non empty/blank
	// string at runtime. Type: string (or Expression with resultType string).
	Message any
}

func (f *FailActivityTypeProperties) GetErrorCode() (rv any) {
	if f != nil {
		return f.ErrorCode
	}
	return
}

func (f *FailActivityTypeProperties) GetMessage() (rv any) {
	if f != nil {
		return f.Message
	}
	return
}

// FileServerLinkedService - File system linked service.
type FileServerLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; File system linked service properties.
	TypeProperties *FileServerLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (f *FileServerLinkedService) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FileServerLinkedService) GetTypeProperties() (rv *FileServerLinkedServiceTypeProperties) {
	if f != nil {
		return f.TypeProperties
	}
	return
}

func (f *FileServerLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

func (f *FileServerLinkedService) GetAnnotations() (rv []any) {
	if f != nil {
		return f.Annotations
	}
	return
}

func (f *FileServerLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if f != nil {
		return f.ConnectVia
	}
	return
}

func (f *FileServerLinkedService) GetDescription() (rv string) {
	if f != nil && f.Description != nil {
		return *f.Description
	}
	return
}

func (f *FileServerLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if f != nil {
		return f.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type FileServerLinkedService.
func (f *FileServerLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: f.AdditionalProperties,
		Annotations:          f.Annotations,
		ConnectVia:           f.ConnectVia,
		Description:          f.Description,
		Parameters:           f.Parameters,
		Type:                 f.Type,
	}
}

// FileServerLinkedServiceTypeProperties - File system linked service properties.
type FileServerLinkedServiceTypeProperties struct {
	// REQUIRED; Host name of the server. Type: string (or Expression with resultType string).
	Host any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password to logon the server.
	Password SecretBaseClassification

	// User ID to logon the server. Type: string (or Expression with resultType string).
	UserID any
}

func (f *FileServerLinkedServiceTypeProperties) GetHost() (rv any) {
	if f != nil {
		return f.Host
	}
	return
}

func (f *FileServerLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if f != nil {
		return f.EncryptedCredential
	}
	return
}

func (f *FileServerLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if f != nil {
		return f.Password
	}
	return
}

func (f *FileServerLinkedServiceTypeProperties) GetUserID() (rv any) {
	if f != nil {
		return f.UserID
	}
	return
}

// FileServerLocation - The location of file server dataset.
type FileServerLocation struct {
	// REQUIRED; Type of dataset storage location.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName any

	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath any
}

func (f *FileServerLocation) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FileServerLocation) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

func (f *FileServerLocation) GetFileName() (rv any) {
	if f != nil {
		return f.FileName
	}
	return
}

func (f *FileServerLocation) GetFolderPath() (rv any) {
	if f != nil {
		return f.FolderPath
	}
	return
}

// GetDatasetLocation implements the DatasetLocationClassification interface for type FileServerLocation.
func (f *FileServerLocation) GetDatasetLocation() *DatasetLocation {
	return &DatasetLocation{
		AdditionalProperties: f.AdditionalProperties,
		FileName:             f.FileName,
		FolderPath:           f.FolderPath,
		Type:                 f.Type,
	}
}

// FileServerReadSettings - File server read settings.
type FileServerReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression
	// with resultType boolean).
	DeleteFilesAfterCompletion any

	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool

	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression
	// with resultType string).
	FileFilter any

	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy.
	// Type: string (or Expression with resultType string).
	FileListPath any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd any

	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart any

	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// FileServer wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName any

	// FileServer wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath any
}

func (f *FileServerReadSettings) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FileServerReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

func (f *FileServerReadSettings) GetDeleteFilesAfterCompletion() (rv any) {
	if f != nil {
		return f.DeleteFilesAfterCompletion
	}
	return
}

func (f *FileServerReadSettings) GetEnablePartitionDiscovery() (rv bool) {
	if f != nil && f.EnablePartitionDiscovery != nil {
		return *f.EnablePartitionDiscovery
	}
	return
}

func (f *FileServerReadSettings) GetFileFilter() (rv any) {
	if f != nil {
		return f.FileFilter
	}
	return
}

func (f *FileServerReadSettings) GetFileListPath() (rv any) {
	if f != nil {
		return f.FileListPath
	}
	return
}

func (f *FileServerReadSettings) GetMaxConcurrentConnections() (rv any) {
	if f != nil {
		return f.MaxConcurrentConnections
	}
	return
}

func (f *FileServerReadSettings) GetModifiedDatetimeEnd() (rv any) {
	if f != nil {
		return f.ModifiedDatetimeEnd
	}
	return
}

func (f *FileServerReadSettings) GetModifiedDatetimeStart() (rv any) {
	if f != nil {
		return f.ModifiedDatetimeStart
	}
	return
}

func (f *FileServerReadSettings) GetPartitionRootPath() (rv any) {
	if f != nil {
		return f.PartitionRootPath
	}
	return
}

func (f *FileServerReadSettings) GetRecursive() (rv any) {
	if f != nil {
		return f.Recursive
	}
	return
}

func (f *FileServerReadSettings) GetWildcardFileName() (rv any) {
	if f != nil {
		return f.WildcardFileName
	}
	return
}

func (f *FileServerReadSettings) GetWildcardFolderPath() (rv any) {
	if f != nil {
		return f.WildcardFolderPath
	}
	return
}

// GetStoreReadSettings implements the StoreReadSettingsClassification interface for type FileServerReadSettings.
func (f *FileServerReadSettings) GetStoreReadSettings() *StoreReadSettings {
	return &StoreReadSettings{
		AdditionalProperties:     f.AdditionalProperties,
		MaxConcurrentConnections: f.MaxConcurrentConnections,
		Type:                     f.Type,
	}
}

// FileServerWriteSettings - File server write settings.
type FileServerWriteSettings struct {
	// REQUIRED; The write setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The type of copy behavior for copy sink.
	CopyBehavior any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any
}

func (f *FileServerWriteSettings) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FileServerWriteSettings) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

func (f *FileServerWriteSettings) GetCopyBehavior() (rv any) {
	if f != nil {
		return f.CopyBehavior
	}
	return
}

func (f *FileServerWriteSettings) GetMaxConcurrentConnections() (rv any) {
	if f != nil {
		return f.MaxConcurrentConnections
	}
	return
}

// GetStoreWriteSettings implements the StoreWriteSettingsClassification interface for type FileServerWriteSettings.
func (f *FileServerWriteSettings) GetStoreWriteSettings() *StoreWriteSettings {
	return &StoreWriteSettings{
		AdditionalProperties:     f.AdditionalProperties,
		CopyBehavior:             f.CopyBehavior,
		MaxConcurrentConnections: f.MaxConcurrentConnections,
		Type:                     f.Type,
	}
}

// FileShareDataset - An on-premises file system dataset.
type FileShareDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// On-premises file system dataset properties.
	TypeProperties *FileShareDatasetTypeProperties
}

func (f *FileShareDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if f != nil {
		return f.LinkedServiceName
	}
	return
}

func (f *FileShareDataset) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FileShareDataset) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

func (f *FileShareDataset) GetAnnotations() (rv []any) {
	if f != nil {
		return f.Annotations
	}
	return
}

func (f *FileShareDataset) GetDescription() (rv string) {
	if f != nil && f.Description != nil {
		return *f.Description
	}
	return
}

func (f *FileShareDataset) GetFolder() (rv *DatasetFolder) {
	if f != nil {
		return f.Folder
	}
	return
}

func (f *FileShareDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if f != nil {
		return f.Parameters
	}
	return
}

func (f *FileShareDataset) GetSchema() (rv any) {
	if f != nil {
		return f.Schema
	}
	return
}

func (f *FileShareDataset) GetStructure() (rv any) {
	if f != nil {
		return f.Structure
	}
	return
}

func (f *FileShareDataset) GetTypeProperties() (rv *FileShareDatasetTypeProperties) {
	if f != nil {
		return f.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type FileShareDataset.
func (f *FileShareDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: f.AdditionalProperties,
		Annotations:          f.Annotations,
		Description:          f.Description,
		Folder:               f.Folder,
		LinkedServiceName:    f.LinkedServiceName,
		Parameters:           f.Parameters,
		Schema:               f.Schema,
		Structure:            f.Structure,
		Type:                 f.Type,
	}
}

// FileShareDatasetTypeProperties - On-premises file system dataset properties.
type FileShareDatasetTypeProperties struct {
	// The data compression method used for the file system.
	Compression *DatasetCompression

	// Specify a filter to be used to select a subset of files in the folderPath rather than all files. Type: string (or Expression
	// with resultType string).
	FileFilter any

	// The name of the on-premises file system. Type: string (or Expression with resultType string).
	FileName any

	// The path of the on-premises file system. Type: string (or Expression with resultType string).
	FolderPath any

	// The format of the files.
	Format DatasetStorageFormatClassification

	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd any

	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart any
}

func (f *FileShareDatasetTypeProperties) GetCompression() (rv *DatasetCompression) {
	if f != nil {
		return f.Compression
	}
	return
}

func (f *FileShareDatasetTypeProperties) GetFileFilter() (rv any) {
	if f != nil {
		return f.FileFilter
	}
	return
}

func (f *FileShareDatasetTypeProperties) GetFileName() (rv any) {
	if f != nil {
		return f.FileName
	}
	return
}

func (f *FileShareDatasetTypeProperties) GetFolderPath() (rv any) {
	if f != nil {
		return f.FolderPath
	}
	return
}

func (f *FileShareDatasetTypeProperties) GetFormat() (rv DatasetStorageFormatClassification) {
	if f != nil {
		return f.Format
	}
	return
}

func (f *FileShareDatasetTypeProperties) GetModifiedDatetimeEnd() (rv any) {
	if f != nil {
		return f.ModifiedDatetimeEnd
	}
	return
}

func (f *FileShareDatasetTypeProperties) GetModifiedDatetimeStart() (rv any) {
	if f != nil {
		return f.ModifiedDatetimeStart
	}
	return
}

// FileSystemSink - A copy activity file system sink.
type FileSystemSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The type of copy behavior for copy sink.
	CopyBehavior any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (f *FileSystemSink) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FileSystemSink) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

func (f *FileSystemSink) GetCopyBehavior() (rv any) {
	if f != nil {
		return f.CopyBehavior
	}
	return
}

func (f *FileSystemSink) GetMaxConcurrentConnections() (rv any) {
	if f != nil {
		return f.MaxConcurrentConnections
	}
	return
}

func (f *FileSystemSink) GetSinkRetryCount() (rv any) {
	if f != nil {
		return f.SinkRetryCount
	}
	return
}

func (f *FileSystemSink) GetSinkRetryWait() (rv any) {
	if f != nil {
		return f.SinkRetryWait
	}
	return
}

func (f *FileSystemSink) GetWriteBatchSize() (rv any) {
	if f != nil {
		return f.WriteBatchSize
	}
	return
}

func (f *FileSystemSink) GetWriteBatchTimeout() (rv any) {
	if f != nil {
		return f.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type FileSystemSink.
func (f *FileSystemSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     f.AdditionalProperties,
		MaxConcurrentConnections: f.MaxConcurrentConnections,
		SinkRetryCount:           f.SinkRetryCount,
		SinkRetryWait:            f.SinkRetryWait,
		Type:                     f.Type,
		WriteBatchSize:           f.WriteBatchSize,
		WriteBatchTimeout:        f.WriteBatchTimeout,
	}
}

// FileSystemSource - A copy activity file system source.
type FileSystemSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (f *FileSystemSource) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FileSystemSource) GetAdditionalColumns() (rv any) {
	if f != nil {
		return f.AdditionalColumns
	}
	return
}

func (f *FileSystemSource) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

func (f *FileSystemSource) GetMaxConcurrentConnections() (rv any) {
	if f != nil {
		return f.MaxConcurrentConnections
	}
	return
}

func (f *FileSystemSource) GetRecursive() (rv any) {
	if f != nil {
		return f.Recursive
	}
	return
}

func (f *FileSystemSource) GetSourceRetryCount() (rv any) {
	if f != nil {
		return f.SourceRetryCount
	}
	return
}

func (f *FileSystemSource) GetSourceRetryWait() (rv any) {
	if f != nil {
		return f.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type FileSystemSource.
func (f *FileSystemSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     f.AdditionalProperties,
		MaxConcurrentConnections: f.MaxConcurrentConnections,
		SourceRetryCount:         f.SourceRetryCount,
		SourceRetryWait:          f.SourceRetryWait,
		Type:                     f.Type,
	}
}

// FilterActivity - Filter and return results from input array based on the conditions.
type FilterActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Filter activity properties.
	TypeProperties *FilterActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (f *FilterActivity) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

func (f *FilterActivity) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FilterActivity) GetTypeProperties() (rv *FilterActivityTypeProperties) {
	if f != nil {
		return f.TypeProperties
	}
	return
}

func (f *FilterActivity) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

func (f *FilterActivity) GetDependsOn() (rv []*ActivityDependency) {
	if f != nil {
		return f.DependsOn
	}
	return
}

func (f *FilterActivity) GetDescription() (rv string) {
	if f != nil && f.Description != nil {
		return *f.Description
	}
	return
}

func (f *FilterActivity) GetUserProperties() (rv []*UserProperty) {
	if f != nil {
		return f.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type FilterActivity.
func (f *FilterActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: f.AdditionalProperties,
		DependsOn:            f.DependsOn,
		Description:          f.Description,
		Name:                 f.Name,
		Type:                 f.Type,
		UserProperties:       f.UserProperties,
	}
}

// GetControlActivity implements the ControlActivityClassification interface for type FilterActivity.
func (f *FilterActivity) GetControlActivity() *ControlActivity {
	return &ControlActivity{
		AdditionalProperties: f.AdditionalProperties,
		DependsOn:            f.DependsOn,
		Description:          f.Description,
		Name:                 f.Name,
		Type:                 f.Type,
		UserProperties:       f.UserProperties,
	}
}

// FilterActivityTypeProperties - Filter activity properties.
type FilterActivityTypeProperties struct {
	// REQUIRED; Condition to be used for filtering the input.
	Condition *Expression

	// REQUIRED; Input array on which filter should be applied.
	Items *Expression
}

func (f *FilterActivityTypeProperties) GetCondition() (rv *Expression) {
	if f != nil {
		return f.Condition
	}
	return
}

func (f *FilterActivityTypeProperties) GetItems() (rv *Expression) {
	if f != nil {
		return f.Items
	}
	return
}

// Flowlet - Data flow flowlet
type Flowlet struct {
	// REQUIRED; Type of data flow.
	Type *string

	// List of tags that can be used for describing the data flow.
	Annotations []any

	// The description of the data flow.
	Description *string

	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowFolder

	// Flowlet type properties.
	TypeProperties *FlowletTypeProperties
}

func (f *Flowlet) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *Flowlet) GetAnnotations() (rv []any) {
	if f != nil {
		return f.Annotations
	}
	return
}

func (f *Flowlet) GetDescription() (rv string) {
	if f != nil && f.Description != nil {
		return *f.Description
	}
	return
}

func (f *Flowlet) GetFolder() (rv *DataFlowFolder) {
	if f != nil {
		return f.Folder
	}
	return
}

func (f *Flowlet) GetTypeProperties() (rv *FlowletTypeProperties) {
	if f != nil {
		return f.TypeProperties
	}
	return
}

// GetDataFlow implements the DataFlowClassification interface for type Flowlet.
func (f *Flowlet) GetDataFlow() *DataFlow {
	return &DataFlow{
		Annotations: f.Annotations,
		Description: f.Description,
		Folder:      f.Folder,
		Type:        f.Type,
	}
}

// FlowletTypeProperties - Flowlet type properties.
type FlowletTypeProperties struct {
	// Flowlet script.
	Script *string

	// Flowlet script lines.
	ScriptLines []*string

	// List of sinks in Flowlet.
	Sinks []*DataFlowSink

	// List of sources in Flowlet.
	Sources []*DataFlowSource

	// List of transformations in Flowlet.
	Transformations []*Transformation
}

func (f *FlowletTypeProperties) GetScript() (rv string) {
	if f != nil && f.Script != nil {
		return *f.Script
	}
	return
}

func (f *FlowletTypeProperties) GetScriptLines() (rv []*string) {
	if f != nil {
		return f.ScriptLines
	}
	return
}

func (f *FlowletTypeProperties) GetSinks() (rv []*DataFlowSink) {
	if f != nil {
		return f.Sinks
	}
	return
}

func (f *FlowletTypeProperties) GetSources() (rv []*DataFlowSource) {
	if f != nil {
		return f.Sources
	}
	return
}

func (f *FlowletTypeProperties) GetTransformations() (rv []*Transformation) {
	if f != nil {
		return f.Transformations
	}
	return
}

// ForEachActivity - This activity is used for iterating over a collection and execute given activities.
type ForEachActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; ForEach activity properties.
	TypeProperties *ForEachActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (f *ForEachActivity) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

func (f *ForEachActivity) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *ForEachActivity) GetTypeProperties() (rv *ForEachActivityTypeProperties) {
	if f != nil {
		return f.TypeProperties
	}
	return
}

func (f *ForEachActivity) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

func (f *ForEachActivity) GetDependsOn() (rv []*ActivityDependency) {
	if f != nil {
		return f.DependsOn
	}
	return
}

func (f *ForEachActivity) GetDescription() (rv string) {
	if f != nil && f.Description != nil {
		return *f.Description
	}
	return
}

func (f *ForEachActivity) GetUserProperties() (rv []*UserProperty) {
	if f != nil {
		return f.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type ForEachActivity.
func (f *ForEachActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: f.AdditionalProperties,
		DependsOn:            f.DependsOn,
		Description:          f.Description,
		Name:                 f.Name,
		Type:                 f.Type,
		UserProperties:       f.UserProperties,
	}
}

// GetControlActivity implements the ControlActivityClassification interface for type ForEachActivity.
func (f *ForEachActivity) GetControlActivity() *ControlActivity {
	return &ControlActivity{
		AdditionalProperties: f.AdditionalProperties,
		DependsOn:            f.DependsOn,
		Description:          f.Description,
		Name:                 f.Name,
		Type:                 f.Type,
		UserProperties:       f.UserProperties,
	}
}

// ForEachActivityTypeProperties - ForEach activity properties.
type ForEachActivityTypeProperties struct {
	// REQUIRED; List of activities to execute .
	Activities []ActivityClassification

	// REQUIRED; Collection to iterate.
	Items *Expression

	// Batch count to be used for controlling the number of parallel execution (when isSequential is set to false).
	BatchCount *int32

	// Should the loop be executed in sequence or in parallel (max 50)
	IsSequential *bool
}

func (f *ForEachActivityTypeProperties) GetActivities() (rv []ActivityClassification) {
	if f != nil {
		return f.Activities
	}
	return
}

func (f *ForEachActivityTypeProperties) GetItems() (rv *Expression) {
	if f != nil {
		return f.Items
	}
	return
}

func (f *ForEachActivityTypeProperties) GetBatchCount() (rv int32) {
	if f != nil && f.BatchCount != nil {
		return *f.BatchCount
	}
	return
}

func (f *ForEachActivityTypeProperties) GetIsSequential() (rv bool) {
	if f != nil && f.IsSequential != nil {
		return *f.IsSequential
	}
	return
}

// FormatReadSettings - Format read settings.
type FormatReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

func (f *FormatReadSettings) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FormatReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

// GetFormatReadSettings implements the FormatReadSettingsClassification interface for type FormatReadSettings.
func (f *FormatReadSettings) GetFormatReadSettings() *FormatReadSettings { return f }

// FormatWriteSettings - Format write settings.
type FormatWriteSettings struct {
	// REQUIRED; The write setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

func (f *FormatWriteSettings) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FormatWriteSettings) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

// GetFormatWriteSettings implements the FormatWriteSettingsClassification interface for type FormatWriteSettings.
func (f *FormatWriteSettings) GetFormatWriteSettings() *FormatWriteSettings { return f }

// FtpReadSettings - Ftp read settings.
type FtpReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression
	// with resultType boolean).
	DeleteFilesAfterCompletion any

	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking any

	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool

	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy.
	// Type: string (or Expression with resultType string).
	FileListPath any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// Specify whether to use binary transfer mode for FTP stores.
	UseBinaryTransfer *bool

	// Ftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName any

	// Ftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath any
}

func (f *FtpReadSettings) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FtpReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

func (f *FtpReadSettings) GetDeleteFilesAfterCompletion() (rv any) {
	if f != nil {
		return f.DeleteFilesAfterCompletion
	}
	return
}

func (f *FtpReadSettings) GetDisableChunking() (rv any) {
	if f != nil {
		return f.DisableChunking
	}
	return
}

func (f *FtpReadSettings) GetEnablePartitionDiscovery() (rv bool) {
	if f != nil && f.EnablePartitionDiscovery != nil {
		return *f.EnablePartitionDiscovery
	}
	return
}

func (f *FtpReadSettings) GetFileListPath() (rv any) {
	if f != nil {
		return f.FileListPath
	}
	return
}

func (f *FtpReadSettings) GetMaxConcurrentConnections() (rv any) {
	if f != nil {
		return f.MaxConcurrentConnections
	}
	return
}

func (f *FtpReadSettings) GetPartitionRootPath() (rv any) {
	if f != nil {
		return f.PartitionRootPath
	}
	return
}

func (f *FtpReadSettings) GetRecursive() (rv any) {
	if f != nil {
		return f.Recursive
	}
	return
}

func (f *FtpReadSettings) GetUseBinaryTransfer() (rv bool) {
	if f != nil && f.UseBinaryTransfer != nil {
		return *f.UseBinaryTransfer
	}
	return
}

func (f *FtpReadSettings) GetWildcardFileName() (rv any) {
	if f != nil {
		return f.WildcardFileName
	}
	return
}

func (f *FtpReadSettings) GetWildcardFolderPath() (rv any) {
	if f != nil {
		return f.WildcardFolderPath
	}
	return
}

// GetStoreReadSettings implements the StoreReadSettingsClassification interface for type FtpReadSettings.
func (f *FtpReadSettings) GetStoreReadSettings() *StoreReadSettings {
	return &StoreReadSettings{
		AdditionalProperties:     f.AdditionalProperties,
		MaxConcurrentConnections: f.MaxConcurrentConnections,
		Type:                     f.Type,
	}
}

// FtpServerLinkedService - A FTP server Linked Service.
type FtpServerLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Properties specific to this linked service type.
	TypeProperties *FtpServerLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (f *FtpServerLinkedService) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FtpServerLinkedService) GetTypeProperties() (rv *FtpServerLinkedServiceTypeProperties) {
	if f != nil {
		return f.TypeProperties
	}
	return
}

func (f *FtpServerLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

func (f *FtpServerLinkedService) GetAnnotations() (rv []any) {
	if f != nil {
		return f.Annotations
	}
	return
}

func (f *FtpServerLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if f != nil {
		return f.ConnectVia
	}
	return
}

func (f *FtpServerLinkedService) GetDescription() (rv string) {
	if f != nil && f.Description != nil {
		return *f.Description
	}
	return
}

func (f *FtpServerLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if f != nil {
		return f.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type FtpServerLinkedService.
func (f *FtpServerLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: f.AdditionalProperties,
		Annotations:          f.Annotations,
		ConnectVia:           f.ConnectVia,
		Description:          f.Description,
		Parameters:           f.Parameters,
		Type:                 f.Type,
	}
}

// FtpServerLinkedServiceTypeProperties - Properties specific to this linked service type.
type FtpServerLinkedServiceTypeProperties struct {
	// REQUIRED; Host name of the FTP server. Type: string (or Expression with resultType string).
	Host any

	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *FtpAuthenticationType

	// If true, connect to the FTP server over SSL/TLS channel. Default value is true. Type: boolean (or Expression with resultType
	// boolean).
	EnableSSL any

	// If true, validate the FTP server SSL certificate when connect over SSL/TLS channel. Default value is true. Type: boolean
	// (or Expression with resultType boolean).
	EnableServerCertificateValidation any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password to logon the FTP server.
	Password SecretBaseClassification

	// The TCP port number that the FTP server uses to listen for client connections. Default value is 21. Type: integer (or Expression
	// with resultType integer), minimum: 0.
	Port any

	// Username to logon the FTP server. Type: string (or Expression with resultType string).
	UserName any
}

func (f *FtpServerLinkedServiceTypeProperties) GetHost() (rv any) {
	if f != nil {
		return f.Host
	}
	return
}

func (f *FtpServerLinkedServiceTypeProperties) GetAuthenticationType() (rv *FtpAuthenticationType) {
	if f != nil {
		return f.AuthenticationType
	}
	return
}

func (f *FtpServerLinkedServiceTypeProperties) GetEnableSSL() (rv any) {
	if f != nil {
		return f.EnableSSL
	}
	return
}

func (f *FtpServerLinkedServiceTypeProperties) GetEnableServerCertificateValidation() (rv any) {
	if f != nil {
		return f.EnableServerCertificateValidation
	}
	return
}

func (f *FtpServerLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if f != nil {
		return f.EncryptedCredential
	}
	return
}

func (f *FtpServerLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if f != nil {
		return f.Password
	}
	return
}

func (f *FtpServerLinkedServiceTypeProperties) GetPort() (rv any) {
	if f != nil {
		return f.Port
	}
	return
}

func (f *FtpServerLinkedServiceTypeProperties) GetUserName() (rv any) {
	if f != nil {
		return f.UserName
	}
	return
}

// FtpServerLocation - The location of ftp server dataset.
type FtpServerLocation struct {
	// REQUIRED; Type of dataset storage location.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName any

	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath any
}

func (f *FtpServerLocation) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

func (f *FtpServerLocation) GetAdditionalProperties() (rv map[string]any) {
	if f != nil {
		return f.AdditionalProperties
	}
	return
}

func (f *FtpServerLocation) GetFileName() (rv any) {
	if f != nil {
		return f.FileName
	}
	return
}

func (f *FtpServerLocation) GetFolderPath() (rv any) {
	if f != nil {
		return f.FolderPath
	}
	return
}

// GetDatasetLocation implements the DatasetLocationClassification interface for type FtpServerLocation.
func (f *FtpServerLocation) GetDatasetLocation() *DatasetLocation {
	return &DatasetLocation{
		AdditionalProperties: f.AdditionalProperties,
		FileName:             f.FileName,
		FolderPath:           f.FolderPath,
		Type:                 f.Type,
	}
}

// GenericDatasetTypeProperties - Properties specific to this dataset type.
type GenericDatasetTypeProperties struct {
	// The table name. Type: string (or Expression with resultType string).
	TableName any
}

func (g *GenericDatasetTypeProperties) GetTableName() (rv any) {
	if g != nil {
		return g.TableName
	}
	return
}

// GetMetadataActivity - Activity to get metadata of dataset
type GetMetadataActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; GetMetadata activity properties.
	TypeProperties *GetMetadataActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (g *GetMetadataActivity) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *GetMetadataActivity) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GetMetadataActivity) GetTypeProperties() (rv *GetMetadataActivityTypeProperties) {
	if g != nil {
		return g.TypeProperties
	}
	return
}

func (g *GetMetadataActivity) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GetMetadataActivity) GetDependsOn() (rv []*ActivityDependency) {
	if g != nil {
		return g.DependsOn
	}
	return
}

func (g *GetMetadataActivity) GetDescription() (rv string) {
	if g != nil && g.Description != nil {
		return *g.Description
	}
	return
}

func (g *GetMetadataActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if g != nil {
		return g.LinkedServiceName
	}
	return
}

func (g *GetMetadataActivity) GetPolicy() (rv *ActivityPolicy) {
	if g != nil {
		return g.Policy
	}
	return
}

func (g *GetMetadataActivity) GetUserProperties() (rv []*UserProperty) {
	if g != nil {
		return g.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type GetMetadataActivity.
func (g *GetMetadataActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: g.AdditionalProperties,
		DependsOn:            g.DependsOn,
		Description:          g.Description,
		Name:                 g.Name,
		Type:                 g.Type,
		UserProperties:       g.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type GetMetadataActivity.
func (g *GetMetadataActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: g.AdditionalProperties,
		DependsOn:            g.DependsOn,
		Description:          g.Description,
		LinkedServiceName:    g.LinkedServiceName,
		Name:                 g.Name,
		Policy:               g.Policy,
		Type:                 g.Type,
		UserProperties:       g.UserProperties,
	}
}

// GetMetadataActivityTypeProperties - GetMetadata activity properties.
type GetMetadataActivityTypeProperties struct {
	// REQUIRED; GetMetadata activity dataset reference.
	Dataset *DatasetReference

	// Fields of metadata to get from dataset.
	FieldList []any

	// GetMetadata activity format settings.
	FormatSettings FormatReadSettingsClassification

	// GetMetadata activity store settings.
	StoreSettings StoreReadSettingsClassification
}

func (g *GetMetadataActivityTypeProperties) GetDataset() (rv *DatasetReference) {
	if g != nil {
		return g.Dataset
	}
	return
}

func (g *GetMetadataActivityTypeProperties) GetFieldList() (rv []any) {
	if g != nil {
		return g.FieldList
	}
	return
}

func (g *GetMetadataActivityTypeProperties) GetFormatSettings() (rv FormatReadSettingsClassification) {
	if g != nil {
		return g.FormatSettings
	}
	return
}

func (g *GetMetadataActivityTypeProperties) GetStoreSettings() (rv StoreReadSettingsClassification) {
	if g != nil {
		return g.StoreSettings
	}
	return
}

// GetSsisObjectMetadataRequest - The request payload of get SSIS object metadata.
type GetSsisObjectMetadataRequest struct {
	// Metadata path.
	MetadataPath *string
}

func (g *GetSsisObjectMetadataRequest) GetMetadataPath() (rv string) {
	if g != nil && g.MetadataPath != nil {
		return *g.MetadataPath
	}
	return
}

type GitHubAccessTokenRequest struct {
	// REQUIRED; The GitHub Access code.
	GitHubAccessCode *string

	// REQUIRED; The GitHub access token base URL.
	GitHubAccessTokenBaseURL *string

	// REQUIRED; The GitHub Client Id.
	GitHubClientID *string
}

func (g *GitHubAccessTokenRequest) GetGitHubAccessCode() (rv string) {
	if g != nil && g.GitHubAccessCode != nil {
		return *g.GitHubAccessCode
	}
	return
}

func (g *GitHubAccessTokenRequest) GetGitHubAccessTokenBaseURL() (rv string) {
	if g != nil && g.GitHubAccessTokenBaseURL != nil {
		return *g.GitHubAccessTokenBaseURL
	}
	return
}

func (g *GitHubAccessTokenRequest) GetGitHubClientID() (rv string) {
	if g != nil && g.GitHubClientID != nil {
		return *g.GitHubClientID
	}
	return
}

type GitHubAccessTokenResponse struct {
	GitHubAccessToken *string
}

func (g *GitHubAccessTokenResponse) GetGitHubAccessToken() (rv string) {
	if g != nil && g.GitHubAccessToken != nil {
		return *g.GitHubAccessToken
	}
	return
}

// GitHubClientSecret - Client secret information for factory's bring your own app repository configuration
type GitHubClientSecret struct {
	// Bring your own app client secret AKV URL
	ByoaSecretAkvURL *string

	// Bring your own app client secret name in AKV
	ByoaSecretName *string
}

func (g *GitHubClientSecret) GetByoaSecretAkvURL() (rv string) {
	if g != nil && g.ByoaSecretAkvURL != nil {
		return *g.ByoaSecretAkvURL
	}
	return
}

func (g *GitHubClientSecret) GetByoaSecretName() (rv string) {
	if g != nil && g.ByoaSecretName != nil {
		return *g.ByoaSecretName
	}
	return
}

// GoogleAdWordsLinkedService - Google AdWords service linked service.
type GoogleAdWordsLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Google AdWords service linked service properties.
	TypeProperties *GoogleAdWordsLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (g *GoogleAdWordsLinkedService) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GoogleAdWordsLinkedService) GetTypeProperties() (rv *GoogleAdWordsLinkedServiceTypeProperties) {
	if g != nil {
		return g.TypeProperties
	}
	return
}

func (g *GoogleAdWordsLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GoogleAdWordsLinkedService) GetAnnotations() (rv []any) {
	if g != nil {
		return g.Annotations
	}
	return
}

func (g *GoogleAdWordsLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if g != nil {
		return g.ConnectVia
	}
	return
}

func (g *GoogleAdWordsLinkedService) GetDescription() (rv string) {
	if g != nil && g.Description != nil {
		return *g.Description
	}
	return
}

func (g *GoogleAdWordsLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if g != nil {
		return g.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type GoogleAdWordsLinkedService.
func (g *GoogleAdWordsLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: g.AdditionalProperties,
		Annotations:          g.Annotations,
		ConnectVia:           g.ConnectVia,
		Description:          g.Description,
		Parameters:           g.Parameters,
		Type:                 g.Type,
	}
}

// GoogleAdWordsLinkedServiceTypeProperties - Google AdWords service linked service properties.
type GoogleAdWordsLinkedServiceTypeProperties struct {
	// The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted IR.
	AuthenticationType *GoogleAdWordsAuthenticationType

	// The Client customer ID of the AdWords account that you want to fetch report data for.
	ClientCustomerID any

	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType
	// string).
	ClientID any

	// The client secret of the google application used to acquire the refresh token.
	ClientSecret SecretBaseClassification

	// Properties used to connect to GoogleAds. It is mutually exclusive with any other properties in the linked service. Type:
	// object.
	ConnectionProperties any

	// The developer token associated with the manager account that you use to grant access to the AdWords API.
	DeveloperToken SecretBaseClassification

	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used
	// on self-hosted IR.
	KeyFilePath any

	// The refresh token obtained from Google for authorizing access to AdWords for UserAuthentication.
	RefreshToken SecretBaseClassification

	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This
	// property can only be set when using SSL on self-hosted IR. The default value
	// is the cacerts.pem file installed with the IR.
	TrustedCertPath any

	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is
	// false.
	UseSystemTrustStore any
}

func (g *GoogleAdWordsLinkedServiceTypeProperties) GetAuthenticationType() (rv *GoogleAdWordsAuthenticationType) {
	if g != nil {
		return g.AuthenticationType
	}
	return
}

func (g *GoogleAdWordsLinkedServiceTypeProperties) GetClientCustomerID() (rv any) {
	if g != nil {
		return g.ClientCustomerID
	}
	return
}

func (g *GoogleAdWordsLinkedServiceTypeProperties) GetClientID() (rv any) {
	if g != nil {
		return g.ClientID
	}
	return
}

func (g *GoogleAdWordsLinkedServiceTypeProperties) GetClientSecret() (rv SecretBaseClassification) {
	if g != nil {
		return g.ClientSecret
	}
	return
}

func (g *GoogleAdWordsLinkedServiceTypeProperties) GetConnectionProperties() (rv any) {
	if g != nil {
		return g.ConnectionProperties
	}
	return
}

func (g *GoogleAdWordsLinkedServiceTypeProperties) GetDeveloperToken() (rv SecretBaseClassification) {
	if g != nil {
		return g.DeveloperToken
	}
	return
}

func (g *GoogleAdWordsLinkedServiceTypeProperties) GetEmail() (rv any) {
	if g != nil {
		return g.Email
	}
	return
}

func (g *GoogleAdWordsLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if g != nil {
		return g.EncryptedCredential
	}
	return
}

func (g *GoogleAdWordsLinkedServiceTypeProperties) GetKeyFilePath() (rv any) {
	if g != nil {
		return g.KeyFilePath
	}
	return
}

func (g *GoogleAdWordsLinkedServiceTypeProperties) GetRefreshToken() (rv SecretBaseClassification) {
	if g != nil {
		return g.RefreshToken
	}
	return
}

func (g *GoogleAdWordsLinkedServiceTypeProperties) GetTrustedCertPath() (rv any) {
	if g != nil {
		return g.TrustedCertPath
	}
	return
}

func (g *GoogleAdWordsLinkedServiceTypeProperties) GetUseSystemTrustStore() (rv any) {
	if g != nil {
		return g.UseSystemTrustStore
	}
	return
}

// GoogleAdWordsObjectDataset - Google AdWords service dataset.
type GoogleAdWordsObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (g *GoogleAdWordsObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if g != nil {
		return g.LinkedServiceName
	}
	return
}

func (g *GoogleAdWordsObjectDataset) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GoogleAdWordsObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GoogleAdWordsObjectDataset) GetAnnotations() (rv []any) {
	if g != nil {
		return g.Annotations
	}
	return
}

func (g *GoogleAdWordsObjectDataset) GetDescription() (rv string) {
	if g != nil && g.Description != nil {
		return *g.Description
	}
	return
}

func (g *GoogleAdWordsObjectDataset) GetFolder() (rv *DatasetFolder) {
	if g != nil {
		return g.Folder
	}
	return
}

func (g *GoogleAdWordsObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if g != nil {
		return g.Parameters
	}
	return
}

func (g *GoogleAdWordsObjectDataset) GetSchema() (rv any) {
	if g != nil {
		return g.Schema
	}
	return
}

func (g *GoogleAdWordsObjectDataset) GetStructure() (rv any) {
	if g != nil {
		return g.Structure
	}
	return
}

func (g *GoogleAdWordsObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if g != nil {
		return g.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type GoogleAdWordsObjectDataset.
func (g *GoogleAdWordsObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: g.AdditionalProperties,
		Annotations:          g.Annotations,
		Description:          g.Description,
		Folder:               g.Folder,
		LinkedServiceName:    g.LinkedServiceName,
		Parameters:           g.Parameters,
		Schema:               g.Schema,
		Structure:            g.Structure,
		Type:                 g.Type,
	}
}

// GoogleAdWordsSource - A copy activity Google AdWords service source.
type GoogleAdWordsSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (g *GoogleAdWordsSource) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GoogleAdWordsSource) GetAdditionalColumns() (rv any) {
	if g != nil {
		return g.AdditionalColumns
	}
	return
}

func (g *GoogleAdWordsSource) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GoogleAdWordsSource) GetMaxConcurrentConnections() (rv any) {
	if g != nil {
		return g.MaxConcurrentConnections
	}
	return
}

func (g *GoogleAdWordsSource) GetQuery() (rv any) {
	if g != nil {
		return g.Query
	}
	return
}

func (g *GoogleAdWordsSource) GetQueryTimeout() (rv any) {
	if g != nil {
		return g.QueryTimeout
	}
	return
}

func (g *GoogleAdWordsSource) GetSourceRetryCount() (rv any) {
	if g != nil {
		return g.SourceRetryCount
	}
	return
}

func (g *GoogleAdWordsSource) GetSourceRetryWait() (rv any) {
	if g != nil {
		return g.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type GoogleAdWordsSource.
func (g *GoogleAdWordsSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     g.AdditionalProperties,
		MaxConcurrentConnections: g.MaxConcurrentConnections,
		SourceRetryCount:         g.SourceRetryCount,
		SourceRetryWait:          g.SourceRetryWait,
		Type:                     g.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type GoogleAdWordsSource.
func (g *GoogleAdWordsSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        g.AdditionalColumns,
		AdditionalProperties:     g.AdditionalProperties,
		MaxConcurrentConnections: g.MaxConcurrentConnections,
		QueryTimeout:             g.QueryTimeout,
		SourceRetryCount:         g.SourceRetryCount,
		SourceRetryWait:          g.SourceRetryWait,
		Type:                     g.Type,
	}
}

// GoogleBigQueryDatasetTypeProperties - Google BigQuery Dataset Properties
type GoogleBigQueryDatasetTypeProperties struct {
	// The database name of the Google BigQuery. Type: string (or Expression with resultType string).
	Dataset any

	// The table name of the Google BigQuery. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using database + table properties instead.
	TableName any
}

func (g *GoogleBigQueryDatasetTypeProperties) GetDataset() (rv any) {
	if g != nil {
		return g.Dataset
	}
	return
}

func (g *GoogleBigQueryDatasetTypeProperties) GetTable() (rv any) {
	if g != nil {
		return g.Table
	}
	return
}

func (g *GoogleBigQueryDatasetTypeProperties) GetTableName() (rv any) {
	if g != nil {
		return g.TableName
	}
	return
}

// GoogleBigQueryLinkedService - Google BigQuery service linked service.
type GoogleBigQueryLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Google BigQuery service linked service properties.
	TypeProperties *GoogleBigQueryLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (g *GoogleBigQueryLinkedService) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GoogleBigQueryLinkedService) GetTypeProperties() (rv *GoogleBigQueryLinkedServiceTypeProperties) {
	if g != nil {
		return g.TypeProperties
	}
	return
}

func (g *GoogleBigQueryLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GoogleBigQueryLinkedService) GetAnnotations() (rv []any) {
	if g != nil {
		return g.Annotations
	}
	return
}

func (g *GoogleBigQueryLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if g != nil {
		return g.ConnectVia
	}
	return
}

func (g *GoogleBigQueryLinkedService) GetDescription() (rv string) {
	if g != nil && g.Description != nil {
		return *g.Description
	}
	return
}

func (g *GoogleBigQueryLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if g != nil {
		return g.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type GoogleBigQueryLinkedService.
func (g *GoogleBigQueryLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: g.AdditionalProperties,
		Annotations:          g.Annotations,
		ConnectVia:           g.ConnectVia,
		Description:          g.Description,
		Parameters:           g.Parameters,
		Type:                 g.Type,
	}
}

// GoogleBigQueryLinkedServiceTypeProperties - Google BigQuery service linked service properties.
type GoogleBigQueryLinkedServiceTypeProperties struct {
	// REQUIRED; The OAuth 2.0 authentication mechanism used for authentication. ServiceAuthentication can only be used on self-hosted
	// IR.
	AuthenticationType *GoogleBigQueryAuthenticationType

	// REQUIRED; The default BigQuery project to query against.
	Project any

	// A comma-separated list of public BigQuery projects to access.
	AdditionalProjects any

	// The client id of the google application used to acquire the refresh token. Type: string (or Expression with resultType
	// string).
	ClientID any

	// The client secret of the google application used to acquire the refresh token.
	ClientSecret SecretBaseClassification

	// The service account email ID that is used for ServiceAuthentication and can only be used on self-hosted IR.
	Email any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The full path to the .p12 key file that is used to authenticate the service account email address and can only be used
	// on self-hosted IR.
	KeyFilePath any

	// The refresh token obtained from Google for authorizing access to BigQuery for UserAuthentication.
	RefreshToken SecretBaseClassification

	// Whether to request access to Google Drive. Allowing Google Drive access enables support for federated tables that combine
	// BigQuery data with data from Google Drive. The default value is false.
	RequestGoogleDriveScope any

	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This
	// property can only be set when using SSL on self-hosted IR. The default value
	// is the cacerts.pem file installed with the IR.
	TrustedCertPath any

	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is
	// false.
	UseSystemTrustStore any
}

func (g *GoogleBigQueryLinkedServiceTypeProperties) GetAuthenticationType() (rv *GoogleBigQueryAuthenticationType) {
	if g != nil {
		return g.AuthenticationType
	}
	return
}

func (g *GoogleBigQueryLinkedServiceTypeProperties) GetProject() (rv any) {
	if g != nil {
		return g.Project
	}
	return
}

func (g *GoogleBigQueryLinkedServiceTypeProperties) GetAdditionalProjects() (rv any) {
	if g != nil {
		return g.AdditionalProjects
	}
	return
}

func (g *GoogleBigQueryLinkedServiceTypeProperties) GetClientID() (rv any) {
	if g != nil {
		return g.ClientID
	}
	return
}

func (g *GoogleBigQueryLinkedServiceTypeProperties) GetClientSecret() (rv SecretBaseClassification) {
	if g != nil {
		return g.ClientSecret
	}
	return
}

func (g *GoogleBigQueryLinkedServiceTypeProperties) GetEmail() (rv any) {
	if g != nil {
		return g.Email
	}
	return
}

func (g *GoogleBigQueryLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if g != nil {
		return g.EncryptedCredential
	}
	return
}

func (g *GoogleBigQueryLinkedServiceTypeProperties) GetKeyFilePath() (rv any) {
	if g != nil {
		return g.KeyFilePath
	}
	return
}

func (g *GoogleBigQueryLinkedServiceTypeProperties) GetRefreshToken() (rv SecretBaseClassification) {
	if g != nil {
		return g.RefreshToken
	}
	return
}

func (g *GoogleBigQueryLinkedServiceTypeProperties) GetRequestGoogleDriveScope() (rv any) {
	if g != nil {
		return g.RequestGoogleDriveScope
	}
	return
}

func (g *GoogleBigQueryLinkedServiceTypeProperties) GetTrustedCertPath() (rv any) {
	if g != nil {
		return g.TrustedCertPath
	}
	return
}

func (g *GoogleBigQueryLinkedServiceTypeProperties) GetUseSystemTrustStore() (rv any) {
	if g != nil {
		return g.UseSystemTrustStore
	}
	return
}

// GoogleBigQueryObjectDataset - Google BigQuery service dataset.
type GoogleBigQueryObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GoogleBigQueryDatasetTypeProperties
}

func (g *GoogleBigQueryObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if g != nil {
		return g.LinkedServiceName
	}
	return
}

func (g *GoogleBigQueryObjectDataset) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GoogleBigQueryObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GoogleBigQueryObjectDataset) GetAnnotations() (rv []any) {
	if g != nil {
		return g.Annotations
	}
	return
}

func (g *GoogleBigQueryObjectDataset) GetDescription() (rv string) {
	if g != nil && g.Description != nil {
		return *g.Description
	}
	return
}

func (g *GoogleBigQueryObjectDataset) GetFolder() (rv *DatasetFolder) {
	if g != nil {
		return g.Folder
	}
	return
}

func (g *GoogleBigQueryObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if g != nil {
		return g.Parameters
	}
	return
}

func (g *GoogleBigQueryObjectDataset) GetSchema() (rv any) {
	if g != nil {
		return g.Schema
	}
	return
}

func (g *GoogleBigQueryObjectDataset) GetStructure() (rv any) {
	if g != nil {
		return g.Structure
	}
	return
}

func (g *GoogleBigQueryObjectDataset) GetTypeProperties() (rv *GoogleBigQueryDatasetTypeProperties) {
	if g != nil {
		return g.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type GoogleBigQueryObjectDataset.
func (g *GoogleBigQueryObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: g.AdditionalProperties,
		Annotations:          g.Annotations,
		Description:          g.Description,
		Folder:               g.Folder,
		LinkedServiceName:    g.LinkedServiceName,
		Parameters:           g.Parameters,
		Schema:               g.Schema,
		Structure:            g.Structure,
		Type:                 g.Type,
	}
}

// GoogleBigQuerySource - A copy activity Google BigQuery service source.
type GoogleBigQuerySource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (g *GoogleBigQuerySource) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GoogleBigQuerySource) GetAdditionalColumns() (rv any) {
	if g != nil {
		return g.AdditionalColumns
	}
	return
}

func (g *GoogleBigQuerySource) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GoogleBigQuerySource) GetMaxConcurrentConnections() (rv any) {
	if g != nil {
		return g.MaxConcurrentConnections
	}
	return
}

func (g *GoogleBigQuerySource) GetQuery() (rv any) {
	if g != nil {
		return g.Query
	}
	return
}

func (g *GoogleBigQuerySource) GetQueryTimeout() (rv any) {
	if g != nil {
		return g.QueryTimeout
	}
	return
}

func (g *GoogleBigQuerySource) GetSourceRetryCount() (rv any) {
	if g != nil {
		return g.SourceRetryCount
	}
	return
}

func (g *GoogleBigQuerySource) GetSourceRetryWait() (rv any) {
	if g != nil {
		return g.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type GoogleBigQuerySource.
func (g *GoogleBigQuerySource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     g.AdditionalProperties,
		MaxConcurrentConnections: g.MaxConcurrentConnections,
		SourceRetryCount:         g.SourceRetryCount,
		SourceRetryWait:          g.SourceRetryWait,
		Type:                     g.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type GoogleBigQuerySource.
func (g *GoogleBigQuerySource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        g.AdditionalColumns,
		AdditionalProperties:     g.AdditionalProperties,
		MaxConcurrentConnections: g.MaxConcurrentConnections,
		QueryTimeout:             g.QueryTimeout,
		SourceRetryCount:         g.SourceRetryCount,
		SourceRetryWait:          g.SourceRetryWait,
		Type:                     g.Type,
	}
}

// GoogleCloudStorageLinkedService - Linked service for Google Cloud Storage.
type GoogleCloudStorageLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Google Cloud Storage linked service properties.
	TypeProperties *GoogleCloudStorageLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (g *GoogleCloudStorageLinkedService) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GoogleCloudStorageLinkedService) GetTypeProperties() (rv *GoogleCloudStorageLinkedServiceTypeProperties) {
	if g != nil {
		return g.TypeProperties
	}
	return
}

func (g *GoogleCloudStorageLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GoogleCloudStorageLinkedService) GetAnnotations() (rv []any) {
	if g != nil {
		return g.Annotations
	}
	return
}

func (g *GoogleCloudStorageLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if g != nil {
		return g.ConnectVia
	}
	return
}

func (g *GoogleCloudStorageLinkedService) GetDescription() (rv string) {
	if g != nil && g.Description != nil {
		return *g.Description
	}
	return
}

func (g *GoogleCloudStorageLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if g != nil {
		return g.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type GoogleCloudStorageLinkedService.
func (g *GoogleCloudStorageLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: g.AdditionalProperties,
		Annotations:          g.Annotations,
		ConnectVia:           g.ConnectVia,
		Description:          g.Description,
		Parameters:           g.Parameters,
		Type:                 g.Type,
	}
}

// GoogleCloudStorageLinkedServiceTypeProperties - Google Cloud Storage linked service properties.
type GoogleCloudStorageLinkedServiceTypeProperties struct {
	// The access key identifier of the Google Cloud Storage Identity and Access Management (IAM) user. Type: string (or Expression
	// with resultType string).
	AccessKeyID any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The secret access key of the Google Cloud Storage Identity and Access Management (IAM) user.
	SecretAccessKey SecretBaseClassification

	// This value specifies the endpoint to access with the Google Cloud Storage Connector. This is an optional property; change
	// it only if you want to try a different service endpoint or want to switch
	// between https and http. Type: string (or Expression with resultType string).
	ServiceURL any
}

func (g *GoogleCloudStorageLinkedServiceTypeProperties) GetAccessKeyID() (rv any) {
	if g != nil {
		return g.AccessKeyID
	}
	return
}

func (g *GoogleCloudStorageLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if g != nil {
		return g.EncryptedCredential
	}
	return
}

func (g *GoogleCloudStorageLinkedServiceTypeProperties) GetSecretAccessKey() (rv SecretBaseClassification) {
	if g != nil {
		return g.SecretAccessKey
	}
	return
}

func (g *GoogleCloudStorageLinkedServiceTypeProperties) GetServiceURL() (rv any) {
	if g != nil {
		return g.ServiceURL
	}
	return
}

// GoogleCloudStorageLocation - The location of Google Cloud Storage dataset.
type GoogleCloudStorageLocation struct {
	// REQUIRED; Type of dataset storage location.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the bucketName of Google Cloud Storage. Type: string (or Expression with resultType string)
	BucketName any

	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName any

	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath any

	// Specify the version of Google Cloud Storage. Type: string (or Expression with resultType string).
	Version any
}

func (g *GoogleCloudStorageLocation) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GoogleCloudStorageLocation) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GoogleCloudStorageLocation) GetBucketName() (rv any) {
	if g != nil {
		return g.BucketName
	}
	return
}

func (g *GoogleCloudStorageLocation) GetFileName() (rv any) {
	if g != nil {
		return g.FileName
	}
	return
}

func (g *GoogleCloudStorageLocation) GetFolderPath() (rv any) {
	if g != nil {
		return g.FolderPath
	}
	return
}

func (g *GoogleCloudStorageLocation) GetVersion() (rv any) {
	if g != nil {
		return g.Version
	}
	return
}

// GetDatasetLocation implements the DatasetLocationClassification interface for type GoogleCloudStorageLocation.
func (g *GoogleCloudStorageLocation) GetDatasetLocation() *DatasetLocation {
	return &DatasetLocation{
		AdditionalProperties: g.AdditionalProperties,
		FileName:             g.FileName,
		FolderPath:           g.FolderPath,
		Type:                 g.Type,
	}
}

// GoogleCloudStorageReadSettings - Google Cloud Storage read settings.
type GoogleCloudStorageReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression
	// with resultType boolean).
	DeleteFilesAfterCompletion any

	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool

	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy.
	// Type: string (or Expression with resultType string).
	FileListPath any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd any

	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart any

	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath any

	// The prefix filter for the Google Cloud Storage object name. Type: string (or Expression with resultType string).
	Prefix any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// Google Cloud Storage wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName any

	// Google Cloud Storage wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath any
}

func (g *GoogleCloudStorageReadSettings) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GoogleCloudStorageReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GoogleCloudStorageReadSettings) GetDeleteFilesAfterCompletion() (rv any) {
	if g != nil {
		return g.DeleteFilesAfterCompletion
	}
	return
}

func (g *GoogleCloudStorageReadSettings) GetEnablePartitionDiscovery() (rv bool) {
	if g != nil && g.EnablePartitionDiscovery != nil {
		return *g.EnablePartitionDiscovery
	}
	return
}

func (g *GoogleCloudStorageReadSettings) GetFileListPath() (rv any) {
	if g != nil {
		return g.FileListPath
	}
	return
}

func (g *GoogleCloudStorageReadSettings) GetMaxConcurrentConnections() (rv any) {
	if g != nil {
		return g.MaxConcurrentConnections
	}
	return
}

func (g *GoogleCloudStorageReadSettings) GetModifiedDatetimeEnd() (rv any) {
	if g != nil {
		return g.ModifiedDatetimeEnd
	}
	return
}

func (g *GoogleCloudStorageReadSettings) GetModifiedDatetimeStart() (rv any) {
	if g != nil {
		return g.ModifiedDatetimeStart
	}
	return
}

func (g *GoogleCloudStorageReadSettings) GetPartitionRootPath() (rv any) {
	if g != nil {
		return g.PartitionRootPath
	}
	return
}

func (g *GoogleCloudStorageReadSettings) GetPrefix() (rv any) {
	if g != nil {
		return g.Prefix
	}
	return
}

func (g *GoogleCloudStorageReadSettings) GetRecursive() (rv any) {
	if g != nil {
		return g.Recursive
	}
	return
}

func (g *GoogleCloudStorageReadSettings) GetWildcardFileName() (rv any) {
	if g != nil {
		return g.WildcardFileName
	}
	return
}

func (g *GoogleCloudStorageReadSettings) GetWildcardFolderPath() (rv any) {
	if g != nil {
		return g.WildcardFolderPath
	}
	return
}

// GetStoreReadSettings implements the StoreReadSettingsClassification interface for type GoogleCloudStorageReadSettings.
func (g *GoogleCloudStorageReadSettings) GetStoreReadSettings() *StoreReadSettings {
	return &StoreReadSettings{
		AdditionalProperties:     g.AdditionalProperties,
		MaxConcurrentConnections: g.MaxConcurrentConnections,
		Type:                     g.Type,
	}
}

// GoogleSheetsLinkedService - Linked service for GoogleSheets.
type GoogleSheetsLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; GoogleSheets linked service properties.
	TypeProperties *GoogleSheetsLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (g *GoogleSheetsLinkedService) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GoogleSheetsLinkedService) GetTypeProperties() (rv *GoogleSheetsLinkedServiceTypeProperties) {
	if g != nil {
		return g.TypeProperties
	}
	return
}

func (g *GoogleSheetsLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GoogleSheetsLinkedService) GetAnnotations() (rv []any) {
	if g != nil {
		return g.Annotations
	}
	return
}

func (g *GoogleSheetsLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if g != nil {
		return g.ConnectVia
	}
	return
}

func (g *GoogleSheetsLinkedService) GetDescription() (rv string) {
	if g != nil && g.Description != nil {
		return *g.Description
	}
	return
}

func (g *GoogleSheetsLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if g != nil {
		return g.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type GoogleSheetsLinkedService.
func (g *GoogleSheetsLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: g.AdditionalProperties,
		Annotations:          g.Annotations,
		ConnectVia:           g.ConnectVia,
		Description:          g.Description,
		Parameters:           g.Parameters,
		Type:                 g.Type,
	}
}

// GoogleSheetsLinkedServiceTypeProperties - GoogleSheets linked service type properties.
type GoogleSheetsLinkedServiceTypeProperties struct {
	// REQUIRED; The api token for the GoogleSheets source.
	APIToken SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any
}

func (g *GoogleSheetsLinkedServiceTypeProperties) GetAPIToken() (rv SecretBaseClassification) {
	if g != nil {
		return g.APIToken
	}
	return
}

func (g *GoogleSheetsLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if g != nil {
		return g.EncryptedCredential
	}
	return
}

// GreenplumDatasetTypeProperties - Greenplum Dataset Properties
type GreenplumDatasetTypeProperties struct {
	// The schema name of Greenplum. Type: string (or Expression with resultType string).
	Schema any

	// The table name of Greenplum. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (g *GreenplumDatasetTypeProperties) GetSchema() (rv any) {
	if g != nil {
		return g.Schema
	}
	return
}

func (g *GreenplumDatasetTypeProperties) GetTable() (rv any) {
	if g != nil {
		return g.Table
	}
	return
}

func (g *GreenplumDatasetTypeProperties) GetTableName() (rv any) {
	if g != nil {
		return g.TableName
	}
	return
}

// GreenplumLinkedService - Greenplum Database linked service.
type GreenplumLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Greenplum Database linked service properties.
	TypeProperties *GreenplumLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (g *GreenplumLinkedService) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GreenplumLinkedService) GetTypeProperties() (rv *GreenplumLinkedServiceTypeProperties) {
	if g != nil {
		return g.TypeProperties
	}
	return
}

func (g *GreenplumLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GreenplumLinkedService) GetAnnotations() (rv []any) {
	if g != nil {
		return g.Annotations
	}
	return
}

func (g *GreenplumLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if g != nil {
		return g.ConnectVia
	}
	return
}

func (g *GreenplumLinkedService) GetDescription() (rv string) {
	if g != nil && g.Description != nil {
		return *g.Description
	}
	return
}

func (g *GreenplumLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if g != nil {
		return g.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type GreenplumLinkedService.
func (g *GreenplumLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: g.AdditionalProperties,
		Annotations:          g.Annotations,
		ConnectVia:           g.ConnectVia,
		Description:          g.Description,
		Parameters:           g.Parameters,
		Type:                 g.Type,
	}
}

// GreenplumLinkedServiceTypeProperties - Greenplum Database linked service properties.
type GreenplumLinkedServiceTypeProperties struct {
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference
}

func (g *GreenplumLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if g != nil {
		return g.ConnectionString
	}
	return
}

func (g *GreenplumLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if g != nil {
		return g.EncryptedCredential
	}
	return
}

func (g *GreenplumLinkedServiceTypeProperties) GetPwd() (rv *AzureKeyVaultSecretReference) {
	if g != nil {
		return g.Pwd
	}
	return
}

// GreenplumSource - A copy activity Greenplum Database source.
type GreenplumSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (g *GreenplumSource) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GreenplumSource) GetAdditionalColumns() (rv any) {
	if g != nil {
		return g.AdditionalColumns
	}
	return
}

func (g *GreenplumSource) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GreenplumSource) GetMaxConcurrentConnections() (rv any) {
	if g != nil {
		return g.MaxConcurrentConnections
	}
	return
}

func (g *GreenplumSource) GetQuery() (rv any) {
	if g != nil {
		return g.Query
	}
	return
}

func (g *GreenplumSource) GetQueryTimeout() (rv any) {
	if g != nil {
		return g.QueryTimeout
	}
	return
}

func (g *GreenplumSource) GetSourceRetryCount() (rv any) {
	if g != nil {
		return g.SourceRetryCount
	}
	return
}

func (g *GreenplumSource) GetSourceRetryWait() (rv any) {
	if g != nil {
		return g.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type GreenplumSource.
func (g *GreenplumSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     g.AdditionalProperties,
		MaxConcurrentConnections: g.MaxConcurrentConnections,
		SourceRetryCount:         g.SourceRetryCount,
		SourceRetryWait:          g.SourceRetryWait,
		Type:                     g.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type GreenplumSource.
func (g *GreenplumSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        g.AdditionalColumns,
		AdditionalProperties:     g.AdditionalProperties,
		MaxConcurrentConnections: g.MaxConcurrentConnections,
		QueryTimeout:             g.QueryTimeout,
		SourceRetryCount:         g.SourceRetryCount,
		SourceRetryWait:          g.SourceRetryWait,
		Type:                     g.Type,
	}
}

// GreenplumTableDataset - Greenplum Database dataset.
type GreenplumTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GreenplumDatasetTypeProperties
}

func (g *GreenplumTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if g != nil {
		return g.LinkedServiceName
	}
	return
}

func (g *GreenplumTableDataset) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

func (g *GreenplumTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if g != nil {
		return g.AdditionalProperties
	}
	return
}

func (g *GreenplumTableDataset) GetAnnotations() (rv []any) {
	if g != nil {
		return g.Annotations
	}
	return
}

func (g *GreenplumTableDataset) GetDescription() (rv string) {
	if g != nil && g.Description != nil {
		return *g.Description
	}
	return
}

func (g *GreenplumTableDataset) GetFolder() (rv *DatasetFolder) {
	if g != nil {
		return g.Folder
	}
	return
}

func (g *GreenplumTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if g != nil {
		return g.Parameters
	}
	return
}

func (g *GreenplumTableDataset) GetSchema() (rv any) {
	if g != nil {
		return g.Schema
	}
	return
}

func (g *GreenplumTableDataset) GetStructure() (rv any) {
	if g != nil {
		return g.Structure
	}
	return
}

func (g *GreenplumTableDataset) GetTypeProperties() (rv *GreenplumDatasetTypeProperties) {
	if g != nil {
		return g.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type GreenplumTableDataset.
func (g *GreenplumTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: g.AdditionalProperties,
		Annotations:          g.Annotations,
		Description:          g.Description,
		Folder:               g.Folder,
		LinkedServiceName:    g.LinkedServiceName,
		Parameters:           g.Parameters,
		Schema:               g.Schema,
		Structure:            g.Structure,
		Type:                 g.Type,
	}
}

// HBaseLinkedService - HBase server linked service.
type HBaseLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; HBase server linked service properties.
	TypeProperties *HBaseLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (h *HBaseLinkedService) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HBaseLinkedService) GetTypeProperties() (rv *HBaseLinkedServiceTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

func (h *HBaseLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HBaseLinkedService) GetAnnotations() (rv []any) {
	if h != nil {
		return h.Annotations
	}
	return
}

func (h *HBaseLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if h != nil {
		return h.ConnectVia
	}
	return
}

func (h *HBaseLinkedService) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HBaseLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if h != nil {
		return h.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type HBaseLinkedService.
func (h *HBaseLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: h.AdditionalProperties,
		Annotations:          h.Annotations,
		ConnectVia:           h.ConnectVia,
		Description:          h.Description,
		Parameters:           h.Parameters,
		Type:                 h.Type,
	}
}

// HBaseLinkedServiceTypeProperties - HBase server linked service properties.
type HBaseLinkedServiceTypeProperties struct {
	// REQUIRED; The authentication mechanism to use to connect to the HBase server.
	AuthenticationType *HBaseAuthenticationType

	// REQUIRED; The IP address or host name of the HBase server. (i.e. 192.168.222.160)
	Host any

	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over
	// SSL. The default value is false.
	AllowHostNameCNMismatch any

	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert any

	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSSL any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The partial URL corresponding to the HBase server. (i.e. /gateway/sandbox/hbase/version)
	HTTPPath any

	// The password corresponding to the user name.
	Password SecretBaseClassification

	// The TCP port that the HBase instance uses to listen for client connections. The default value is 9090.
	Port any

	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This
	// property can only be set when using SSL on self-hosted IR. The default value
	// is the cacerts.pem file installed with the IR.
	TrustedCertPath any

	// The user name used to connect to the HBase instance.
	Username any
}

func (h *HBaseLinkedServiceTypeProperties) GetAuthenticationType() (rv *HBaseAuthenticationType) {
	if h != nil {
		return h.AuthenticationType
	}
	return
}

func (h *HBaseLinkedServiceTypeProperties) GetHost() (rv any) {
	if h != nil {
		return h.Host
	}
	return
}

func (h *HBaseLinkedServiceTypeProperties) GetAllowHostNameCNMismatch() (rv any) {
	if h != nil {
		return h.AllowHostNameCNMismatch
	}
	return
}

func (h *HBaseLinkedServiceTypeProperties) GetAllowSelfSignedServerCert() (rv any) {
	if h != nil {
		return h.AllowSelfSignedServerCert
	}
	return
}

func (h *HBaseLinkedServiceTypeProperties) GetEnableSSL() (rv any) {
	if h != nil {
		return h.EnableSSL
	}
	return
}

func (h *HBaseLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if h != nil {
		return h.EncryptedCredential
	}
	return
}

func (h *HBaseLinkedServiceTypeProperties) GetHTTPPath() (rv any) {
	if h != nil {
		return h.HTTPPath
	}
	return
}

func (h *HBaseLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if h != nil {
		return h.Password
	}
	return
}

func (h *HBaseLinkedServiceTypeProperties) GetPort() (rv any) {
	if h != nil {
		return h.Port
	}
	return
}

func (h *HBaseLinkedServiceTypeProperties) GetTrustedCertPath() (rv any) {
	if h != nil {
		return h.TrustedCertPath
	}
	return
}

func (h *HBaseLinkedServiceTypeProperties) GetUsername() (rv any) {
	if h != nil {
		return h.Username
	}
	return
}

// HBaseObjectDataset - HBase server dataset.
type HBaseObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (h *HBaseObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if h != nil {
		return h.LinkedServiceName
	}
	return
}

func (h *HBaseObjectDataset) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HBaseObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HBaseObjectDataset) GetAnnotations() (rv []any) {
	if h != nil {
		return h.Annotations
	}
	return
}

func (h *HBaseObjectDataset) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HBaseObjectDataset) GetFolder() (rv *DatasetFolder) {
	if h != nil {
		return h.Folder
	}
	return
}

func (h *HBaseObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if h != nil {
		return h.Parameters
	}
	return
}

func (h *HBaseObjectDataset) GetSchema() (rv any) {
	if h != nil {
		return h.Schema
	}
	return
}

func (h *HBaseObjectDataset) GetStructure() (rv any) {
	if h != nil {
		return h.Structure
	}
	return
}

func (h *HBaseObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type HBaseObjectDataset.
func (h *HBaseObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: h.AdditionalProperties,
		Annotations:          h.Annotations,
		Description:          h.Description,
		Folder:               h.Folder,
		LinkedServiceName:    h.LinkedServiceName,
		Parameters:           h.Parameters,
		Schema:               h.Schema,
		Structure:            h.Structure,
		Type:                 h.Type,
	}
}

// HBaseSource - A copy activity HBase server source.
type HBaseSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (h *HBaseSource) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HBaseSource) GetAdditionalColumns() (rv any) {
	if h != nil {
		return h.AdditionalColumns
	}
	return
}

func (h *HBaseSource) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HBaseSource) GetMaxConcurrentConnections() (rv any) {
	if h != nil {
		return h.MaxConcurrentConnections
	}
	return
}

func (h *HBaseSource) GetQuery() (rv any) {
	if h != nil {
		return h.Query
	}
	return
}

func (h *HBaseSource) GetQueryTimeout() (rv any) {
	if h != nil {
		return h.QueryTimeout
	}
	return
}

func (h *HBaseSource) GetSourceRetryCount() (rv any) {
	if h != nil {
		return h.SourceRetryCount
	}
	return
}

func (h *HBaseSource) GetSourceRetryWait() (rv any) {
	if h != nil {
		return h.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type HBaseSource.
func (h *HBaseSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     h.AdditionalProperties,
		MaxConcurrentConnections: h.MaxConcurrentConnections,
		SourceRetryCount:         h.SourceRetryCount,
		SourceRetryWait:          h.SourceRetryWait,
		Type:                     h.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type HBaseSource.
func (h *HBaseSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        h.AdditionalColumns,
		AdditionalProperties:     h.AdditionalProperties,
		MaxConcurrentConnections: h.MaxConcurrentConnections,
		QueryTimeout:             h.QueryTimeout,
		SourceRetryCount:         h.SourceRetryCount,
		SourceRetryWait:          h.SourceRetryWait,
		Type:                     h.Type,
	}
}

// HDInsightHiveActivity - HDInsight Hive activity type.
type HDInsightHiveActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; HDInsight Hive activity properties.
	TypeProperties *HDInsightHiveActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (h *HDInsightHiveActivity) GetName() (rv string) {
	if h != nil && h.Name != nil {
		return *h.Name
	}
	return
}

func (h *HDInsightHiveActivity) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HDInsightHiveActivity) GetTypeProperties() (rv *HDInsightHiveActivityTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

func (h *HDInsightHiveActivity) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HDInsightHiveActivity) GetDependsOn() (rv []*ActivityDependency) {
	if h != nil {
		return h.DependsOn
	}
	return
}

func (h *HDInsightHiveActivity) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HDInsightHiveActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if h != nil {
		return h.LinkedServiceName
	}
	return
}

func (h *HDInsightHiveActivity) GetPolicy() (rv *ActivityPolicy) {
	if h != nil {
		return h.Policy
	}
	return
}

func (h *HDInsightHiveActivity) GetUserProperties() (rv []*UserProperty) {
	if h != nil {
		return h.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type HDInsightHiveActivity.
func (h *HDInsightHiveActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: h.AdditionalProperties,
		DependsOn:            h.DependsOn,
		Description:          h.Description,
		Name:                 h.Name,
		Type:                 h.Type,
		UserProperties:       h.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type HDInsightHiveActivity.
func (h *HDInsightHiveActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: h.AdditionalProperties,
		DependsOn:            h.DependsOn,
		Description:          h.Description,
		LinkedServiceName:    h.LinkedServiceName,
		Name:                 h.Name,
		Policy:               h.Policy,
		Type:                 h.Type,
		UserProperties:       h.UserProperties,
	}
}

// HDInsightHiveActivityTypeProperties - HDInsight Hive activity properties.
type HDInsightHiveActivityTypeProperties struct {
	// User specified arguments to HDInsightActivity.
	Arguments []any

	// Allows user to specify defines for Hive job request.
	Defines map[string]any

	// Debug info option.
	GetDebugInfo *HDInsightActivityDebugInfoOption

	// Query timeout value (in minutes). Effective when the HDInsight cluster is with ESP (Enterprise Security Package)
	QueryTimeout *int32

	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReference

	// Script path. Type: string (or Expression with resultType string).
	ScriptPath any

	// Storage linked service references.
	StorageLinkedServices []*LinkedServiceReference

	// User specified arguments under hivevar namespace.
	Variables []any
}

func (h *HDInsightHiveActivityTypeProperties) GetArguments() (rv []any) {
	if h != nil {
		return h.Arguments
	}
	return
}

func (h *HDInsightHiveActivityTypeProperties) GetDefines() (rv map[string]any) {
	if h != nil {
		return h.Defines
	}
	return
}

func (h *HDInsightHiveActivityTypeProperties) GetGetDebugInfo() (rv *HDInsightActivityDebugInfoOption) {
	if h != nil {
		return h.GetDebugInfo
	}
	return
}

func (h *HDInsightHiveActivityTypeProperties) GetQueryTimeout() (rv int32) {
	if h != nil && h.QueryTimeout != nil {
		return *h.QueryTimeout
	}
	return
}

func (h *HDInsightHiveActivityTypeProperties) GetScriptLinkedService() (rv *LinkedServiceReference) {
	if h != nil {
		return h.ScriptLinkedService
	}
	return
}

func (h *HDInsightHiveActivityTypeProperties) GetScriptPath() (rv any) {
	if h != nil {
		return h.ScriptPath
	}
	return
}

func (h *HDInsightHiveActivityTypeProperties) GetStorageLinkedServices() (rv []*LinkedServiceReference) {
	if h != nil {
		return h.StorageLinkedServices
	}
	return
}

func (h *HDInsightHiveActivityTypeProperties) GetVariables() (rv []any) {
	if h != nil {
		return h.Variables
	}
	return
}

// HDInsightLinkedService - HDInsight linked service.
type HDInsightLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; HDInsight linked service properties.
	TypeProperties *HDInsightLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (h *HDInsightLinkedService) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HDInsightLinkedService) GetTypeProperties() (rv *HDInsightLinkedServiceTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

func (h *HDInsightLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HDInsightLinkedService) GetAnnotations() (rv []any) {
	if h != nil {
		return h.Annotations
	}
	return
}

func (h *HDInsightLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if h != nil {
		return h.ConnectVia
	}
	return
}

func (h *HDInsightLinkedService) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HDInsightLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if h != nil {
		return h.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type HDInsightLinkedService.
func (h *HDInsightLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: h.AdditionalProperties,
		Annotations:          h.Annotations,
		ConnectVia:           h.ConnectVia,
		Description:          h.Description,
		Parameters:           h.Parameters,
		Type:                 h.Type,
	}
}

// HDInsightLinkedServiceTypeProperties - HDInsight linked service properties.
type HDInsightLinkedServiceTypeProperties struct {
	// REQUIRED; HDInsight cluster URI. Type: string (or Expression with resultType string).
	ClusterURI any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Specify the FileSystem if the main storage for the HDInsight is ADLS Gen2. Type: string (or Expression with resultType
	// string).
	FileSystem any

	// A reference to the Azure SQL linked service that points to the HCatalog database.
	HcatalogLinkedServiceName *LinkedServiceReference

	// Specify if the HDInsight is created with ESP (Enterprise Security Package). Type: Boolean.
	IsEspEnabled any

	// The Azure Storage linked service reference.
	LinkedServiceName *LinkedServiceReference

	// HDInsight cluster password.
	Password SecretBaseClassification

	// HDInsight cluster user name. Type: string (or Expression with resultType string).
	UserName any
}

func (h *HDInsightLinkedServiceTypeProperties) GetClusterURI() (rv any) {
	if h != nil {
		return h.ClusterURI
	}
	return
}

func (h *HDInsightLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if h != nil {
		return h.EncryptedCredential
	}
	return
}

func (h *HDInsightLinkedServiceTypeProperties) GetFileSystem() (rv any) {
	if h != nil {
		return h.FileSystem
	}
	return
}

func (h *HDInsightLinkedServiceTypeProperties) GetHcatalogLinkedServiceName() (rv *LinkedServiceReference) {
	if h != nil {
		return h.HcatalogLinkedServiceName
	}
	return
}

func (h *HDInsightLinkedServiceTypeProperties) GetIsEspEnabled() (rv any) {
	if h != nil {
		return h.IsEspEnabled
	}
	return
}

func (h *HDInsightLinkedServiceTypeProperties) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if h != nil {
		return h.LinkedServiceName
	}
	return
}

func (h *HDInsightLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if h != nil {
		return h.Password
	}
	return
}

func (h *HDInsightLinkedServiceTypeProperties) GetUserName() (rv any) {
	if h != nil {
		return h.UserName
	}
	return
}

// HDInsightMapReduceActivity - HDInsight MapReduce activity type.
type HDInsightMapReduceActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; HDInsight MapReduce activity properties.
	TypeProperties *HDInsightMapReduceActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (h *HDInsightMapReduceActivity) GetName() (rv string) {
	if h != nil && h.Name != nil {
		return *h.Name
	}
	return
}

func (h *HDInsightMapReduceActivity) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HDInsightMapReduceActivity) GetTypeProperties() (rv *HDInsightMapReduceActivityTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

func (h *HDInsightMapReduceActivity) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HDInsightMapReduceActivity) GetDependsOn() (rv []*ActivityDependency) {
	if h != nil {
		return h.DependsOn
	}
	return
}

func (h *HDInsightMapReduceActivity) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HDInsightMapReduceActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if h != nil {
		return h.LinkedServiceName
	}
	return
}

func (h *HDInsightMapReduceActivity) GetPolicy() (rv *ActivityPolicy) {
	if h != nil {
		return h.Policy
	}
	return
}

func (h *HDInsightMapReduceActivity) GetUserProperties() (rv []*UserProperty) {
	if h != nil {
		return h.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type HDInsightMapReduceActivity.
func (h *HDInsightMapReduceActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: h.AdditionalProperties,
		DependsOn:            h.DependsOn,
		Description:          h.Description,
		Name:                 h.Name,
		Type:                 h.Type,
		UserProperties:       h.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type HDInsightMapReduceActivity.
func (h *HDInsightMapReduceActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: h.AdditionalProperties,
		DependsOn:            h.DependsOn,
		Description:          h.Description,
		LinkedServiceName:    h.LinkedServiceName,
		Name:                 h.Name,
		Policy:               h.Policy,
		Type:                 h.Type,
		UserProperties:       h.UserProperties,
	}
}

// HDInsightMapReduceActivityTypeProperties - HDInsight MapReduce activity properties.
type HDInsightMapReduceActivityTypeProperties struct {
	// REQUIRED; Class name. Type: string (or Expression with resultType string).
	ClassName any

	// REQUIRED; Jar path. Type: string (or Expression with resultType string).
	JarFilePath any

	// User specified arguments to HDInsightActivity.
	Arguments []any

	// Allows user to specify defines for the MapReduce job request.
	Defines map[string]any

	// Debug info option.
	GetDebugInfo *HDInsightActivityDebugInfoOption

	// Jar libs.
	JarLibs []any

	// Jar linked service reference.
	JarLinkedService *LinkedServiceReference

	// Storage linked service references.
	StorageLinkedServices []*LinkedServiceReference
}

func (h *HDInsightMapReduceActivityTypeProperties) GetClassName() (rv any) {
	if h != nil {
		return h.ClassName
	}
	return
}

func (h *HDInsightMapReduceActivityTypeProperties) GetJarFilePath() (rv any) {
	if h != nil {
		return h.JarFilePath
	}
	return
}

func (h *HDInsightMapReduceActivityTypeProperties) GetArguments() (rv []any) {
	if h != nil {
		return h.Arguments
	}
	return
}

func (h *HDInsightMapReduceActivityTypeProperties) GetDefines() (rv map[string]any) {
	if h != nil {
		return h.Defines
	}
	return
}

func (h *HDInsightMapReduceActivityTypeProperties) GetGetDebugInfo() (rv *HDInsightActivityDebugInfoOption) {
	if h != nil {
		return h.GetDebugInfo
	}
	return
}

func (h *HDInsightMapReduceActivityTypeProperties) GetJarLibs() (rv []any) {
	if h != nil {
		return h.JarLibs
	}
	return
}

func (h *HDInsightMapReduceActivityTypeProperties) GetJarLinkedService() (rv *LinkedServiceReference) {
	if h != nil {
		return h.JarLinkedService
	}
	return
}

func (h *HDInsightMapReduceActivityTypeProperties) GetStorageLinkedServices() (rv []*LinkedServiceReference) {
	if h != nil {
		return h.StorageLinkedServices
	}
	return
}

// HDInsightOnDemandLinkedService - HDInsight ondemand linked service.
type HDInsightOnDemandLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; HDInsight ondemand linked service properties.
	TypeProperties *HDInsightOnDemandLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (h *HDInsightOnDemandLinkedService) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HDInsightOnDemandLinkedService) GetTypeProperties() (rv *HDInsightOnDemandLinkedServiceTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

func (h *HDInsightOnDemandLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HDInsightOnDemandLinkedService) GetAnnotations() (rv []any) {
	if h != nil {
		return h.Annotations
	}
	return
}

func (h *HDInsightOnDemandLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if h != nil {
		return h.ConnectVia
	}
	return
}

func (h *HDInsightOnDemandLinkedService) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HDInsightOnDemandLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if h != nil {
		return h.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type HDInsightOnDemandLinkedService.
func (h *HDInsightOnDemandLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: h.AdditionalProperties,
		Annotations:          h.Annotations,
		ConnectVia:           h.ConnectVia,
		Description:          h.Description,
		Parameters:           h.Parameters,
		Type:                 h.Type,
	}
}

// HDInsightOnDemandLinkedServiceTypeProperties - HDInsight ondemand linked service properties.
type HDInsightOnDemandLinkedServiceTypeProperties struct {
	// REQUIRED; The resource group where the cluster belongs. Type: string (or Expression with resultType string).
	ClusterResourceGroup any

	// REQUIRED; Number of worker/data nodes in the cluster. Suggestion value: 4. Type: string (or Expression with resultType
	// string).
	ClusterSize any

	// REQUIRED; The customer’s subscription to host the cluster. Type: string (or Expression with resultType string).
	HostSubscriptionID any

	// REQUIRED; Azure Storage linked service to be used by the on-demand cluster for storing and processing data.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; The Tenant id/name to which the service principal belongs. Type: string (or Expression with resultType string).
	Tenant any

	// REQUIRED; The allowed idle time for the on-demand HDInsight cluster. Specifies how long the on-demand HDInsight cluster
	// stays alive after completion of an activity run if there are no other active jobs in the
	// cluster. The minimum value is 5 mins. Type: string (or Expression with resultType string).
	TimeToLive any

	// REQUIRED; Version of the HDInsight cluster. Type: string (or Expression with resultType string).
	Version any

	// Specifies additional storage accounts for the HDInsight linked service so that the Data Factory service can register them
	// on your behalf.
	AdditionalLinkedServiceNames []*LinkedServiceReference

	// The prefix of cluster name, postfix will be distinct with timestamp. Type: string (or Expression with resultType string).
	ClusterNamePrefix any

	// The password to access the cluster.
	ClusterPassword SecretBaseClassification

	// The password to SSH remotely connect cluster’s node (for Linux).
	ClusterSSHPassword SecretBaseClassification

	// The username to SSH remotely connect to cluster’s node (for Linux). Type: string (or Expression with resultType string).
	ClusterSSHUserName any

	// The cluster type. Type: string (or Expression with resultType string).
	ClusterType any

	// The username to access the cluster. Type: string (or Expression with resultType string).
	ClusterUserName any

	// Specifies the core configuration parameters (as in core-site.xml) for the HDInsight cluster to be created.
	CoreConfiguration any

	// Specifies the size of the data node for the HDInsight cluster.
	DataNodeSize any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Specifies the HBase configuration parameters (hbase-site.xml) for the HDInsight cluster.
	HBaseConfiguration any

	// The name of Azure SQL linked service that point to the HCatalog database. The on-demand HDInsight cluster is created by
	// using the Azure SQL database as the metastore.
	HcatalogLinkedServiceName *LinkedServiceReference

	// Specifies the HDFS configuration parameters (hdfs-site.xml) for the HDInsight cluster.
	HdfsConfiguration any

	// Specifies the size of the head node for the HDInsight cluster.
	HeadNodeSize any

	// Specifies the hive configuration parameters (hive-site.xml) for the HDInsight cluster.
	HiveConfiguration any

	// Specifies the MapReduce configuration parameters (mapred-site.xml) for the HDInsight cluster.
	MapReduceConfiguration any

	// Specifies the Oozie configuration parameters (oozie-site.xml) for the HDInsight cluster.
	OozieConfiguration any

	// Custom script actions to run on HDI ondemand cluster once it's up. Please refer to
	// https://docs.microsoft.com/en-us/azure/hdinsight/hdinsight-hadoop-customize-cluster-linux?toc=%2Fen-us%2Fazure%2Fhdinsight%2Fr-server%2FTOC.json&bc=%2Fen-us%2Fazure%2Fbread%2Ftoc.json#understanding-script-actions.
	ScriptActions []*ScriptAction

	// The service principal id for the hostSubscriptionId. Type: string (or Expression with resultType string).
	ServicePrincipalID any

	// The key for the service principal id.
	ServicePrincipalKey SecretBaseClassification

	// The version of spark if the cluster type is 'spark'. Type: string (or Expression with resultType string).
	SparkVersion any

	// Specifies the Storm configuration parameters (storm-site.xml) for the HDInsight cluster.
	StormConfiguration any

	// The ARM resource ID for the subnet in the vNet. If virtualNetworkId was specified, then this property is required. Type:
	// string (or Expression with resultType string).
	SubnetName any

	// The ARM resource ID for the vNet to which the cluster should be joined after creation. Type: string (or Expression with
	// resultType string).
	VirtualNetworkID any

	// Specifies the Yarn configuration parameters (yarn-site.xml) for the HDInsight cluster.
	YarnConfiguration any

	// Specifies the size of the Zoo Keeper node for the HDInsight cluster.
	ZookeeperNodeSize any
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetClusterResourceGroup() (rv any) {
	if h != nil {
		return h.ClusterResourceGroup
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetClusterSize() (rv any) {
	if h != nil {
		return h.ClusterSize
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetHostSubscriptionID() (rv any) {
	if h != nil {
		return h.HostSubscriptionID
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if h != nil {
		return h.LinkedServiceName
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetTenant() (rv any) {
	if h != nil {
		return h.Tenant
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetTimeToLive() (rv any) {
	if h != nil {
		return h.TimeToLive
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetVersion() (rv any) {
	if h != nil {
		return h.Version
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetAdditionalLinkedServiceNames() (rv []*LinkedServiceReference) {
	if h != nil {
		return h.AdditionalLinkedServiceNames
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetClusterNamePrefix() (rv any) {
	if h != nil {
		return h.ClusterNamePrefix
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetClusterPassword() (rv SecretBaseClassification) {
	if h != nil {
		return h.ClusterPassword
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetClusterSSHPassword() (rv SecretBaseClassification) {
	if h != nil {
		return h.ClusterSSHPassword
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetClusterSSHUserName() (rv any) {
	if h != nil {
		return h.ClusterSSHUserName
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetClusterType() (rv any) {
	if h != nil {
		return h.ClusterType
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetClusterUserName() (rv any) {
	if h != nil {
		return h.ClusterUserName
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetCoreConfiguration() (rv any) {
	if h != nil {
		return h.CoreConfiguration
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetDataNodeSize() (rv any) {
	if h != nil {
		return h.DataNodeSize
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if h != nil {
		return h.EncryptedCredential
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetHBaseConfiguration() (rv any) {
	if h != nil {
		return h.HBaseConfiguration
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetHcatalogLinkedServiceName() (rv *LinkedServiceReference) {
	if h != nil {
		return h.HcatalogLinkedServiceName
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetHdfsConfiguration() (rv any) {
	if h != nil {
		return h.HdfsConfiguration
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetHeadNodeSize() (rv any) {
	if h != nil {
		return h.HeadNodeSize
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetHiveConfiguration() (rv any) {
	if h != nil {
		return h.HiveConfiguration
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetMapReduceConfiguration() (rv any) {
	if h != nil {
		return h.MapReduceConfiguration
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetOozieConfiguration() (rv any) {
	if h != nil {
		return h.OozieConfiguration
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetScriptActions() (rv []*ScriptAction) {
	if h != nil {
		return h.ScriptActions
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if h != nil {
		return h.ServicePrincipalID
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if h != nil {
		return h.ServicePrincipalKey
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetSparkVersion() (rv any) {
	if h != nil {
		return h.SparkVersion
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetStormConfiguration() (rv any) {
	if h != nil {
		return h.StormConfiguration
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetSubnetName() (rv any) {
	if h != nil {
		return h.SubnetName
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetVirtualNetworkID() (rv any) {
	if h != nil {
		return h.VirtualNetworkID
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetYarnConfiguration() (rv any) {
	if h != nil {
		return h.YarnConfiguration
	}
	return
}

func (h *HDInsightOnDemandLinkedServiceTypeProperties) GetZookeeperNodeSize() (rv any) {
	if h != nil {
		return h.ZookeeperNodeSize
	}
	return
}

// HDInsightPigActivity - HDInsight Pig activity type.
type HDInsightPigActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; HDInsight Pig activity properties.
	TypeProperties *HDInsightPigActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (h *HDInsightPigActivity) GetName() (rv string) {
	if h != nil && h.Name != nil {
		return *h.Name
	}
	return
}

func (h *HDInsightPigActivity) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HDInsightPigActivity) GetTypeProperties() (rv *HDInsightPigActivityTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

func (h *HDInsightPigActivity) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HDInsightPigActivity) GetDependsOn() (rv []*ActivityDependency) {
	if h != nil {
		return h.DependsOn
	}
	return
}

func (h *HDInsightPigActivity) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HDInsightPigActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if h != nil {
		return h.LinkedServiceName
	}
	return
}

func (h *HDInsightPigActivity) GetPolicy() (rv *ActivityPolicy) {
	if h != nil {
		return h.Policy
	}
	return
}

func (h *HDInsightPigActivity) GetUserProperties() (rv []*UserProperty) {
	if h != nil {
		return h.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type HDInsightPigActivity.
func (h *HDInsightPigActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: h.AdditionalProperties,
		DependsOn:            h.DependsOn,
		Description:          h.Description,
		Name:                 h.Name,
		Type:                 h.Type,
		UserProperties:       h.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type HDInsightPigActivity.
func (h *HDInsightPigActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: h.AdditionalProperties,
		DependsOn:            h.DependsOn,
		Description:          h.Description,
		LinkedServiceName:    h.LinkedServiceName,
		Name:                 h.Name,
		Policy:               h.Policy,
		Type:                 h.Type,
		UserProperties:       h.UserProperties,
	}
}

// HDInsightPigActivityTypeProperties - HDInsight Pig activity properties.
type HDInsightPigActivityTypeProperties struct {
	// User specified arguments to HDInsightActivity. Type: array (or Expression with resultType array).
	Arguments any

	// Allows user to specify defines for Pig job request.
	Defines map[string]any

	// Debug info option.
	GetDebugInfo *HDInsightActivityDebugInfoOption

	// Script linked service reference.
	ScriptLinkedService *LinkedServiceReference

	// Script path. Type: string (or Expression with resultType string).
	ScriptPath any

	// Storage linked service references.
	StorageLinkedServices []*LinkedServiceReference
}

func (h *HDInsightPigActivityTypeProperties) GetArguments() (rv any) {
	if h != nil {
		return h.Arguments
	}
	return
}

func (h *HDInsightPigActivityTypeProperties) GetDefines() (rv map[string]any) {
	if h != nil {
		return h.Defines
	}
	return
}

func (h *HDInsightPigActivityTypeProperties) GetGetDebugInfo() (rv *HDInsightActivityDebugInfoOption) {
	if h != nil {
		return h.GetDebugInfo
	}
	return
}

func (h *HDInsightPigActivityTypeProperties) GetScriptLinkedService() (rv *LinkedServiceReference) {
	if h != nil {
		return h.ScriptLinkedService
	}
	return
}

func (h *HDInsightPigActivityTypeProperties) GetScriptPath() (rv any) {
	if h != nil {
		return h.ScriptPath
	}
	return
}

func (h *HDInsightPigActivityTypeProperties) GetStorageLinkedServices() (rv []*LinkedServiceReference) {
	if h != nil {
		return h.StorageLinkedServices
	}
	return
}

// HDInsightSparkActivity - HDInsight Spark activity.
type HDInsightSparkActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; HDInsight spark activity properties.
	TypeProperties *HDInsightSparkActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (h *HDInsightSparkActivity) GetName() (rv string) {
	if h != nil && h.Name != nil {
		return *h.Name
	}
	return
}

func (h *HDInsightSparkActivity) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HDInsightSparkActivity) GetTypeProperties() (rv *HDInsightSparkActivityTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

func (h *HDInsightSparkActivity) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HDInsightSparkActivity) GetDependsOn() (rv []*ActivityDependency) {
	if h != nil {
		return h.DependsOn
	}
	return
}

func (h *HDInsightSparkActivity) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HDInsightSparkActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if h != nil {
		return h.LinkedServiceName
	}
	return
}

func (h *HDInsightSparkActivity) GetPolicy() (rv *ActivityPolicy) {
	if h != nil {
		return h.Policy
	}
	return
}

func (h *HDInsightSparkActivity) GetUserProperties() (rv []*UserProperty) {
	if h != nil {
		return h.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type HDInsightSparkActivity.
func (h *HDInsightSparkActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: h.AdditionalProperties,
		DependsOn:            h.DependsOn,
		Description:          h.Description,
		Name:                 h.Name,
		Type:                 h.Type,
		UserProperties:       h.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type HDInsightSparkActivity.
func (h *HDInsightSparkActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: h.AdditionalProperties,
		DependsOn:            h.DependsOn,
		Description:          h.Description,
		LinkedServiceName:    h.LinkedServiceName,
		Name:                 h.Name,
		Policy:               h.Policy,
		Type:                 h.Type,
		UserProperties:       h.UserProperties,
	}
}

// HDInsightSparkActivityTypeProperties - HDInsight spark activity properties.
type HDInsightSparkActivityTypeProperties struct {
	// REQUIRED; The relative path to the root folder of the code/package to be executed. Type: string (or Expression with resultType
	// string).
	EntryFilePath any

	// REQUIRED; The root path in 'sparkJobLinkedService' for all the job’s files. Type: string (or Expression with resultType
	// string).
	RootPath any

	// The user-specified arguments to HDInsightSparkActivity.
	Arguments []any

	// The application's Java/Spark main class.
	ClassName *string

	// Debug info option.
	GetDebugInfo *HDInsightActivityDebugInfoOption

	// The user to impersonate that will execute the job. Type: string (or Expression with resultType string).
	ProxyUser any

	// Spark configuration property.
	SparkConfig map[string]any

	// The storage linked service for uploading the entry file and dependencies, and for receiving logs.
	SparkJobLinkedService *LinkedServiceReference
}

func (h *HDInsightSparkActivityTypeProperties) GetEntryFilePath() (rv any) {
	if h != nil {
		return h.EntryFilePath
	}
	return
}

func (h *HDInsightSparkActivityTypeProperties) GetRootPath() (rv any) {
	if h != nil {
		return h.RootPath
	}
	return
}

func (h *HDInsightSparkActivityTypeProperties) GetArguments() (rv []any) {
	if h != nil {
		return h.Arguments
	}
	return
}

func (h *HDInsightSparkActivityTypeProperties) GetClassName() (rv string) {
	if h != nil && h.ClassName != nil {
		return *h.ClassName
	}
	return
}

func (h *HDInsightSparkActivityTypeProperties) GetGetDebugInfo() (rv *HDInsightActivityDebugInfoOption) {
	if h != nil {
		return h.GetDebugInfo
	}
	return
}

func (h *HDInsightSparkActivityTypeProperties) GetProxyUser() (rv any) {
	if h != nil {
		return h.ProxyUser
	}
	return
}

func (h *HDInsightSparkActivityTypeProperties) GetSparkConfig() (rv map[string]any) {
	if h != nil {
		return h.SparkConfig
	}
	return
}

func (h *HDInsightSparkActivityTypeProperties) GetSparkJobLinkedService() (rv *LinkedServiceReference) {
	if h != nil {
		return h.SparkJobLinkedService
	}
	return
}

// HDInsightStreamingActivity - HDInsight streaming activity type.
type HDInsightStreamingActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; HDInsight streaming activity properties.
	TypeProperties *HDInsightStreamingActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (h *HDInsightStreamingActivity) GetName() (rv string) {
	if h != nil && h.Name != nil {
		return *h.Name
	}
	return
}

func (h *HDInsightStreamingActivity) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HDInsightStreamingActivity) GetTypeProperties() (rv *HDInsightStreamingActivityTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

func (h *HDInsightStreamingActivity) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HDInsightStreamingActivity) GetDependsOn() (rv []*ActivityDependency) {
	if h != nil {
		return h.DependsOn
	}
	return
}

func (h *HDInsightStreamingActivity) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HDInsightStreamingActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if h != nil {
		return h.LinkedServiceName
	}
	return
}

func (h *HDInsightStreamingActivity) GetPolicy() (rv *ActivityPolicy) {
	if h != nil {
		return h.Policy
	}
	return
}

func (h *HDInsightStreamingActivity) GetUserProperties() (rv []*UserProperty) {
	if h != nil {
		return h.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type HDInsightStreamingActivity.
func (h *HDInsightStreamingActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: h.AdditionalProperties,
		DependsOn:            h.DependsOn,
		Description:          h.Description,
		Name:                 h.Name,
		Type:                 h.Type,
		UserProperties:       h.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type HDInsightStreamingActivity.
func (h *HDInsightStreamingActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: h.AdditionalProperties,
		DependsOn:            h.DependsOn,
		Description:          h.Description,
		LinkedServiceName:    h.LinkedServiceName,
		Name:                 h.Name,
		Policy:               h.Policy,
		Type:                 h.Type,
		UserProperties:       h.UserProperties,
	}
}

// HDInsightStreamingActivityTypeProperties - HDInsight streaming activity properties.
type HDInsightStreamingActivityTypeProperties struct {
	// REQUIRED; Paths to streaming job files. Can be directories.
	FilePaths []any

	// REQUIRED; Input blob path. Type: string (or Expression with resultType string).
	Input any

	// REQUIRED; Mapper executable name. Type: string (or Expression with resultType string).
	Mapper any

	// REQUIRED; Output blob path. Type: string (or Expression with resultType string).
	Output any

	// REQUIRED; Reducer executable name. Type: string (or Expression with resultType string).
	Reducer any

	// User specified arguments to HDInsightActivity.
	Arguments []any

	// Combiner executable name. Type: string (or Expression with resultType string).
	Combiner any

	// Command line environment values.
	CommandEnvironment []any

	// Allows user to specify defines for streaming job request.
	Defines map[string]any

	// Linked service reference where the files are located.
	FileLinkedService *LinkedServiceReference

	// Debug info option.
	GetDebugInfo *HDInsightActivityDebugInfoOption

	// Storage linked service references.
	StorageLinkedServices []*LinkedServiceReference
}

func (h *HDInsightStreamingActivityTypeProperties) GetFilePaths() (rv []any) {
	if h != nil {
		return h.FilePaths
	}
	return
}

func (h *HDInsightStreamingActivityTypeProperties) GetInput() (rv any) {
	if h != nil {
		return h.Input
	}
	return
}

func (h *HDInsightStreamingActivityTypeProperties) GetMapper() (rv any) {
	if h != nil {
		return h.Mapper
	}
	return
}

func (h *HDInsightStreamingActivityTypeProperties) GetOutput() (rv any) {
	if h != nil {
		return h.Output
	}
	return
}

func (h *HDInsightStreamingActivityTypeProperties) GetReducer() (rv any) {
	if h != nil {
		return h.Reducer
	}
	return
}

func (h *HDInsightStreamingActivityTypeProperties) GetArguments() (rv []any) {
	if h != nil {
		return h.Arguments
	}
	return
}

func (h *HDInsightStreamingActivityTypeProperties) GetCombiner() (rv any) {
	if h != nil {
		return h.Combiner
	}
	return
}

func (h *HDInsightStreamingActivityTypeProperties) GetCommandEnvironment() (rv []any) {
	if h != nil {
		return h.CommandEnvironment
	}
	return
}

func (h *HDInsightStreamingActivityTypeProperties) GetDefines() (rv map[string]any) {
	if h != nil {
		return h.Defines
	}
	return
}

func (h *HDInsightStreamingActivityTypeProperties) GetFileLinkedService() (rv *LinkedServiceReference) {
	if h != nil {
		return h.FileLinkedService
	}
	return
}

func (h *HDInsightStreamingActivityTypeProperties) GetGetDebugInfo() (rv *HDInsightActivityDebugInfoOption) {
	if h != nil {
		return h.GetDebugInfo
	}
	return
}

func (h *HDInsightStreamingActivityTypeProperties) GetStorageLinkedServices() (rv []*LinkedServiceReference) {
	if h != nil {
		return h.StorageLinkedServices
	}
	return
}

// HTTPDataset - A file in an HTTP web server.
type HTTPDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *HTTPDatasetTypeProperties
}

func (h *HTTPDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if h != nil {
		return h.LinkedServiceName
	}
	return
}

func (h *HTTPDataset) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HTTPDataset) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HTTPDataset) GetAnnotations() (rv []any) {
	if h != nil {
		return h.Annotations
	}
	return
}

func (h *HTTPDataset) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HTTPDataset) GetFolder() (rv *DatasetFolder) {
	if h != nil {
		return h.Folder
	}
	return
}

func (h *HTTPDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if h != nil {
		return h.Parameters
	}
	return
}

func (h *HTTPDataset) GetSchema() (rv any) {
	if h != nil {
		return h.Schema
	}
	return
}

func (h *HTTPDataset) GetStructure() (rv any) {
	if h != nil {
		return h.Structure
	}
	return
}

func (h *HTTPDataset) GetTypeProperties() (rv *HTTPDatasetTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type HTTPDataset.
func (h *HTTPDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: h.AdditionalProperties,
		Annotations:          h.Annotations,
		Description:          h.Description,
		Folder:               h.Folder,
		LinkedServiceName:    h.LinkedServiceName,
		Parameters:           h.Parameters,
		Schema:               h.Schema,
		Structure:            h.Structure,
		Type:                 h.Type,
	}
}

// HTTPDatasetTypeProperties - Properties specific to this dataset type.
type HTTPDatasetTypeProperties struct {
	// The headers for the HTTP Request. e.g. request-header-name-1:request-header-value-1 … request-header-name-n:request-header-value-n
	// Type: string (or Expression with resultType string).
	AdditionalHeaders any

	// The data compression method used on files.
	Compression *DatasetCompression

	// The format of files.
	Format DatasetStorageFormatClassification

	// The relative URL based on the URL in the HttpLinkedService refers to an HTTP file Type: string (or Expression with resultType
	// string).
	RelativeURL any

	// The body for the HTTP request. Type: string (or Expression with resultType string).
	RequestBody any

	// The HTTP method for the HTTP request. Type: string (or Expression with resultType string).
	RequestMethod any
}

func (h *HTTPDatasetTypeProperties) GetAdditionalHeaders() (rv any) {
	if h != nil {
		return h.AdditionalHeaders
	}
	return
}

func (h *HTTPDatasetTypeProperties) GetCompression() (rv *DatasetCompression) {
	if h != nil {
		return h.Compression
	}
	return
}

func (h *HTTPDatasetTypeProperties) GetFormat() (rv DatasetStorageFormatClassification) {
	if h != nil {
		return h.Format
	}
	return
}

func (h *HTTPDatasetTypeProperties) GetRelativeURL() (rv any) {
	if h != nil {
		return h.RelativeURL
	}
	return
}

func (h *HTTPDatasetTypeProperties) GetRequestBody() (rv any) {
	if h != nil {
		return h.RequestBody
	}
	return
}

func (h *HTTPDatasetTypeProperties) GetRequestMethod() (rv any) {
	if h != nil {
		return h.RequestMethod
	}
	return
}

// HTTPLinkedService - Linked service for an HTTP source.
type HTTPLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Properties specific to this linked service type.
	TypeProperties *HTTPLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (h *HTTPLinkedService) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HTTPLinkedService) GetTypeProperties() (rv *HTTPLinkedServiceTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

func (h *HTTPLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HTTPLinkedService) GetAnnotations() (rv []any) {
	if h != nil {
		return h.Annotations
	}
	return
}

func (h *HTTPLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if h != nil {
		return h.ConnectVia
	}
	return
}

func (h *HTTPLinkedService) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HTTPLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if h != nil {
		return h.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type HTTPLinkedService.
func (h *HTTPLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: h.AdditionalProperties,
		Annotations:          h.Annotations,
		ConnectVia:           h.ConnectVia,
		Description:          h.Description,
		Parameters:           h.Parameters,
		Type:                 h.Type,
	}
}

// HTTPLinkedServiceTypeProperties - Properties specific to this linked service type.
type HTTPLinkedServiceTypeProperties struct {
	// REQUIRED; The base URL of the HTTP endpoint, e.g. http://www.microsoft.com. Type: string (or Expression with resultType
	// string).
	URL any

	// The authentication type to be used to connect to the HTTP server.
	AuthenticationType *HTTPAuthenticationType

	// Thumbprint of certificate for ClientCertificate authentication. Only valid for on-premises copy. For on-premises copy with
	// ClientCertificate authentication, either CertThumbprint or
	// EmbeddedCertData/Password should be specified. Type: string (or Expression with resultType string).
	CertThumbprint any

	// Base64 encoded certificate data for ClientCertificate authentication. For on-premises copy with ClientCertificate authentication,
	// either CertThumbprint or EmbeddedCertData/Password should be
	// specified. Type: string (or Expression with resultType string).
	EmbeddedCertData any

	// If true, validate the HTTPS server SSL certificate. Default value is true. Type: boolean (or Expression with resultType
	// boolean).
	EnableServerCertificateValidation any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password for Basic, Digest, Windows, or ClientCertificate with EmbeddedCertData authentication.
	Password SecretBaseClassification

	// User name for Basic, Digest, or Windows authentication. Type: string (or Expression with resultType string).
	UserName any
}

func (h *HTTPLinkedServiceTypeProperties) GetURL() (rv any) {
	if h != nil {
		return h.URL
	}
	return
}

func (h *HTTPLinkedServiceTypeProperties) GetAuthenticationType() (rv *HTTPAuthenticationType) {
	if h != nil {
		return h.AuthenticationType
	}
	return
}

func (h *HTTPLinkedServiceTypeProperties) GetCertThumbprint() (rv any) {
	if h != nil {
		return h.CertThumbprint
	}
	return
}

func (h *HTTPLinkedServiceTypeProperties) GetEmbeddedCertData() (rv any) {
	if h != nil {
		return h.EmbeddedCertData
	}
	return
}

func (h *HTTPLinkedServiceTypeProperties) GetEnableServerCertificateValidation() (rv any) {
	if h != nil {
		return h.EnableServerCertificateValidation
	}
	return
}

func (h *HTTPLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if h != nil {
		return h.EncryptedCredential
	}
	return
}

func (h *HTTPLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if h != nil {
		return h.Password
	}
	return
}

func (h *HTTPLinkedServiceTypeProperties) GetUserName() (rv any) {
	if h != nil {
		return h.UserName
	}
	return
}

// HTTPReadSettings - Sftp read settings.
type HTTPReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath any

	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody any

	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod any

	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server.
	RequestTimeout any
}

func (h *HTTPReadSettings) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HTTPReadSettings) GetAdditionalHeaders() (rv any) {
	if h != nil {
		return h.AdditionalHeaders
	}
	return
}

func (h *HTTPReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HTTPReadSettings) GetEnablePartitionDiscovery() (rv bool) {
	if h != nil && h.EnablePartitionDiscovery != nil {
		return *h.EnablePartitionDiscovery
	}
	return
}

func (h *HTTPReadSettings) GetMaxConcurrentConnections() (rv any) {
	if h != nil {
		return h.MaxConcurrentConnections
	}
	return
}

func (h *HTTPReadSettings) GetPartitionRootPath() (rv any) {
	if h != nil {
		return h.PartitionRootPath
	}
	return
}

func (h *HTTPReadSettings) GetRequestBody() (rv any) {
	if h != nil {
		return h.RequestBody
	}
	return
}

func (h *HTTPReadSettings) GetRequestMethod() (rv any) {
	if h != nil {
		return h.RequestMethod
	}
	return
}

func (h *HTTPReadSettings) GetRequestTimeout() (rv any) {
	if h != nil {
		return h.RequestTimeout
	}
	return
}

// GetStoreReadSettings implements the StoreReadSettingsClassification interface for type HTTPReadSettings.
func (h *HTTPReadSettings) GetStoreReadSettings() *StoreReadSettings {
	return &StoreReadSettings{
		AdditionalProperties:     h.AdditionalProperties,
		MaxConcurrentConnections: h.MaxConcurrentConnections,
		Type:                     h.Type,
	}
}

// HTTPServerLocation - The location of http server.
type HTTPServerLocation struct {
	// REQUIRED; Type of dataset storage location.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName any

	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath any

	// Specify the relativeUrl of http server. Type: string (or Expression with resultType string)
	RelativeURL any
}

func (h *HTTPServerLocation) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HTTPServerLocation) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HTTPServerLocation) GetFileName() (rv any) {
	if h != nil {
		return h.FileName
	}
	return
}

func (h *HTTPServerLocation) GetFolderPath() (rv any) {
	if h != nil {
		return h.FolderPath
	}
	return
}

func (h *HTTPServerLocation) GetRelativeURL() (rv any) {
	if h != nil {
		return h.RelativeURL
	}
	return
}

// GetDatasetLocation implements the DatasetLocationClassification interface for type HTTPServerLocation.
func (h *HTTPServerLocation) GetDatasetLocation() *DatasetLocation {
	return &DatasetLocation{
		AdditionalProperties: h.AdditionalProperties,
		FileName:             h.FileName,
		FolderPath:           h.FolderPath,
		Type:                 h.Type,
	}
}

// HTTPSource - A copy activity source for an HTTP file.
type HTTPSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies the timeout for a HTTP client to get HTTP response from HTTP server. The default value is equivalent to System.Net.HttpWebRequest.Timeout.
	// Type: string (or Expression with resultType
	// string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HTTPRequestTimeout any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (h *HTTPSource) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HTTPSource) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HTTPSource) GetHTTPRequestTimeout() (rv any) {
	if h != nil {
		return h.HTTPRequestTimeout
	}
	return
}

func (h *HTTPSource) GetMaxConcurrentConnections() (rv any) {
	if h != nil {
		return h.MaxConcurrentConnections
	}
	return
}

func (h *HTTPSource) GetSourceRetryCount() (rv any) {
	if h != nil {
		return h.SourceRetryCount
	}
	return
}

func (h *HTTPSource) GetSourceRetryWait() (rv any) {
	if h != nil {
		return h.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type HTTPSource.
func (h *HTTPSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     h.AdditionalProperties,
		MaxConcurrentConnections: h.MaxConcurrentConnections,
		SourceRetryCount:         h.SourceRetryCount,
		SourceRetryWait:          h.SourceRetryWait,
		Type:                     h.Type,
	}
}

// HdfsLinkedService - Hadoop Distributed File System (HDFS) linked service.
type HdfsLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; HDFS linked service properties.
	TypeProperties *HdfsLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (h *HdfsLinkedService) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HdfsLinkedService) GetTypeProperties() (rv *HdfsLinkedServiceTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

func (h *HdfsLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HdfsLinkedService) GetAnnotations() (rv []any) {
	if h != nil {
		return h.Annotations
	}
	return
}

func (h *HdfsLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if h != nil {
		return h.ConnectVia
	}
	return
}

func (h *HdfsLinkedService) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HdfsLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if h != nil {
		return h.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type HdfsLinkedService.
func (h *HdfsLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: h.AdditionalProperties,
		Annotations:          h.Annotations,
		ConnectVia:           h.ConnectVia,
		Description:          h.Description,
		Parameters:           h.Parameters,
		Type:                 h.Type,
	}
}

// HdfsLinkedServiceTypeProperties - HDFS linked service properties.
type HdfsLinkedServiceTypeProperties struct {
	// REQUIRED; The URL of the HDFS service endpoint, e.g. http://myhostname:50070/webhdfs/v1 . Type: string (or Expression with
	// resultType string).
	URL any

	// Type of authentication used to connect to the HDFS. Possible values are: Anonymous and Windows. Type: string (or Expression
	// with resultType string).
	AuthenticationType any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password for Windows authentication.
	Password SecretBaseClassification

	// User name for Windows authentication. Type: string (or Expression with resultType string).
	UserName any
}

func (h *HdfsLinkedServiceTypeProperties) GetURL() (rv any) {
	if h != nil {
		return h.URL
	}
	return
}

func (h *HdfsLinkedServiceTypeProperties) GetAuthenticationType() (rv any) {
	if h != nil {
		return h.AuthenticationType
	}
	return
}

func (h *HdfsLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if h != nil {
		return h.EncryptedCredential
	}
	return
}

func (h *HdfsLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if h != nil {
		return h.Password
	}
	return
}

func (h *HdfsLinkedServiceTypeProperties) GetUserName() (rv any) {
	if h != nil {
		return h.UserName
	}
	return
}

// HdfsLocation - The location of HDFS.
type HdfsLocation struct {
	// REQUIRED; Type of dataset storage location.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName any

	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath any
}

func (h *HdfsLocation) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HdfsLocation) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HdfsLocation) GetFileName() (rv any) {
	if h != nil {
		return h.FileName
	}
	return
}

func (h *HdfsLocation) GetFolderPath() (rv any) {
	if h != nil {
		return h.FolderPath
	}
	return
}

// GetDatasetLocation implements the DatasetLocationClassification interface for type HdfsLocation.
func (h *HdfsLocation) GetDatasetLocation() *DatasetLocation {
	return &DatasetLocation{
		AdditionalProperties: h.AdditionalProperties,
		FileName:             h.FileName,
		FolderPath:           h.FolderPath,
		Type:                 h.Type,
	}
}

// HdfsReadSettings - HDFS read settings.
type HdfsReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression
	// with resultType boolean).
	DeleteFilesAfterCompletion any

	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettings

	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool

	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy.
	// Type: string (or Expression with resultType string).
	FileListPath any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd any

	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart any

	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// HDFS wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName any

	// HDFS wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath any
}

func (h *HdfsReadSettings) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HdfsReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HdfsReadSettings) GetDeleteFilesAfterCompletion() (rv any) {
	if h != nil {
		return h.DeleteFilesAfterCompletion
	}
	return
}

func (h *HdfsReadSettings) GetDistcpSettings() (rv *DistcpSettings) {
	if h != nil {
		return h.DistcpSettings
	}
	return
}

func (h *HdfsReadSettings) GetEnablePartitionDiscovery() (rv bool) {
	if h != nil && h.EnablePartitionDiscovery != nil {
		return *h.EnablePartitionDiscovery
	}
	return
}

func (h *HdfsReadSettings) GetFileListPath() (rv any) {
	if h != nil {
		return h.FileListPath
	}
	return
}

func (h *HdfsReadSettings) GetMaxConcurrentConnections() (rv any) {
	if h != nil {
		return h.MaxConcurrentConnections
	}
	return
}

func (h *HdfsReadSettings) GetModifiedDatetimeEnd() (rv any) {
	if h != nil {
		return h.ModifiedDatetimeEnd
	}
	return
}

func (h *HdfsReadSettings) GetModifiedDatetimeStart() (rv any) {
	if h != nil {
		return h.ModifiedDatetimeStart
	}
	return
}

func (h *HdfsReadSettings) GetPartitionRootPath() (rv any) {
	if h != nil {
		return h.PartitionRootPath
	}
	return
}

func (h *HdfsReadSettings) GetRecursive() (rv any) {
	if h != nil {
		return h.Recursive
	}
	return
}

func (h *HdfsReadSettings) GetWildcardFileName() (rv any) {
	if h != nil {
		return h.WildcardFileName
	}
	return
}

func (h *HdfsReadSettings) GetWildcardFolderPath() (rv any) {
	if h != nil {
		return h.WildcardFolderPath
	}
	return
}

// GetStoreReadSettings implements the StoreReadSettingsClassification interface for type HdfsReadSettings.
func (h *HdfsReadSettings) GetStoreReadSettings() *StoreReadSettings {
	return &StoreReadSettings{
		AdditionalProperties:     h.AdditionalProperties,
		MaxConcurrentConnections: h.MaxConcurrentConnections,
		Type:                     h.Type,
	}
}

// HdfsSource - A copy activity HDFS source.
type HdfsSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies Distcp-related settings.
	DistcpSettings *DistcpSettings

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (h *HdfsSource) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HdfsSource) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HdfsSource) GetDistcpSettings() (rv *DistcpSettings) {
	if h != nil {
		return h.DistcpSettings
	}
	return
}

func (h *HdfsSource) GetMaxConcurrentConnections() (rv any) {
	if h != nil {
		return h.MaxConcurrentConnections
	}
	return
}

func (h *HdfsSource) GetRecursive() (rv any) {
	if h != nil {
		return h.Recursive
	}
	return
}

func (h *HdfsSource) GetSourceRetryCount() (rv any) {
	if h != nil {
		return h.SourceRetryCount
	}
	return
}

func (h *HdfsSource) GetSourceRetryWait() (rv any) {
	if h != nil {
		return h.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type HdfsSource.
func (h *HdfsSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     h.AdditionalProperties,
		MaxConcurrentConnections: h.MaxConcurrentConnections,
		SourceRetryCount:         h.SourceRetryCount,
		SourceRetryWait:          h.SourceRetryWait,
		Type:                     h.Type,
	}
}

// HiveDatasetTypeProperties - Hive Properties
type HiveDatasetTypeProperties struct {
	// The schema name of the Hive. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the Hive. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (h *HiveDatasetTypeProperties) GetSchema() (rv any) {
	if h != nil {
		return h.Schema
	}
	return
}

func (h *HiveDatasetTypeProperties) GetTable() (rv any) {
	if h != nil {
		return h.Table
	}
	return
}

func (h *HiveDatasetTypeProperties) GetTableName() (rv any) {
	if h != nil {
		return h.TableName
	}
	return
}

// HiveLinkedService - Hive Server linked service.
type HiveLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Hive Server linked service properties.
	TypeProperties *HiveLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (h *HiveLinkedService) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HiveLinkedService) GetTypeProperties() (rv *HiveLinkedServiceTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

func (h *HiveLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HiveLinkedService) GetAnnotations() (rv []any) {
	if h != nil {
		return h.Annotations
	}
	return
}

func (h *HiveLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if h != nil {
		return h.ConnectVia
	}
	return
}

func (h *HiveLinkedService) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HiveLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if h != nil {
		return h.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type HiveLinkedService.
func (h *HiveLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: h.AdditionalProperties,
		Annotations:          h.Annotations,
		ConnectVia:           h.ConnectVia,
		Description:          h.Description,
		Parameters:           h.Parameters,
		Type:                 h.Type,
	}
}

// HiveLinkedServiceTypeProperties - Hive Server linked service properties.
type HiveLinkedServiceTypeProperties struct {
	// REQUIRED; The authentication method used to access the Hive server.
	AuthenticationType *HiveAuthenticationType

	// REQUIRED; IP address or host name of the Hive server, separated by ';' for multiple hosts (only when serviceDiscoveryMode
	// is enable).
	Host any

	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over
	// SSL. The default value is false.
	AllowHostNameCNMismatch any

	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert any

	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSSL any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The partial URL corresponding to the Hive server.
	HTTPPath any

	// The password corresponding to the user name that you provided in the Username field
	Password SecretBaseClassification

	// The TCP port that the Hive server uses to listen for client connections.
	Port any

	// The type of Hive server.
	ServerType *HiveServerType

	// true to indicate using the ZooKeeper service, false not.
	ServiceDiscoveryMode any

	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *HiveThriftTransportProtocol

	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This
	// property can only be set when using SSL on self-hosted IR. The default value
	// is the cacerts.pem file installed with the IR.
	TrustedCertPath any

	// Specifies whether the driver uses native HiveQL queries,or converts them into an equivalent form in HiveQL.
	UseNativeQuery any

	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is
	// false.
	UseSystemTrustStore any

	// The user name that you use to access Hive Server.
	Username any

	// The namespace on ZooKeeper under which Hive Server 2 nodes are added.
	ZooKeeperNameSpace any
}

func (h *HiveLinkedServiceTypeProperties) GetAuthenticationType() (rv *HiveAuthenticationType) {
	if h != nil {
		return h.AuthenticationType
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetHost() (rv any) {
	if h != nil {
		return h.Host
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetAllowHostNameCNMismatch() (rv any) {
	if h != nil {
		return h.AllowHostNameCNMismatch
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetAllowSelfSignedServerCert() (rv any) {
	if h != nil {
		return h.AllowSelfSignedServerCert
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetEnableSSL() (rv any) {
	if h != nil {
		return h.EnableSSL
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if h != nil {
		return h.EncryptedCredential
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetHTTPPath() (rv any) {
	if h != nil {
		return h.HTTPPath
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if h != nil {
		return h.Password
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetPort() (rv any) {
	if h != nil {
		return h.Port
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetServerType() (rv *HiveServerType) {
	if h != nil {
		return h.ServerType
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetServiceDiscoveryMode() (rv any) {
	if h != nil {
		return h.ServiceDiscoveryMode
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetThriftTransportProtocol() (rv *HiveThriftTransportProtocol) {
	if h != nil {
		return h.ThriftTransportProtocol
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetTrustedCertPath() (rv any) {
	if h != nil {
		return h.TrustedCertPath
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetUseNativeQuery() (rv any) {
	if h != nil {
		return h.UseNativeQuery
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetUseSystemTrustStore() (rv any) {
	if h != nil {
		return h.UseSystemTrustStore
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetUsername() (rv any) {
	if h != nil {
		return h.Username
	}
	return
}

func (h *HiveLinkedServiceTypeProperties) GetZooKeeperNameSpace() (rv any) {
	if h != nil {
		return h.ZooKeeperNameSpace
	}
	return
}

// HiveObjectDataset - Hive Server dataset.
type HiveObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *HiveDatasetTypeProperties
}

func (h *HiveObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if h != nil {
		return h.LinkedServiceName
	}
	return
}

func (h *HiveObjectDataset) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HiveObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HiveObjectDataset) GetAnnotations() (rv []any) {
	if h != nil {
		return h.Annotations
	}
	return
}

func (h *HiveObjectDataset) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HiveObjectDataset) GetFolder() (rv *DatasetFolder) {
	if h != nil {
		return h.Folder
	}
	return
}

func (h *HiveObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if h != nil {
		return h.Parameters
	}
	return
}

func (h *HiveObjectDataset) GetSchema() (rv any) {
	if h != nil {
		return h.Schema
	}
	return
}

func (h *HiveObjectDataset) GetStructure() (rv any) {
	if h != nil {
		return h.Structure
	}
	return
}

func (h *HiveObjectDataset) GetTypeProperties() (rv *HiveDatasetTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type HiveObjectDataset.
func (h *HiveObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: h.AdditionalProperties,
		Annotations:          h.Annotations,
		Description:          h.Description,
		Folder:               h.Folder,
		LinkedServiceName:    h.LinkedServiceName,
		Parameters:           h.Parameters,
		Schema:               h.Schema,
		Structure:            h.Structure,
		Type:                 h.Type,
	}
}

// HiveSource - A copy activity Hive Server source.
type HiveSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (h *HiveSource) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HiveSource) GetAdditionalColumns() (rv any) {
	if h != nil {
		return h.AdditionalColumns
	}
	return
}

func (h *HiveSource) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HiveSource) GetMaxConcurrentConnections() (rv any) {
	if h != nil {
		return h.MaxConcurrentConnections
	}
	return
}

func (h *HiveSource) GetQuery() (rv any) {
	if h != nil {
		return h.Query
	}
	return
}

func (h *HiveSource) GetQueryTimeout() (rv any) {
	if h != nil {
		return h.QueryTimeout
	}
	return
}

func (h *HiveSource) GetSourceRetryCount() (rv any) {
	if h != nil {
		return h.SourceRetryCount
	}
	return
}

func (h *HiveSource) GetSourceRetryWait() (rv any) {
	if h != nil {
		return h.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type HiveSource.
func (h *HiveSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     h.AdditionalProperties,
		MaxConcurrentConnections: h.MaxConcurrentConnections,
		SourceRetryCount:         h.SourceRetryCount,
		SourceRetryWait:          h.SourceRetryWait,
		Type:                     h.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type HiveSource.
func (h *HiveSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        h.AdditionalColumns,
		AdditionalProperties:     h.AdditionalProperties,
		MaxConcurrentConnections: h.MaxConcurrentConnections,
		QueryTimeout:             h.QueryTimeout,
		SourceRetryCount:         h.SourceRetryCount,
		SourceRetryWait:          h.SourceRetryWait,
		Type:                     h.Type,
	}
}

// HubspotLinkedService - Hubspot Service linked service.
type HubspotLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Hubspot Service linked service properties.
	TypeProperties *HubspotLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (h *HubspotLinkedService) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HubspotLinkedService) GetTypeProperties() (rv *HubspotLinkedServiceTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

func (h *HubspotLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HubspotLinkedService) GetAnnotations() (rv []any) {
	if h != nil {
		return h.Annotations
	}
	return
}

func (h *HubspotLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if h != nil {
		return h.ConnectVia
	}
	return
}

func (h *HubspotLinkedService) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HubspotLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if h != nil {
		return h.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type HubspotLinkedService.
func (h *HubspotLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: h.AdditionalProperties,
		Annotations:          h.Annotations,
		ConnectVia:           h.ConnectVia,
		Description:          h.Description,
		Parameters:           h.Parameters,
		Type:                 h.Type,
	}
}

// HubspotLinkedServiceTypeProperties - Hubspot Service linked service properties.
type HubspotLinkedServiceTypeProperties struct {
	// REQUIRED; The client ID associated with your Hubspot application.
	ClientID any

	// The access token obtained when initially authenticating your OAuth integration.
	AccessToken SecretBaseClassification

	// The client secret associated with your Hubspot application.
	ClientSecret SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The refresh token obtained when initially authenticating your OAuth integration.
	RefreshToken SecretBaseClassification

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true.
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification any
}

func (h *HubspotLinkedServiceTypeProperties) GetClientID() (rv any) {
	if h != nil {
		return h.ClientID
	}
	return
}

func (h *HubspotLinkedServiceTypeProperties) GetAccessToken() (rv SecretBaseClassification) {
	if h != nil {
		return h.AccessToken
	}
	return
}

func (h *HubspotLinkedServiceTypeProperties) GetClientSecret() (rv SecretBaseClassification) {
	if h != nil {
		return h.ClientSecret
	}
	return
}

func (h *HubspotLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if h != nil {
		return h.EncryptedCredential
	}
	return
}

func (h *HubspotLinkedServiceTypeProperties) GetRefreshToken() (rv SecretBaseClassification) {
	if h != nil {
		return h.RefreshToken
	}
	return
}

func (h *HubspotLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if h != nil {
		return h.UseEncryptedEndpoints
	}
	return
}

func (h *HubspotLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if h != nil {
		return h.UseHostVerification
	}
	return
}

func (h *HubspotLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if h != nil {
		return h.UsePeerVerification
	}
	return
}

// HubspotObjectDataset - Hubspot Service dataset.
type HubspotObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (h *HubspotObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if h != nil {
		return h.LinkedServiceName
	}
	return
}

func (h *HubspotObjectDataset) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HubspotObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HubspotObjectDataset) GetAnnotations() (rv []any) {
	if h != nil {
		return h.Annotations
	}
	return
}

func (h *HubspotObjectDataset) GetDescription() (rv string) {
	if h != nil && h.Description != nil {
		return *h.Description
	}
	return
}

func (h *HubspotObjectDataset) GetFolder() (rv *DatasetFolder) {
	if h != nil {
		return h.Folder
	}
	return
}

func (h *HubspotObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if h != nil {
		return h.Parameters
	}
	return
}

func (h *HubspotObjectDataset) GetSchema() (rv any) {
	if h != nil {
		return h.Schema
	}
	return
}

func (h *HubspotObjectDataset) GetStructure() (rv any) {
	if h != nil {
		return h.Structure
	}
	return
}

func (h *HubspotObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if h != nil {
		return h.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type HubspotObjectDataset.
func (h *HubspotObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: h.AdditionalProperties,
		Annotations:          h.Annotations,
		Description:          h.Description,
		Folder:               h.Folder,
		LinkedServiceName:    h.LinkedServiceName,
		Parameters:           h.Parameters,
		Schema:               h.Schema,
		Structure:            h.Structure,
		Type:                 h.Type,
	}
}

// HubspotSource - A copy activity Hubspot Service source.
type HubspotSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (h *HubspotSource) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

func (h *HubspotSource) GetAdditionalColumns() (rv any) {
	if h != nil {
		return h.AdditionalColumns
	}
	return
}

func (h *HubspotSource) GetAdditionalProperties() (rv map[string]any) {
	if h != nil {
		return h.AdditionalProperties
	}
	return
}

func (h *HubspotSource) GetMaxConcurrentConnections() (rv any) {
	if h != nil {
		return h.MaxConcurrentConnections
	}
	return
}

func (h *HubspotSource) GetQuery() (rv any) {
	if h != nil {
		return h.Query
	}
	return
}

func (h *HubspotSource) GetQueryTimeout() (rv any) {
	if h != nil {
		return h.QueryTimeout
	}
	return
}

func (h *HubspotSource) GetSourceRetryCount() (rv any) {
	if h != nil {
		return h.SourceRetryCount
	}
	return
}

func (h *HubspotSource) GetSourceRetryWait() (rv any) {
	if h != nil {
		return h.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type HubspotSource.
func (h *HubspotSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     h.AdditionalProperties,
		MaxConcurrentConnections: h.MaxConcurrentConnections,
		SourceRetryCount:         h.SourceRetryCount,
		SourceRetryWait:          h.SourceRetryWait,
		Type:                     h.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type HubspotSource.
func (h *HubspotSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        h.AdditionalColumns,
		AdditionalProperties:     h.AdditionalProperties,
		MaxConcurrentConnections: h.MaxConcurrentConnections,
		QueryTimeout:             h.QueryTimeout,
		SourceRetryCount:         h.SourceRetryCount,
		SourceRetryWait:          h.SourceRetryWait,
		Type:                     h.Type,
	}
}

// IfConditionActivity - This activity evaluates a boolean expression and executes either the activities under the ifTrueActivities
// property or the ifFalseActivities property depending on the result of the expression.
type IfConditionActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; IfCondition activity properties.
	TypeProperties *IfConditionActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (i *IfConditionActivity) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *IfConditionActivity) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

func (i *IfConditionActivity) GetTypeProperties() (rv *IfConditionActivityTypeProperties) {
	if i != nil {
		return i.TypeProperties
	}
	return
}

func (i *IfConditionActivity) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *IfConditionActivity) GetDependsOn() (rv []*ActivityDependency) {
	if i != nil {
		return i.DependsOn
	}
	return
}

func (i *IfConditionActivity) GetDescription() (rv string) {
	if i != nil && i.Description != nil {
		return *i.Description
	}
	return
}

func (i *IfConditionActivity) GetUserProperties() (rv []*UserProperty) {
	if i != nil {
		return i.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type IfConditionActivity.
func (i *IfConditionActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: i.AdditionalProperties,
		DependsOn:            i.DependsOn,
		Description:          i.Description,
		Name:                 i.Name,
		Type:                 i.Type,
		UserProperties:       i.UserProperties,
	}
}

// GetControlActivity implements the ControlActivityClassification interface for type IfConditionActivity.
func (i *IfConditionActivity) GetControlActivity() *ControlActivity {
	return &ControlActivity{
		AdditionalProperties: i.AdditionalProperties,
		DependsOn:            i.DependsOn,
		Description:          i.Description,
		Name:                 i.Name,
		Type:                 i.Type,
		UserProperties:       i.UserProperties,
	}
}

// IfConditionActivityTypeProperties - IfCondition activity properties.
type IfConditionActivityTypeProperties struct {
	// REQUIRED; An expression that would evaluate to Boolean. This is used to determine the block of activities (ifTrueActivities
	// or ifFalseActivities) that will be executed.
	Expression *Expression

	// List of activities to execute if expression is evaluated to false. This is an optional property and if not provided, the
	// activity will exit without any action.
	IfFalseActivities []ActivityClassification

	// List of activities to execute if expression is evaluated to true. This is an optional property and if not provided, the
	// activity will exit without any action.
	IfTrueActivities []ActivityClassification
}

func (i *IfConditionActivityTypeProperties) GetExpression() (rv *Expression) {
	if i != nil {
		return i.Expression
	}
	return
}

func (i *IfConditionActivityTypeProperties) GetIfFalseActivities() (rv []ActivityClassification) {
	if i != nil {
		return i.IfFalseActivities
	}
	return
}

func (i *IfConditionActivityTypeProperties) GetIfTrueActivities() (rv []ActivityClassification) {
	if i != nil {
		return i.IfTrueActivities
	}
	return
}

// ImpalaDatasetTypeProperties - Impala Dataset Properties
type ImpalaDatasetTypeProperties struct {
	// The schema name of the Impala. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the Impala. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (i *ImpalaDatasetTypeProperties) GetSchema() (rv any) {
	if i != nil {
		return i.Schema
	}
	return
}

func (i *ImpalaDatasetTypeProperties) GetTable() (rv any) {
	if i != nil {
		return i.Table
	}
	return
}

func (i *ImpalaDatasetTypeProperties) GetTableName() (rv any) {
	if i != nil {
		return i.TableName
	}
	return
}

// ImpalaLinkedService - Impala server linked service.
type ImpalaLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Impala server linked service properties.
	TypeProperties *ImpalaLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (i *ImpalaLinkedService) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

func (i *ImpalaLinkedService) GetTypeProperties() (rv *ImpalaLinkedServiceTypeProperties) {
	if i != nil {
		return i.TypeProperties
	}
	return
}

func (i *ImpalaLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *ImpalaLinkedService) GetAnnotations() (rv []any) {
	if i != nil {
		return i.Annotations
	}
	return
}

func (i *ImpalaLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if i != nil {
		return i.ConnectVia
	}
	return
}

func (i *ImpalaLinkedService) GetDescription() (rv string) {
	if i != nil && i.Description != nil {
		return *i.Description
	}
	return
}

func (i *ImpalaLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if i != nil {
		return i.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type ImpalaLinkedService.
func (i *ImpalaLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: i.AdditionalProperties,
		Annotations:          i.Annotations,
		ConnectVia:           i.ConnectVia,
		Description:          i.Description,
		Parameters:           i.Parameters,
		Type:                 i.Type,
	}
}

// ImpalaLinkedServiceTypeProperties - Impala server linked service properties.
type ImpalaLinkedServiceTypeProperties struct {
	// REQUIRED; The authentication type to use.
	AuthenticationType *ImpalaAuthenticationType

	// REQUIRED; The IP address or host name of the Impala server. (i.e. 192.168.222.160)
	Host any

	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over
	// SSL. The default value is false.
	AllowHostNameCNMismatch any

	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert any

	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSSL any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The password corresponding to the user name when using UsernameAndPassword.
	Password SecretBaseClassification

	// The TCP port that the Impala server uses to listen for client connections. The default value is 21050.
	Port any

	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This
	// property can only be set when using SSL on self-hosted IR. The default value
	// is the cacerts.pem file installed with the IR.
	TrustedCertPath any

	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is
	// false.
	UseSystemTrustStore any

	// The user name used to access the Impala server. The default value is anonymous when using SASLUsername.
	Username any
}

func (i *ImpalaLinkedServiceTypeProperties) GetAuthenticationType() (rv *ImpalaAuthenticationType) {
	if i != nil {
		return i.AuthenticationType
	}
	return
}

func (i *ImpalaLinkedServiceTypeProperties) GetHost() (rv any) {
	if i != nil {
		return i.Host
	}
	return
}

func (i *ImpalaLinkedServiceTypeProperties) GetAllowHostNameCNMismatch() (rv any) {
	if i != nil {
		return i.AllowHostNameCNMismatch
	}
	return
}

func (i *ImpalaLinkedServiceTypeProperties) GetAllowSelfSignedServerCert() (rv any) {
	if i != nil {
		return i.AllowSelfSignedServerCert
	}
	return
}

func (i *ImpalaLinkedServiceTypeProperties) GetEnableSSL() (rv any) {
	if i != nil {
		return i.EnableSSL
	}
	return
}

func (i *ImpalaLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if i != nil {
		return i.EncryptedCredential
	}
	return
}

func (i *ImpalaLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if i != nil {
		return i.Password
	}
	return
}

func (i *ImpalaLinkedServiceTypeProperties) GetPort() (rv any) {
	if i != nil {
		return i.Port
	}
	return
}

func (i *ImpalaLinkedServiceTypeProperties) GetTrustedCertPath() (rv any) {
	if i != nil {
		return i.TrustedCertPath
	}
	return
}

func (i *ImpalaLinkedServiceTypeProperties) GetUseSystemTrustStore() (rv any) {
	if i != nil {
		return i.UseSystemTrustStore
	}
	return
}

func (i *ImpalaLinkedServiceTypeProperties) GetUsername() (rv any) {
	if i != nil {
		return i.Username
	}
	return
}

// ImpalaObjectDataset - Impala server dataset.
type ImpalaObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *ImpalaDatasetTypeProperties
}

func (i *ImpalaObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if i != nil {
		return i.LinkedServiceName
	}
	return
}

func (i *ImpalaObjectDataset) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

func (i *ImpalaObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *ImpalaObjectDataset) GetAnnotations() (rv []any) {
	if i != nil {
		return i.Annotations
	}
	return
}

func (i *ImpalaObjectDataset) GetDescription() (rv string) {
	if i != nil && i.Description != nil {
		return *i.Description
	}
	return
}

func (i *ImpalaObjectDataset) GetFolder() (rv *DatasetFolder) {
	if i != nil {
		return i.Folder
	}
	return
}

func (i *ImpalaObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if i != nil {
		return i.Parameters
	}
	return
}

func (i *ImpalaObjectDataset) GetSchema() (rv any) {
	if i != nil {
		return i.Schema
	}
	return
}

func (i *ImpalaObjectDataset) GetStructure() (rv any) {
	if i != nil {
		return i.Structure
	}
	return
}

func (i *ImpalaObjectDataset) GetTypeProperties() (rv *ImpalaDatasetTypeProperties) {
	if i != nil {
		return i.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type ImpalaObjectDataset.
func (i *ImpalaObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: i.AdditionalProperties,
		Annotations:          i.Annotations,
		Description:          i.Description,
		Folder:               i.Folder,
		LinkedServiceName:    i.LinkedServiceName,
		Parameters:           i.Parameters,
		Schema:               i.Schema,
		Structure:            i.Structure,
		Type:                 i.Type,
	}
}

// ImpalaSource - A copy activity Impala server source.
type ImpalaSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (i *ImpalaSource) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

func (i *ImpalaSource) GetAdditionalColumns() (rv any) {
	if i != nil {
		return i.AdditionalColumns
	}
	return
}

func (i *ImpalaSource) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *ImpalaSource) GetMaxConcurrentConnections() (rv any) {
	if i != nil {
		return i.MaxConcurrentConnections
	}
	return
}

func (i *ImpalaSource) GetQuery() (rv any) {
	if i != nil {
		return i.Query
	}
	return
}

func (i *ImpalaSource) GetQueryTimeout() (rv any) {
	if i != nil {
		return i.QueryTimeout
	}
	return
}

func (i *ImpalaSource) GetSourceRetryCount() (rv any) {
	if i != nil {
		return i.SourceRetryCount
	}
	return
}

func (i *ImpalaSource) GetSourceRetryWait() (rv any) {
	if i != nil {
		return i.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type ImpalaSource.
func (i *ImpalaSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     i.AdditionalProperties,
		MaxConcurrentConnections: i.MaxConcurrentConnections,
		SourceRetryCount:         i.SourceRetryCount,
		SourceRetryWait:          i.SourceRetryWait,
		Type:                     i.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type ImpalaSource.
func (i *ImpalaSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        i.AdditionalColumns,
		AdditionalProperties:     i.AdditionalProperties,
		MaxConcurrentConnections: i.MaxConcurrentConnections,
		QueryTimeout:             i.QueryTimeout,
		SourceRetryCount:         i.SourceRetryCount,
		SourceRetryWait:          i.SourceRetryWait,
		Type:                     i.Type,
	}
}

// ImportSettings - Import command settings.
type ImportSettings struct {
	// REQUIRED; The import setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

func (i *ImportSettings) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

func (i *ImportSettings) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

// GetImportSettings implements the ImportSettingsClassification interface for type ImportSettings.
func (i *ImportSettings) GetImportSettings() *ImportSettings { return i }

// InformixLinkedService - Informix linked service.
type InformixLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Informix linked service properties.
	TypeProperties *InformixLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (i *InformixLinkedService) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

func (i *InformixLinkedService) GetTypeProperties() (rv *InformixLinkedServiceTypeProperties) {
	if i != nil {
		return i.TypeProperties
	}
	return
}

func (i *InformixLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *InformixLinkedService) GetAnnotations() (rv []any) {
	if i != nil {
		return i.Annotations
	}
	return
}

func (i *InformixLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if i != nil {
		return i.ConnectVia
	}
	return
}

func (i *InformixLinkedService) GetDescription() (rv string) {
	if i != nil && i.Description != nil {
		return *i.Description
	}
	return
}

func (i *InformixLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if i != nil {
		return i.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type InformixLinkedService.
func (i *InformixLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: i.AdditionalProperties,
		Annotations:          i.Annotations,
		ConnectVia:           i.ConnectVia,
		Description:          i.Description,
		Parameters:           i.Parameters,
		Type:                 i.Type,
	}
}

// InformixLinkedServiceTypeProperties - Informix linked service properties.
type InformixLinkedServiceTypeProperties struct {
	// REQUIRED; The non-access credential portion of the connection string as well as an optional encrypted credential. Type:
	// string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// Type of authentication used to connect to the Informix as ODBC data store. Possible values are: Anonymous and Basic. Type:
	// string (or Expression with resultType string).
	AuthenticationType any

	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password for Basic authentication.
	Password SecretBaseClassification

	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName any
}

func (i *InformixLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if i != nil {
		return i.ConnectionString
	}
	return
}

func (i *InformixLinkedServiceTypeProperties) GetAuthenticationType() (rv any) {
	if i != nil {
		return i.AuthenticationType
	}
	return
}

func (i *InformixLinkedServiceTypeProperties) GetCredential() (rv SecretBaseClassification) {
	if i != nil {
		return i.Credential
	}
	return
}

func (i *InformixLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if i != nil {
		return i.EncryptedCredential
	}
	return
}

func (i *InformixLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if i != nil {
		return i.Password
	}
	return
}

func (i *InformixLinkedServiceTypeProperties) GetUserName() (rv any) {
	if i != nil {
		return i.UserName
	}
	return
}

// InformixSink - A copy activity Informix sink.
type InformixSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (i *InformixSink) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

func (i *InformixSink) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *InformixSink) GetMaxConcurrentConnections() (rv any) {
	if i != nil {
		return i.MaxConcurrentConnections
	}
	return
}

func (i *InformixSink) GetPreCopyScript() (rv any) {
	if i != nil {
		return i.PreCopyScript
	}
	return
}

func (i *InformixSink) GetSinkRetryCount() (rv any) {
	if i != nil {
		return i.SinkRetryCount
	}
	return
}

func (i *InformixSink) GetSinkRetryWait() (rv any) {
	if i != nil {
		return i.SinkRetryWait
	}
	return
}

func (i *InformixSink) GetWriteBatchSize() (rv any) {
	if i != nil {
		return i.WriteBatchSize
	}
	return
}

func (i *InformixSink) GetWriteBatchTimeout() (rv any) {
	if i != nil {
		return i.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type InformixSink.
func (i *InformixSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     i.AdditionalProperties,
		MaxConcurrentConnections: i.MaxConcurrentConnections,
		SinkRetryCount:           i.SinkRetryCount,
		SinkRetryWait:            i.SinkRetryWait,
		Type:                     i.Type,
		WriteBatchSize:           i.WriteBatchSize,
		WriteBatchTimeout:        i.WriteBatchTimeout,
	}
}

// InformixSource - A copy activity source for Informix.
type InformixSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (i *InformixSource) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

func (i *InformixSource) GetAdditionalColumns() (rv any) {
	if i != nil {
		return i.AdditionalColumns
	}
	return
}

func (i *InformixSource) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *InformixSource) GetMaxConcurrentConnections() (rv any) {
	if i != nil {
		return i.MaxConcurrentConnections
	}
	return
}

func (i *InformixSource) GetQuery() (rv any) {
	if i != nil {
		return i.Query
	}
	return
}

func (i *InformixSource) GetQueryTimeout() (rv any) {
	if i != nil {
		return i.QueryTimeout
	}
	return
}

func (i *InformixSource) GetSourceRetryCount() (rv any) {
	if i != nil {
		return i.SourceRetryCount
	}
	return
}

func (i *InformixSource) GetSourceRetryWait() (rv any) {
	if i != nil {
		return i.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type InformixSource.
func (i *InformixSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     i.AdditionalProperties,
		MaxConcurrentConnections: i.MaxConcurrentConnections,
		SourceRetryCount:         i.SourceRetryCount,
		SourceRetryWait:          i.SourceRetryWait,
		Type:                     i.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type InformixSource.
func (i *InformixSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        i.AdditionalColumns,
		AdditionalProperties:     i.AdditionalProperties,
		MaxConcurrentConnections: i.MaxConcurrentConnections,
		QueryTimeout:             i.QueryTimeout,
		SourceRetryCount:         i.SourceRetryCount,
		SourceRetryWait:          i.SourceRetryWait,
		Type:                     i.Type,
	}
}

// InformixTableDataset - The Informix table dataset.
type InformixTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Informix table dataset properties.
	TypeProperties *InformixTableDatasetTypeProperties
}

func (i *InformixTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if i != nil {
		return i.LinkedServiceName
	}
	return
}

func (i *InformixTableDataset) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

func (i *InformixTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *InformixTableDataset) GetAnnotations() (rv []any) {
	if i != nil {
		return i.Annotations
	}
	return
}

func (i *InformixTableDataset) GetDescription() (rv string) {
	if i != nil && i.Description != nil {
		return *i.Description
	}
	return
}

func (i *InformixTableDataset) GetFolder() (rv *DatasetFolder) {
	if i != nil {
		return i.Folder
	}
	return
}

func (i *InformixTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if i != nil {
		return i.Parameters
	}
	return
}

func (i *InformixTableDataset) GetSchema() (rv any) {
	if i != nil {
		return i.Schema
	}
	return
}

func (i *InformixTableDataset) GetStructure() (rv any) {
	if i != nil {
		return i.Structure
	}
	return
}

func (i *InformixTableDataset) GetTypeProperties() (rv *InformixTableDatasetTypeProperties) {
	if i != nil {
		return i.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type InformixTableDataset.
func (i *InformixTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: i.AdditionalProperties,
		Annotations:          i.Annotations,
		Description:          i.Description,
		Folder:               i.Folder,
		LinkedServiceName:    i.LinkedServiceName,
		Parameters:           i.Parameters,
		Schema:               i.Schema,
		Structure:            i.Structure,
		Type:                 i.Type,
	}
}

// InformixTableDatasetTypeProperties - Informix table dataset properties.
type InformixTableDatasetTypeProperties struct {
	// The Informix table name. Type: string (or Expression with resultType string).
	TableName any
}

func (i *InformixTableDatasetTypeProperties) GetTableName() (rv any) {
	if i != nil {
		return i.TableName
	}
	return
}

// IntegrationRuntime - Azure Synapse nested object which serves as a compute resource for activities.
type IntegrationRuntime struct {
	// REQUIRED; Type of integration runtime.
	Type *IntegrationRuntimeType

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Integration runtime description.
	Description *string
}

func (i *IntegrationRuntime) GetType() (rv *IntegrationRuntimeType) {
	if i != nil {
		return i.Type
	}
	return
}

func (i *IntegrationRuntime) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *IntegrationRuntime) GetDescription() (rv string) {
	if i != nil && i.Description != nil {
		return *i.Description
	}
	return
}

// GetIntegrationRuntime implements the IntegrationRuntimeClassification interface for type IntegrationRuntime.
func (i *IntegrationRuntime) GetIntegrationRuntime() *IntegrationRuntime { return i }

// IntegrationRuntimeComputeProperties - The compute resource properties for managed integration runtime.
type IntegrationRuntimeComputeProperties struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Data flow properties for managed integration runtime.
	DataFlowProperties *IntegrationRuntimeDataFlowProperties

	// The location for managed integration runtime. The supported regions could be found on https://docs.microsoft.com/en-us/azure/data-factory/data-factory-data-movement-activities
	Location *string

	// Maximum parallel executions count per node for managed integration runtime.
	MaxParallelExecutionsPerNode *int32

	// The node size requirement to managed integration runtime.
	NodeSize *string

	// The required number of nodes for managed integration runtime.
	NumberOfNodes *int32

	// VNet properties for managed integration runtime.
	VNetProperties *IntegrationRuntimeVNetProperties
}

func (i *IntegrationRuntimeComputeProperties) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *IntegrationRuntimeComputeProperties) GetDataFlowProperties() (rv *IntegrationRuntimeDataFlowProperties) {
	if i != nil {
		return i.DataFlowProperties
	}
	return
}

func (i *IntegrationRuntimeComputeProperties) GetLocation() (rv string) {
	if i != nil && i.Location != nil {
		return *i.Location
	}
	return
}

func (i *IntegrationRuntimeComputeProperties) GetMaxParallelExecutionsPerNode() (rv int32) {
	if i != nil && i.MaxParallelExecutionsPerNode != nil {
		return *i.MaxParallelExecutionsPerNode
	}
	return
}

func (i *IntegrationRuntimeComputeProperties) GetNodeSize() (rv string) {
	if i != nil && i.NodeSize != nil {
		return *i.NodeSize
	}
	return
}

func (i *IntegrationRuntimeComputeProperties) GetNumberOfNodes() (rv int32) {
	if i != nil && i.NumberOfNodes != nil {
		return *i.NumberOfNodes
	}
	return
}

func (i *IntegrationRuntimeComputeProperties) GetVNetProperties() (rv *IntegrationRuntimeVNetProperties) {
	if i != nil {
		return i.VNetProperties
	}
	return
}

// IntegrationRuntimeCustomSetupScriptProperties - Custom setup script properties for a managed dedicated integration runtime.
type IntegrationRuntimeCustomSetupScriptProperties struct {
	// The URI of the Azure blob container that contains the custom setup script.
	BlobContainerURI *string

	// The SAS token of the Azure blob container.
	SasToken *SecureString
}

func (i *IntegrationRuntimeCustomSetupScriptProperties) GetBlobContainerURI() (rv string) {
	if i != nil && i.BlobContainerURI != nil {
		return *i.BlobContainerURI
	}
	return
}

func (i *IntegrationRuntimeCustomSetupScriptProperties) GetSasToken() (rv *SecureString) {
	if i != nil {
		return i.SasToken
	}
	return
}

// IntegrationRuntimeDataFlowProperties - Data flow properties for managed integration runtime.
type IntegrationRuntimeDataFlowProperties struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Cluster will not be recycled and it will be used in next data flow activity run until TTL (time to live) is reached if
	// this is set as false. Default is true.
	Cleanup *bool

	// Compute type of the cluster which will execute data flow job.
	ComputeType *DataFlowComputeType

	// Core count of the cluster which will execute data flow job. Supported values are: 8, 16, 32, 48, 80, 144 and 272.
	CoreCount *int32

	// Time to live (in minutes) setting of the cluster which will execute data flow job.
	TimeToLive *int32
}

func (i *IntegrationRuntimeDataFlowProperties) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *IntegrationRuntimeDataFlowProperties) GetCleanup() (rv bool) {
	if i != nil && i.Cleanup != nil {
		return *i.Cleanup
	}
	return
}

func (i *IntegrationRuntimeDataFlowProperties) GetComputeType() (rv *DataFlowComputeType) {
	if i != nil {
		return i.ComputeType
	}
	return
}

func (i *IntegrationRuntimeDataFlowProperties) GetCoreCount() (rv int32) {
	if i != nil && i.CoreCount != nil {
		return *i.CoreCount
	}
	return
}

func (i *IntegrationRuntimeDataFlowProperties) GetTimeToLive() (rv int32) {
	if i != nil && i.TimeToLive != nil {
		return *i.TimeToLive
	}
	return
}

// IntegrationRuntimeDataProxyProperties - Data proxy properties for a managed dedicated integration runtime.
type IntegrationRuntimeDataProxyProperties struct {
	// The self-hosted integration runtime reference.
	ConnectVia *EntityReference

	// The path to contain the staged data in the Blob storage.
	Path *string

	// The staging linked service reference.
	StagingLinkedService *EntityReference
}

func (i *IntegrationRuntimeDataProxyProperties) GetConnectVia() (rv *EntityReference) {
	if i != nil {
		return i.ConnectVia
	}
	return
}

func (i *IntegrationRuntimeDataProxyProperties) GetPath() (rv string) {
	if i != nil && i.Path != nil {
		return *i.Path
	}
	return
}

func (i *IntegrationRuntimeDataProxyProperties) GetStagingLinkedService() (rv *EntityReference) {
	if i != nil {
		return i.StagingLinkedService
	}
	return
}

// IntegrationRuntimeDebugResource - Integration runtime debug resource.
type IntegrationRuntimeDebugResource struct {
	// REQUIRED; Integration runtime properties.
	Properties IntegrationRuntimeClassification

	// The resource name.
	Name *string
}

func (i *IntegrationRuntimeDebugResource) GetProperties() (rv IntegrationRuntimeClassification) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *IntegrationRuntimeDebugResource) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

// IntegrationRuntimeListResponse - A list of integration runtime resources.
type IntegrationRuntimeListResponse struct {
	// REQUIRED; List of integration runtimes.
	Value []*IntegrationRuntimeResource

	// The link to the next page of results, if any remaining results exist.
	NextLink *string
}

func (i *IntegrationRuntimeListResponse) GetValue() (rv []*IntegrationRuntimeResource) {
	if i != nil {
		return i.Value
	}
	return
}

func (i *IntegrationRuntimeListResponse) GetNextLink() (rv string) {
	if i != nil && i.NextLink != nil {
		return *i.NextLink
	}
	return
}

// IntegrationRuntimeReference - Integration runtime reference type.
type IntegrationRuntimeReference struct {
	// REQUIRED; Reference integration runtime name.
	ReferenceName *string

	// REQUIRED; Type of integration runtime.
	Type *IntegrationRuntimeReferenceType

	// Arguments for integration runtime.
	Parameters map[string]any
}

func (i *IntegrationRuntimeReference) GetReferenceName() (rv string) {
	if i != nil && i.ReferenceName != nil {
		return *i.ReferenceName
	}
	return
}

func (i *IntegrationRuntimeReference) GetType() (rv *IntegrationRuntimeReferenceType) {
	if i != nil {
		return i.Type
	}
	return
}

func (i *IntegrationRuntimeReference) GetParameters() (rv map[string]any) {
	if i != nil {
		return i.Parameters
	}
	return
}

// IntegrationRuntimeResource - Integration runtime resource type.
type IntegrationRuntimeResource struct {
	// REQUIRED; Integration runtime properties.
	Properties IntegrationRuntimeClassification

	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (i *IntegrationRuntimeResource) GetProperties() (rv IntegrationRuntimeClassification) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *IntegrationRuntimeResource) GetEtag() (rv string) {
	if i != nil && i.Etag != nil {
		return *i.Etag
	}
	return
}

func (i *IntegrationRuntimeResource) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *IntegrationRuntimeResource) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *IntegrationRuntimeResource) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

// IntegrationRuntimeSsisCatalogInfo - Catalog information for managed dedicated integration runtime.
type IntegrationRuntimeSsisCatalogInfo struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The password of the administrator user account of the catalog database.
	CatalogAdminPassword *SecureString

	// The administrator user name of catalog database.
	CatalogAdminUserName *string

	// The pricing tier for the catalog database. The valid values could be found in https://azure.microsoft.com/en-us/pricing/details/sql-database/
	CatalogPricingTier *IntegrationRuntimeSsisCatalogPricingTier

	// The catalog database server URL.
	CatalogServerEndpoint *string
}

func (i *IntegrationRuntimeSsisCatalogInfo) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *IntegrationRuntimeSsisCatalogInfo) GetCatalogAdminPassword() (rv *SecureString) {
	if i != nil {
		return i.CatalogAdminPassword
	}
	return
}

func (i *IntegrationRuntimeSsisCatalogInfo) GetCatalogAdminUserName() (rv string) {
	if i != nil && i.CatalogAdminUserName != nil {
		return *i.CatalogAdminUserName
	}
	return
}

func (i *IntegrationRuntimeSsisCatalogInfo) GetCatalogPricingTier() (rv *IntegrationRuntimeSsisCatalogPricingTier) {
	if i != nil {
		return i.CatalogPricingTier
	}
	return
}

func (i *IntegrationRuntimeSsisCatalogInfo) GetCatalogServerEndpoint() (rv string) {
	if i != nil && i.CatalogServerEndpoint != nil {
		return *i.CatalogServerEndpoint
	}
	return
}

// IntegrationRuntimeSsisProperties - SSIS properties for managed integration runtime.
type IntegrationRuntimeSsisProperties struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Catalog information for managed dedicated integration runtime.
	CatalogInfo *IntegrationRuntimeSsisCatalogInfo

	// Custom setup script properties for a managed dedicated integration runtime.
	CustomSetupScriptProperties *IntegrationRuntimeCustomSetupScriptProperties

	// Data proxy properties for a managed dedicated integration runtime.
	DataProxyProperties *IntegrationRuntimeDataProxyProperties

	// The edition for the SSIS Integration Runtime
	Edition *IntegrationRuntimeEdition

	// Custom setup without script properties for a SSIS integration runtime.
	ExpressCustomSetupProperties []CustomSetupBaseClassification

	// License type for bringing your own license scenario.
	LicenseType *IntegrationRuntimeLicenseType
}

func (i *IntegrationRuntimeSsisProperties) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *IntegrationRuntimeSsisProperties) GetCatalogInfo() (rv *IntegrationRuntimeSsisCatalogInfo) {
	if i != nil {
		return i.CatalogInfo
	}
	return
}

func (i *IntegrationRuntimeSsisProperties) GetCustomSetupScriptProperties() (rv *IntegrationRuntimeCustomSetupScriptProperties) {
	if i != nil {
		return i.CustomSetupScriptProperties
	}
	return
}

func (i *IntegrationRuntimeSsisProperties) GetDataProxyProperties() (rv *IntegrationRuntimeDataProxyProperties) {
	if i != nil {
		return i.DataProxyProperties
	}
	return
}

func (i *IntegrationRuntimeSsisProperties) GetEdition() (rv *IntegrationRuntimeEdition) {
	if i != nil {
		return i.Edition
	}
	return
}

func (i *IntegrationRuntimeSsisProperties) GetExpressCustomSetupProperties() (rv []CustomSetupBaseClassification) {
	if i != nil {
		return i.ExpressCustomSetupProperties
	}
	return
}

func (i *IntegrationRuntimeSsisProperties) GetLicenseType() (rv *IntegrationRuntimeLicenseType) {
	if i != nil {
		return i.LicenseType
	}
	return
}

// IntegrationRuntimeVNetProperties - VNet properties for managed integration runtime.
type IntegrationRuntimeVNetProperties struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Resource IDs of the public IP addresses that this integration runtime will use.
	PublicIPs []*string

	// The name of the subnet this integration runtime will join.
	Subnet *string

	// The ID of the VNet that this integration runtime will join.
	VNetID *string
}

func (i *IntegrationRuntimeVNetProperties) GetAdditionalProperties() (rv map[string]any) {
	if i != nil {
		return i.AdditionalProperties
	}
	return
}

func (i *IntegrationRuntimeVNetProperties) GetPublicIPs() (rv []*string) {
	if i != nil {
		return i.PublicIPs
	}
	return
}

func (i *IntegrationRuntimeVNetProperties) GetSubnet() (rv string) {
	if i != nil && i.Subnet != nil {
		return *i.Subnet
	}
	return
}

func (i *IntegrationRuntimeVNetProperties) GetVNetID() (rv string) {
	if i != nil && i.VNetID != nil {
		return *i.VNetID
	}
	return
}

// JSONDataset - Json dataset.
type JSONDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Json dataset properties.
	TypeProperties *JSONDatasetTypeProperties
}

func (j *JSONDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if j != nil {
		return j.LinkedServiceName
	}
	return
}

func (j *JSONDataset) GetType() (rv string) {
	if j != nil && j.Type != nil {
		return *j.Type
	}
	return
}

func (j *JSONDataset) GetAdditionalProperties() (rv map[string]any) {
	if j != nil {
		return j.AdditionalProperties
	}
	return
}

func (j *JSONDataset) GetAnnotations() (rv []any) {
	if j != nil {
		return j.Annotations
	}
	return
}

func (j *JSONDataset) GetDescription() (rv string) {
	if j != nil && j.Description != nil {
		return *j.Description
	}
	return
}

func (j *JSONDataset) GetFolder() (rv *DatasetFolder) {
	if j != nil {
		return j.Folder
	}
	return
}

func (j *JSONDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if j != nil {
		return j.Parameters
	}
	return
}

func (j *JSONDataset) GetSchema() (rv any) {
	if j != nil {
		return j.Schema
	}
	return
}

func (j *JSONDataset) GetStructure() (rv any) {
	if j != nil {
		return j.Structure
	}
	return
}

func (j *JSONDataset) GetTypeProperties() (rv *JSONDatasetTypeProperties) {
	if j != nil {
		return j.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type JSONDataset.
func (j *JSONDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: j.AdditionalProperties,
		Annotations:          j.Annotations,
		Description:          j.Description,
		Folder:               j.Folder,
		LinkedServiceName:    j.LinkedServiceName,
		Parameters:           j.Parameters,
		Schema:               j.Schema,
		Structure:            j.Structure,
		Type:                 j.Type,
	}
}

// JSONDatasetTypeProperties - Json dataset properties.
type JSONDatasetTypeProperties struct {
	// REQUIRED; The location of the json data storage.
	Location DatasetLocationClassification

	// The data compression method used for the json dataset.
	Compression *DatasetCompression

	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another
	// Unicode encoding. Refer to the name column of the table in the following link to
	// set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType
	// string).
	EncodingName any
}

func (j *JSONDatasetTypeProperties) GetLocation() (rv DatasetLocationClassification) {
	if j != nil {
		return j.Location
	}
	return
}

func (j *JSONDatasetTypeProperties) GetCompression() (rv *DatasetCompression) {
	if j != nil {
		return j.Compression
	}
	return
}

func (j *JSONDatasetTypeProperties) GetEncodingName() (rv any) {
	if j != nil {
		return j.EncodingName
	}
	return
}

// JSONFormat - The data stored in JSON format.
type JSONFormat struct {
	// REQUIRED; Type of dataset storage format.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer any

	// The code page name of the preferred encoding. If not provided, the default value is 'utf-8', unless the byte order mark
	// (BOM) denotes another Unicode encoding. The full list of supported values can be
	// found in the 'Name' column of the table of encodings in the following reference: https://go.microsoft.com/fwlink/?linkid=861078.
	// Type: string (or Expression with resultType string).
	EncodingName any

	// File pattern of JSON. To be more specific, the way of separating a collection of JSON objects. The default value is 'setOfObjects'.
	// It is case-sensitive.
	FilePattern any

	// The JSONPath of the JSON array element to be flattened. Example: "$.ArrayPath". Type: string (or Expression with resultType
	// string).
	JSONNodeReference any

	// The JSONPath definition for each column mapping with a customized column name to extract data from JSON file. For fields
	// under root object, start with "$"; for fields inside the array chosen by
	// jsonNodeReference property, start from the array element. Example: {"Column1": "$.Column1Path", "Column2": "Column2PathInArray"}.
	// Type: object (or Expression with resultType object).
	JSONPathDefinition any

	// The character used to separate nesting levels. Default value is '.' (dot). Type: string (or Expression with resultType
	// string).
	NestingSeparator any

	// Serializer. Type: string (or Expression with resultType string).
	Serializer any
}

func (j *JSONFormat) GetType() (rv string) {
	if j != nil && j.Type != nil {
		return *j.Type
	}
	return
}

func (j *JSONFormat) GetAdditionalProperties() (rv map[string]any) {
	if j != nil {
		return j.AdditionalProperties
	}
	return
}

func (j *JSONFormat) GetDeserializer() (rv any) {
	if j != nil {
		return j.Deserializer
	}
	return
}

func (j *JSONFormat) GetEncodingName() (rv any) {
	if j != nil {
		return j.EncodingName
	}
	return
}

func (j *JSONFormat) GetFilePattern() (rv any) {
	if j != nil {
		return j.FilePattern
	}
	return
}

func (j *JSONFormat) GetJSONNodeReference() (rv any) {
	if j != nil {
		return j.JSONNodeReference
	}
	return
}

func (j *JSONFormat) GetJSONPathDefinition() (rv any) {
	if j != nil {
		return j.JSONPathDefinition
	}
	return
}

func (j *JSONFormat) GetNestingSeparator() (rv any) {
	if j != nil {
		return j.NestingSeparator
	}
	return
}

func (j *JSONFormat) GetSerializer() (rv any) {
	if j != nil {
		return j.Serializer
	}
	return
}

// GetDatasetStorageFormat implements the DatasetStorageFormatClassification interface for type JSONFormat.
func (j *JSONFormat) GetDatasetStorageFormat() *DatasetStorageFormat {
	return &DatasetStorageFormat{
		AdditionalProperties: j.AdditionalProperties,
		Deserializer:         j.Deserializer,
		Serializer:           j.Serializer,
		Type:                 j.Type,
	}
}

// JSONReadSettings - Json read settings.
type JSONReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Compression settings.
	CompressionProperties CompressionReadSettingsClassification
}

func (j *JSONReadSettings) GetType() (rv string) {
	if j != nil && j.Type != nil {
		return *j.Type
	}
	return
}

func (j *JSONReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if j != nil {
		return j.AdditionalProperties
	}
	return
}

func (j *JSONReadSettings) GetCompressionProperties() (rv CompressionReadSettingsClassification) {
	if j != nil {
		return j.CompressionProperties
	}
	return
}

// GetFormatReadSettings implements the FormatReadSettingsClassification interface for type JSONReadSettings.
func (j *JSONReadSettings) GetFormatReadSettings() *FormatReadSettings {
	return &FormatReadSettings{
		AdditionalProperties: j.AdditionalProperties,
		Type:                 j.Type,
	}
}

// JSONSink - A copy activity Json sink.
type JSONSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Json format settings.
	FormatSettings *JSONWriteSettings

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Json store settings.
	StoreSettings StoreWriteSettingsClassification

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (j *JSONSink) GetType() (rv string) {
	if j != nil && j.Type != nil {
		return *j.Type
	}
	return
}

func (j *JSONSink) GetAdditionalProperties() (rv map[string]any) {
	if j != nil {
		return j.AdditionalProperties
	}
	return
}

func (j *JSONSink) GetFormatSettings() (rv *JSONWriteSettings) {
	if j != nil {
		return j.FormatSettings
	}
	return
}

func (j *JSONSink) GetMaxConcurrentConnections() (rv any) {
	if j != nil {
		return j.MaxConcurrentConnections
	}
	return
}

func (j *JSONSink) GetSinkRetryCount() (rv any) {
	if j != nil {
		return j.SinkRetryCount
	}
	return
}

func (j *JSONSink) GetSinkRetryWait() (rv any) {
	if j != nil {
		return j.SinkRetryWait
	}
	return
}

func (j *JSONSink) GetStoreSettings() (rv StoreWriteSettingsClassification) {
	if j != nil {
		return j.StoreSettings
	}
	return
}

func (j *JSONSink) GetWriteBatchSize() (rv any) {
	if j != nil {
		return j.WriteBatchSize
	}
	return
}

func (j *JSONSink) GetWriteBatchTimeout() (rv any) {
	if j != nil {
		return j.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type JSONSink.
func (j *JSONSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     j.AdditionalProperties,
		MaxConcurrentConnections: j.MaxConcurrentConnections,
		SinkRetryCount:           j.SinkRetryCount,
		SinkRetryWait:            j.SinkRetryWait,
		Type:                     j.Type,
		WriteBatchSize:           j.WriteBatchSize,
		WriteBatchTimeout:        j.WriteBatchTimeout,
	}
}

// JSONSource - A copy activity Json source.
type JSONSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Json format settings.
	FormatSettings *JSONReadSettings

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Json store settings.
	StoreSettings StoreReadSettingsClassification
}

func (j *JSONSource) GetType() (rv string) {
	if j != nil && j.Type != nil {
		return *j.Type
	}
	return
}

func (j *JSONSource) GetAdditionalColumns() (rv any) {
	if j != nil {
		return j.AdditionalColumns
	}
	return
}

func (j *JSONSource) GetAdditionalProperties() (rv map[string]any) {
	if j != nil {
		return j.AdditionalProperties
	}
	return
}

func (j *JSONSource) GetFormatSettings() (rv *JSONReadSettings) {
	if j != nil {
		return j.FormatSettings
	}
	return
}

func (j *JSONSource) GetMaxConcurrentConnections() (rv any) {
	if j != nil {
		return j.MaxConcurrentConnections
	}
	return
}

func (j *JSONSource) GetSourceRetryCount() (rv any) {
	if j != nil {
		return j.SourceRetryCount
	}
	return
}

func (j *JSONSource) GetSourceRetryWait() (rv any) {
	if j != nil {
		return j.SourceRetryWait
	}
	return
}

func (j *JSONSource) GetStoreSettings() (rv StoreReadSettingsClassification) {
	if j != nil {
		return j.StoreSettings
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type JSONSource.
func (j *JSONSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     j.AdditionalProperties,
		MaxConcurrentConnections: j.MaxConcurrentConnections,
		SourceRetryCount:         j.SourceRetryCount,
		SourceRetryWait:          j.SourceRetryWait,
		Type:                     j.Type,
	}
}

// JSONWriteSettings - Json write settings.
type JSONWriteSettings struct {
	// REQUIRED; The write setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// File pattern of JSON. This setting controls the way a collection of JSON objects will be treated. The default value is
	// 'setOfObjects'. It is case-sensitive.
	FilePattern any
}

func (j *JSONWriteSettings) GetType() (rv string) {
	if j != nil && j.Type != nil {
		return *j.Type
	}
	return
}

func (j *JSONWriteSettings) GetAdditionalProperties() (rv map[string]any) {
	if j != nil {
		return j.AdditionalProperties
	}
	return
}

func (j *JSONWriteSettings) GetFilePattern() (rv any) {
	if j != nil {
		return j.FilePattern
	}
	return
}

// GetFormatWriteSettings implements the FormatWriteSettingsClassification interface for type JSONWriteSettings.
func (j *JSONWriteSettings) GetFormatWriteSettings() *FormatWriteSettings {
	return &FormatWriteSettings{
		AdditionalProperties: j.AdditionalProperties,
		Type:                 j.Type,
	}
}

// JiraLinkedService - Jira Service linked service.
type JiraLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Jira Service linked service properties.
	TypeProperties *JiraLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (j *JiraLinkedService) GetType() (rv string) {
	if j != nil && j.Type != nil {
		return *j.Type
	}
	return
}

func (j *JiraLinkedService) GetTypeProperties() (rv *JiraLinkedServiceTypeProperties) {
	if j != nil {
		return j.TypeProperties
	}
	return
}

func (j *JiraLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if j != nil {
		return j.AdditionalProperties
	}
	return
}

func (j *JiraLinkedService) GetAnnotations() (rv []any) {
	if j != nil {
		return j.Annotations
	}
	return
}

func (j *JiraLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if j != nil {
		return j.ConnectVia
	}
	return
}

func (j *JiraLinkedService) GetDescription() (rv string) {
	if j != nil && j.Description != nil {
		return *j.Description
	}
	return
}

func (j *JiraLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if j != nil {
		return j.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type JiraLinkedService.
func (j *JiraLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: j.AdditionalProperties,
		Annotations:          j.Annotations,
		ConnectVia:           j.ConnectVia,
		Description:          j.Description,
		Parameters:           j.Parameters,
		Type:                 j.Type,
	}
}

// JiraLinkedServiceTypeProperties - Jira Service linked service properties.
type JiraLinkedServiceTypeProperties struct {
	// REQUIRED; The IP address or host name of the Jira service. (e.g. jira.example.com)
	Host any

	// REQUIRED; The user name that you use to access Jira Service.
	Username any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The password corresponding to the user name that you provided in the username field.
	Password SecretBaseClassification

	// The TCP port that the Jira server uses to listen for client connections. The default value is 443 if connecting through
	// HTTPS, or 8080 if connecting through HTTP.
	Port any

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true.
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification any
}

func (j *JiraLinkedServiceTypeProperties) GetHost() (rv any) {
	if j != nil {
		return j.Host
	}
	return
}

func (j *JiraLinkedServiceTypeProperties) GetUsername() (rv any) {
	if j != nil {
		return j.Username
	}
	return
}

func (j *JiraLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if j != nil {
		return j.EncryptedCredential
	}
	return
}

func (j *JiraLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if j != nil {
		return j.Password
	}
	return
}

func (j *JiraLinkedServiceTypeProperties) GetPort() (rv any) {
	if j != nil {
		return j.Port
	}
	return
}

func (j *JiraLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if j != nil {
		return j.UseEncryptedEndpoints
	}
	return
}

func (j *JiraLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if j != nil {
		return j.UseHostVerification
	}
	return
}

func (j *JiraLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if j != nil {
		return j.UsePeerVerification
	}
	return
}

// JiraObjectDataset - Jira Service dataset.
type JiraObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (j *JiraObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if j != nil {
		return j.LinkedServiceName
	}
	return
}

func (j *JiraObjectDataset) GetType() (rv string) {
	if j != nil && j.Type != nil {
		return *j.Type
	}
	return
}

func (j *JiraObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if j != nil {
		return j.AdditionalProperties
	}
	return
}

func (j *JiraObjectDataset) GetAnnotations() (rv []any) {
	if j != nil {
		return j.Annotations
	}
	return
}

func (j *JiraObjectDataset) GetDescription() (rv string) {
	if j != nil && j.Description != nil {
		return *j.Description
	}
	return
}

func (j *JiraObjectDataset) GetFolder() (rv *DatasetFolder) {
	if j != nil {
		return j.Folder
	}
	return
}

func (j *JiraObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if j != nil {
		return j.Parameters
	}
	return
}

func (j *JiraObjectDataset) GetSchema() (rv any) {
	if j != nil {
		return j.Schema
	}
	return
}

func (j *JiraObjectDataset) GetStructure() (rv any) {
	if j != nil {
		return j.Structure
	}
	return
}

func (j *JiraObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if j != nil {
		return j.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type JiraObjectDataset.
func (j *JiraObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: j.AdditionalProperties,
		Annotations:          j.Annotations,
		Description:          j.Description,
		Folder:               j.Folder,
		LinkedServiceName:    j.LinkedServiceName,
		Parameters:           j.Parameters,
		Schema:               j.Schema,
		Structure:            j.Structure,
		Type:                 j.Type,
	}
}

// JiraSource - A copy activity Jira Service source.
type JiraSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (j *JiraSource) GetType() (rv string) {
	if j != nil && j.Type != nil {
		return *j.Type
	}
	return
}

func (j *JiraSource) GetAdditionalColumns() (rv any) {
	if j != nil {
		return j.AdditionalColumns
	}
	return
}

func (j *JiraSource) GetAdditionalProperties() (rv map[string]any) {
	if j != nil {
		return j.AdditionalProperties
	}
	return
}

func (j *JiraSource) GetMaxConcurrentConnections() (rv any) {
	if j != nil {
		return j.MaxConcurrentConnections
	}
	return
}

func (j *JiraSource) GetQuery() (rv any) {
	if j != nil {
		return j.Query
	}
	return
}

func (j *JiraSource) GetQueryTimeout() (rv any) {
	if j != nil {
		return j.QueryTimeout
	}
	return
}

func (j *JiraSource) GetSourceRetryCount() (rv any) {
	if j != nil {
		return j.SourceRetryCount
	}
	return
}

func (j *JiraSource) GetSourceRetryWait() (rv any) {
	if j != nil {
		return j.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type JiraSource.
func (j *JiraSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     j.AdditionalProperties,
		MaxConcurrentConnections: j.MaxConcurrentConnections,
		SourceRetryCount:         j.SourceRetryCount,
		SourceRetryWait:          j.SourceRetryWait,
		Type:                     j.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type JiraSource.
func (j *JiraSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        j.AdditionalColumns,
		AdditionalProperties:     j.AdditionalProperties,
		MaxConcurrentConnections: j.MaxConcurrentConnections,
		QueryTimeout:             j.QueryTimeout,
		SourceRetryCount:         j.SourceRetryCount,
		SourceRetryWait:          j.SourceRetryWait,
		Type:                     j.Type,
	}
}

type KqlScript struct {
	Content *KqlScriptContent
}

func (k *KqlScript) GetContent() (rv *KqlScriptContent) {
	if k != nil {
		return k.Content
	}
	return
}

type KqlScriptContent struct {
	CurrentConnection *KqlScriptContentCurrentConnection
	Metadata          *KqlScriptContentMetadata
	Query             *string
}

func (k *KqlScriptContent) GetCurrentConnection() (rv *KqlScriptContentCurrentConnection) {
	if k != nil {
		return k.CurrentConnection
	}
	return
}

func (k *KqlScriptContent) GetMetadata() (rv *KqlScriptContentMetadata) {
	if k != nil {
		return k.Metadata
	}
	return
}

func (k *KqlScriptContent) GetQuery() (rv string) {
	if k != nil && k.Query != nil {
		return *k.Query
	}
	return
}

type KqlScriptContentCurrentConnection struct {
	DatabaseName *string
	Name         *string
	PoolName     *string
	Type         *string
}

func (k *KqlScriptContentCurrentConnection) GetDatabaseName() (rv string) {
	if k != nil && k.DatabaseName != nil {
		return *k.DatabaseName
	}
	return
}

func (k *KqlScriptContentCurrentConnection) GetName() (rv string) {
	if k != nil && k.Name != nil {
		return *k.Name
	}
	return
}

func (k *KqlScriptContentCurrentConnection) GetPoolName() (rv string) {
	if k != nil && k.PoolName != nil {
		return *k.PoolName
	}
	return
}

func (k *KqlScriptContentCurrentConnection) GetType() (rv string) {
	if k != nil && k.Type != nil {
		return *k.Type
	}
	return
}

type KqlScriptContentMetadata struct {
	Language *string
}

func (k *KqlScriptContentMetadata) GetLanguage() (rv string) {
	if k != nil && k.Language != nil {
		return *k.Language
	}
	return
}

type KqlScriptResource struct {
	ID   *string
	Name *string

	// Properties of sql script.
	Properties *KqlScript
	Type       *string
}

func (k *KqlScriptResource) GetID() (rv string) {
	if k != nil && k.ID != nil {
		return *k.ID
	}
	return
}

func (k *KqlScriptResource) GetName() (rv string) {
	if k != nil && k.Name != nil {
		return *k.Name
	}
	return
}

func (k *KqlScriptResource) GetProperties() (rv *KqlScript) {
	if k != nil {
		return k.Properties
	}
	return
}

func (k *KqlScriptResource) GetType() (rv string) {
	if k != nil && k.Type != nil {
		return *k.Type
	}
	return
}

type KqlScriptsResourceCollectionResponse struct {
	NextLink *string
	Value    []*KqlScriptResource
}

func (k *KqlScriptsResourceCollectionResponse) GetNextLink() (rv string) {
	if k != nil && k.NextLink != nil {
		return *k.NextLink
	}
	return
}

func (k *KqlScriptsResourceCollectionResponse) GetValue() (rv []*KqlScriptResource) {
	if k != nil {
		return k.Value
	}
	return
}

// LibraryInfo - Library/package information of a Big Data pool powered by Apache Spark
type LibraryInfo struct {
	// Storage blob container name.
	ContainerName *string

	// Name of the library.
	Name *string

	// Storage blob path of library.
	Path *string

	// Type of the library.
	Type *string

	// The last update time of the library.
	UploadedTimestamp *time.Time

	// READ-ONLY; Creator Id of the library/package.
	CreatorID *string

	// READ-ONLY; Provisioning status of the library/package.
	ProvisioningStatus *string
}

func (l *LibraryInfo) GetContainerName() (rv string) {
	if l != nil && l.ContainerName != nil {
		return *l.ContainerName
	}
	return
}

func (l *LibraryInfo) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LibraryInfo) GetPath() (rv string) {
	if l != nil && l.Path != nil {
		return *l.Path
	}
	return
}

func (l *LibraryInfo) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

func (l *LibraryInfo) GetUploadedTimestamp() (rv *time.Time) {
	if l != nil {
		return l.UploadedTimestamp
	}
	return
}

func (l *LibraryInfo) GetCreatorID() (rv string) {
	if l != nil && l.CreatorID != nil {
		return *l.CreatorID
	}
	return
}

func (l *LibraryInfo) GetProvisioningStatus() (rv string) {
	if l != nil && l.ProvisioningStatus != nil {
		return *l.ProvisioningStatus
	}
	return
}

// LibraryListResponse - A list of Library resources.
type LibraryListResponse struct {
	// REQUIRED; List of Library.
	Value []*LibraryResource

	// The link to the next page of results, if any remaining results exist.
	NextLink *string
}

func (l *LibraryListResponse) GetValue() (rv []*LibraryResource) {
	if l != nil {
		return l.Value
	}
	return
}

func (l *LibraryListResponse) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

// LibraryRequirements - Library requirements for a Big Data pool powered by Apache Spark
type LibraryRequirements struct {
	// The library requirements.
	Content *string

	// The filename of the library requirements file.
	Filename *string

	// READ-ONLY; The last update time of the library requirements file.
	Time *time.Time
}

func (l *LibraryRequirements) GetContent() (rv string) {
	if l != nil && l.Content != nil {
		return *l.Content
	}
	return
}

func (l *LibraryRequirements) GetFilename() (rv string) {
	if l != nil && l.Filename != nil {
		return *l.Filename
	}
	return
}

func (l *LibraryRequirements) GetTime() (rv *time.Time) {
	if l != nil {
		return l.Time
	}
	return
}

// LibraryResource - Library response details
type LibraryResource struct {
	// REQUIRED; Library/package properties.
	Properties *LibraryResourceProperties

	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (l *LibraryResource) GetProperties() (rv *LibraryResourceProperties) {
	if l != nil {
		return l.Properties
	}
	return
}

func (l *LibraryResource) GetEtag() (rv string) {
	if l != nil && l.Etag != nil {
		return *l.Etag
	}
	return
}

func (l *LibraryResource) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LibraryResource) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LibraryResource) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

// LibraryResourceInfo - Library resource info
type LibraryResourceInfo struct {
	// READ-ONLY; artifact Id of the library/package.
	ArtifactID *string

	// READ-ONLY; The last updated time of the library/package.
	Changed *string

	// READ-ONLY; The creation time of the library/package.
	Created *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; Name of the library/package.
	Name *string

	// READ-ONLY; Operation Id of the operation performed on library/package.
	OperationID *string

	// READ-ONLY; record Id of the library/package.
	RecordID *int32

	// READ-ONLY; Provisioning status of the library/package.
	State *string

	// READ-ONLY; The type of the resource. E.g. LibraryArtifact
	Type *string
}

func (l *LibraryResourceInfo) GetArtifactID() (rv string) {
	if l != nil && l.ArtifactID != nil {
		return *l.ArtifactID
	}
	return
}

func (l *LibraryResourceInfo) GetChanged() (rv string) {
	if l != nil && l.Changed != nil {
		return *l.Changed
	}
	return
}

func (l *LibraryResourceInfo) GetCreated() (rv string) {
	if l != nil && l.Created != nil {
		return *l.Created
	}
	return
}

func (l *LibraryResourceInfo) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LibraryResourceInfo) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LibraryResourceInfo) GetOperationID() (rv string) {
	if l != nil && l.OperationID != nil {
		return *l.OperationID
	}
	return
}

func (l *LibraryResourceInfo) GetRecordID() (rv int32) {
	if l != nil && l.RecordID != nil {
		return *l.RecordID
	}
	return
}

func (l *LibraryResourceInfo) GetState() (rv string) {
	if l != nil && l.State != nil {
		return *l.State
	}
	return
}

func (l *LibraryResourceInfo) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

// LibraryResourceProperties - Library/package properties
type LibraryResourceProperties struct {
	// READ-ONLY; Container name of the library/package.
	ContainerName *string

	// READ-ONLY; Creator Id of the library/package.
	CreatorID *string

	// READ-ONLY; Name of the library/package.
	Name *string

	// READ-ONLY; Location of library/package in storage account.
	Path *string

	// READ-ONLY; Provisioning status of the library/package.
	ProvisioningStatus *string

	// READ-ONLY; Type of the library/package.
	Type *string

	// READ-ONLY; The last update time of the library/package.
	UploadedTimestamp *string
}

func (l *LibraryResourceProperties) GetContainerName() (rv string) {
	if l != nil && l.ContainerName != nil {
		return *l.ContainerName
	}
	return
}

func (l *LibraryResourceProperties) GetCreatorID() (rv string) {
	if l != nil && l.CreatorID != nil {
		return *l.CreatorID
	}
	return
}

func (l *LibraryResourceProperties) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LibraryResourceProperties) GetPath() (rv string) {
	if l != nil && l.Path != nil {
		return *l.Path
	}
	return
}

func (l *LibraryResourceProperties) GetProvisioningStatus() (rv string) {
	if l != nil && l.ProvisioningStatus != nil {
		return *l.ProvisioningStatus
	}
	return
}

func (l *LibraryResourceProperties) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

func (l *LibraryResourceProperties) GetUploadedTimestamp() (rv string) {
	if l != nil && l.UploadedTimestamp != nil {
		return *l.UploadedTimestamp
	}
	return
}

type LinkConnection struct {
	// Properties of link connection's compute
	Compute *LinkConnectionCompute

	// Properties of link connection's landing zone
	LandingZone *LinkConnectionLandingZone

	// Properties of link connection's source database
	SourceDatabase *LinkConnectionSourceDatabase

	// Properties of link connection's target database
	TargetDatabase *LinkConnectionTargetDatabase
}

func (l *LinkConnection) GetCompute() (rv *LinkConnectionCompute) {
	if l != nil {
		return l.Compute
	}
	return
}

func (l *LinkConnection) GetLandingZone() (rv *LinkConnectionLandingZone) {
	if l != nil {
		return l.LandingZone
	}
	return
}

func (l *LinkConnection) GetSourceDatabase() (rv *LinkConnectionSourceDatabase) {
	if l != nil {
		return l.SourceDatabase
	}
	return
}

func (l *LinkConnection) GetTargetDatabase() (rv *LinkConnectionTargetDatabase) {
	if l != nil {
		return l.TargetDatabase
	}
	return
}

type LinkConnectionCompute struct {
	// Link connection's compute type
	ComputeType *string

	// Compute core count used by the link connection
	CoreCount *int32

	// Link connection's data process interval in minutes
	DataProcessIntervalMinutes *int32
}

func (l *LinkConnectionCompute) GetComputeType() (rv string) {
	if l != nil && l.ComputeType != nil {
		return *l.ComputeType
	}
	return
}

func (l *LinkConnectionCompute) GetCoreCount() (rv int32) {
	if l != nil && l.CoreCount != nil {
		return *l.CoreCount
	}
	return
}

func (l *LinkConnectionCompute) GetDataProcessIntervalMinutes() (rv int32) {
	if l != nil && l.DataProcessIntervalMinutes != nil {
		return *l.DataProcessIntervalMinutes
	}
	return
}

type LinkConnectionDetailedStatus struct {
	// Link connection's corresponding continuous run id
	ContinuousRunID *string

	// Link connection error
	Error any

	// Link connection id
	ID *string

	// Is link connection applying changes
	IsApplyingChanges *bool

	// Is link connection partially failed
	IsPartiallyFailed *bool

	// Link connection landing zone credential expire time
	LandingZoneCredentialExpireTime *time.Time

	// Link connection name
	Name *string

	// Link connection refresh status
	RefreshStatus *LinkConnectionRefreshStatus

	// Link connection start time
	StartTime any

	// Link connection status, please refer to this articles [https://learn.microsoft.com/azure/synapse-analytics/synapse-link/sql-database-synapse-link#monitoring]
	// for details.
	Status *string

	// Link connection stop time
	StopTime any
}

func (l *LinkConnectionDetailedStatus) GetContinuousRunID() (rv string) {
	if l != nil && l.ContinuousRunID != nil {
		return *l.ContinuousRunID
	}
	return
}

func (l *LinkConnectionDetailedStatus) GetError() (rv any) {
	if l != nil {
		return l.Error
	}
	return
}

func (l *LinkConnectionDetailedStatus) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LinkConnectionDetailedStatus) GetIsApplyingChanges() (rv bool) {
	if l != nil && l.IsApplyingChanges != nil {
		return *l.IsApplyingChanges
	}
	return
}

func (l *LinkConnectionDetailedStatus) GetIsPartiallyFailed() (rv bool) {
	if l != nil && l.IsPartiallyFailed != nil {
		return *l.IsPartiallyFailed
	}
	return
}

func (l *LinkConnectionDetailedStatus) GetLandingZoneCredentialExpireTime() (rv *time.Time) {
	if l != nil {
		return l.LandingZoneCredentialExpireTime
	}
	return
}

func (l *LinkConnectionDetailedStatus) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LinkConnectionDetailedStatus) GetRefreshStatus() (rv *LinkConnectionRefreshStatus) {
	if l != nil {
		return l.RefreshStatus
	}
	return
}

func (l *LinkConnectionDetailedStatus) GetStartTime() (rv any) {
	if l != nil {
		return l.StartTime
	}
	return
}

func (l *LinkConnectionDetailedStatus) GetStatus() (rv string) {
	if l != nil && l.Status != nil {
		return *l.Status
	}
	return
}

func (l *LinkConnectionDetailedStatus) GetStopTime() (rv any) {
	if l != nil {
		return l.StopTime
	}
	return
}

type LinkConnectionLandingZone struct {
	// Landing zone's file system name
	FileSystem *string

	// Landing zone's folder path name
	FolderPath *string

	// Linked service reference
	LinkedService *LinkedServiceReference

	// Landing zone's sas token
	SasToken *SecureString
}

func (l *LinkConnectionLandingZone) GetFileSystem() (rv string) {
	if l != nil && l.FileSystem != nil {
		return *l.FileSystem
	}
	return
}

func (l *LinkConnectionLandingZone) GetFolderPath() (rv string) {
	if l != nil && l.FolderPath != nil {
		return *l.FolderPath
	}
	return
}

func (l *LinkConnectionLandingZone) GetLinkedService() (rv *LinkedServiceReference) {
	if l != nil {
		return l.LinkedService
	}
	return
}

func (l *LinkConnectionLandingZone) GetSasToken() (rv *SecureString) {
	if l != nil {
		return l.SasToken
	}
	return
}

type LinkConnectionListResponse struct {
	// REQUIRED; List link connection value
	Value []*LinkConnectionResource

	// List link connections next link
	NextLink *string
}

func (l *LinkConnectionListResponse) GetValue() (rv []*LinkConnectionResource) {
	if l != nil {
		return l.Value
	}
	return
}

func (l *LinkConnectionListResponse) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

type LinkConnectionQueryTableStatus struct {
	// Continuation token to query table status
	ContinuationToken any

	// Link tables' status
	Value []*LinkTableStatus
}

func (l *LinkConnectionQueryTableStatus) GetContinuationToken() (rv any) {
	if l != nil {
		return l.ContinuationToken
	}
	return
}

func (l *LinkConnectionQueryTableStatus) GetValue() (rv []*LinkTableStatus) {
	if l != nil {
		return l.Value
	}
	return
}

type LinkConnectionRefreshStatus struct {
	// READ-ONLY; Link connection refresh error message
	ErrorMessage *string

	// READ-ONLY; Link connection refresh status
	RefreshStatus *string
}

func (l *LinkConnectionRefreshStatus) GetErrorMessage() (rv string) {
	if l != nil && l.ErrorMessage != nil {
		return *l.ErrorMessage
	}
	return
}

func (l *LinkConnectionRefreshStatus) GetRefreshStatus() (rv string) {
	if l != nil && l.RefreshStatus != nil {
		return *l.RefreshStatus
	}
	return
}

type LinkConnectionResource struct {
	// REQUIRED; Properties of link connection
	Properties *LinkConnection

	// Link connection description
	Description *string

	// Link connection id
	ID *string

	// Link connection name
	Name *string

	// Link connection type
	Type *string
}

func (l *LinkConnectionResource) GetProperties() (rv *LinkConnection) {
	if l != nil {
		return l.Properties
	}
	return
}

func (l *LinkConnectionResource) GetDescription() (rv string) {
	if l != nil && l.Description != nil {
		return *l.Description
	}
	return
}

func (l *LinkConnectionResource) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LinkConnectionResource) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LinkConnectionResource) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

type LinkConnectionSourceDatabase struct {
	// Linked service reference
	LinkedService *LinkedServiceReference

	// Source database type properties
	TypeProperties *LinkConnectionSourceDatabaseTypeProperties
}

func (l *LinkConnectionSourceDatabase) GetLinkedService() (rv *LinkedServiceReference) {
	if l != nil {
		return l.LinkedService
	}
	return
}

func (l *LinkConnectionSourceDatabase) GetTypeProperties() (rv *LinkConnectionSourceDatabaseTypeProperties) {
	if l != nil {
		return l.TypeProperties
	}
	return
}

type LinkConnectionSourceDatabaseTypeProperties struct {
	// Link connection source database server's principal id
	PrincipalID *string

	// Link connection source database server's resource id
	ResourceID *string
}

func (l *LinkConnectionSourceDatabaseTypeProperties) GetPrincipalID() (rv string) {
	if l != nil && l.PrincipalID != nil {
		return *l.PrincipalID
	}
	return
}

func (l *LinkConnectionSourceDatabaseTypeProperties) GetResourceID() (rv string) {
	if l != nil && l.ResourceID != nil {
		return *l.ResourceID
	}
	return
}

type LinkConnectionTargetDatabase struct {
	// Linked service reference
	LinkedService *LinkedServiceReference

	// Target database type properties
	TypeProperties *LinkConnectionTargetDatabaseTypeProperties
}

func (l *LinkConnectionTargetDatabase) GetLinkedService() (rv *LinkedServiceReference) {
	if l != nil {
		return l.LinkedService
	}
	return
}

func (l *LinkConnectionTargetDatabase) GetTypeProperties() (rv *LinkConnectionTargetDatabaseTypeProperties) {
	if l != nil {
		return l.TypeProperties
	}
	return
}

type LinkConnectionTargetDatabaseTypeProperties struct {
	// Enable cross table transaction consistency on target database
	CrossTableTransaction *bool

	// Drop and recreate same existing target table on link connection target database
	DropExistingTargetTableOnStart *bool
}

func (l *LinkConnectionTargetDatabaseTypeProperties) GetCrossTableTransaction() (rv bool) {
	if l != nil && l.CrossTableTransaction != nil {
		return *l.CrossTableTransaction
	}
	return
}

func (l *LinkConnectionTargetDatabaseTypeProperties) GetDropExistingTargetTableOnStart() (rv bool) {
	if l != nil && l.DropExistingTargetTableOnStart != nil {
		return *l.DropExistingTargetTableOnStart
	}
	return
}

type LinkTableListResponse struct {
	// List link table value
	Value []*LinkTableResource
}

func (l *LinkTableListResponse) GetValue() (rv []*LinkTableResource) {
	if l != nil {
		return l.Value
	}
	return
}

type LinkTableRequest struct {
	// Link table id
	ID *string

	// Link table operation type
	OperationType *string

	// Source table properties for link table request
	Source *LinkTableRequestSource

	// Target table properties for link table request
	Target *LinkTableRequestTarget
}

func (l *LinkTableRequest) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LinkTableRequest) GetOperationType() (rv string) {
	if l != nil && l.OperationType != nil {
		return *l.OperationType
	}
	return
}

func (l *LinkTableRequest) GetSource() (rv *LinkTableRequestSource) {
	if l != nil {
		return l.Source
	}
	return
}

func (l *LinkTableRequest) GetTarget() (rv *LinkTableRequestTarget) {
	if l != nil {
		return l.Target
	}
	return
}

type LinkTableRequestSource struct {
	// Source table schema name
	SchemaName *string

	// Source table table name
	TableName *string
}

func (l *LinkTableRequestSource) GetSchemaName() (rv string) {
	if l != nil && l.SchemaName != nil {
		return *l.SchemaName
	}
	return
}

func (l *LinkTableRequestSource) GetTableName() (rv string) {
	if l != nil && l.TableName != nil {
		return *l.TableName
	}
	return
}

type LinkTableRequestTarget struct {
	// Target table distribution options for link table request
	DistributionOptions *LinkTableRequestTargetDistributionOptions

	// Target table schema name
	SchemaName *string

	// Target table structure options for link table request
	StructureOptions *LinkTableRequestTargetStructureOptions

	// Target table table name
	TableName *string
}

func (l *LinkTableRequestTarget) GetDistributionOptions() (rv *LinkTableRequestTargetDistributionOptions) {
	if l != nil {
		return l.DistributionOptions
	}
	return
}

func (l *LinkTableRequestTarget) GetSchemaName() (rv string) {
	if l != nil && l.SchemaName != nil {
		return *l.SchemaName
	}
	return
}

func (l *LinkTableRequestTarget) GetStructureOptions() (rv *LinkTableRequestTargetStructureOptions) {
	if l != nil {
		return l.StructureOptions
	}
	return
}

func (l *LinkTableRequestTarget) GetTableName() (rv string) {
	if l != nil && l.TableName != nil {
		return *l.TableName
	}
	return
}

type LinkTableRequestTargetDistributionOptions struct {
	// Target table distribution column
	DistributionColumn *string

	// Target table distribution type
	Type *string
}

func (l *LinkTableRequestTargetDistributionOptions) GetDistributionColumn() (rv string) {
	if l != nil && l.DistributionColumn != nil {
		return *l.DistributionColumn
	}
	return
}

func (l *LinkTableRequestTargetDistributionOptions) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

type LinkTableRequestTargetStructureOptions struct {
	// Target table structure type
	Type *string
}

func (l *LinkTableRequestTargetStructureOptions) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

type LinkTableResource struct {
	// Link table id
	ID *string

	// Link table name
	Name *string

	// Source table properties for link table request
	Source *LinkTableRequestSource

	// Target table properties for link table request
	Target *LinkTableRequestTarget
}

func (l *LinkTableResource) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LinkTableResource) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LinkTableResource) GetSource() (rv *LinkTableRequestSource) {
	if l != nil {
		return l.Source
	}
	return
}

func (l *LinkTableResource) GetTarget() (rv *LinkTableRequestTarget) {
	if l != nil {
		return l.Target
	}
	return
}

type LinkTableStatus struct {
	// Link table error code
	ErrorCode *string

	// Link table error message
	ErrorMessage *string

	// ID provided by the client
	ID *string

	// Link table last processed data time
	LastProcessedData *time.Time

	// Link table last transaction commit time
	LastTransactionCommitTime *time.Time

	// Link table ID
	LinkTableID *string

	// Link table start time
	StartTime any

	// Link table status, please refer to this articles [https://learn.microsoft.com/azure/synapse-analytics/synapse-link/sql-database-synapse-link#monitoring]
	// for details.
	Status *string

	// Link table stop time
	StopTime any
}

func (l *LinkTableStatus) GetErrorCode() (rv string) {
	if l != nil && l.ErrorCode != nil {
		return *l.ErrorCode
	}
	return
}

func (l *LinkTableStatus) GetErrorMessage() (rv string) {
	if l != nil && l.ErrorMessage != nil {
		return *l.ErrorMessage
	}
	return
}

func (l *LinkTableStatus) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LinkTableStatus) GetLastProcessedData() (rv *time.Time) {
	if l != nil {
		return l.LastProcessedData
	}
	return
}

func (l *LinkTableStatus) GetLastTransactionCommitTime() (rv *time.Time) {
	if l != nil {
		return l.LastTransactionCommitTime
	}
	return
}

func (l *LinkTableStatus) GetLinkTableID() (rv string) {
	if l != nil && l.LinkTableID != nil {
		return *l.LinkTableID
	}
	return
}

func (l *LinkTableStatus) GetStartTime() (rv any) {
	if l != nil {
		return l.StartTime
	}
	return
}

func (l *LinkTableStatus) GetStatus() (rv string) {
	if l != nil && l.Status != nil {
		return *l.Status
	}
	return
}

func (l *LinkTableStatus) GetStopTime() (rv any) {
	if l != nil {
		return l.StopTime
	}
	return
}

// LinkedIntegrationRuntimeKeyAuthorization - The key authorization type integration runtime.
type LinkedIntegrationRuntimeKeyAuthorization struct {
	// REQUIRED; The authorization type for integration runtime sharing.
	AuthorizationType *string

	// REQUIRED; The key used for authorization.
	Key *SecureString
}

func (l *LinkedIntegrationRuntimeKeyAuthorization) GetAuthorizationType() (rv string) {
	if l != nil && l.AuthorizationType != nil {
		return *l.AuthorizationType
	}
	return
}

func (l *LinkedIntegrationRuntimeKeyAuthorization) GetKey() (rv *SecureString) {
	if l != nil {
		return l.Key
	}
	return
}

// GetLinkedIntegrationRuntimeType implements the LinkedIntegrationRuntimeTypeClassification interface for type LinkedIntegrationRuntimeKeyAuthorization.
func (l *LinkedIntegrationRuntimeKeyAuthorization) GetLinkedIntegrationRuntimeType() *LinkedIntegrationRuntimeType {
	return &LinkedIntegrationRuntimeType{
		AuthorizationType: l.AuthorizationType,
	}
}

// LinkedIntegrationRuntimeRbacAuthorization - The role based access control (RBAC) authorization type integration runtime.
type LinkedIntegrationRuntimeRbacAuthorization struct {
	// REQUIRED; The authorization type for integration runtime sharing.
	AuthorizationType *string

	// REQUIRED; The resource identifier of the integration runtime to be shared.
	ResourceID *string
}

func (l *LinkedIntegrationRuntimeRbacAuthorization) GetAuthorizationType() (rv string) {
	if l != nil && l.AuthorizationType != nil {
		return *l.AuthorizationType
	}
	return
}

func (l *LinkedIntegrationRuntimeRbacAuthorization) GetResourceID() (rv string) {
	if l != nil && l.ResourceID != nil {
		return *l.ResourceID
	}
	return
}

// GetLinkedIntegrationRuntimeType implements the LinkedIntegrationRuntimeTypeClassification interface for type LinkedIntegrationRuntimeRbacAuthorization.
func (l *LinkedIntegrationRuntimeRbacAuthorization) GetLinkedIntegrationRuntimeType() *LinkedIntegrationRuntimeType {
	return &LinkedIntegrationRuntimeType{
		AuthorizationType: l.AuthorizationType,
	}
}

// LinkedIntegrationRuntimeType - The base definition of a linked integration runtime.
type LinkedIntegrationRuntimeType struct {
	// REQUIRED; The authorization type for integration runtime sharing.
	AuthorizationType *string
}

func (l *LinkedIntegrationRuntimeType) GetAuthorizationType() (rv string) {
	if l != nil && l.AuthorizationType != nil {
		return *l.AuthorizationType
	}
	return
}

// GetLinkedIntegrationRuntimeType implements the LinkedIntegrationRuntimeTypeClassification interface for type LinkedIntegrationRuntimeType.
func (l *LinkedIntegrationRuntimeType) GetLinkedIntegrationRuntimeType() *LinkedIntegrationRuntimeType {
	return l
}

// LinkedService - The Azure Synapse nested object which contains the information and credential which can be used to connect
// with related store or compute resource.
type LinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (l *LinkedService) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

func (l *LinkedService) GetAdditionalProperties() (rv map[string]any) {
	if l != nil {
		return l.AdditionalProperties
	}
	return
}

func (l *LinkedService) GetAnnotations() (rv []any) {
	if l != nil {
		return l.Annotations
	}
	return
}

func (l *LinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if l != nil {
		return l.ConnectVia
	}
	return
}

func (l *LinkedService) GetDescription() (rv string) {
	if l != nil && l.Description != nil {
		return *l.Description
	}
	return
}

func (l *LinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if l != nil {
		return l.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type LinkedService.
func (l *LinkedService) GetLinkedService() *LinkedService { return l }

// LinkedServiceDebugResource - Linked service debug resource.
type LinkedServiceDebugResource struct {
	// REQUIRED; Properties of linked service.
	Properties LinkedServiceClassification

	// The resource name.
	Name *string
}

func (l *LinkedServiceDebugResource) GetProperties() (rv LinkedServiceClassification) {
	if l != nil {
		return l.Properties
	}
	return
}

func (l *LinkedServiceDebugResource) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

// LinkedServiceListResponse - A list of linked service resources.
type LinkedServiceListResponse struct {
	// REQUIRED; List of linked services.
	Value []*LinkedServiceResource

	// The link to the next page of results, if any remaining results exist.
	NextLink *string
}

func (l *LinkedServiceListResponse) GetValue() (rv []*LinkedServiceResource) {
	if l != nil {
		return l.Value
	}
	return
}

func (l *LinkedServiceListResponse) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

// LinkedServiceReference - Linked service reference type.
type LinkedServiceReference struct {
	// REQUIRED; Reference LinkedService name.
	ReferenceName *string

	// REQUIRED; Linked service reference type.
	Type *Type

	// Arguments for LinkedService.
	Parameters map[string]any
}

func (l *LinkedServiceReference) GetReferenceName() (rv string) {
	if l != nil && l.ReferenceName != nil {
		return *l.ReferenceName
	}
	return
}

func (l *LinkedServiceReference) GetType() (rv *Type) {
	if l != nil {
		return l.Type
	}
	return
}

func (l *LinkedServiceReference) GetParameters() (rv map[string]any) {
	if l != nil {
		return l.Parameters
	}
	return
}

// LinkedServiceResource - Linked service resource type.
type LinkedServiceResource struct {
	// REQUIRED; Properties of linked service.
	Properties LinkedServiceClassification

	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (l *LinkedServiceResource) GetProperties() (rv LinkedServiceClassification) {
	if l != nil {
		return l.Properties
	}
	return
}

func (l *LinkedServiceResource) GetEtag() (rv string) {
	if l != nil && l.Etag != nil {
		return *l.Etag
	}
	return
}

func (l *LinkedServiceResource) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LinkedServiceResource) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LinkedServiceResource) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

// LogLocationSettings - Log location settings.
type LogLocationSettings struct {
	// REQUIRED; Log storage linked service reference.
	LinkedServiceName *LinkedServiceReference

	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path any
}

func (l *LogLocationSettings) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if l != nil {
		return l.LinkedServiceName
	}
	return
}

func (l *LogLocationSettings) GetPath() (rv any) {
	if l != nil {
		return l.Path
	}
	return
}

// LogSettings - Log settings.
type LogSettings struct {
	// REQUIRED; Log location settings customer needs to provide when enabling log.
	LogLocationSettings *LogLocationSettings

	// Specifies settings for copy activity log.
	CopyActivityLogSettings *CopyActivityLogSettings

	// Specifies whether to enable copy activity log. Type: boolean (or Expression with resultType boolean).
	EnableCopyActivityLog any
}

func (l *LogSettings) GetLogLocationSettings() (rv *LogLocationSettings) {
	if l != nil {
		return l.LogLocationSettings
	}
	return
}

func (l *LogSettings) GetCopyActivityLogSettings() (rv *CopyActivityLogSettings) {
	if l != nil {
		return l.CopyActivityLogSettings
	}
	return
}

func (l *LogSettings) GetEnableCopyActivityLog() (rv any) {
	if l != nil {
		return l.EnableCopyActivityLog
	}
	return
}

// LogStorageSettings - (Deprecated. Please use LogSettings) Log storage settings.
type LogStorageSettings struct {
	// REQUIRED; Log storage linked service reference.
	LinkedServiceName *LinkedServiceReference

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies whether to enable reliable logging. Type: boolean (or Expression with resultType boolean).
	EnableReliableLogging any

	// Gets or sets the log level, support: Info, Warning. Type: string (or Expression with resultType string).
	LogLevel any

	// The path to storage for storing detailed logs of activity execution. Type: string (or Expression with resultType string).
	Path any
}

func (l *LogStorageSettings) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if l != nil {
		return l.LinkedServiceName
	}
	return
}

func (l *LogStorageSettings) GetAdditionalProperties() (rv map[string]any) {
	if l != nil {
		return l.AdditionalProperties
	}
	return
}

func (l *LogStorageSettings) GetEnableReliableLogging() (rv any) {
	if l != nil {
		return l.EnableReliableLogging
	}
	return
}

func (l *LogStorageSettings) GetLogLevel() (rv any) {
	if l != nil {
		return l.LogLevel
	}
	return
}

func (l *LogStorageSettings) GetPath() (rv any) {
	if l != nil {
		return l.Path
	}
	return
}

// LookupActivity - Lookup activity.
type LookupActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Lookup activity properties.
	TypeProperties *LookupActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (l *LookupActivity) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LookupActivity) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

func (l *LookupActivity) GetTypeProperties() (rv *LookupActivityTypeProperties) {
	if l != nil {
		return l.TypeProperties
	}
	return
}

func (l *LookupActivity) GetAdditionalProperties() (rv map[string]any) {
	if l != nil {
		return l.AdditionalProperties
	}
	return
}

func (l *LookupActivity) GetDependsOn() (rv []*ActivityDependency) {
	if l != nil {
		return l.DependsOn
	}
	return
}

func (l *LookupActivity) GetDescription() (rv string) {
	if l != nil && l.Description != nil {
		return *l.Description
	}
	return
}

func (l *LookupActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if l != nil {
		return l.LinkedServiceName
	}
	return
}

func (l *LookupActivity) GetPolicy() (rv *ActivityPolicy) {
	if l != nil {
		return l.Policy
	}
	return
}

func (l *LookupActivity) GetUserProperties() (rv []*UserProperty) {
	if l != nil {
		return l.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type LookupActivity.
func (l *LookupActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: l.AdditionalProperties,
		DependsOn:            l.DependsOn,
		Description:          l.Description,
		Name:                 l.Name,
		Type:                 l.Type,
		UserProperties:       l.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type LookupActivity.
func (l *LookupActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: l.AdditionalProperties,
		DependsOn:            l.DependsOn,
		Description:          l.Description,
		LinkedServiceName:    l.LinkedServiceName,
		Name:                 l.Name,
		Policy:               l.Policy,
		Type:                 l.Type,
		UserProperties:       l.UserProperties,
	}
}

// LookupActivityTypeProperties - Lookup activity properties.
type LookupActivityTypeProperties struct {
	// REQUIRED; Lookup activity dataset reference.
	Dataset *DatasetReference

	// REQUIRED; Dataset-specific source properties, same as copy activity source.
	Source CopySourceClassification

	// Whether to return first row or all rows. Default value is true. Type: boolean (or Expression with resultType boolean).
	FirstRowOnly any
}

func (l *LookupActivityTypeProperties) GetDataset() (rv *DatasetReference) {
	if l != nil {
		return l.Dataset
	}
	return
}

func (l *LookupActivityTypeProperties) GetSource() (rv CopySourceClassification) {
	if l != nil {
		return l.Source
	}
	return
}

func (l *LookupActivityTypeProperties) GetFirstRowOnly() (rv any) {
	if l != nil {
		return l.FirstRowOnly
	}
	return
}

// MagentoLinkedService - Magento server linked service.
type MagentoLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Magento server linked service properties.
	TypeProperties *MagentoLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (m *MagentoLinkedService) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MagentoLinkedService) GetTypeProperties() (rv *MagentoLinkedServiceTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

func (m *MagentoLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MagentoLinkedService) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MagentoLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if m != nil {
		return m.ConnectVia
	}
	return
}

func (m *MagentoLinkedService) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MagentoLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type MagentoLinkedService.
func (m *MagentoLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		ConnectVia:           m.ConnectVia,
		Description:          m.Description,
		Parameters:           m.Parameters,
		Type:                 m.Type,
	}
}

// MagentoLinkedServiceTypeProperties - Magento server linked service properties.
type MagentoLinkedServiceTypeProperties struct {
	// REQUIRED; The URL of the Magento instance. (i.e. 192.168.222.110/magento3)
	Host any

	// The access token from Magento.
	AccessToken SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true.
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification any
}

func (m *MagentoLinkedServiceTypeProperties) GetHost() (rv any) {
	if m != nil {
		return m.Host
	}
	return
}

func (m *MagentoLinkedServiceTypeProperties) GetAccessToken() (rv SecretBaseClassification) {
	if m != nil {
		return m.AccessToken
	}
	return
}

func (m *MagentoLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if m != nil {
		return m.EncryptedCredential
	}
	return
}

func (m *MagentoLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if m != nil {
		return m.UseEncryptedEndpoints
	}
	return
}

func (m *MagentoLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if m != nil {
		return m.UseHostVerification
	}
	return
}

func (m *MagentoLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if m != nil {
		return m.UsePeerVerification
	}
	return
}

// MagentoObjectDataset - Magento server dataset.
type MagentoObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (m *MagentoObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if m != nil {
		return m.LinkedServiceName
	}
	return
}

func (m *MagentoObjectDataset) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MagentoObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MagentoObjectDataset) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MagentoObjectDataset) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MagentoObjectDataset) GetFolder() (rv *DatasetFolder) {
	if m != nil {
		return m.Folder
	}
	return
}

func (m *MagentoObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

func (m *MagentoObjectDataset) GetSchema() (rv any) {
	if m != nil {
		return m.Schema
	}
	return
}

func (m *MagentoObjectDataset) GetStructure() (rv any) {
	if m != nil {
		return m.Structure
	}
	return
}

func (m *MagentoObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type MagentoObjectDataset.
func (m *MagentoObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		Description:          m.Description,
		Folder:               m.Folder,
		LinkedServiceName:    m.LinkedServiceName,
		Parameters:           m.Parameters,
		Schema:               m.Schema,
		Structure:            m.Structure,
		Type:                 m.Type,
	}
}

// MagentoSource - A copy activity Magento server source.
type MagentoSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (m *MagentoSource) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MagentoSource) GetAdditionalColumns() (rv any) {
	if m != nil {
		return m.AdditionalColumns
	}
	return
}

func (m *MagentoSource) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MagentoSource) GetMaxConcurrentConnections() (rv any) {
	if m != nil {
		return m.MaxConcurrentConnections
	}
	return
}

func (m *MagentoSource) GetQuery() (rv any) {
	if m != nil {
		return m.Query
	}
	return
}

func (m *MagentoSource) GetQueryTimeout() (rv any) {
	if m != nil {
		return m.QueryTimeout
	}
	return
}

func (m *MagentoSource) GetSourceRetryCount() (rv any) {
	if m != nil {
		return m.SourceRetryCount
	}
	return
}

func (m *MagentoSource) GetSourceRetryWait() (rv any) {
	if m != nil {
		return m.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type MagentoSource.
func (m *MagentoSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     m.AdditionalProperties,
		MaxConcurrentConnections: m.MaxConcurrentConnections,
		SourceRetryCount:         m.SourceRetryCount,
		SourceRetryWait:          m.SourceRetryWait,
		Type:                     m.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type MagentoSource.
func (m *MagentoSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        m.AdditionalColumns,
		AdditionalProperties:     m.AdditionalProperties,
		MaxConcurrentConnections: m.MaxConcurrentConnections,
		QueryTimeout:             m.QueryTimeout,
		SourceRetryCount:         m.SourceRetryCount,
		SourceRetryWait:          m.SourceRetryWait,
		Type:                     m.Type,
	}
}

// ManagedIdentity - The workspace managed identity
type ManagedIdentity struct {
	// The type of managed identity for the workspace
	Type *ResourceIdentityType

	// READ-ONLY; The principal ID of the workspace managed identity
	PrincipalID *string

	// READ-ONLY; The tenant ID of the workspace managed identity
	TenantID *string
}

func (m *ManagedIdentity) GetType() (rv *ResourceIdentityType) {
	if m != nil {
		return m.Type
	}
	return
}

func (m *ManagedIdentity) GetPrincipalID() (rv string) {
	if m != nil && m.PrincipalID != nil {
		return *m.PrincipalID
	}
	return
}

func (m *ManagedIdentity) GetTenantID() (rv string) {
	if m != nil && m.TenantID != nil {
		return *m.TenantID
	}
	return
}

// ManagedIntegrationRuntime - Managed integration runtime, including managed elastic and managed dedicated integration runtimes.
type ManagedIntegrationRuntime struct {
	// REQUIRED; Type of integration runtime.
	Type *IntegrationRuntimeType

	// REQUIRED; Managed integration runtime properties.
	TypeProperties *ManagedIntegrationRuntimeTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Integration runtime description.
	Description *string

	// Managed Virtual Network reference.
	ManagedVirtualNetwork *ManagedVirtualNetworkReference

	// READ-ONLY; Integration runtime state, only valid for managed dedicated integration runtime.
	State *IntegrationRuntimeState
}

func (m *ManagedIntegrationRuntime) GetType() (rv *IntegrationRuntimeType) {
	if m != nil {
		return m.Type
	}
	return
}

func (m *ManagedIntegrationRuntime) GetTypeProperties() (rv *ManagedIntegrationRuntimeTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

func (m *ManagedIntegrationRuntime) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *ManagedIntegrationRuntime) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *ManagedIntegrationRuntime) GetManagedVirtualNetwork() (rv *ManagedVirtualNetworkReference) {
	if m != nil {
		return m.ManagedVirtualNetwork
	}
	return
}

func (m *ManagedIntegrationRuntime) GetState() (rv *IntegrationRuntimeState) {
	if m != nil {
		return m.State
	}
	return
}

// GetIntegrationRuntime implements the IntegrationRuntimeClassification interface for type ManagedIntegrationRuntime.
func (m *ManagedIntegrationRuntime) GetIntegrationRuntime() *IntegrationRuntime {
	return &IntegrationRuntime{
		AdditionalProperties: m.AdditionalProperties,
		Description:          m.Description,
		Type:                 m.Type,
	}
}

// ManagedIntegrationRuntimeTypeProperties - Managed integration runtime type properties.
type ManagedIntegrationRuntimeTypeProperties struct {
	// The compute resource for managed integration runtime.
	ComputeProperties *IntegrationRuntimeComputeProperties

	// SSIS properties for managed integration runtime.
	SsisProperties *IntegrationRuntimeSsisProperties
}

func (m *ManagedIntegrationRuntimeTypeProperties) GetComputeProperties() (rv *IntegrationRuntimeComputeProperties) {
	if m != nil {
		return m.ComputeProperties
	}
	return
}

func (m *ManagedIntegrationRuntimeTypeProperties) GetSsisProperties() (rv *IntegrationRuntimeSsisProperties) {
	if m != nil {
		return m.SsisProperties
	}
	return
}

// ManagedVirtualNetworkReference - Managed Virtual Network reference type.
type ManagedVirtualNetworkReference struct {
	// REQUIRED; Reference ManagedVirtualNetwork name.
	ReferenceName *string

	// REQUIRED; Managed Virtual Network reference type.
	Type *ManagedVirtualNetworkReferenceType
}

func (m *ManagedVirtualNetworkReference) GetReferenceName() (rv string) {
	if m != nil && m.ReferenceName != nil {
		return *m.ReferenceName
	}
	return
}

func (m *ManagedVirtualNetworkReference) GetType() (rv *ManagedVirtualNetworkReferenceType) {
	if m != nil {
		return m.Type
	}
	return
}

// ManagedVirtualNetworkSettings - Managed Virtual Network Settings
type ManagedVirtualNetworkSettings struct {
	// Allowed Aad Tenant Ids For Linking
	AllowedAADTenantIDsForLinking []*string

	// Linked Access Check On Target Resource
	LinkedAccessCheckOnTargetResource *bool

	// Prevent Data Exfiltration
	PreventDataExfiltration *bool
}

func (m *ManagedVirtualNetworkSettings) GetAllowedAADTenantIDsForLinking() (rv []*string) {
	if m != nil {
		return m.AllowedAADTenantIDsForLinking
	}
	return
}

func (m *ManagedVirtualNetworkSettings) GetLinkedAccessCheckOnTargetResource() (rv bool) {
	if m != nil && m.LinkedAccessCheckOnTargetResource != nil {
		return *m.LinkedAccessCheckOnTargetResource
	}
	return
}

func (m *ManagedVirtualNetworkSettings) GetPreventDataExfiltration() (rv bool) {
	if m != nil && m.PreventDataExfiltration != nil {
		return *m.PreventDataExfiltration
	}
	return
}

// MappingDataFlow - Mapping data flow.
type MappingDataFlow struct {
	// REQUIRED; Type of data flow.
	Type *string

	// List of tags that can be used for describing the data flow.
	Annotations []any

	// The description of the data flow.
	Description *string

	// The folder that this data flow is in. If not specified, Data flow will appear at the root level.
	Folder *DataFlowFolder

	// Mapping data flow type properties.
	TypeProperties *MappingDataFlowTypeProperties
}

func (m *MappingDataFlow) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MappingDataFlow) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MappingDataFlow) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MappingDataFlow) GetFolder() (rv *DataFlowFolder) {
	if m != nil {
		return m.Folder
	}
	return
}

func (m *MappingDataFlow) GetTypeProperties() (rv *MappingDataFlowTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

// GetDataFlow implements the DataFlowClassification interface for type MappingDataFlow.
func (m *MappingDataFlow) GetDataFlow() *DataFlow {
	return &DataFlow{
		Annotations: m.Annotations,
		Description: m.Description,
		Folder:      m.Folder,
		Type:        m.Type,
	}
}

// MappingDataFlowTypeProperties - Mapping data flow type properties.
type MappingDataFlowTypeProperties struct {
	// DataFlow script.
	Script *string

	// Data flow script lines.
	ScriptLines []*string

	// List of sinks in data flow.
	Sinks []*DataFlowSink

	// List of sources in data flow.
	Sources []*DataFlowSource

	// List of transformations in data flow.
	Transformations []*Transformation
}

func (m *MappingDataFlowTypeProperties) GetScript() (rv string) {
	if m != nil && m.Script != nil {
		return *m.Script
	}
	return
}

func (m *MappingDataFlowTypeProperties) GetScriptLines() (rv []*string) {
	if m != nil {
		return m.ScriptLines
	}
	return
}

func (m *MappingDataFlowTypeProperties) GetSinks() (rv []*DataFlowSink) {
	if m != nil {
		return m.Sinks
	}
	return
}

func (m *MappingDataFlowTypeProperties) GetSources() (rv []*DataFlowSource) {
	if m != nil {
		return m.Sources
	}
	return
}

func (m *MappingDataFlowTypeProperties) GetTransformations() (rv []*Transformation) {
	if m != nil {
		return m.Transformations
	}
	return
}

// MariaDBLinkedService - MariaDB server linked service.
type MariaDBLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; MariaDB server linked service properties.
	TypeProperties *MariaDBLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (m *MariaDBLinkedService) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MariaDBLinkedService) GetTypeProperties() (rv *MariaDBLinkedServiceTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

func (m *MariaDBLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MariaDBLinkedService) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MariaDBLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if m != nil {
		return m.ConnectVia
	}
	return
}

func (m *MariaDBLinkedService) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MariaDBLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type MariaDBLinkedService.
func (m *MariaDBLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		ConnectVia:           m.ConnectVia,
		Description:          m.Description,
		Parameters:           m.Parameters,
		Type:                 m.Type,
	}
}

// MariaDBLinkedServiceTypeProperties - MariaDB server linked service properties.
type MariaDBLinkedServiceTypeProperties struct {
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference
}

func (m *MariaDBLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if m != nil {
		return m.ConnectionString
	}
	return
}

func (m *MariaDBLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if m != nil {
		return m.EncryptedCredential
	}
	return
}

func (m *MariaDBLinkedServiceTypeProperties) GetPwd() (rv *AzureKeyVaultSecretReference) {
	if m != nil {
		return m.Pwd
	}
	return
}

// MariaDBSource - A copy activity MariaDB server source.
type MariaDBSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (m *MariaDBSource) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MariaDBSource) GetAdditionalColumns() (rv any) {
	if m != nil {
		return m.AdditionalColumns
	}
	return
}

func (m *MariaDBSource) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MariaDBSource) GetMaxConcurrentConnections() (rv any) {
	if m != nil {
		return m.MaxConcurrentConnections
	}
	return
}

func (m *MariaDBSource) GetQuery() (rv any) {
	if m != nil {
		return m.Query
	}
	return
}

func (m *MariaDBSource) GetQueryTimeout() (rv any) {
	if m != nil {
		return m.QueryTimeout
	}
	return
}

func (m *MariaDBSource) GetSourceRetryCount() (rv any) {
	if m != nil {
		return m.SourceRetryCount
	}
	return
}

func (m *MariaDBSource) GetSourceRetryWait() (rv any) {
	if m != nil {
		return m.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type MariaDBSource.
func (m *MariaDBSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     m.AdditionalProperties,
		MaxConcurrentConnections: m.MaxConcurrentConnections,
		SourceRetryCount:         m.SourceRetryCount,
		SourceRetryWait:          m.SourceRetryWait,
		Type:                     m.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type MariaDBSource.
func (m *MariaDBSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        m.AdditionalColumns,
		AdditionalProperties:     m.AdditionalProperties,
		MaxConcurrentConnections: m.MaxConcurrentConnections,
		QueryTimeout:             m.QueryTimeout,
		SourceRetryCount:         m.SourceRetryCount,
		SourceRetryWait:          m.SourceRetryWait,
		Type:                     m.Type,
	}
}

// MariaDBTableDataset - MariaDB server dataset.
type MariaDBTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (m *MariaDBTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if m != nil {
		return m.LinkedServiceName
	}
	return
}

func (m *MariaDBTableDataset) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MariaDBTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MariaDBTableDataset) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MariaDBTableDataset) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MariaDBTableDataset) GetFolder() (rv *DatasetFolder) {
	if m != nil {
		return m.Folder
	}
	return
}

func (m *MariaDBTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

func (m *MariaDBTableDataset) GetSchema() (rv any) {
	if m != nil {
		return m.Schema
	}
	return
}

func (m *MariaDBTableDataset) GetStructure() (rv any) {
	if m != nil {
		return m.Structure
	}
	return
}

func (m *MariaDBTableDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type MariaDBTableDataset.
func (m *MariaDBTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		Description:          m.Description,
		Folder:               m.Folder,
		LinkedServiceName:    m.LinkedServiceName,
		Parameters:           m.Parameters,
		Schema:               m.Schema,
		Structure:            m.Structure,
		Type:                 m.Type,
	}
}

// MarketoLinkedService - Marketo server linked service.
type MarketoLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Marketo server linked service properties.
	TypeProperties *MarketoLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (m *MarketoLinkedService) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MarketoLinkedService) GetTypeProperties() (rv *MarketoLinkedServiceTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

func (m *MarketoLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MarketoLinkedService) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MarketoLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if m != nil {
		return m.ConnectVia
	}
	return
}

func (m *MarketoLinkedService) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MarketoLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type MarketoLinkedService.
func (m *MarketoLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		ConnectVia:           m.ConnectVia,
		Description:          m.Description,
		Parameters:           m.Parameters,
		Type:                 m.Type,
	}
}

// MarketoLinkedServiceTypeProperties - Marketo server linked service properties.
type MarketoLinkedServiceTypeProperties struct {
	// REQUIRED; The client Id of your Marketo service.
	ClientID any

	// REQUIRED; The endpoint of the Marketo server. (i.e. 123-ABC-321.mktorest.com)
	Endpoint any

	// The client secret of your Marketo service.
	ClientSecret SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true.
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification any
}

func (m *MarketoLinkedServiceTypeProperties) GetClientID() (rv any) {
	if m != nil {
		return m.ClientID
	}
	return
}

func (m *MarketoLinkedServiceTypeProperties) GetEndpoint() (rv any) {
	if m != nil {
		return m.Endpoint
	}
	return
}

func (m *MarketoLinkedServiceTypeProperties) GetClientSecret() (rv SecretBaseClassification) {
	if m != nil {
		return m.ClientSecret
	}
	return
}

func (m *MarketoLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if m != nil {
		return m.EncryptedCredential
	}
	return
}

func (m *MarketoLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if m != nil {
		return m.UseEncryptedEndpoints
	}
	return
}

func (m *MarketoLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if m != nil {
		return m.UseHostVerification
	}
	return
}

func (m *MarketoLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if m != nil {
		return m.UsePeerVerification
	}
	return
}

// MarketoObjectDataset - Marketo server dataset.
type MarketoObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (m *MarketoObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if m != nil {
		return m.LinkedServiceName
	}
	return
}

func (m *MarketoObjectDataset) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MarketoObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MarketoObjectDataset) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MarketoObjectDataset) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MarketoObjectDataset) GetFolder() (rv *DatasetFolder) {
	if m != nil {
		return m.Folder
	}
	return
}

func (m *MarketoObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

func (m *MarketoObjectDataset) GetSchema() (rv any) {
	if m != nil {
		return m.Schema
	}
	return
}

func (m *MarketoObjectDataset) GetStructure() (rv any) {
	if m != nil {
		return m.Structure
	}
	return
}

func (m *MarketoObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type MarketoObjectDataset.
func (m *MarketoObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		Description:          m.Description,
		Folder:               m.Folder,
		LinkedServiceName:    m.LinkedServiceName,
		Parameters:           m.Parameters,
		Schema:               m.Schema,
		Structure:            m.Structure,
		Type:                 m.Type,
	}
}

// MarketoSource - A copy activity Marketo server source.
type MarketoSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (m *MarketoSource) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MarketoSource) GetAdditionalColumns() (rv any) {
	if m != nil {
		return m.AdditionalColumns
	}
	return
}

func (m *MarketoSource) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MarketoSource) GetMaxConcurrentConnections() (rv any) {
	if m != nil {
		return m.MaxConcurrentConnections
	}
	return
}

func (m *MarketoSource) GetQuery() (rv any) {
	if m != nil {
		return m.Query
	}
	return
}

func (m *MarketoSource) GetQueryTimeout() (rv any) {
	if m != nil {
		return m.QueryTimeout
	}
	return
}

func (m *MarketoSource) GetSourceRetryCount() (rv any) {
	if m != nil {
		return m.SourceRetryCount
	}
	return
}

func (m *MarketoSource) GetSourceRetryWait() (rv any) {
	if m != nil {
		return m.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type MarketoSource.
func (m *MarketoSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     m.AdditionalProperties,
		MaxConcurrentConnections: m.MaxConcurrentConnections,
		SourceRetryCount:         m.SourceRetryCount,
		SourceRetryWait:          m.SourceRetryWait,
		Type:                     m.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type MarketoSource.
func (m *MarketoSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        m.AdditionalColumns,
		AdditionalProperties:     m.AdditionalProperties,
		MaxConcurrentConnections: m.MaxConcurrentConnections,
		QueryTimeout:             m.QueryTimeout,
		SourceRetryCount:         m.SourceRetryCount,
		SourceRetryWait:          m.SourceRetryWait,
		Type:                     m.Type,
	}
}

type MetastoreRegisterObject struct {
	// REQUIRED; The input folder containing CDM files.
	InputFolder *string
}

func (m *MetastoreRegisterObject) GetInputFolder() (rv string) {
	if m != nil && m.InputFolder != nil {
		return *m.InputFolder
	}
	return
}

type MetastoreRegistrationResponse struct {
	// Enumerates possible request statuses.
	Status *RequestStatus
}

func (m *MetastoreRegistrationResponse) GetStatus() (rv *RequestStatus) {
	if m != nil {
		return m.Status
	}
	return
}

type MetastoreRequestSuccessResponse struct {
	// Enumerates possible Status of the resource.
	Status *ResourceStatus
}

func (m *MetastoreRequestSuccessResponse) GetStatus() (rv *ResourceStatus) {
	if m != nil {
		return m.Status
	}
	return
}

type MetastoreUpdateObject struct {
	// REQUIRED; The input folder containing CDM files.
	InputFolder *string
}

func (m *MetastoreUpdateObject) GetInputFolder() (rv string) {
	if m != nil && m.InputFolder != nil {
		return *m.InputFolder
	}
	return
}

type MetastoreUpdationResponse struct {
	// Enumerates possible request statuses.
	Status *RequestStatus
}

func (m *MetastoreUpdationResponse) GetStatus() (rv *RequestStatus) {
	if m != nil {
		return m.Status
	}
	return
}

// MicrosoftAccessLinkedService - Microsoft Access linked service.
type MicrosoftAccessLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Microsoft Access linked service properties.
	TypeProperties *MicrosoftAccessLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (m *MicrosoftAccessLinkedService) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MicrosoftAccessLinkedService) GetTypeProperties() (rv *MicrosoftAccessLinkedServiceTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

func (m *MicrosoftAccessLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MicrosoftAccessLinkedService) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MicrosoftAccessLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if m != nil {
		return m.ConnectVia
	}
	return
}

func (m *MicrosoftAccessLinkedService) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MicrosoftAccessLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type MicrosoftAccessLinkedService.
func (m *MicrosoftAccessLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		ConnectVia:           m.ConnectVia,
		Description:          m.Description,
		Parameters:           m.Parameters,
		Type:                 m.Type,
	}
}

// MicrosoftAccessLinkedServiceTypeProperties - Microsoft Access linked service properties.
type MicrosoftAccessLinkedServiceTypeProperties struct {
	// REQUIRED; The non-access credential portion of the connection string as well as an optional encrypted credential. Type:
	// string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// Type of authentication used to connect to the Microsoft Access as ODBC data store. Possible values are: Anonymous and Basic.
	// Type: string (or Expression with resultType string).
	AuthenticationType any

	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password for Basic authentication.
	Password SecretBaseClassification

	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName any
}

func (m *MicrosoftAccessLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if m != nil {
		return m.ConnectionString
	}
	return
}

func (m *MicrosoftAccessLinkedServiceTypeProperties) GetAuthenticationType() (rv any) {
	if m != nil {
		return m.AuthenticationType
	}
	return
}

func (m *MicrosoftAccessLinkedServiceTypeProperties) GetCredential() (rv SecretBaseClassification) {
	if m != nil {
		return m.Credential
	}
	return
}

func (m *MicrosoftAccessLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if m != nil {
		return m.EncryptedCredential
	}
	return
}

func (m *MicrosoftAccessLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if m != nil {
		return m.Password
	}
	return
}

func (m *MicrosoftAccessLinkedServiceTypeProperties) GetUserName() (rv any) {
	if m != nil {
		return m.UserName
	}
	return
}

// MicrosoftAccessSink - A copy activity Microsoft Access sink.
type MicrosoftAccessSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (m *MicrosoftAccessSink) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MicrosoftAccessSink) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MicrosoftAccessSink) GetMaxConcurrentConnections() (rv any) {
	if m != nil {
		return m.MaxConcurrentConnections
	}
	return
}

func (m *MicrosoftAccessSink) GetPreCopyScript() (rv any) {
	if m != nil {
		return m.PreCopyScript
	}
	return
}

func (m *MicrosoftAccessSink) GetSinkRetryCount() (rv any) {
	if m != nil {
		return m.SinkRetryCount
	}
	return
}

func (m *MicrosoftAccessSink) GetSinkRetryWait() (rv any) {
	if m != nil {
		return m.SinkRetryWait
	}
	return
}

func (m *MicrosoftAccessSink) GetWriteBatchSize() (rv any) {
	if m != nil {
		return m.WriteBatchSize
	}
	return
}

func (m *MicrosoftAccessSink) GetWriteBatchTimeout() (rv any) {
	if m != nil {
		return m.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type MicrosoftAccessSink.
func (m *MicrosoftAccessSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     m.AdditionalProperties,
		MaxConcurrentConnections: m.MaxConcurrentConnections,
		SinkRetryCount:           m.SinkRetryCount,
		SinkRetryWait:            m.SinkRetryWait,
		Type:                     m.Type,
		WriteBatchSize:           m.WriteBatchSize,
		WriteBatchTimeout:        m.WriteBatchTimeout,
	}
}

// MicrosoftAccessSource - A copy activity source for Microsoft Access.
type MicrosoftAccessSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Type: string (or Expression with resultType string).
	Query any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (m *MicrosoftAccessSource) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MicrosoftAccessSource) GetAdditionalColumns() (rv any) {
	if m != nil {
		return m.AdditionalColumns
	}
	return
}

func (m *MicrosoftAccessSource) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MicrosoftAccessSource) GetMaxConcurrentConnections() (rv any) {
	if m != nil {
		return m.MaxConcurrentConnections
	}
	return
}

func (m *MicrosoftAccessSource) GetQuery() (rv any) {
	if m != nil {
		return m.Query
	}
	return
}

func (m *MicrosoftAccessSource) GetSourceRetryCount() (rv any) {
	if m != nil {
		return m.SourceRetryCount
	}
	return
}

func (m *MicrosoftAccessSource) GetSourceRetryWait() (rv any) {
	if m != nil {
		return m.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type MicrosoftAccessSource.
func (m *MicrosoftAccessSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     m.AdditionalProperties,
		MaxConcurrentConnections: m.MaxConcurrentConnections,
		SourceRetryCount:         m.SourceRetryCount,
		SourceRetryWait:          m.SourceRetryWait,
		Type:                     m.Type,
	}
}

// MicrosoftAccessTableDataset - The Microsoft Access table dataset.
type MicrosoftAccessTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Microsoft Access table dataset properties.
	TypeProperties *MicrosoftAccessTableDatasetTypeProperties
}

func (m *MicrosoftAccessTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if m != nil {
		return m.LinkedServiceName
	}
	return
}

func (m *MicrosoftAccessTableDataset) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MicrosoftAccessTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MicrosoftAccessTableDataset) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MicrosoftAccessTableDataset) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MicrosoftAccessTableDataset) GetFolder() (rv *DatasetFolder) {
	if m != nil {
		return m.Folder
	}
	return
}

func (m *MicrosoftAccessTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

func (m *MicrosoftAccessTableDataset) GetSchema() (rv any) {
	if m != nil {
		return m.Schema
	}
	return
}

func (m *MicrosoftAccessTableDataset) GetStructure() (rv any) {
	if m != nil {
		return m.Structure
	}
	return
}

func (m *MicrosoftAccessTableDataset) GetTypeProperties() (rv *MicrosoftAccessTableDatasetTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type MicrosoftAccessTableDataset.
func (m *MicrosoftAccessTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		Description:          m.Description,
		Folder:               m.Folder,
		LinkedServiceName:    m.LinkedServiceName,
		Parameters:           m.Parameters,
		Schema:               m.Schema,
		Structure:            m.Structure,
		Type:                 m.Type,
	}
}

// MicrosoftAccessTableDatasetTypeProperties - Microsoft Access table dataset properties.
type MicrosoftAccessTableDatasetTypeProperties struct {
	// The Microsoft Access table name. Type: string (or Expression with resultType string).
	TableName any
}

func (m *MicrosoftAccessTableDatasetTypeProperties) GetTableName() (rv any) {
	if m != nil {
		return m.TableName
	}
	return
}

// MongoDbAtlasCollectionDataset - The MongoDB Atlas database dataset.
type MongoDbAtlasCollectionDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; MongoDB Atlas database dataset properties.
	TypeProperties *MongoDbAtlasCollectionDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (m *MongoDbAtlasCollectionDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if m != nil {
		return m.LinkedServiceName
	}
	return
}

func (m *MongoDbAtlasCollectionDataset) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MongoDbAtlasCollectionDataset) GetTypeProperties() (rv *MongoDbAtlasCollectionDatasetTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

func (m *MongoDbAtlasCollectionDataset) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MongoDbAtlasCollectionDataset) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MongoDbAtlasCollectionDataset) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MongoDbAtlasCollectionDataset) GetFolder() (rv *DatasetFolder) {
	if m != nil {
		return m.Folder
	}
	return
}

func (m *MongoDbAtlasCollectionDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

func (m *MongoDbAtlasCollectionDataset) GetSchema() (rv any) {
	if m != nil {
		return m.Schema
	}
	return
}

func (m *MongoDbAtlasCollectionDataset) GetStructure() (rv any) {
	if m != nil {
		return m.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type MongoDbAtlasCollectionDataset.
func (m *MongoDbAtlasCollectionDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		Description:          m.Description,
		Folder:               m.Folder,
		LinkedServiceName:    m.LinkedServiceName,
		Parameters:           m.Parameters,
		Schema:               m.Schema,
		Structure:            m.Structure,
		Type:                 m.Type,
	}
}

// MongoDbAtlasCollectionDatasetTypeProperties - MongoDB Atlas database dataset properties.
type MongoDbAtlasCollectionDatasetTypeProperties struct {
	// REQUIRED; The collection name of the MongoDB Atlas database. Type: string (or Expression with resultType string).
	Collection any
}

func (m *MongoDbAtlasCollectionDatasetTypeProperties) GetCollection() (rv any) {
	if m != nil {
		return m.Collection
	}
	return
}

// MongoDbAtlasLinkedService - Linked service for MongoDB Atlas data source.
type MongoDbAtlasLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; MongoDB Atlas linked service properties.
	TypeProperties *MongoDbAtlasLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (m *MongoDbAtlasLinkedService) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MongoDbAtlasLinkedService) GetTypeProperties() (rv *MongoDbAtlasLinkedServiceTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

func (m *MongoDbAtlasLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MongoDbAtlasLinkedService) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MongoDbAtlasLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if m != nil {
		return m.ConnectVia
	}
	return
}

func (m *MongoDbAtlasLinkedService) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MongoDbAtlasLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type MongoDbAtlasLinkedService.
func (m *MongoDbAtlasLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		ConnectVia:           m.ConnectVia,
		Description:          m.Description,
		Parameters:           m.Parameters,
		Type:                 m.Type,
	}
}

// MongoDbAtlasLinkedServiceTypeProperties - MongoDB Atlas linked service properties.
type MongoDbAtlasLinkedServiceTypeProperties struct {
	// REQUIRED; The MongoDB Atlas connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string,
	// SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// REQUIRED; The name of the MongoDB Atlas database that you want to access. Type: string (or Expression with resultType string).
	Database any
}

func (m *MongoDbAtlasLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if m != nil {
		return m.ConnectionString
	}
	return
}

func (m *MongoDbAtlasLinkedServiceTypeProperties) GetDatabase() (rv any) {
	if m != nil {
		return m.Database
	}
	return
}

// MongoDbAtlasSource - A copy activity source for a MongoDB Atlas database.
type MongoDbAtlasSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies the number of documents to return in each batch of the response from MongoDB Atlas instance. In most cases, modifying
	// the batch size will not affect the user or the application. This
	// property's main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize any

	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsProperties

	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass
	// an empty document ({}). Type: string (or Expression with resultType string).
	Filter any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (m *MongoDbAtlasSource) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MongoDbAtlasSource) GetAdditionalColumns() (rv any) {
	if m != nil {
		return m.AdditionalColumns
	}
	return
}

func (m *MongoDbAtlasSource) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MongoDbAtlasSource) GetBatchSize() (rv any) {
	if m != nil {
		return m.BatchSize
	}
	return
}

func (m *MongoDbAtlasSource) GetCursorMethods() (rv *MongoDbCursorMethodsProperties) {
	if m != nil {
		return m.CursorMethods
	}
	return
}

func (m *MongoDbAtlasSource) GetFilter() (rv any) {
	if m != nil {
		return m.Filter
	}
	return
}

func (m *MongoDbAtlasSource) GetMaxConcurrentConnections() (rv any) {
	if m != nil {
		return m.MaxConcurrentConnections
	}
	return
}

func (m *MongoDbAtlasSource) GetQueryTimeout() (rv any) {
	if m != nil {
		return m.QueryTimeout
	}
	return
}

func (m *MongoDbAtlasSource) GetSourceRetryCount() (rv any) {
	if m != nil {
		return m.SourceRetryCount
	}
	return
}

func (m *MongoDbAtlasSource) GetSourceRetryWait() (rv any) {
	if m != nil {
		return m.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type MongoDbAtlasSource.
func (m *MongoDbAtlasSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     m.AdditionalProperties,
		MaxConcurrentConnections: m.MaxConcurrentConnections,
		SourceRetryCount:         m.SourceRetryCount,
		SourceRetryWait:          m.SourceRetryWait,
		Type:                     m.Type,
	}
}

// MongoDbCollectionDataset - The MongoDB database dataset.
type MongoDbCollectionDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; MongoDB database dataset properties.
	TypeProperties *MongoDbCollectionDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (m *MongoDbCollectionDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if m != nil {
		return m.LinkedServiceName
	}
	return
}

func (m *MongoDbCollectionDataset) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MongoDbCollectionDataset) GetTypeProperties() (rv *MongoDbCollectionDatasetTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

func (m *MongoDbCollectionDataset) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MongoDbCollectionDataset) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MongoDbCollectionDataset) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MongoDbCollectionDataset) GetFolder() (rv *DatasetFolder) {
	if m != nil {
		return m.Folder
	}
	return
}

func (m *MongoDbCollectionDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

func (m *MongoDbCollectionDataset) GetSchema() (rv any) {
	if m != nil {
		return m.Schema
	}
	return
}

func (m *MongoDbCollectionDataset) GetStructure() (rv any) {
	if m != nil {
		return m.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type MongoDbCollectionDataset.
func (m *MongoDbCollectionDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		Description:          m.Description,
		Folder:               m.Folder,
		LinkedServiceName:    m.LinkedServiceName,
		Parameters:           m.Parameters,
		Schema:               m.Schema,
		Structure:            m.Structure,
		Type:                 m.Type,
	}
}

// MongoDbCollectionDatasetTypeProperties - MongoDB database dataset properties.
type MongoDbCollectionDatasetTypeProperties struct {
	// REQUIRED; The table name of the MongoDB database. Type: string (or Expression with resultType string).
	CollectionName any
}

func (m *MongoDbCollectionDatasetTypeProperties) GetCollectionName() (rv any) {
	if m != nil {
		return m.CollectionName
	}
	return
}

// MongoDbCursorMethodsProperties - Cursor methods for Mongodb query
type MongoDbCursorMethodsProperties struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies the maximum number of documents the server returns. limit() is analogous to the LIMIT statement in a SQL database.
	// Type: integer (or Expression with resultType integer).
	Limit any

	// Specifies the fields to return in the documents that match the query filter. To return all fields in the matching documents,
	// omit this parameter. Type: string (or Expression with resultType string).
	Project any

	// Specifies the how many documents skipped and where MongoDB begins returning results. This approach may be useful in implementing
	// paginated results. Type: integer (or Expression with resultType
	// integer).
	Skip any

	// Specifies the order in which the query returns matching documents. Type: string (or Expression with resultType string).
	// Type: string (or Expression with resultType string).
	Sort any
}

func (m *MongoDbCursorMethodsProperties) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MongoDbCursorMethodsProperties) GetLimit() (rv any) {
	if m != nil {
		return m.Limit
	}
	return
}

func (m *MongoDbCursorMethodsProperties) GetProject() (rv any) {
	if m != nil {
		return m.Project
	}
	return
}

func (m *MongoDbCursorMethodsProperties) GetSkip() (rv any) {
	if m != nil {
		return m.Skip
	}
	return
}

func (m *MongoDbCursorMethodsProperties) GetSort() (rv any) {
	if m != nil {
		return m.Sort
	}
	return
}

// MongoDbLinkedService - Linked service for MongoDb data source.
type MongoDbLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; MongoDB linked service properties.
	TypeProperties *MongoDbLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (m *MongoDbLinkedService) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MongoDbLinkedService) GetTypeProperties() (rv *MongoDbLinkedServiceTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

func (m *MongoDbLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MongoDbLinkedService) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MongoDbLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if m != nil {
		return m.ConnectVia
	}
	return
}

func (m *MongoDbLinkedService) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MongoDbLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type MongoDbLinkedService.
func (m *MongoDbLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		ConnectVia:           m.ConnectVia,
		Description:          m.Description,
		Parameters:           m.Parameters,
		Type:                 m.Type,
	}
}

// MongoDbLinkedServiceTypeProperties - MongoDB linked service properties.
type MongoDbLinkedServiceTypeProperties struct {
	// REQUIRED; The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	DatabaseName any

	// REQUIRED; The IP address or server name of the MongoDB server. Type: string (or Expression with resultType string).
	Server any

	// Specifies whether to allow self-signed certificates from the server. The default value is false. Type: boolean (or Expression
	// with resultType boolean).
	AllowSelfSignedServerCert any

	// Database to verify the username and password. Type: string (or Expression with resultType string).
	AuthSource any

	// The authentication type to be used to connect to the MongoDB database.
	AuthenticationType *MongoDbAuthenticationType

	// Specifies whether the connections to the server are encrypted using SSL. The default value is false. Type: boolean (or
	// Expression with resultType boolean).
	EnableSSL any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password for authentication.
	Password SecretBaseClassification

	// The TCP port number that the MongoDB server uses to listen for client connections. The default value is 27017. Type: integer
	// (or Expression with resultType integer), minimum: 0.
	Port any

	// Username for authentication. Type: string (or Expression with resultType string).
	Username any
}

func (m *MongoDbLinkedServiceTypeProperties) GetDatabaseName() (rv any) {
	if m != nil {
		return m.DatabaseName
	}
	return
}

func (m *MongoDbLinkedServiceTypeProperties) GetServer() (rv any) {
	if m != nil {
		return m.Server
	}
	return
}

func (m *MongoDbLinkedServiceTypeProperties) GetAllowSelfSignedServerCert() (rv any) {
	if m != nil {
		return m.AllowSelfSignedServerCert
	}
	return
}

func (m *MongoDbLinkedServiceTypeProperties) GetAuthSource() (rv any) {
	if m != nil {
		return m.AuthSource
	}
	return
}

func (m *MongoDbLinkedServiceTypeProperties) GetAuthenticationType() (rv *MongoDbAuthenticationType) {
	if m != nil {
		return m.AuthenticationType
	}
	return
}

func (m *MongoDbLinkedServiceTypeProperties) GetEnableSSL() (rv any) {
	if m != nil {
		return m.EnableSSL
	}
	return
}

func (m *MongoDbLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if m != nil {
		return m.EncryptedCredential
	}
	return
}

func (m *MongoDbLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if m != nil {
		return m.Password
	}
	return
}

func (m *MongoDbLinkedServiceTypeProperties) GetPort() (rv any) {
	if m != nil {
		return m.Port
	}
	return
}

func (m *MongoDbLinkedServiceTypeProperties) GetUsername() (rv any) {
	if m != nil {
		return m.Username
	}
	return
}

// MongoDbSource - A copy activity source for a MongoDB database.
type MongoDbSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Should be a SQL-92 query expression. Type: string (or Expression with resultType string).
	Query any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (m *MongoDbSource) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MongoDbSource) GetAdditionalColumns() (rv any) {
	if m != nil {
		return m.AdditionalColumns
	}
	return
}

func (m *MongoDbSource) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MongoDbSource) GetMaxConcurrentConnections() (rv any) {
	if m != nil {
		return m.MaxConcurrentConnections
	}
	return
}

func (m *MongoDbSource) GetQuery() (rv any) {
	if m != nil {
		return m.Query
	}
	return
}

func (m *MongoDbSource) GetSourceRetryCount() (rv any) {
	if m != nil {
		return m.SourceRetryCount
	}
	return
}

func (m *MongoDbSource) GetSourceRetryWait() (rv any) {
	if m != nil {
		return m.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type MongoDbSource.
func (m *MongoDbSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     m.AdditionalProperties,
		MaxConcurrentConnections: m.MaxConcurrentConnections,
		SourceRetryCount:         m.SourceRetryCount,
		SourceRetryWait:          m.SourceRetryWait,
		Type:                     m.Type,
	}
}

// MongoDbV2CollectionDataset - The MongoDB database dataset.
type MongoDbV2CollectionDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; MongoDB database dataset properties.
	TypeProperties *MongoDbV2CollectionDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (m *MongoDbV2CollectionDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if m != nil {
		return m.LinkedServiceName
	}
	return
}

func (m *MongoDbV2CollectionDataset) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MongoDbV2CollectionDataset) GetTypeProperties() (rv *MongoDbV2CollectionDatasetTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

func (m *MongoDbV2CollectionDataset) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MongoDbV2CollectionDataset) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MongoDbV2CollectionDataset) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MongoDbV2CollectionDataset) GetFolder() (rv *DatasetFolder) {
	if m != nil {
		return m.Folder
	}
	return
}

func (m *MongoDbV2CollectionDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

func (m *MongoDbV2CollectionDataset) GetSchema() (rv any) {
	if m != nil {
		return m.Schema
	}
	return
}

func (m *MongoDbV2CollectionDataset) GetStructure() (rv any) {
	if m != nil {
		return m.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type MongoDbV2CollectionDataset.
func (m *MongoDbV2CollectionDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		Description:          m.Description,
		Folder:               m.Folder,
		LinkedServiceName:    m.LinkedServiceName,
		Parameters:           m.Parameters,
		Schema:               m.Schema,
		Structure:            m.Structure,
		Type:                 m.Type,
	}
}

// MongoDbV2CollectionDatasetTypeProperties - MongoDB database dataset properties.
type MongoDbV2CollectionDatasetTypeProperties struct {
	// REQUIRED; The collection name of the MongoDB database. Type: string (or Expression with resultType string).
	Collection any
}

func (m *MongoDbV2CollectionDatasetTypeProperties) GetCollection() (rv any) {
	if m != nil {
		return m.Collection
	}
	return
}

// MongoDbV2LinkedService - Linked service for MongoDB data source.
type MongoDbV2LinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; MongoDB linked service properties.
	TypeProperties *MongoDbV2LinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (m *MongoDbV2LinkedService) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MongoDbV2LinkedService) GetTypeProperties() (rv *MongoDbV2LinkedServiceTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

func (m *MongoDbV2LinkedService) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MongoDbV2LinkedService) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MongoDbV2LinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if m != nil {
		return m.ConnectVia
	}
	return
}

func (m *MongoDbV2LinkedService) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MongoDbV2LinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type MongoDbV2LinkedService.
func (m *MongoDbV2LinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		ConnectVia:           m.ConnectVia,
		Description:          m.Description,
		Parameters:           m.Parameters,
		Type:                 m.Type,
	}
}

// MongoDbV2LinkedServiceTypeProperties - MongoDB linked service properties.
type MongoDbV2LinkedServiceTypeProperties struct {
	// REQUIRED; The MongoDB connection string. Type: string, SecureString or AzureKeyVaultSecretReference. Type: string, SecureString
	// or AzureKeyVaultSecretReference.
	ConnectionString any

	// REQUIRED; The name of the MongoDB database that you want to access. Type: string (or Expression with resultType string).
	Database any
}

func (m *MongoDbV2LinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if m != nil {
		return m.ConnectionString
	}
	return
}

func (m *MongoDbV2LinkedServiceTypeProperties) GetDatabase() (rv any) {
	if m != nil {
		return m.Database
	}
	return
}

// MongoDbV2Source - A copy activity source for a MongoDB database.
type MongoDbV2Source struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies the number of documents to return in each batch of the response from MongoDB instance. In most cases, modifying
	// the batch size will not affect the user or the application. This property's
	// main purpose is to avoid hit the limitation of response size. Type: integer (or Expression with resultType integer).
	BatchSize any

	// Cursor methods for Mongodb query
	CursorMethods *MongoDbCursorMethodsProperties

	// Specifies selection filter using query operators. To return all documents in a collection, omit this parameter or pass
	// an empty document ({}). Type: string (or Expression with resultType string).
	Filter any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (m *MongoDbV2Source) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MongoDbV2Source) GetAdditionalColumns() (rv any) {
	if m != nil {
		return m.AdditionalColumns
	}
	return
}

func (m *MongoDbV2Source) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MongoDbV2Source) GetBatchSize() (rv any) {
	if m != nil {
		return m.BatchSize
	}
	return
}

func (m *MongoDbV2Source) GetCursorMethods() (rv *MongoDbCursorMethodsProperties) {
	if m != nil {
		return m.CursorMethods
	}
	return
}

func (m *MongoDbV2Source) GetFilter() (rv any) {
	if m != nil {
		return m.Filter
	}
	return
}

func (m *MongoDbV2Source) GetMaxConcurrentConnections() (rv any) {
	if m != nil {
		return m.MaxConcurrentConnections
	}
	return
}

func (m *MongoDbV2Source) GetQueryTimeout() (rv any) {
	if m != nil {
		return m.QueryTimeout
	}
	return
}

func (m *MongoDbV2Source) GetSourceRetryCount() (rv any) {
	if m != nil {
		return m.SourceRetryCount
	}
	return
}

func (m *MongoDbV2Source) GetSourceRetryWait() (rv any) {
	if m != nil {
		return m.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type MongoDbV2Source.
func (m *MongoDbV2Source) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     m.AdditionalProperties,
		MaxConcurrentConnections: m.MaxConcurrentConnections,
		SourceRetryCount:         m.SourceRetryCount,
		SourceRetryWait:          m.SourceRetryWait,
		Type:                     m.Type,
	}
}

// MultiplePipelineTrigger - Base class for all triggers that support one to many model for trigger to pipeline.
type MultiplePipelineTrigger struct {
	// REQUIRED; Trigger type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the trigger.
	Annotations []any

	// Trigger description.
	Description *string

	// Pipelines that need to be started.
	Pipelines []*TriggerPipelineReference

	// READ-ONLY; Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState *TriggerRuntimeState
}

func (m *MultiplePipelineTrigger) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MultiplePipelineTrigger) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MultiplePipelineTrigger) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MultiplePipelineTrigger) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MultiplePipelineTrigger) GetPipelines() (rv []*TriggerPipelineReference) {
	if m != nil {
		return m.Pipelines
	}
	return
}

func (m *MultiplePipelineTrigger) GetRuntimeState() (rv *TriggerRuntimeState) {
	if m != nil {
		return m.RuntimeState
	}
	return
}

// GetMultiplePipelineTrigger implements the MultiplePipelineTriggerClassification interface for type MultiplePipelineTrigger.
func (m *MultiplePipelineTrigger) GetMultiplePipelineTrigger() *MultiplePipelineTrigger { return m }

// GetTrigger implements the TriggerClassification interface for type MultiplePipelineTrigger.
func (m *MultiplePipelineTrigger) GetTrigger() *Trigger {
	return &Trigger{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		Description:          m.Description,
		RuntimeState:         m.RuntimeState,
		Type:                 m.Type,
	}
}

// MySQLLinkedService - Linked service for MySQL data source.
type MySQLLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; MySQL linked service properties.
	TypeProperties *MySQLLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (m *MySQLLinkedService) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MySQLLinkedService) GetTypeProperties() (rv *MySQLLinkedServiceTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

func (m *MySQLLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MySQLLinkedService) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MySQLLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if m != nil {
		return m.ConnectVia
	}
	return
}

func (m *MySQLLinkedService) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MySQLLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type MySQLLinkedService.
func (m *MySQLLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		ConnectVia:           m.ConnectVia,
		Description:          m.Description,
		Parameters:           m.Parameters,
		Type:                 m.Type,
	}
}

// MySQLLinkedServiceTypeProperties - MySQL linked service properties.
type MySQLLinkedServiceTypeProperties struct {
	// REQUIRED; The connection string.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference
}

func (m *MySQLLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if m != nil {
		return m.ConnectionString
	}
	return
}

func (m *MySQLLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if m != nil {
		return m.EncryptedCredential
	}
	return
}

func (m *MySQLLinkedServiceTypeProperties) GetPassword() (rv *AzureKeyVaultSecretReference) {
	if m != nil {
		return m.Password
	}
	return
}

// MySQLSource - A copy activity source for MySQL databases.
type MySQLSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (m *MySQLSource) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MySQLSource) GetAdditionalColumns() (rv any) {
	if m != nil {
		return m.AdditionalColumns
	}
	return
}

func (m *MySQLSource) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MySQLSource) GetMaxConcurrentConnections() (rv any) {
	if m != nil {
		return m.MaxConcurrentConnections
	}
	return
}

func (m *MySQLSource) GetQuery() (rv any) {
	if m != nil {
		return m.Query
	}
	return
}

func (m *MySQLSource) GetQueryTimeout() (rv any) {
	if m != nil {
		return m.QueryTimeout
	}
	return
}

func (m *MySQLSource) GetSourceRetryCount() (rv any) {
	if m != nil {
		return m.SourceRetryCount
	}
	return
}

func (m *MySQLSource) GetSourceRetryWait() (rv any) {
	if m != nil {
		return m.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type MySQLSource.
func (m *MySQLSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     m.AdditionalProperties,
		MaxConcurrentConnections: m.MaxConcurrentConnections,
		SourceRetryCount:         m.SourceRetryCount,
		SourceRetryWait:          m.SourceRetryWait,
		Type:                     m.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type MySQLSource.
func (m *MySQLSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        m.AdditionalColumns,
		AdditionalProperties:     m.AdditionalProperties,
		MaxConcurrentConnections: m.MaxConcurrentConnections,
		QueryTimeout:             m.QueryTimeout,
		SourceRetryCount:         m.SourceRetryCount,
		SourceRetryWait:          m.SourceRetryWait,
		Type:                     m.Type,
	}
}

// MySQLTableDataset - The MySQL table dataset.
type MySQLTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// MySQL table dataset properties.
	TypeProperties *MySQLTableDatasetTypeProperties
}

func (m *MySQLTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if m != nil {
		return m.LinkedServiceName
	}
	return
}

func (m *MySQLTableDataset) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

func (m *MySQLTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if m != nil {
		return m.AdditionalProperties
	}
	return
}

func (m *MySQLTableDataset) GetAnnotations() (rv []any) {
	if m != nil {
		return m.Annotations
	}
	return
}

func (m *MySQLTableDataset) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *MySQLTableDataset) GetFolder() (rv *DatasetFolder) {
	if m != nil {
		return m.Folder
	}
	return
}

func (m *MySQLTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if m != nil {
		return m.Parameters
	}
	return
}

func (m *MySQLTableDataset) GetSchema() (rv any) {
	if m != nil {
		return m.Schema
	}
	return
}

func (m *MySQLTableDataset) GetStructure() (rv any) {
	if m != nil {
		return m.Structure
	}
	return
}

func (m *MySQLTableDataset) GetTypeProperties() (rv *MySQLTableDatasetTypeProperties) {
	if m != nil {
		return m.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type MySQLTableDataset.
func (m *MySQLTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: m.AdditionalProperties,
		Annotations:          m.Annotations,
		Description:          m.Description,
		Folder:               m.Folder,
		LinkedServiceName:    m.LinkedServiceName,
		Parameters:           m.Parameters,
		Schema:               m.Schema,
		Structure:            m.Structure,
		Type:                 m.Type,
	}
}

// MySQLTableDatasetTypeProperties - MySql table dataset properties.
type MySQLTableDatasetTypeProperties struct {
	// The MySQL table name. Type: string (or Expression with resultType string).
	TableName any
}

func (m *MySQLTableDatasetTypeProperties) GetTableName() (rv any) {
	if m != nil {
		return m.TableName
	}
	return
}

// NetezzaLinkedService - Netezza linked service.
type NetezzaLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Netezza linked service properties.
	TypeProperties *NetezzaLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (n *NetezzaLinkedService) GetType() (rv string) {
	if n != nil && n.Type != nil {
		return *n.Type
	}
	return
}

func (n *NetezzaLinkedService) GetTypeProperties() (rv *NetezzaLinkedServiceTypeProperties) {
	if n != nil {
		return n.TypeProperties
	}
	return
}

func (n *NetezzaLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if n != nil {
		return n.AdditionalProperties
	}
	return
}

func (n *NetezzaLinkedService) GetAnnotations() (rv []any) {
	if n != nil {
		return n.Annotations
	}
	return
}

func (n *NetezzaLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if n != nil {
		return n.ConnectVia
	}
	return
}

func (n *NetezzaLinkedService) GetDescription() (rv string) {
	if n != nil && n.Description != nil {
		return *n.Description
	}
	return
}

func (n *NetezzaLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if n != nil {
		return n.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type NetezzaLinkedService.
func (n *NetezzaLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: n.AdditionalProperties,
		Annotations:          n.Annotations,
		ConnectVia:           n.ConnectVia,
		Description:          n.Description,
		Parameters:           n.Parameters,
		Type:                 n.Type,
	}
}

// NetezzaLinkedServiceTypeProperties - Netezza linked service properties.
type NetezzaLinkedServiceTypeProperties struct {
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference
}

func (n *NetezzaLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if n != nil {
		return n.ConnectionString
	}
	return
}

func (n *NetezzaLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if n != nil {
		return n.EncryptedCredential
	}
	return
}

func (n *NetezzaLinkedServiceTypeProperties) GetPwd() (rv *AzureKeyVaultSecretReference) {
	if n != nil {
		return n.Pwd
	}
	return
}

// NetezzaPartitionSettings - The settings that will be leveraged for Netezza source partitioning.
type NetezzaPartitionSettings struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression
	// with resultType string).
	PartitionColumnName any

	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type:
	// string (or Expression with resultType string).
	PartitionLowerBound any

	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type:
	// string (or Expression with resultType string).
	PartitionUpperBound any
}

func (n *NetezzaPartitionSettings) GetPartitionColumnName() (rv any) {
	if n != nil {
		return n.PartitionColumnName
	}
	return
}

func (n *NetezzaPartitionSettings) GetPartitionLowerBound() (rv any) {
	if n != nil {
		return n.PartitionLowerBound
	}
	return
}

func (n *NetezzaPartitionSettings) GetPartitionUpperBound() (rv any) {
	if n != nil {
		return n.PartitionUpperBound
	}
	return
}

// NetezzaSource - A copy activity Netezza source.
type NetezzaSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The partition mechanism that will be used for Netezza read in parallel.
	PartitionOption *NetezzaPartitionOption

	// The settings that will be leveraged for Netezza source partitioning.
	PartitionSettings *NetezzaPartitionSettings

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (n *NetezzaSource) GetType() (rv string) {
	if n != nil && n.Type != nil {
		return *n.Type
	}
	return
}

func (n *NetezzaSource) GetAdditionalColumns() (rv any) {
	if n != nil {
		return n.AdditionalColumns
	}
	return
}

func (n *NetezzaSource) GetAdditionalProperties() (rv map[string]any) {
	if n != nil {
		return n.AdditionalProperties
	}
	return
}

func (n *NetezzaSource) GetMaxConcurrentConnections() (rv any) {
	if n != nil {
		return n.MaxConcurrentConnections
	}
	return
}

func (n *NetezzaSource) GetPartitionOption() (rv *NetezzaPartitionOption) {
	if n != nil {
		return n.PartitionOption
	}
	return
}

func (n *NetezzaSource) GetPartitionSettings() (rv *NetezzaPartitionSettings) {
	if n != nil {
		return n.PartitionSettings
	}
	return
}

func (n *NetezzaSource) GetQuery() (rv any) {
	if n != nil {
		return n.Query
	}
	return
}

func (n *NetezzaSource) GetQueryTimeout() (rv any) {
	if n != nil {
		return n.QueryTimeout
	}
	return
}

func (n *NetezzaSource) GetSourceRetryCount() (rv any) {
	if n != nil {
		return n.SourceRetryCount
	}
	return
}

func (n *NetezzaSource) GetSourceRetryWait() (rv any) {
	if n != nil {
		return n.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type NetezzaSource.
func (n *NetezzaSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     n.AdditionalProperties,
		MaxConcurrentConnections: n.MaxConcurrentConnections,
		SourceRetryCount:         n.SourceRetryCount,
		SourceRetryWait:          n.SourceRetryWait,
		Type:                     n.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type NetezzaSource.
func (n *NetezzaSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        n.AdditionalColumns,
		AdditionalProperties:     n.AdditionalProperties,
		MaxConcurrentConnections: n.MaxConcurrentConnections,
		QueryTimeout:             n.QueryTimeout,
		SourceRetryCount:         n.SourceRetryCount,
		SourceRetryWait:          n.SourceRetryWait,
		Type:                     n.Type,
	}
}

// NetezzaTableDataset - Netezza dataset.
type NetezzaTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *NetezzaTableDatasetTypeProperties
}

func (n *NetezzaTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if n != nil {
		return n.LinkedServiceName
	}
	return
}

func (n *NetezzaTableDataset) GetType() (rv string) {
	if n != nil && n.Type != nil {
		return *n.Type
	}
	return
}

func (n *NetezzaTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if n != nil {
		return n.AdditionalProperties
	}
	return
}

func (n *NetezzaTableDataset) GetAnnotations() (rv []any) {
	if n != nil {
		return n.Annotations
	}
	return
}

func (n *NetezzaTableDataset) GetDescription() (rv string) {
	if n != nil && n.Description != nil {
		return *n.Description
	}
	return
}

func (n *NetezzaTableDataset) GetFolder() (rv *DatasetFolder) {
	if n != nil {
		return n.Folder
	}
	return
}

func (n *NetezzaTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if n != nil {
		return n.Parameters
	}
	return
}

func (n *NetezzaTableDataset) GetSchema() (rv any) {
	if n != nil {
		return n.Schema
	}
	return
}

func (n *NetezzaTableDataset) GetStructure() (rv any) {
	if n != nil {
		return n.Structure
	}
	return
}

func (n *NetezzaTableDataset) GetTypeProperties() (rv *NetezzaTableDatasetTypeProperties) {
	if n != nil {
		return n.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type NetezzaTableDataset.
func (n *NetezzaTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: n.AdditionalProperties,
		Annotations:          n.Annotations,
		Description:          n.Description,
		Folder:               n.Folder,
		LinkedServiceName:    n.LinkedServiceName,
		Parameters:           n.Parameters,
		Schema:               n.Schema,
		Structure:            n.Structure,
		Type:                 n.Type,
	}
}

// NetezzaTableDatasetTypeProperties - Netezza dataset properties.
type NetezzaTableDatasetTypeProperties struct {
	// The schema name of the Netezza. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the Netezza. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (n *NetezzaTableDatasetTypeProperties) GetSchema() (rv any) {
	if n != nil {
		return n.Schema
	}
	return
}

func (n *NetezzaTableDatasetTypeProperties) GetTable() (rv any) {
	if n != nil {
		return n.Table
	}
	return
}

func (n *NetezzaTableDatasetTypeProperties) GetTableName() (rv any) {
	if n != nil {
		return n.TableName
	}
	return
}

// Notebook.
type Notebook struct {
	// REQUIRED; Array of cells of the current notebook.
	Cells []*NotebookCell

	// REQUIRED; Notebook root-level metadata.
	Metadata *NotebookMetadata

	// REQUIRED; Notebook format (major number). Incremented between backwards incompatible changes to the notebook format.
	Nbformat *int32

	// REQUIRED; Notebook format (minor number). Incremented for backward compatible changes to the notebook format.
	NbformatMinor *int32

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Big data pool reference.
	BigDataPool *BigDataPoolReference

	// The description of the notebook.
	Description *string

	// The folder that this notebook is in. If not specified, this notebook will appear at the root level.
	Folder *NotebookFolder

	// Session properties.
	SessionProperties *NotebookSessionProperties

	// The spark configuration of the spark job.
	TargetSparkConfiguration *SparkConfigurationReference
}

func (n *Notebook) GetCells() (rv []*NotebookCell) {
	if n != nil {
		return n.Cells
	}
	return
}

func (n *Notebook) GetMetadata() (rv *NotebookMetadata) {
	if n != nil {
		return n.Metadata
	}
	return
}

func (n *Notebook) GetNbformat() (rv int32) {
	if n != nil && n.Nbformat != nil {
		return *n.Nbformat
	}
	return
}

func (n *Notebook) GetNbformatMinor() (rv int32) {
	if n != nil && n.NbformatMinor != nil {
		return *n.NbformatMinor
	}
	return
}

func (n *Notebook) GetAdditionalProperties() (rv map[string]any) {
	if n != nil {
		return n.AdditionalProperties
	}
	return
}

func (n *Notebook) GetBigDataPool() (rv *BigDataPoolReference) {
	if n != nil {
		return n.BigDataPool
	}
	return
}

func (n *Notebook) GetDescription() (rv string) {
	if n != nil && n.Description != nil {
		return *n.Description
	}
	return
}

func (n *Notebook) GetFolder() (rv *NotebookFolder) {
	if n != nil {
		return n.Folder
	}
	return
}

func (n *Notebook) GetSessionProperties() (rv *NotebookSessionProperties) {
	if n != nil {
		return n.SessionProperties
	}
	return
}

func (n *Notebook) GetTargetSparkConfiguration() (rv *SparkConfigurationReference) {
	if n != nil {
		return n.TargetSparkConfiguration
	}
	return
}

// NotebookCell - Notebook cell.
type NotebookCell struct {
	// REQUIRED; String identifying the type of cell.
	CellType *string

	// REQUIRED; Cell-level metadata.
	Metadata any

	// REQUIRED; Contents of the cell, represented as an array of lines.
	Source []*string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Attachments associated with the cell.
	Attachments any

	// Cell-level output items.
	Outputs []*NotebookCellOutputItem
}

func (n *NotebookCell) GetCellType() (rv string) {
	if n != nil && n.CellType != nil {
		return *n.CellType
	}
	return
}

func (n *NotebookCell) GetMetadata() (rv any) {
	if n != nil {
		return n.Metadata
	}
	return
}

func (n *NotebookCell) GetSource() (rv []*string) {
	if n != nil {
		return n.Source
	}
	return
}

func (n *NotebookCell) GetAdditionalProperties() (rv map[string]any) {
	if n != nil {
		return n.AdditionalProperties
	}
	return
}

func (n *NotebookCell) GetAttachments() (rv any) {
	if n != nil {
		return n.Attachments
	}
	return
}

func (n *NotebookCell) GetOutputs() (rv []*NotebookCellOutputItem) {
	if n != nil {
		return n.Outputs
	}
	return
}

// NotebookCellOutputItem - An item of the notebook cell execution output.
type NotebookCellOutputItem struct {
	// REQUIRED; Execution, display, or stream outputs.
	OutputType *CellOutputType

	// Output data. Use MIME type as key, and content as value.
	Data any

	// Execution sequence number.
	ExecutionCount *int32

	// Metadata for the output item.
	Metadata any

	// For output_type=stream, determines the name of stream (stdout / stderr).
	Name *string

	// For output_type=stream, the stream's text output, represented as a string or an array of strings.
	Text any
}

func (n *NotebookCellOutputItem) GetOutputType() (rv *CellOutputType) {
	if n != nil {
		return n.OutputType
	}
	return
}

func (n *NotebookCellOutputItem) GetData() (rv any) {
	if n != nil {
		return n.Data
	}
	return
}

func (n *NotebookCellOutputItem) GetExecutionCount() (rv int32) {
	if n != nil && n.ExecutionCount != nil {
		return *n.ExecutionCount
	}
	return
}

func (n *NotebookCellOutputItem) GetMetadata() (rv any) {
	if n != nil {
		return n.Metadata
	}
	return
}

func (n *NotebookCellOutputItem) GetName() (rv string) {
	if n != nil && n.Name != nil {
		return *n.Name
	}
	return
}

func (n *NotebookCellOutputItem) GetText() (rv any) {
	if n != nil {
		return n.Text
	}
	return
}

// NotebookFolder - The folder that this notebook is in. If not specified, this notebook will appear at the root level.
type NotebookFolder struct {
	// The name of the folder that this notebook is in.
	Name *string
}

func (n *NotebookFolder) GetName() (rv string) {
	if n != nil && n.Name != nil {
		return *n.Name
	}
	return
}

// NotebookKernelSpec - Kernel information.
type NotebookKernelSpec struct {
	// REQUIRED; Name to display in UI.
	DisplayName *string

	// REQUIRED; Name of the kernel specification.
	Name *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

func (n *NotebookKernelSpec) GetDisplayName() (rv string) {
	if n != nil && n.DisplayName != nil {
		return *n.DisplayName
	}
	return
}

func (n *NotebookKernelSpec) GetName() (rv string) {
	if n != nil && n.Name != nil {
		return *n.Name
	}
	return
}

func (n *NotebookKernelSpec) GetAdditionalProperties() (rv map[string]any) {
	if n != nil {
		return n.AdditionalProperties
	}
	return
}

// NotebookLanguageInfo - Language info.
type NotebookLanguageInfo struct {
	// REQUIRED; The programming language which this kernel runs.
	Name *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The codemirror mode to use for code in this language.
	CodemirrorMode *string
}

func (n *NotebookLanguageInfo) GetName() (rv string) {
	if n != nil && n.Name != nil {
		return *n.Name
	}
	return
}

func (n *NotebookLanguageInfo) GetAdditionalProperties() (rv map[string]any) {
	if n != nil {
		return n.AdditionalProperties
	}
	return
}

func (n *NotebookLanguageInfo) GetCodemirrorMode() (rv string) {
	if n != nil && n.CodemirrorMode != nil {
		return *n.CodemirrorMode
	}
	return
}

// NotebookListResponse - A list of Notebook resources.
type NotebookListResponse struct {
	// REQUIRED; List of Notebooks.
	Value []*NotebookResource

	// The link to the next page of results, if any remaining results exist.
	NextLink *string
}

func (n *NotebookListResponse) GetValue() (rv []*NotebookResource) {
	if n != nil {
		return n.Value
	}
	return
}

func (n *NotebookListResponse) GetNextLink() (rv string) {
	if n != nil && n.NextLink != nil {
		return *n.NextLink
	}
	return
}

// NotebookMetadata - Notebook root-level metadata.
type NotebookMetadata struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Kernel information.
	Kernelspec *NotebookKernelSpec

	// Language info.
	LanguageInfo *NotebookLanguageInfo
}

func (n *NotebookMetadata) GetAdditionalProperties() (rv map[string]any) {
	if n != nil {
		return n.AdditionalProperties
	}
	return
}

func (n *NotebookMetadata) GetKernelspec() (rv *NotebookKernelSpec) {
	if n != nil {
		return n.Kernelspec
	}
	return
}

func (n *NotebookMetadata) GetLanguageInfo() (rv *NotebookLanguageInfo) {
	if n != nil {
		return n.LanguageInfo
	}
	return
}

// NotebookParameter - Notebook parameter.
type NotebookParameter struct {
	// Notebook parameter type.
	Type *NotebookParameterType

	// Notebook parameter value. Type: string (or Expression with resultType string).
	Value any
}

func (n *NotebookParameter) GetType() (rv *NotebookParameterType) {
	if n != nil {
		return n.Type
	}
	return
}

func (n *NotebookParameter) GetValue() (rv any) {
	if n != nil {
		return n.Value
	}
	return
}

// NotebookResource - Notebook resource type.
type NotebookResource struct {
	// REQUIRED; The name of the resource
	Name *string

	// REQUIRED; Properties of Notebook.
	Properties *Notebook

	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string
}

func (n *NotebookResource) GetName() (rv string) {
	if n != nil && n.Name != nil {
		return *n.Name
	}
	return
}

func (n *NotebookResource) GetProperties() (rv *Notebook) {
	if n != nil {
		return n.Properties
	}
	return
}

func (n *NotebookResource) GetEtag() (rv string) {
	if n != nil && n.Etag != nil {
		return *n.Etag
	}
	return
}

func (n *NotebookResource) GetID() (rv string) {
	if n != nil && n.ID != nil {
		return *n.ID
	}
	return
}

func (n *NotebookResource) GetType() (rv string) {
	if n != nil && n.Type != nil {
		return *n.Type
	}
	return
}

// NotebookSessionProperties - Session properties.
type NotebookSessionProperties struct {
	// REQUIRED; Number of cores to use for the driver.
	DriverCores *int32

	// REQUIRED; Amount of memory to use for the driver process.
	DriverMemory *string

	// REQUIRED; Number of cores to use for each executor.
	ExecutorCores *int32

	// REQUIRED; Amount of memory to use per executor process.
	ExecutorMemory *string

	// REQUIRED; Number of executors to launch for this session.
	NumExecutors *int32
}

func (n *NotebookSessionProperties) GetDriverCores() (rv int32) {
	if n != nil && n.DriverCores != nil {
		return *n.DriverCores
	}
	return
}

func (n *NotebookSessionProperties) GetDriverMemory() (rv string) {
	if n != nil && n.DriverMemory != nil {
		return *n.DriverMemory
	}
	return
}

func (n *NotebookSessionProperties) GetExecutorCores() (rv int32) {
	if n != nil && n.ExecutorCores != nil {
		return *n.ExecutorCores
	}
	return
}

func (n *NotebookSessionProperties) GetExecutorMemory() (rv string) {
	if n != nil && n.ExecutorMemory != nil {
		return *n.ExecutorMemory
	}
	return
}

func (n *NotebookSessionProperties) GetNumExecutors() (rv int32) {
	if n != nil && n.NumExecutors != nil {
		return *n.NumExecutors
	}
	return
}

// ODataLinkedService - Open Data Protocol (OData) linked service.
type ODataLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; OData linked service properties.
	TypeProperties *ODataLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (o *ODataLinkedService) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *ODataLinkedService) GetTypeProperties() (rv *ODataLinkedServiceTypeProperties) {
	if o != nil {
		return o.TypeProperties
	}
	return
}

func (o *ODataLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *ODataLinkedService) GetAnnotations() (rv []any) {
	if o != nil {
		return o.Annotations
	}
	return
}

func (o *ODataLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if o != nil {
		return o.ConnectVia
	}
	return
}

func (o *ODataLinkedService) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *ODataLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if o != nil {
		return o.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type ODataLinkedService.
func (o *ODataLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: o.AdditionalProperties,
		Annotations:          o.Annotations,
		ConnectVia:           o.ConnectVia,
		Description:          o.Description,
		Parameters:           o.Parameters,
		Type:                 o.Type,
	}
}

// ODataLinkedServiceTypeProperties - OData linked service properties.
type ODataLinkedServiceTypeProperties struct {
	// REQUIRED; The URL of the OData service endpoint. Type: string (or Expression with resultType string).
	URL any

	// Specify the resource you are requesting authorization to use Directory. Type: string (or Expression with resultType string).
	AADResourceID any

	// Specify the credential type (key or cert) is used for service principal.
	AADServicePrincipalCredentialType *ODataAADServicePrincipalCredentialType

	// Type of authentication used to connect to the OData service.
	AuthenticationType *ODataAuthenticationType

	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment,
	// AzureGermany. Default value is the data factory regions’ cloud type. Type:
	// string (or Expression with resultType string).
	AzureCloudType any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password of the OData service.
	Password SecretBaseClassification

	// Specify the base64 encoded certificate of your application registered in Azure Active Directory. Type: string (or Expression
	// with resultType string).
	ServicePrincipalEmbeddedCert SecretBaseClassification

	// Specify the password of your certificate if your certificate has a password and you are using AadServicePrincipal authentication.
	// Type: string (or Expression with resultType string).
	ServicePrincipalEmbeddedCertPassword SecretBaseClassification

	// Specify the application id of your application registered in Azure Active Directory. Type: string (or Expression with resultType
	// string).
	ServicePrincipalID any

	// Specify the secret of your application registered in Azure Active Directory. Type: string (or Expression with resultType
	// string).
	ServicePrincipalKey SecretBaseClassification

	// Specify the tenant information (domain name or tenant ID) under which your application resides. Type: string (or Expression
	// with resultType string).
	Tenant any

	// User name of the OData service. Type: string (or Expression with resultType string).
	UserName any
}

func (o *ODataLinkedServiceTypeProperties) GetURL() (rv any) {
	if o != nil {
		return o.URL
	}
	return
}

func (o *ODataLinkedServiceTypeProperties) GetAADResourceID() (rv any) {
	if o != nil {
		return o.AADResourceID
	}
	return
}

func (o *ODataLinkedServiceTypeProperties) GetAADServicePrincipalCredentialType() (rv *ODataAADServicePrincipalCredentialType) {
	if o != nil {
		return o.AADServicePrincipalCredentialType
	}
	return
}

func (o *ODataLinkedServiceTypeProperties) GetAuthenticationType() (rv *ODataAuthenticationType) {
	if o != nil {
		return o.AuthenticationType
	}
	return
}

func (o *ODataLinkedServiceTypeProperties) GetAzureCloudType() (rv any) {
	if o != nil {
		return o.AzureCloudType
	}
	return
}

func (o *ODataLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if o != nil {
		return o.EncryptedCredential
	}
	return
}

func (o *ODataLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if o != nil {
		return o.Password
	}
	return
}

func (o *ODataLinkedServiceTypeProperties) GetServicePrincipalEmbeddedCert() (rv SecretBaseClassification) {
	if o != nil {
		return o.ServicePrincipalEmbeddedCert
	}
	return
}

func (o *ODataLinkedServiceTypeProperties) GetServicePrincipalEmbeddedCertPassword() (rv SecretBaseClassification) {
	if o != nil {
		return o.ServicePrincipalEmbeddedCertPassword
	}
	return
}

func (o *ODataLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if o != nil {
		return o.ServicePrincipalID
	}
	return
}

func (o *ODataLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if o != nil {
		return o.ServicePrincipalKey
	}
	return
}

func (o *ODataLinkedServiceTypeProperties) GetTenant() (rv any) {
	if o != nil {
		return o.Tenant
	}
	return
}

func (o *ODataLinkedServiceTypeProperties) GetUserName() (rv any) {
	if o != nil {
		return o.UserName
	}
	return
}

// ODataResourceDataset - The Open Data Protocol (OData) resource dataset.
type ODataResourceDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// OData dataset properties.
	TypeProperties *ODataResourceDatasetTypeProperties
}

func (o *ODataResourceDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if o != nil {
		return o.LinkedServiceName
	}
	return
}

func (o *ODataResourceDataset) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *ODataResourceDataset) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *ODataResourceDataset) GetAnnotations() (rv []any) {
	if o != nil {
		return o.Annotations
	}
	return
}

func (o *ODataResourceDataset) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *ODataResourceDataset) GetFolder() (rv *DatasetFolder) {
	if o != nil {
		return o.Folder
	}
	return
}

func (o *ODataResourceDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if o != nil {
		return o.Parameters
	}
	return
}

func (o *ODataResourceDataset) GetSchema() (rv any) {
	if o != nil {
		return o.Schema
	}
	return
}

func (o *ODataResourceDataset) GetStructure() (rv any) {
	if o != nil {
		return o.Structure
	}
	return
}

func (o *ODataResourceDataset) GetTypeProperties() (rv *ODataResourceDatasetTypeProperties) {
	if o != nil {
		return o.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type ODataResourceDataset.
func (o *ODataResourceDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: o.AdditionalProperties,
		Annotations:          o.Annotations,
		Description:          o.Description,
		Folder:               o.Folder,
		LinkedServiceName:    o.LinkedServiceName,
		Parameters:           o.Parameters,
		Schema:               o.Schema,
		Structure:            o.Structure,
		Type:                 o.Type,
	}
}

// ODataResourceDatasetTypeProperties - OData dataset properties.
type ODataResourceDatasetTypeProperties struct {
	// The OData resource path. Type: string (or Expression with resultType string).
	Path any
}

func (o *ODataResourceDatasetTypeProperties) GetPath() (rv any) {
	if o != nil {
		return o.Path
	}
	return
}

// ODataSource - A copy activity source for OData source.
type ODataSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data.
	// Default value: 00:05:00. Type: string (or Expression with resultType
	// string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HTTPRequestTimeout any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (o *ODataSource) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *ODataSource) GetAdditionalColumns() (rv any) {
	if o != nil {
		return o.AdditionalColumns
	}
	return
}

func (o *ODataSource) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *ODataSource) GetHTTPRequestTimeout() (rv any) {
	if o != nil {
		return o.HTTPRequestTimeout
	}
	return
}

func (o *ODataSource) GetMaxConcurrentConnections() (rv any) {
	if o != nil {
		return o.MaxConcurrentConnections
	}
	return
}

func (o *ODataSource) GetQuery() (rv any) {
	if o != nil {
		return o.Query
	}
	return
}

func (o *ODataSource) GetSourceRetryCount() (rv any) {
	if o != nil {
		return o.SourceRetryCount
	}
	return
}

func (o *ODataSource) GetSourceRetryWait() (rv any) {
	if o != nil {
		return o.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type ODataSource.
func (o *ODataSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     o.AdditionalProperties,
		MaxConcurrentConnections: o.MaxConcurrentConnections,
		SourceRetryCount:         o.SourceRetryCount,
		SourceRetryWait:          o.SourceRetryWait,
		Type:                     o.Type,
	}
}

// OdbcLinkedService - Open Database Connectivity (ODBC) linked service.
type OdbcLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; ODBC linked service properties.
	TypeProperties *OdbcLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (o *OdbcLinkedService) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OdbcLinkedService) GetTypeProperties() (rv *OdbcLinkedServiceTypeProperties) {
	if o != nil {
		return o.TypeProperties
	}
	return
}

func (o *OdbcLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OdbcLinkedService) GetAnnotations() (rv []any) {
	if o != nil {
		return o.Annotations
	}
	return
}

func (o *OdbcLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if o != nil {
		return o.ConnectVia
	}
	return
}

func (o *OdbcLinkedService) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *OdbcLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if o != nil {
		return o.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type OdbcLinkedService.
func (o *OdbcLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: o.AdditionalProperties,
		Annotations:          o.Annotations,
		ConnectVia:           o.ConnectVia,
		Description:          o.Description,
		Parameters:           o.Parameters,
		Type:                 o.Type,
	}
}

// OdbcLinkedServiceTypeProperties - ODBC linked service properties.
type OdbcLinkedServiceTypeProperties struct {
	// REQUIRED; The non-access credential portion of the connection string as well as an optional encrypted credential. Type:
	// string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// Type of authentication used to connect to the ODBC data store. Possible values are: Anonymous and Basic. Type: string (or
	// Expression with resultType string).
	AuthenticationType any

	// The access credential portion of the connection string specified in driver-specific property-value format.
	Credential SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password for Basic authentication.
	Password SecretBaseClassification

	// User name for Basic authentication. Type: string (or Expression with resultType string).
	UserName any
}

func (o *OdbcLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if o != nil {
		return o.ConnectionString
	}
	return
}

func (o *OdbcLinkedServiceTypeProperties) GetAuthenticationType() (rv any) {
	if o != nil {
		return o.AuthenticationType
	}
	return
}

func (o *OdbcLinkedServiceTypeProperties) GetCredential() (rv SecretBaseClassification) {
	if o != nil {
		return o.Credential
	}
	return
}

func (o *OdbcLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if o != nil {
		return o.EncryptedCredential
	}
	return
}

func (o *OdbcLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if o != nil {
		return o.Password
	}
	return
}

func (o *OdbcLinkedServiceTypeProperties) GetUserName() (rv any) {
	if o != nil {
		return o.UserName
	}
	return
}

// OdbcSink - A copy activity ODBC sink.
type OdbcSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to execute before starting the copy. Type: string (or Expression with resultType string).
	PreCopyScript any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (o *OdbcSink) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OdbcSink) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OdbcSink) GetMaxConcurrentConnections() (rv any) {
	if o != nil {
		return o.MaxConcurrentConnections
	}
	return
}

func (o *OdbcSink) GetPreCopyScript() (rv any) {
	if o != nil {
		return o.PreCopyScript
	}
	return
}

func (o *OdbcSink) GetSinkRetryCount() (rv any) {
	if o != nil {
		return o.SinkRetryCount
	}
	return
}

func (o *OdbcSink) GetSinkRetryWait() (rv any) {
	if o != nil {
		return o.SinkRetryWait
	}
	return
}

func (o *OdbcSink) GetWriteBatchSize() (rv any) {
	if o != nil {
		return o.WriteBatchSize
	}
	return
}

func (o *OdbcSink) GetWriteBatchTimeout() (rv any) {
	if o != nil {
		return o.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type OdbcSink.
func (o *OdbcSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     o.AdditionalProperties,
		MaxConcurrentConnections: o.MaxConcurrentConnections,
		SinkRetryCount:           o.SinkRetryCount,
		SinkRetryWait:            o.SinkRetryWait,
		Type:                     o.Type,
		WriteBatchSize:           o.WriteBatchSize,
		WriteBatchTimeout:        o.WriteBatchTimeout,
	}
}

// OdbcSource - A copy activity source for ODBC databases.
type OdbcSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (o *OdbcSource) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OdbcSource) GetAdditionalColumns() (rv any) {
	if o != nil {
		return o.AdditionalColumns
	}
	return
}

func (o *OdbcSource) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OdbcSource) GetMaxConcurrentConnections() (rv any) {
	if o != nil {
		return o.MaxConcurrentConnections
	}
	return
}

func (o *OdbcSource) GetQuery() (rv any) {
	if o != nil {
		return o.Query
	}
	return
}

func (o *OdbcSource) GetQueryTimeout() (rv any) {
	if o != nil {
		return o.QueryTimeout
	}
	return
}

func (o *OdbcSource) GetSourceRetryCount() (rv any) {
	if o != nil {
		return o.SourceRetryCount
	}
	return
}

func (o *OdbcSource) GetSourceRetryWait() (rv any) {
	if o != nil {
		return o.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type OdbcSource.
func (o *OdbcSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     o.AdditionalProperties,
		MaxConcurrentConnections: o.MaxConcurrentConnections,
		SourceRetryCount:         o.SourceRetryCount,
		SourceRetryWait:          o.SourceRetryWait,
		Type:                     o.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type OdbcSource.
func (o *OdbcSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        o.AdditionalColumns,
		AdditionalProperties:     o.AdditionalProperties,
		MaxConcurrentConnections: o.MaxConcurrentConnections,
		QueryTimeout:             o.QueryTimeout,
		SourceRetryCount:         o.SourceRetryCount,
		SourceRetryWait:          o.SourceRetryWait,
		Type:                     o.Type,
	}
}

// OdbcTableDataset - The ODBC table dataset.
type OdbcTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// ODBC table dataset properties.
	TypeProperties *OdbcTableDatasetTypeProperties
}

func (o *OdbcTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if o != nil {
		return o.LinkedServiceName
	}
	return
}

func (o *OdbcTableDataset) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OdbcTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OdbcTableDataset) GetAnnotations() (rv []any) {
	if o != nil {
		return o.Annotations
	}
	return
}

func (o *OdbcTableDataset) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *OdbcTableDataset) GetFolder() (rv *DatasetFolder) {
	if o != nil {
		return o.Folder
	}
	return
}

func (o *OdbcTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if o != nil {
		return o.Parameters
	}
	return
}

func (o *OdbcTableDataset) GetSchema() (rv any) {
	if o != nil {
		return o.Schema
	}
	return
}

func (o *OdbcTableDataset) GetStructure() (rv any) {
	if o != nil {
		return o.Structure
	}
	return
}

func (o *OdbcTableDataset) GetTypeProperties() (rv *OdbcTableDatasetTypeProperties) {
	if o != nil {
		return o.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type OdbcTableDataset.
func (o *OdbcTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: o.AdditionalProperties,
		Annotations:          o.Annotations,
		Description:          o.Description,
		Folder:               o.Folder,
		LinkedServiceName:    o.LinkedServiceName,
		Parameters:           o.Parameters,
		Schema:               o.Schema,
		Structure:            o.Structure,
		Type:                 o.Type,
	}
}

// OdbcTableDatasetTypeProperties - ODBC table dataset properties.
type OdbcTableDatasetTypeProperties struct {
	// The ODBC table name. Type: string (or Expression with resultType string).
	TableName any
}

func (o *OdbcTableDatasetTypeProperties) GetTableName() (rv any) {
	if o != nil {
		return o.TableName
	}
	return
}

// Office365Dataset - The Office365 account.
type Office365Dataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; Office365 dataset properties.
	TypeProperties *Office365DatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (o *Office365Dataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if o != nil {
		return o.LinkedServiceName
	}
	return
}

func (o *Office365Dataset) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *Office365Dataset) GetTypeProperties() (rv *Office365DatasetTypeProperties) {
	if o != nil {
		return o.TypeProperties
	}
	return
}

func (o *Office365Dataset) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *Office365Dataset) GetAnnotations() (rv []any) {
	if o != nil {
		return o.Annotations
	}
	return
}

func (o *Office365Dataset) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *Office365Dataset) GetFolder() (rv *DatasetFolder) {
	if o != nil {
		return o.Folder
	}
	return
}

func (o *Office365Dataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if o != nil {
		return o.Parameters
	}
	return
}

func (o *Office365Dataset) GetSchema() (rv any) {
	if o != nil {
		return o.Schema
	}
	return
}

func (o *Office365Dataset) GetStructure() (rv any) {
	if o != nil {
		return o.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type Office365Dataset.
func (o *Office365Dataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: o.AdditionalProperties,
		Annotations:          o.Annotations,
		Description:          o.Description,
		Folder:               o.Folder,
		LinkedServiceName:    o.LinkedServiceName,
		Parameters:           o.Parameters,
		Schema:               o.Schema,
		Structure:            o.Structure,
		Type:                 o.Type,
	}
}

// Office365DatasetTypeProperties - Office365 dataset properties.
type Office365DatasetTypeProperties struct {
	// REQUIRED; Name of the dataset to extract from Office 365. Type: string (or Expression with resultType string).
	TableName any

	// A predicate expression that can be used to filter the specific rows to extract from Office 365. Type: string (or Expression
	// with resultType string).
	Predicate any
}

func (o *Office365DatasetTypeProperties) GetTableName() (rv any) {
	if o != nil {
		return o.TableName
	}
	return
}

func (o *Office365DatasetTypeProperties) GetPredicate() (rv any) {
	if o != nil {
		return o.Predicate
	}
	return
}

// Office365LinkedService - Office365 linked service.
type Office365LinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Office365 linked service properties.
	TypeProperties *Office365LinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (o *Office365LinkedService) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *Office365LinkedService) GetTypeProperties() (rv *Office365LinkedServiceTypeProperties) {
	if o != nil {
		return o.TypeProperties
	}
	return
}

func (o *Office365LinkedService) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *Office365LinkedService) GetAnnotations() (rv []any) {
	if o != nil {
		return o.Annotations
	}
	return
}

func (o *Office365LinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if o != nil {
		return o.ConnectVia
	}
	return
}

func (o *Office365LinkedService) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *Office365LinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if o != nil {
		return o.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type Office365LinkedService.
func (o *Office365LinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: o.AdditionalProperties,
		Annotations:          o.Annotations,
		ConnectVia:           o.ConnectVia,
		Description:          o.Description,
		Parameters:           o.Parameters,
		Type:                 o.Type,
	}
}

// Office365LinkedServiceTypeProperties - Office365 linked service properties.
type Office365LinkedServiceTypeProperties struct {
	// REQUIRED; Azure tenant ID to which the Office 365 account belongs. Type: string (or Expression with resultType string).
	Office365TenantID any

	// REQUIRED; Specify the application's client ID. Type: string (or Expression with resultType string).
	ServicePrincipalID any

	// REQUIRED; Specify the application's key.
	ServicePrincipalKey SecretBaseClassification

	// REQUIRED; Specify the tenant information under which your Azure AD web application resides. Type: string (or Expression
	// with resultType string).
	ServicePrincipalTenantID any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any
}

func (o *Office365LinkedServiceTypeProperties) GetOffice365TenantID() (rv any) {
	if o != nil {
		return o.Office365TenantID
	}
	return
}

func (o *Office365LinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if o != nil {
		return o.ServicePrincipalID
	}
	return
}

func (o *Office365LinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if o != nil {
		return o.ServicePrincipalKey
	}
	return
}

func (o *Office365LinkedServiceTypeProperties) GetServicePrincipalTenantID() (rv any) {
	if o != nil {
		return o.ServicePrincipalTenantID
	}
	return
}

func (o *Office365LinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if o != nil {
		return o.EncryptedCredential
	}
	return
}

// Office365Source - A copy activity source for an Office 365 service.
type Office365Source struct {
	// REQUIRED; Copy source type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The groups containing all the users. Type: array of strings (or Expression with resultType array of strings).
	AllowedGroups any

	// The Column to apply the and . Type: string (or Expression with resultType string).
	DateFilterColumn any

	// End time of the requested range for this dataset. Type: string (or Expression with resultType string).
	EndTime any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The columns to be read out from the Office 365 table. Type: array of objects (or Expression with resultType array of objects).
	// Example: [ { "name": "Id" }, { "name": "CreatedDateTime" } ]
	OutputColumns any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Start time of the requested range for this dataset. Type: string (or Expression with resultType string).
	StartTime any

	// The user scope uri. Type: string (or Expression with resultType string).
	UserScopeFilterURI any
}

func (o *Office365Source) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *Office365Source) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *Office365Source) GetAllowedGroups() (rv any) {
	if o != nil {
		return o.AllowedGroups
	}
	return
}

func (o *Office365Source) GetDateFilterColumn() (rv any) {
	if o != nil {
		return o.DateFilterColumn
	}
	return
}

func (o *Office365Source) GetEndTime() (rv any) {
	if o != nil {
		return o.EndTime
	}
	return
}

func (o *Office365Source) GetMaxConcurrentConnections() (rv any) {
	if o != nil {
		return o.MaxConcurrentConnections
	}
	return
}

func (o *Office365Source) GetOutputColumns() (rv any) {
	if o != nil {
		return o.OutputColumns
	}
	return
}

func (o *Office365Source) GetSourceRetryCount() (rv any) {
	if o != nil {
		return o.SourceRetryCount
	}
	return
}

func (o *Office365Source) GetSourceRetryWait() (rv any) {
	if o != nil {
		return o.SourceRetryWait
	}
	return
}

func (o *Office365Source) GetStartTime() (rv any) {
	if o != nil {
		return o.StartTime
	}
	return
}

func (o *Office365Source) GetUserScopeFilterURI() (rv any) {
	if o != nil {
		return o.UserScopeFilterURI
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type Office365Source.
func (o *Office365Source) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     o.AdditionalProperties,
		MaxConcurrentConnections: o.MaxConcurrentConnections,
		SourceRetryCount:         o.SourceRetryCount,
		SourceRetryWait:          o.SourceRetryWait,
		Type:                     o.Type,
	}
}

// OperationResult - Operation status for the operation
type OperationResult struct {
	// Error data
	Error *CloudErrorBody

	// READ-ONLY; Operation status
	Status *string
}

func (o *OperationResult) GetError() (rv *CloudErrorBody) {
	if o != nil {
		return o.Error
	}
	return
}

func (o *OperationResult) GetStatus() (rv string) {
	if o != nil && o.Status != nil {
		return *o.Status
	}
	return
}

// OracleLinkedService - Oracle database.
type OracleLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Oracle database linked service properties.
	TypeProperties *OracleLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (o *OracleLinkedService) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OracleLinkedService) GetTypeProperties() (rv *OracleLinkedServiceTypeProperties) {
	if o != nil {
		return o.TypeProperties
	}
	return
}

func (o *OracleLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OracleLinkedService) GetAnnotations() (rv []any) {
	if o != nil {
		return o.Annotations
	}
	return
}

func (o *OracleLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if o != nil {
		return o.ConnectVia
	}
	return
}

func (o *OracleLinkedService) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *OracleLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if o != nil {
		return o.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type OracleLinkedService.
func (o *OracleLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: o.AdditionalProperties,
		Annotations:          o.Annotations,
		ConnectVia:           o.ConnectVia,
		Description:          o.Description,
		Parameters:           o.Parameters,
		Type:                 o.Type,
	}
}

// OracleLinkedServiceTypeProperties - Oracle database linked service properties.
type OracleLinkedServiceTypeProperties struct {
	// REQUIRED; The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference
}

func (o *OracleLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if o != nil {
		return o.ConnectionString
	}
	return
}

func (o *OracleLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if o != nil {
		return o.EncryptedCredential
	}
	return
}

func (o *OracleLinkedServiceTypeProperties) GetPassword() (rv *AzureKeyVaultSecretReference) {
	if o != nil {
		return o.Password
	}
	return
}

// OraclePartitionSettings - The settings that will be leveraged for Oracle source partitioning.
type OraclePartitionSettings struct {
	// The name of the column in integer type that will be used for proceeding range partitioning. Type: string (or Expression
	// with resultType string).
	PartitionColumnName any

	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type:
	// string (or Expression with resultType string).
	PartitionLowerBound any

	// Names of the physical partitions of Oracle table.
	PartitionNames any

	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type:
	// string (or Expression with resultType string).
	PartitionUpperBound any
}

func (o *OraclePartitionSettings) GetPartitionColumnName() (rv any) {
	if o != nil {
		return o.PartitionColumnName
	}
	return
}

func (o *OraclePartitionSettings) GetPartitionLowerBound() (rv any) {
	if o != nil {
		return o.PartitionLowerBound
	}
	return
}

func (o *OraclePartitionSettings) GetPartitionNames() (rv any) {
	if o != nil {
		return o.PartitionNames
	}
	return
}

func (o *OraclePartitionSettings) GetPartitionUpperBound() (rv any) {
	if o != nil {
		return o.PartitionUpperBound
	}
	return
}

// OracleServiceCloudLinkedService - Oracle Service Cloud linked service.
type OracleServiceCloudLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Oracle Service Cloud linked service properties.
	TypeProperties *OracleServiceCloudLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (o *OracleServiceCloudLinkedService) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OracleServiceCloudLinkedService) GetTypeProperties() (rv *OracleServiceCloudLinkedServiceTypeProperties) {
	if o != nil {
		return o.TypeProperties
	}
	return
}

func (o *OracleServiceCloudLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OracleServiceCloudLinkedService) GetAnnotations() (rv []any) {
	if o != nil {
		return o.Annotations
	}
	return
}

func (o *OracleServiceCloudLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if o != nil {
		return o.ConnectVia
	}
	return
}

func (o *OracleServiceCloudLinkedService) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *OracleServiceCloudLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if o != nil {
		return o.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type OracleServiceCloudLinkedService.
func (o *OracleServiceCloudLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: o.AdditionalProperties,
		Annotations:          o.Annotations,
		ConnectVia:           o.ConnectVia,
		Description:          o.Description,
		Parameters:           o.Parameters,
		Type:                 o.Type,
	}
}

// OracleServiceCloudLinkedServiceTypeProperties - Oracle Service Cloud linked service properties.
type OracleServiceCloudLinkedServiceTypeProperties struct {
	// REQUIRED; The URL of the Oracle Service Cloud instance.
	Host any

	// REQUIRED; The password corresponding to the user name that you provided in the username key.
	Password SecretBaseClassification

	// REQUIRED; The user name that you use to access Oracle Service Cloud server.
	Username any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression
	// with resultType boolean).
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true. Type: boolean (or Expression with
	// resultType boolean).
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean
	// (or Expression with resultType boolean).
	UsePeerVerification any
}

func (o *OracleServiceCloudLinkedServiceTypeProperties) GetHost() (rv any) {
	if o != nil {
		return o.Host
	}
	return
}

func (o *OracleServiceCloudLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if o != nil {
		return o.Password
	}
	return
}

func (o *OracleServiceCloudLinkedServiceTypeProperties) GetUsername() (rv any) {
	if o != nil {
		return o.Username
	}
	return
}

func (o *OracleServiceCloudLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if o != nil {
		return o.EncryptedCredential
	}
	return
}

func (o *OracleServiceCloudLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if o != nil {
		return o.UseEncryptedEndpoints
	}
	return
}

func (o *OracleServiceCloudLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if o != nil {
		return o.UseHostVerification
	}
	return
}

func (o *OracleServiceCloudLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if o != nil {
		return o.UsePeerVerification
	}
	return
}

// OracleServiceCloudObjectDataset - Oracle Service Cloud dataset.
type OracleServiceCloudObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (o *OracleServiceCloudObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if o != nil {
		return o.LinkedServiceName
	}
	return
}

func (o *OracleServiceCloudObjectDataset) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OracleServiceCloudObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OracleServiceCloudObjectDataset) GetAnnotations() (rv []any) {
	if o != nil {
		return o.Annotations
	}
	return
}

func (o *OracleServiceCloudObjectDataset) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *OracleServiceCloudObjectDataset) GetFolder() (rv *DatasetFolder) {
	if o != nil {
		return o.Folder
	}
	return
}

func (o *OracleServiceCloudObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if o != nil {
		return o.Parameters
	}
	return
}

func (o *OracleServiceCloudObjectDataset) GetSchema() (rv any) {
	if o != nil {
		return o.Schema
	}
	return
}

func (o *OracleServiceCloudObjectDataset) GetStructure() (rv any) {
	if o != nil {
		return o.Structure
	}
	return
}

func (o *OracleServiceCloudObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if o != nil {
		return o.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type OracleServiceCloudObjectDataset.
func (o *OracleServiceCloudObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: o.AdditionalProperties,
		Annotations:          o.Annotations,
		Description:          o.Description,
		Folder:               o.Folder,
		LinkedServiceName:    o.LinkedServiceName,
		Parameters:           o.Parameters,
		Schema:               o.Schema,
		Structure:            o.Structure,
		Type:                 o.Type,
	}
}

// OracleServiceCloudSource - A copy activity Oracle Service Cloud source.
type OracleServiceCloudSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (o *OracleServiceCloudSource) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OracleServiceCloudSource) GetAdditionalColumns() (rv any) {
	if o != nil {
		return o.AdditionalColumns
	}
	return
}

func (o *OracleServiceCloudSource) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OracleServiceCloudSource) GetMaxConcurrentConnections() (rv any) {
	if o != nil {
		return o.MaxConcurrentConnections
	}
	return
}

func (o *OracleServiceCloudSource) GetQuery() (rv any) {
	if o != nil {
		return o.Query
	}
	return
}

func (o *OracleServiceCloudSource) GetQueryTimeout() (rv any) {
	if o != nil {
		return o.QueryTimeout
	}
	return
}

func (o *OracleServiceCloudSource) GetSourceRetryCount() (rv any) {
	if o != nil {
		return o.SourceRetryCount
	}
	return
}

func (o *OracleServiceCloudSource) GetSourceRetryWait() (rv any) {
	if o != nil {
		return o.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type OracleServiceCloudSource.
func (o *OracleServiceCloudSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     o.AdditionalProperties,
		MaxConcurrentConnections: o.MaxConcurrentConnections,
		SourceRetryCount:         o.SourceRetryCount,
		SourceRetryWait:          o.SourceRetryWait,
		Type:                     o.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type OracleServiceCloudSource.
func (o *OracleServiceCloudSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        o.AdditionalColumns,
		AdditionalProperties:     o.AdditionalProperties,
		MaxConcurrentConnections: o.MaxConcurrentConnections,
		QueryTimeout:             o.QueryTimeout,
		SourceRetryCount:         o.SourceRetryCount,
		SourceRetryWait:          o.SourceRetryWait,
		Type:                     o.Type,
	}
}

// OracleSink - A copy activity Oracle sink.
type OracleSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (o *OracleSink) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OracleSink) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OracleSink) GetMaxConcurrentConnections() (rv any) {
	if o != nil {
		return o.MaxConcurrentConnections
	}
	return
}

func (o *OracleSink) GetPreCopyScript() (rv any) {
	if o != nil {
		return o.PreCopyScript
	}
	return
}

func (o *OracleSink) GetSinkRetryCount() (rv any) {
	if o != nil {
		return o.SinkRetryCount
	}
	return
}

func (o *OracleSink) GetSinkRetryWait() (rv any) {
	if o != nil {
		return o.SinkRetryWait
	}
	return
}

func (o *OracleSink) GetWriteBatchSize() (rv any) {
	if o != nil {
		return o.WriteBatchSize
	}
	return
}

func (o *OracleSink) GetWriteBatchTimeout() (rv any) {
	if o != nil {
		return o.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type OracleSink.
func (o *OracleSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     o.AdditionalProperties,
		MaxConcurrentConnections: o.MaxConcurrentConnections,
		SinkRetryCount:           o.SinkRetryCount,
		SinkRetryWait:            o.SinkRetryWait,
		Type:                     o.Type,
		WriteBatchSize:           o.WriteBatchSize,
		WriteBatchTimeout:        o.WriteBatchTimeout,
	}
}

// OracleSource - A copy activity Oracle source.
type OracleSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Oracle reader query. Type: string (or Expression with resultType string).
	OracleReaderQuery any

	// The partition mechanism that will be used for Oracle read in parallel.
	PartitionOption *OraclePartitionOption

	// The settings that will be leveraged for Oracle source partitioning.
	PartitionSettings *OraclePartitionSettings

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (o *OracleSource) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OracleSource) GetAdditionalColumns() (rv any) {
	if o != nil {
		return o.AdditionalColumns
	}
	return
}

func (o *OracleSource) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OracleSource) GetMaxConcurrentConnections() (rv any) {
	if o != nil {
		return o.MaxConcurrentConnections
	}
	return
}

func (o *OracleSource) GetOracleReaderQuery() (rv any) {
	if o != nil {
		return o.OracleReaderQuery
	}
	return
}

func (o *OracleSource) GetPartitionOption() (rv *OraclePartitionOption) {
	if o != nil {
		return o.PartitionOption
	}
	return
}

func (o *OracleSource) GetPartitionSettings() (rv *OraclePartitionSettings) {
	if o != nil {
		return o.PartitionSettings
	}
	return
}

func (o *OracleSource) GetQueryTimeout() (rv any) {
	if o != nil {
		return o.QueryTimeout
	}
	return
}

func (o *OracleSource) GetSourceRetryCount() (rv any) {
	if o != nil {
		return o.SourceRetryCount
	}
	return
}

func (o *OracleSource) GetSourceRetryWait() (rv any) {
	if o != nil {
		return o.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type OracleSource.
func (o *OracleSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     o.AdditionalProperties,
		MaxConcurrentConnections: o.MaxConcurrentConnections,
		SourceRetryCount:         o.SourceRetryCount,
		SourceRetryWait:          o.SourceRetryWait,
		Type:                     o.Type,
	}
}

// OracleTableDataset - The on-premises Oracle database dataset.
type OracleTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// On-premises Oracle dataset properties.
	TypeProperties *OracleTableDatasetTypeProperties
}

func (o *OracleTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if o != nil {
		return o.LinkedServiceName
	}
	return
}

func (o *OracleTableDataset) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OracleTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OracleTableDataset) GetAnnotations() (rv []any) {
	if o != nil {
		return o.Annotations
	}
	return
}

func (o *OracleTableDataset) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *OracleTableDataset) GetFolder() (rv *DatasetFolder) {
	if o != nil {
		return o.Folder
	}
	return
}

func (o *OracleTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if o != nil {
		return o.Parameters
	}
	return
}

func (o *OracleTableDataset) GetSchema() (rv any) {
	if o != nil {
		return o.Schema
	}
	return
}

func (o *OracleTableDataset) GetStructure() (rv any) {
	if o != nil {
		return o.Structure
	}
	return
}

func (o *OracleTableDataset) GetTypeProperties() (rv *OracleTableDatasetTypeProperties) {
	if o != nil {
		return o.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type OracleTableDataset.
func (o *OracleTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: o.AdditionalProperties,
		Annotations:          o.Annotations,
		Description:          o.Description,
		Folder:               o.Folder,
		LinkedServiceName:    o.LinkedServiceName,
		Parameters:           o.Parameters,
		Schema:               o.Schema,
		Structure:            o.Structure,
		Type:                 o.Type,
	}
}

// OracleTableDatasetTypeProperties - On-premises Oracle dataset properties.
type OracleTableDatasetTypeProperties struct {
	// The schema name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the on-premises Oracle database. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (o *OracleTableDatasetTypeProperties) GetSchema() (rv any) {
	if o != nil {
		return o.Schema
	}
	return
}

func (o *OracleTableDatasetTypeProperties) GetTable() (rv any) {
	if o != nil {
		return o.Table
	}
	return
}

func (o *OracleTableDatasetTypeProperties) GetTableName() (rv any) {
	if o != nil {
		return o.TableName
	}
	return
}

// OrcDataset - ORC dataset.
type OrcDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// ORC dataset properties.
	TypeProperties *OrcDatasetTypeProperties
}

func (o *OrcDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if o != nil {
		return o.LinkedServiceName
	}
	return
}

func (o *OrcDataset) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OrcDataset) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OrcDataset) GetAnnotations() (rv []any) {
	if o != nil {
		return o.Annotations
	}
	return
}

func (o *OrcDataset) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *OrcDataset) GetFolder() (rv *DatasetFolder) {
	if o != nil {
		return o.Folder
	}
	return
}

func (o *OrcDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if o != nil {
		return o.Parameters
	}
	return
}

func (o *OrcDataset) GetSchema() (rv any) {
	if o != nil {
		return o.Schema
	}
	return
}

func (o *OrcDataset) GetStructure() (rv any) {
	if o != nil {
		return o.Structure
	}
	return
}

func (o *OrcDataset) GetTypeProperties() (rv *OrcDatasetTypeProperties) {
	if o != nil {
		return o.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type OrcDataset.
func (o *OrcDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: o.AdditionalProperties,
		Annotations:          o.Annotations,
		Description:          o.Description,
		Folder:               o.Folder,
		LinkedServiceName:    o.LinkedServiceName,
		Parameters:           o.Parameters,
		Schema:               o.Schema,
		Structure:            o.Structure,
		Type:                 o.Type,
	}
}

// OrcDatasetTypeProperties - ORC dataset properties.
type OrcDatasetTypeProperties struct {
	// REQUIRED; The location of the ORC data storage.
	Location DatasetLocationClassification

	// The data orcCompressionCodec. Type: string (or Expression with resultType string).
	OrcCompressionCodec any
}

func (o *OrcDatasetTypeProperties) GetLocation() (rv DatasetLocationClassification) {
	if o != nil {
		return o.Location
	}
	return
}

func (o *OrcDatasetTypeProperties) GetOrcCompressionCodec() (rv any) {
	if o != nil {
		return o.OrcCompressionCodec
	}
	return
}

// OrcFormat - The data stored in Optimized Row Columnar (ORC) format.
type OrcFormat struct {
	// REQUIRED; Type of dataset storage format.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer any

	// Serializer. Type: string (or Expression with resultType string).
	Serializer any
}

func (o *OrcFormat) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OrcFormat) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OrcFormat) GetDeserializer() (rv any) {
	if o != nil {
		return o.Deserializer
	}
	return
}

func (o *OrcFormat) GetSerializer() (rv any) {
	if o != nil {
		return o.Serializer
	}
	return
}

// GetDatasetStorageFormat implements the DatasetStorageFormatClassification interface for type OrcFormat.
func (o *OrcFormat) GetDatasetStorageFormat() *DatasetStorageFormat {
	return &DatasetStorageFormat{
		AdditionalProperties: o.AdditionalProperties,
		Deserializer:         o.Deserializer,
		Serializer:           o.Serializer,
		Type:                 o.Type,
	}
}

// OrcSink - A copy activity ORC sink.
type OrcSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// ORC format settings.
	FormatSettings *OrcWriteSettings

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// ORC store settings.
	StoreSettings StoreWriteSettingsClassification

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (o *OrcSink) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OrcSink) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OrcSink) GetFormatSettings() (rv *OrcWriteSettings) {
	if o != nil {
		return o.FormatSettings
	}
	return
}

func (o *OrcSink) GetMaxConcurrentConnections() (rv any) {
	if o != nil {
		return o.MaxConcurrentConnections
	}
	return
}

func (o *OrcSink) GetSinkRetryCount() (rv any) {
	if o != nil {
		return o.SinkRetryCount
	}
	return
}

func (o *OrcSink) GetSinkRetryWait() (rv any) {
	if o != nil {
		return o.SinkRetryWait
	}
	return
}

func (o *OrcSink) GetStoreSettings() (rv StoreWriteSettingsClassification) {
	if o != nil {
		return o.StoreSettings
	}
	return
}

func (o *OrcSink) GetWriteBatchSize() (rv any) {
	if o != nil {
		return o.WriteBatchSize
	}
	return
}

func (o *OrcSink) GetWriteBatchTimeout() (rv any) {
	if o != nil {
		return o.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type OrcSink.
func (o *OrcSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     o.AdditionalProperties,
		MaxConcurrentConnections: o.MaxConcurrentConnections,
		SinkRetryCount:           o.SinkRetryCount,
		SinkRetryWait:            o.SinkRetryWait,
		Type:                     o.Type,
		WriteBatchSize:           o.WriteBatchSize,
		WriteBatchTimeout:        o.WriteBatchTimeout,
	}
}

// OrcSource - A copy activity ORC source.
type OrcSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// ORC store settings.
	StoreSettings StoreReadSettingsClassification
}

func (o *OrcSource) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OrcSource) GetAdditionalColumns() (rv any) {
	if o != nil {
		return o.AdditionalColumns
	}
	return
}

func (o *OrcSource) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OrcSource) GetMaxConcurrentConnections() (rv any) {
	if o != nil {
		return o.MaxConcurrentConnections
	}
	return
}

func (o *OrcSource) GetSourceRetryCount() (rv any) {
	if o != nil {
		return o.SourceRetryCount
	}
	return
}

func (o *OrcSource) GetSourceRetryWait() (rv any) {
	if o != nil {
		return o.SourceRetryWait
	}
	return
}

func (o *OrcSource) GetStoreSettings() (rv StoreReadSettingsClassification) {
	if o != nil {
		return o.StoreSettings
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type OrcSource.
func (o *OrcSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     o.AdditionalProperties,
		MaxConcurrentConnections: o.MaxConcurrentConnections,
		SourceRetryCount:         o.SourceRetryCount,
		SourceRetryWait:          o.SourceRetryWait,
		Type:                     o.Type,
	}
}

// OrcWriteSettings - Orc write settings.
type OrcWriteSettings struct {
	// REQUIRED; The write setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies the file name pattern _. when copy from non-file based store without partitionOptions. Type: string (or Expression
	// with resultType string).
	FileNamePrefix any

	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with
	// resultType integer).
	MaxRowsPerFile any
}

func (o *OrcWriteSettings) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

func (o *OrcWriteSettings) GetAdditionalProperties() (rv map[string]any) {
	if o != nil {
		return o.AdditionalProperties
	}
	return
}

func (o *OrcWriteSettings) GetFileNamePrefix() (rv any) {
	if o != nil {
		return o.FileNamePrefix
	}
	return
}

func (o *OrcWriteSettings) GetMaxRowsPerFile() (rv any) {
	if o != nil {
		return o.MaxRowsPerFile
	}
	return
}

// GetFormatWriteSettings implements the FormatWriteSettingsClassification interface for type OrcWriteSettings.
func (o *OrcWriteSettings) GetFormatWriteSettings() *FormatWriteSettings {
	return &FormatWriteSettings{
		AdditionalProperties: o.AdditionalProperties,
		Type:                 o.Type,
	}
}

// ParameterSpecification - Definition of a single parameter for an entity.
type ParameterSpecification struct {
	// REQUIRED; Parameter type.
	Type *ParameterType

	// Default value of parameter.
	DefaultValue any
}

func (p *ParameterSpecification) GetType() (rv *ParameterType) {
	if p != nil {
		return p.Type
	}
	return
}

func (p *ParameterSpecification) GetDefaultValue() (rv any) {
	if p != nil {
		return p.DefaultValue
	}
	return
}

// ParquetDataset - Parquet dataset.
type ParquetDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Parquet dataset properties.
	TypeProperties *ParquetDatasetTypeProperties
}

func (p *ParquetDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if p != nil {
		return p.LinkedServiceName
	}
	return
}

func (p *ParquetDataset) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *ParquetDataset) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *ParquetDataset) GetAnnotations() (rv []any) {
	if p != nil {
		return p.Annotations
	}
	return
}

func (p *ParquetDataset) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *ParquetDataset) GetFolder() (rv *DatasetFolder) {
	if p != nil {
		return p.Folder
	}
	return
}

func (p *ParquetDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if p != nil {
		return p.Parameters
	}
	return
}

func (p *ParquetDataset) GetSchema() (rv any) {
	if p != nil {
		return p.Schema
	}
	return
}

func (p *ParquetDataset) GetStructure() (rv any) {
	if p != nil {
		return p.Structure
	}
	return
}

func (p *ParquetDataset) GetTypeProperties() (rv *ParquetDatasetTypeProperties) {
	if p != nil {
		return p.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type ParquetDataset.
func (p *ParquetDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: p.AdditionalProperties,
		Annotations:          p.Annotations,
		Description:          p.Description,
		Folder:               p.Folder,
		LinkedServiceName:    p.LinkedServiceName,
		Parameters:           p.Parameters,
		Schema:               p.Schema,
		Structure:            p.Structure,
		Type:                 p.Type,
	}
}

// ParquetDatasetTypeProperties - Parquet dataset properties.
type ParquetDatasetTypeProperties struct {
	// REQUIRED; The location of the parquet storage.
	Location DatasetLocationClassification

	// A string from ParquetCompressionCodecEnum or an expression
	CompressionCodec any
}

func (p *ParquetDatasetTypeProperties) GetLocation() (rv DatasetLocationClassification) {
	if p != nil {
		return p.Location
	}
	return
}

func (p *ParquetDatasetTypeProperties) GetCompressionCodec() (rv any) {
	if p != nil {
		return p.CompressionCodec
	}
	return
}

// ParquetFormat - The data stored in Parquet format.
type ParquetFormat struct {
	// REQUIRED; Type of dataset storage format.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer any

	// Serializer. Type: string (or Expression with resultType string).
	Serializer any
}

func (p *ParquetFormat) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *ParquetFormat) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *ParquetFormat) GetDeserializer() (rv any) {
	if p != nil {
		return p.Deserializer
	}
	return
}

func (p *ParquetFormat) GetSerializer() (rv any) {
	if p != nil {
		return p.Serializer
	}
	return
}

// GetDatasetStorageFormat implements the DatasetStorageFormatClassification interface for type ParquetFormat.
func (p *ParquetFormat) GetDatasetStorageFormat() *DatasetStorageFormat {
	return &DatasetStorageFormat{
		AdditionalProperties: p.AdditionalProperties,
		Deserializer:         p.Deserializer,
		Serializer:           p.Serializer,
		Type:                 p.Type,
	}
}

// ParquetSink - A copy activity Parquet sink.
type ParquetSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Parquet format settings.
	FormatSettings *ParquetWriteSettings

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Parquet store settings.
	StoreSettings StoreWriteSettingsClassification

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (p *ParquetSink) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *ParquetSink) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *ParquetSink) GetFormatSettings() (rv *ParquetWriteSettings) {
	if p != nil {
		return p.FormatSettings
	}
	return
}

func (p *ParquetSink) GetMaxConcurrentConnections() (rv any) {
	if p != nil {
		return p.MaxConcurrentConnections
	}
	return
}

func (p *ParquetSink) GetSinkRetryCount() (rv any) {
	if p != nil {
		return p.SinkRetryCount
	}
	return
}

func (p *ParquetSink) GetSinkRetryWait() (rv any) {
	if p != nil {
		return p.SinkRetryWait
	}
	return
}

func (p *ParquetSink) GetStoreSettings() (rv StoreWriteSettingsClassification) {
	if p != nil {
		return p.StoreSettings
	}
	return
}

func (p *ParquetSink) GetWriteBatchSize() (rv any) {
	if p != nil {
		return p.WriteBatchSize
	}
	return
}

func (p *ParquetSink) GetWriteBatchTimeout() (rv any) {
	if p != nil {
		return p.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type ParquetSink.
func (p *ParquetSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     p.AdditionalProperties,
		MaxConcurrentConnections: p.MaxConcurrentConnections,
		SinkRetryCount:           p.SinkRetryCount,
		SinkRetryWait:            p.SinkRetryWait,
		Type:                     p.Type,
		WriteBatchSize:           p.WriteBatchSize,
		WriteBatchTimeout:        p.WriteBatchTimeout,
	}
}

// ParquetSource - A copy activity Parquet source.
type ParquetSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Parquet store settings.
	StoreSettings StoreReadSettingsClassification
}

func (p *ParquetSource) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *ParquetSource) GetAdditionalColumns() (rv any) {
	if p != nil {
		return p.AdditionalColumns
	}
	return
}

func (p *ParquetSource) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *ParquetSource) GetMaxConcurrentConnections() (rv any) {
	if p != nil {
		return p.MaxConcurrentConnections
	}
	return
}

func (p *ParquetSource) GetSourceRetryCount() (rv any) {
	if p != nil {
		return p.SourceRetryCount
	}
	return
}

func (p *ParquetSource) GetSourceRetryWait() (rv any) {
	if p != nil {
		return p.SourceRetryWait
	}
	return
}

func (p *ParquetSource) GetStoreSettings() (rv StoreReadSettingsClassification) {
	if p != nil {
		return p.StoreSettings
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type ParquetSource.
func (p *ParquetSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     p.AdditionalProperties,
		MaxConcurrentConnections: p.MaxConcurrentConnections,
		SourceRetryCount:         p.SourceRetryCount,
		SourceRetryWait:          p.SourceRetryWait,
		Type:                     p.Type,
	}
}

// ParquetWriteSettings - Parquet write settings.
type ParquetWriteSettings struct {
	// REQUIRED; The write setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies the file name pattern _. when copy from non-file based store without partitionOptions. Type: string (or Expression
	// with resultType string).
	FileNamePrefix any

	// Limit the written file's row count to be smaller than or equal to the specified count. Type: integer (or Expression with
	// resultType integer).
	MaxRowsPerFile any
}

func (p *ParquetWriteSettings) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *ParquetWriteSettings) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *ParquetWriteSettings) GetFileNamePrefix() (rv any) {
	if p != nil {
		return p.FileNamePrefix
	}
	return
}

func (p *ParquetWriteSettings) GetMaxRowsPerFile() (rv any) {
	if p != nil {
		return p.MaxRowsPerFile
	}
	return
}

// GetFormatWriteSettings implements the FormatWriteSettingsClassification interface for type ParquetWriteSettings.
func (p *ParquetWriteSettings) GetFormatWriteSettings() *FormatWriteSettings {
	return &FormatWriteSettings{
		AdditionalProperties: p.AdditionalProperties,
		Type:                 p.Type,
	}
}

// PaypalLinkedService - Paypal Service linked service.
type PaypalLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Paypal Service linked service properties.
	TypeProperties *PaypalLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (p *PaypalLinkedService) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *PaypalLinkedService) GetTypeProperties() (rv *PaypalLinkedServiceTypeProperties) {
	if p != nil {
		return p.TypeProperties
	}
	return
}

func (p *PaypalLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PaypalLinkedService) GetAnnotations() (rv []any) {
	if p != nil {
		return p.Annotations
	}
	return
}

func (p *PaypalLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if p != nil {
		return p.ConnectVia
	}
	return
}

func (p *PaypalLinkedService) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *PaypalLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if p != nil {
		return p.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type PaypalLinkedService.
func (p *PaypalLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: p.AdditionalProperties,
		Annotations:          p.Annotations,
		ConnectVia:           p.ConnectVia,
		Description:          p.Description,
		Parameters:           p.Parameters,
		Type:                 p.Type,
	}
}

// PaypalLinkedServiceTypeProperties - Paypal Service linked service properties.
type PaypalLinkedServiceTypeProperties struct {
	// REQUIRED; The client ID associated with your PayPal application.
	ClientID any

	// REQUIRED; The URL of the PayPal instance. (i.e. api.sandbox.paypal.com)
	Host any

	// The client secret associated with your PayPal application.
	ClientSecret SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true.
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification any
}

func (p *PaypalLinkedServiceTypeProperties) GetClientID() (rv any) {
	if p != nil {
		return p.ClientID
	}
	return
}

func (p *PaypalLinkedServiceTypeProperties) GetHost() (rv any) {
	if p != nil {
		return p.Host
	}
	return
}

func (p *PaypalLinkedServiceTypeProperties) GetClientSecret() (rv SecretBaseClassification) {
	if p != nil {
		return p.ClientSecret
	}
	return
}

func (p *PaypalLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if p != nil {
		return p.EncryptedCredential
	}
	return
}

func (p *PaypalLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if p != nil {
		return p.UseEncryptedEndpoints
	}
	return
}

func (p *PaypalLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if p != nil {
		return p.UseHostVerification
	}
	return
}

func (p *PaypalLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if p != nil {
		return p.UsePeerVerification
	}
	return
}

// PaypalObjectDataset - Paypal Service dataset.
type PaypalObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (p *PaypalObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if p != nil {
		return p.LinkedServiceName
	}
	return
}

func (p *PaypalObjectDataset) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *PaypalObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PaypalObjectDataset) GetAnnotations() (rv []any) {
	if p != nil {
		return p.Annotations
	}
	return
}

func (p *PaypalObjectDataset) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *PaypalObjectDataset) GetFolder() (rv *DatasetFolder) {
	if p != nil {
		return p.Folder
	}
	return
}

func (p *PaypalObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if p != nil {
		return p.Parameters
	}
	return
}

func (p *PaypalObjectDataset) GetSchema() (rv any) {
	if p != nil {
		return p.Schema
	}
	return
}

func (p *PaypalObjectDataset) GetStructure() (rv any) {
	if p != nil {
		return p.Structure
	}
	return
}

func (p *PaypalObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if p != nil {
		return p.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type PaypalObjectDataset.
func (p *PaypalObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: p.AdditionalProperties,
		Annotations:          p.Annotations,
		Description:          p.Description,
		Folder:               p.Folder,
		LinkedServiceName:    p.LinkedServiceName,
		Parameters:           p.Parameters,
		Schema:               p.Schema,
		Structure:            p.Structure,
		Type:                 p.Type,
	}
}

// PaypalSource - A copy activity Paypal Service source.
type PaypalSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (p *PaypalSource) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *PaypalSource) GetAdditionalColumns() (rv any) {
	if p != nil {
		return p.AdditionalColumns
	}
	return
}

func (p *PaypalSource) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PaypalSource) GetMaxConcurrentConnections() (rv any) {
	if p != nil {
		return p.MaxConcurrentConnections
	}
	return
}

func (p *PaypalSource) GetQuery() (rv any) {
	if p != nil {
		return p.Query
	}
	return
}

func (p *PaypalSource) GetQueryTimeout() (rv any) {
	if p != nil {
		return p.QueryTimeout
	}
	return
}

func (p *PaypalSource) GetSourceRetryCount() (rv any) {
	if p != nil {
		return p.SourceRetryCount
	}
	return
}

func (p *PaypalSource) GetSourceRetryWait() (rv any) {
	if p != nil {
		return p.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type PaypalSource.
func (p *PaypalSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     p.AdditionalProperties,
		MaxConcurrentConnections: p.MaxConcurrentConnections,
		SourceRetryCount:         p.SourceRetryCount,
		SourceRetryWait:          p.SourceRetryWait,
		Type:                     p.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type PaypalSource.
func (p *PaypalSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        p.AdditionalColumns,
		AdditionalProperties:     p.AdditionalProperties,
		MaxConcurrentConnections: p.MaxConcurrentConnections,
		QueryTimeout:             p.QueryTimeout,
		SourceRetryCount:         p.SourceRetryCount,
		SourceRetryWait:          p.SourceRetryWait,
		Type:                     p.Type,
	}
}

// PhoenixDatasetTypeProperties - Phoenix Dataset Properties
type PhoenixDatasetTypeProperties struct {
	// The schema name of the Phoenix. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the Phoenix. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (p *PhoenixDatasetTypeProperties) GetSchema() (rv any) {
	if p != nil {
		return p.Schema
	}
	return
}

func (p *PhoenixDatasetTypeProperties) GetTable() (rv any) {
	if p != nil {
		return p.Table
	}
	return
}

func (p *PhoenixDatasetTypeProperties) GetTableName() (rv any) {
	if p != nil {
		return p.TableName
	}
	return
}

// PhoenixLinkedService - Phoenix server linked service.
type PhoenixLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Phoenix server linked service properties.
	TypeProperties *PhoenixLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (p *PhoenixLinkedService) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *PhoenixLinkedService) GetTypeProperties() (rv *PhoenixLinkedServiceTypeProperties) {
	if p != nil {
		return p.TypeProperties
	}
	return
}

func (p *PhoenixLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PhoenixLinkedService) GetAnnotations() (rv []any) {
	if p != nil {
		return p.Annotations
	}
	return
}

func (p *PhoenixLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if p != nil {
		return p.ConnectVia
	}
	return
}

func (p *PhoenixLinkedService) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *PhoenixLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if p != nil {
		return p.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type PhoenixLinkedService.
func (p *PhoenixLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: p.AdditionalProperties,
		Annotations:          p.Annotations,
		ConnectVia:           p.ConnectVia,
		Description:          p.Description,
		Parameters:           p.Parameters,
		Type:                 p.Type,
	}
}

// PhoenixLinkedServiceTypeProperties - Phoenix server linked service properties.
type PhoenixLinkedServiceTypeProperties struct {
	// REQUIRED; The authentication mechanism used to connect to the Phoenix server.
	AuthenticationType *PhoenixAuthenticationType

	// REQUIRED; The IP address or host name of the Phoenix server. (i.e. 192.168.222.160)
	Host any

	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over
	// SSL. The default value is false.
	AllowHostNameCNMismatch any

	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert any

	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSSL any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The partial URL corresponding to the Phoenix server. (i.e. /gateway/sandbox/phoenix/version). The default value is hbasephoenix
	// if using WindowsAzureHDInsightService.
	HTTPPath any

	// The password corresponding to the user name.
	Password SecretBaseClassification

	// The TCP port that the Phoenix server uses to listen for client connections. The default value is 8765.
	Port any

	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This
	// property can only be set when using SSL on self-hosted IR. The default value
	// is the cacerts.pem file installed with the IR.
	TrustedCertPath any

	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is
	// false.
	UseSystemTrustStore any

	// The user name used to connect to the Phoenix server.
	Username any
}

func (p *PhoenixLinkedServiceTypeProperties) GetAuthenticationType() (rv *PhoenixAuthenticationType) {
	if p != nil {
		return p.AuthenticationType
	}
	return
}

func (p *PhoenixLinkedServiceTypeProperties) GetHost() (rv any) {
	if p != nil {
		return p.Host
	}
	return
}

func (p *PhoenixLinkedServiceTypeProperties) GetAllowHostNameCNMismatch() (rv any) {
	if p != nil {
		return p.AllowHostNameCNMismatch
	}
	return
}

func (p *PhoenixLinkedServiceTypeProperties) GetAllowSelfSignedServerCert() (rv any) {
	if p != nil {
		return p.AllowSelfSignedServerCert
	}
	return
}

func (p *PhoenixLinkedServiceTypeProperties) GetEnableSSL() (rv any) {
	if p != nil {
		return p.EnableSSL
	}
	return
}

func (p *PhoenixLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if p != nil {
		return p.EncryptedCredential
	}
	return
}

func (p *PhoenixLinkedServiceTypeProperties) GetHTTPPath() (rv any) {
	if p != nil {
		return p.HTTPPath
	}
	return
}

func (p *PhoenixLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if p != nil {
		return p.Password
	}
	return
}

func (p *PhoenixLinkedServiceTypeProperties) GetPort() (rv any) {
	if p != nil {
		return p.Port
	}
	return
}

func (p *PhoenixLinkedServiceTypeProperties) GetTrustedCertPath() (rv any) {
	if p != nil {
		return p.TrustedCertPath
	}
	return
}

func (p *PhoenixLinkedServiceTypeProperties) GetUseSystemTrustStore() (rv any) {
	if p != nil {
		return p.UseSystemTrustStore
	}
	return
}

func (p *PhoenixLinkedServiceTypeProperties) GetUsername() (rv any) {
	if p != nil {
		return p.Username
	}
	return
}

// PhoenixObjectDataset - Phoenix server dataset.
type PhoenixObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *PhoenixDatasetTypeProperties
}

func (p *PhoenixObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if p != nil {
		return p.LinkedServiceName
	}
	return
}

func (p *PhoenixObjectDataset) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *PhoenixObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PhoenixObjectDataset) GetAnnotations() (rv []any) {
	if p != nil {
		return p.Annotations
	}
	return
}

func (p *PhoenixObjectDataset) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *PhoenixObjectDataset) GetFolder() (rv *DatasetFolder) {
	if p != nil {
		return p.Folder
	}
	return
}

func (p *PhoenixObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if p != nil {
		return p.Parameters
	}
	return
}

func (p *PhoenixObjectDataset) GetSchema() (rv any) {
	if p != nil {
		return p.Schema
	}
	return
}

func (p *PhoenixObjectDataset) GetStructure() (rv any) {
	if p != nil {
		return p.Structure
	}
	return
}

func (p *PhoenixObjectDataset) GetTypeProperties() (rv *PhoenixDatasetTypeProperties) {
	if p != nil {
		return p.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type PhoenixObjectDataset.
func (p *PhoenixObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: p.AdditionalProperties,
		Annotations:          p.Annotations,
		Description:          p.Description,
		Folder:               p.Folder,
		LinkedServiceName:    p.LinkedServiceName,
		Parameters:           p.Parameters,
		Schema:               p.Schema,
		Structure:            p.Structure,
		Type:                 p.Type,
	}
}

// PhoenixSource - A copy activity Phoenix server source.
type PhoenixSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (p *PhoenixSource) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *PhoenixSource) GetAdditionalColumns() (rv any) {
	if p != nil {
		return p.AdditionalColumns
	}
	return
}

func (p *PhoenixSource) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PhoenixSource) GetMaxConcurrentConnections() (rv any) {
	if p != nil {
		return p.MaxConcurrentConnections
	}
	return
}

func (p *PhoenixSource) GetQuery() (rv any) {
	if p != nil {
		return p.Query
	}
	return
}

func (p *PhoenixSource) GetQueryTimeout() (rv any) {
	if p != nil {
		return p.QueryTimeout
	}
	return
}

func (p *PhoenixSource) GetSourceRetryCount() (rv any) {
	if p != nil {
		return p.SourceRetryCount
	}
	return
}

func (p *PhoenixSource) GetSourceRetryWait() (rv any) {
	if p != nil {
		return p.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type PhoenixSource.
func (p *PhoenixSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     p.AdditionalProperties,
		MaxConcurrentConnections: p.MaxConcurrentConnections,
		SourceRetryCount:         p.SourceRetryCount,
		SourceRetryWait:          p.SourceRetryWait,
		Type:                     p.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type PhoenixSource.
func (p *PhoenixSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        p.AdditionalColumns,
		AdditionalProperties:     p.AdditionalProperties,
		MaxConcurrentConnections: p.MaxConcurrentConnections,
		QueryTimeout:             p.QueryTimeout,
		SourceRetryCount:         p.SourceRetryCount,
		SourceRetryWait:          p.SourceRetryWait,
		Type:                     p.Type,
	}
}

// Pipeline - A workspace pipeline.
type Pipeline struct {
	// List of activities in pipeline.
	Activities []ActivityClassification

	// List of tags that can be used for describing the Pipeline.
	Annotations []any

	// The max number of concurrent runs for the pipeline.
	Concurrency *int32

	// The description of the pipeline.
	Description *string

	// The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
	Folder *PipelineFolder

	// List of parameters for pipeline.
	Parameters map[string]*ParameterSpecification

	// Dimensions emitted by Pipeline.
	RunDimensions map[string]any

	// List of variables for pipeline.
	Variables map[string]*VariableSpecification
}

func (p *Pipeline) GetActivities() (rv []ActivityClassification) {
	if p != nil {
		return p.Activities
	}
	return
}

func (p *Pipeline) GetAnnotations() (rv []any) {
	if p != nil {
		return p.Annotations
	}
	return
}

func (p *Pipeline) GetConcurrency() (rv int32) {
	if p != nil && p.Concurrency != nil {
		return *p.Concurrency
	}
	return
}

func (p *Pipeline) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *Pipeline) GetFolder() (rv *PipelineFolder) {
	if p != nil {
		return p.Folder
	}
	return
}

func (p *Pipeline) GetParameters() (rv map[string]*ParameterSpecification) {
	if p != nil {
		return p.Parameters
	}
	return
}

func (p *Pipeline) GetRunDimensions() (rv map[string]any) {
	if p != nil {
		return p.RunDimensions
	}
	return
}

func (p *Pipeline) GetVariables() (rv map[string]*VariableSpecification) {
	if p != nil {
		return p.Variables
	}
	return
}

// PipelineFolder - The folder that this Pipeline is in. If not specified, Pipeline will appear at the root level.
type PipelineFolder struct {
	// The name of the folder that this Pipeline is in.
	Name *string
}

func (p *PipelineFolder) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

// PipelineListResponse - A list of pipeline resources.
type PipelineListResponse struct {
	// REQUIRED; List of pipelines.
	Value []*PipelineResource

	// The link to the next page of results, if any remaining results exist.
	NextLink *string
}

func (p *PipelineListResponse) GetValue() (rv []*PipelineResource) {
	if p != nil {
		return p.Value
	}
	return
}

func (p *PipelineListResponse) GetNextLink() (rv string) {
	if p != nil && p.NextLink != nil {
		return *p.NextLink
	}
	return
}

// PipelineReference - Pipeline reference type.
type PipelineReference struct {
	// REQUIRED; Reference pipeline name.
	ReferenceName *string

	// REQUIRED; Pipeline reference type.
	Type *PipelineReferenceType

	// Reference name.
	Name *string
}

func (p *PipelineReference) GetReferenceName() (rv string) {
	if p != nil && p.ReferenceName != nil {
		return *p.ReferenceName
	}
	return
}

func (p *PipelineReference) GetType() (rv *PipelineReferenceType) {
	if p != nil {
		return p.Type
	}
	return
}

func (p *PipelineReference) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

// PipelineResource - Pipeline resource type.
type PipelineResource struct {
	// REQUIRED; Properties of the pipeline.
	Properties *Pipeline

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (p *PipelineResource) GetProperties() (rv *Pipeline) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PipelineResource) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PipelineResource) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *PipelineResource) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PipelineResource) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PipelineResource) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PipelineRun - Information about a pipeline run.
type PipelineRun struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// READ-ONLY; The duration of a pipeline run.
	DurationInMs *int32

	// READ-ONLY; Entity that started the pipeline run.
	InvokedBy *PipelineRunInvokedBy

	// READ-ONLY; Indicates if the recovered pipeline run is the latest in its group.
	IsLatest *bool

	// READ-ONLY; The last updated timestamp for the pipeline run event in ISO8601 format.
	LastUpdated *time.Time

	// READ-ONLY; The message from a pipeline run.
	Message *string

	// READ-ONLY; The full or partial list of parameter name, value pair used in the pipeline run.
	Parameters map[string]*string

	// READ-ONLY; The pipeline name.
	PipelineName *string

	// READ-ONLY; The end time of a pipeline run in ISO8601 format.
	RunEnd *time.Time

	// READ-ONLY; Identifier that correlates all the recovery runs of a pipeline run.
	RunGroupID *string

	// READ-ONLY; Identifier of a run.
	RunID *string

	// READ-ONLY; The start time of a pipeline run in ISO8601 format.
	RunStart *time.Time

	// READ-ONLY; The status of a pipeline run.
	Status *string
}

func (p *PipelineRun) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PipelineRun) GetDurationInMs() (rv int32) {
	if p != nil && p.DurationInMs != nil {
		return *p.DurationInMs
	}
	return
}

func (p *PipelineRun) GetInvokedBy() (rv *PipelineRunInvokedBy) {
	if p != nil {
		return p.InvokedBy
	}
	return
}

func (p *PipelineRun) GetIsLatest() (rv bool) {
	if p != nil && p.IsLatest != nil {
		return *p.IsLatest
	}
	return
}

func (p *PipelineRun) GetLastUpdated() (rv *time.Time) {
	if p != nil {
		return p.LastUpdated
	}
	return
}

func (p *PipelineRun) GetMessage() (rv string) {
	if p != nil && p.Message != nil {
		return *p.Message
	}
	return
}

func (p *PipelineRun) GetParameters() (rv map[string]*string) {
	if p != nil {
		return p.Parameters
	}
	return
}

func (p *PipelineRun) GetPipelineName() (rv string) {
	if p != nil && p.PipelineName != nil {
		return *p.PipelineName
	}
	return
}

func (p *PipelineRun) GetRunEnd() (rv *time.Time) {
	if p != nil {
		return p.RunEnd
	}
	return
}

func (p *PipelineRun) GetRunGroupID() (rv string) {
	if p != nil && p.RunGroupID != nil {
		return *p.RunGroupID
	}
	return
}

func (p *PipelineRun) GetRunID() (rv string) {
	if p != nil && p.RunID != nil {
		return *p.RunID
	}
	return
}

func (p *PipelineRun) GetRunStart() (rv *time.Time) {
	if p != nil {
		return p.RunStart
	}
	return
}

func (p *PipelineRun) GetStatus() (rv string) {
	if p != nil && p.Status != nil {
		return *p.Status
	}
	return
}

// PipelineRunInvokedBy - Provides entity name and id that started the pipeline run.
type PipelineRunInvokedBy struct {
	// READ-ONLY; The ID of the entity that started the run.
	ID *string

	// READ-ONLY; The type of the entity that started the run.
	InvokedByType *string

	// READ-ONLY; Name of the entity that started the pipeline run.
	Name *string
}

func (p *PipelineRunInvokedBy) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PipelineRunInvokedBy) GetInvokedByType() (rv string) {
	if p != nil && p.InvokedByType != nil {
		return *p.InvokedByType
	}
	return
}

func (p *PipelineRunInvokedBy) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

// PipelineRunsQueryResponse - A list pipeline runs.
type PipelineRunsQueryResponse struct {
	// REQUIRED; List of pipeline runs.
	Value []*PipelineRun

	// The continuation token for getting the next page of results, if any remaining results exist, null otherwise.
	ContinuationToken *string
}

func (p *PipelineRunsQueryResponse) GetValue() (rv []*PipelineRun) {
	if p != nil {
		return p.Value
	}
	return
}

func (p *PipelineRunsQueryResponse) GetContinuationToken() (rv string) {
	if p != nil && p.ContinuationToken != nil {
		return *p.ContinuationToken
	}
	return
}

// PolybaseSettings - PolyBase settings.
type PolybaseSettings struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Determines the number of rows to attempt to retrieve before the PolyBase recalculates the percentage of rejected rows.
	// Type: integer (or Expression with resultType integer), minimum: 0.
	RejectSampleValue any

	// Reject type.
	RejectType *PolybaseSettingsRejectType

	// Specifies the value or the percentage of rows that can be rejected before the query fails. Type: number (or Expression
	// with resultType number), minimum: 0.
	RejectValue any

	// Specifies how to handle missing values in delimited text files when PolyBase retrieves data from the text file. Type: boolean
	// (or Expression with resultType boolean).
	UseTypeDefault any
}

func (p *PolybaseSettings) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PolybaseSettings) GetRejectSampleValue() (rv any) {
	if p != nil {
		return p.RejectSampleValue
	}
	return
}

func (p *PolybaseSettings) GetRejectType() (rv *PolybaseSettingsRejectType) {
	if p != nil {
		return p.RejectType
	}
	return
}

func (p *PolybaseSettings) GetRejectValue() (rv any) {
	if p != nil {
		return p.RejectValue
	}
	return
}

func (p *PolybaseSettings) GetUseTypeDefault() (rv any) {
	if p != nil {
		return p.UseTypeDefault
	}
	return
}

// PostgreSQLLinkedService - Linked service for PostgreSQL data source.
type PostgreSQLLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; PostgreSQL linked service properties.
	TypeProperties *PostgreSQLLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (p *PostgreSQLLinkedService) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *PostgreSQLLinkedService) GetTypeProperties() (rv *PostgreSQLLinkedServiceTypeProperties) {
	if p != nil {
		return p.TypeProperties
	}
	return
}

func (p *PostgreSQLLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PostgreSQLLinkedService) GetAnnotations() (rv []any) {
	if p != nil {
		return p.Annotations
	}
	return
}

func (p *PostgreSQLLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if p != nil {
		return p.ConnectVia
	}
	return
}

func (p *PostgreSQLLinkedService) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *PostgreSQLLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if p != nil {
		return p.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type PostgreSQLLinkedService.
func (p *PostgreSQLLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: p.AdditionalProperties,
		Annotations:          p.Annotations,
		ConnectVia:           p.ConnectVia,
		Description:          p.Description,
		Parameters:           p.Parameters,
		Type:                 p.Type,
	}
}

// PostgreSQLLinkedServiceTypeProperties - PostgreSQL linked service properties.
type PostgreSQLLinkedServiceTypeProperties struct {
	// REQUIRED; The connection string.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference
}

func (p *PostgreSQLLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if p != nil {
		return p.ConnectionString
	}
	return
}

func (p *PostgreSQLLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if p != nil {
		return p.EncryptedCredential
	}
	return
}

func (p *PostgreSQLLinkedServiceTypeProperties) GetPassword() (rv *AzureKeyVaultSecretReference) {
	if p != nil {
		return p.Password
	}
	return
}

// PostgreSQLSource - A copy activity source for PostgreSQL databases.
type PostgreSQLSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (p *PostgreSQLSource) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *PostgreSQLSource) GetAdditionalColumns() (rv any) {
	if p != nil {
		return p.AdditionalColumns
	}
	return
}

func (p *PostgreSQLSource) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PostgreSQLSource) GetMaxConcurrentConnections() (rv any) {
	if p != nil {
		return p.MaxConcurrentConnections
	}
	return
}

func (p *PostgreSQLSource) GetQuery() (rv any) {
	if p != nil {
		return p.Query
	}
	return
}

func (p *PostgreSQLSource) GetQueryTimeout() (rv any) {
	if p != nil {
		return p.QueryTimeout
	}
	return
}

func (p *PostgreSQLSource) GetSourceRetryCount() (rv any) {
	if p != nil {
		return p.SourceRetryCount
	}
	return
}

func (p *PostgreSQLSource) GetSourceRetryWait() (rv any) {
	if p != nil {
		return p.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type PostgreSQLSource.
func (p *PostgreSQLSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     p.AdditionalProperties,
		MaxConcurrentConnections: p.MaxConcurrentConnections,
		SourceRetryCount:         p.SourceRetryCount,
		SourceRetryWait:          p.SourceRetryWait,
		Type:                     p.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type PostgreSQLSource.
func (p *PostgreSQLSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        p.AdditionalColumns,
		AdditionalProperties:     p.AdditionalProperties,
		MaxConcurrentConnections: p.MaxConcurrentConnections,
		QueryTimeout:             p.QueryTimeout,
		SourceRetryCount:         p.SourceRetryCount,
		SourceRetryWait:          p.SourceRetryWait,
		Type:                     p.Type,
	}
}

// PostgreSQLTableDataset - The PostgreSQL table dataset.
type PostgreSQLTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// PostgreSQL table dataset properties.
	TypeProperties *PostgreSQLTableDatasetTypeProperties
}

func (p *PostgreSQLTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if p != nil {
		return p.LinkedServiceName
	}
	return
}

func (p *PostgreSQLTableDataset) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *PostgreSQLTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PostgreSQLTableDataset) GetAnnotations() (rv []any) {
	if p != nil {
		return p.Annotations
	}
	return
}

func (p *PostgreSQLTableDataset) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *PostgreSQLTableDataset) GetFolder() (rv *DatasetFolder) {
	if p != nil {
		return p.Folder
	}
	return
}

func (p *PostgreSQLTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if p != nil {
		return p.Parameters
	}
	return
}

func (p *PostgreSQLTableDataset) GetSchema() (rv any) {
	if p != nil {
		return p.Schema
	}
	return
}

func (p *PostgreSQLTableDataset) GetStructure() (rv any) {
	if p != nil {
		return p.Structure
	}
	return
}

func (p *PostgreSQLTableDataset) GetTypeProperties() (rv *PostgreSQLTableDatasetTypeProperties) {
	if p != nil {
		return p.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type PostgreSQLTableDataset.
func (p *PostgreSQLTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: p.AdditionalProperties,
		Annotations:          p.Annotations,
		Description:          p.Description,
		Folder:               p.Folder,
		LinkedServiceName:    p.LinkedServiceName,
		Parameters:           p.Parameters,
		Schema:               p.Schema,
		Structure:            p.Structure,
		Type:                 p.Type,
	}
}

// PostgreSQLTableDatasetTypeProperties - PostgreSQL table dataset properties.
type PostgreSQLTableDatasetTypeProperties struct {
	// The PostgreSQL schema name. Type: string (or Expression with resultType string).
	Schema any

	// The PostgreSQL table name. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (p *PostgreSQLTableDatasetTypeProperties) GetSchema() (rv any) {
	if p != nil {
		return p.Schema
	}
	return
}

func (p *PostgreSQLTableDatasetTypeProperties) GetTable() (rv any) {
	if p != nil {
		return p.Table
	}
	return
}

func (p *PostgreSQLTableDatasetTypeProperties) GetTableName() (rv any) {
	if p != nil {
		return p.TableName
	}
	return
}

// PowerBIWorkspaceLinkedService - Power BI Workspace linked service.
type PowerBIWorkspaceLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Power BI Workspace linked service properties.
	TypeProperties *PowerBIWorkspaceLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (p *PowerBIWorkspaceLinkedService) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *PowerBIWorkspaceLinkedService) GetTypeProperties() (rv *PowerBIWorkspaceLinkedServiceTypeProperties) {
	if p != nil {
		return p.TypeProperties
	}
	return
}

func (p *PowerBIWorkspaceLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PowerBIWorkspaceLinkedService) GetAnnotations() (rv []any) {
	if p != nil {
		return p.Annotations
	}
	return
}

func (p *PowerBIWorkspaceLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if p != nil {
		return p.ConnectVia
	}
	return
}

func (p *PowerBIWorkspaceLinkedService) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *PowerBIWorkspaceLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if p != nil {
		return p.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type PowerBIWorkspaceLinkedService.
func (p *PowerBIWorkspaceLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: p.AdditionalProperties,
		Annotations:          p.Annotations,
		ConnectVia:           p.ConnectVia,
		Description:          p.Description,
		Parameters:           p.Parameters,
		Type:                 p.Type,
	}
}

// PowerBIWorkspaceLinkedServiceTypeProperties - Power BI Workspace linked service properties.
type PowerBIWorkspaceLinkedServiceTypeProperties struct {
	// REQUIRED; The tenant id to which the Power BI workspace belongs.
	TenantID *string

	// REQUIRED; The Power BI workspace id.
	WorkspaceID *string
}

func (p *PowerBIWorkspaceLinkedServiceTypeProperties) GetTenantID() (rv string) {
	if p != nil && p.TenantID != nil {
		return *p.TenantID
	}
	return
}

func (p *PowerBIWorkspaceLinkedServiceTypeProperties) GetWorkspaceID() (rv string) {
	if p != nil && p.WorkspaceID != nil {
		return *p.WorkspaceID
	}
	return
}

// PrestoDatasetTypeProperties - Presto Dataset Properties
type PrestoDatasetTypeProperties struct {
	// The schema name of the Presto. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the Presto. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (p *PrestoDatasetTypeProperties) GetSchema() (rv any) {
	if p != nil {
		return p.Schema
	}
	return
}

func (p *PrestoDatasetTypeProperties) GetTable() (rv any) {
	if p != nil {
		return p.Table
	}
	return
}

func (p *PrestoDatasetTypeProperties) GetTableName() (rv any) {
	if p != nil {
		return p.TableName
	}
	return
}

// PrestoLinkedService - Presto server linked service.
type PrestoLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Presto server linked service properties.
	TypeProperties *PrestoLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (p *PrestoLinkedService) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *PrestoLinkedService) GetTypeProperties() (rv *PrestoLinkedServiceTypeProperties) {
	if p != nil {
		return p.TypeProperties
	}
	return
}

func (p *PrestoLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PrestoLinkedService) GetAnnotations() (rv []any) {
	if p != nil {
		return p.Annotations
	}
	return
}

func (p *PrestoLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if p != nil {
		return p.ConnectVia
	}
	return
}

func (p *PrestoLinkedService) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *PrestoLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if p != nil {
		return p.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type PrestoLinkedService.
func (p *PrestoLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: p.AdditionalProperties,
		Annotations:          p.Annotations,
		ConnectVia:           p.ConnectVia,
		Description:          p.Description,
		Parameters:           p.Parameters,
		Type:                 p.Type,
	}
}

// PrestoLinkedServiceTypeProperties - Presto server linked service properties.
type PrestoLinkedServiceTypeProperties struct {
	// REQUIRED; The authentication mechanism used to connect to the Presto server.
	AuthenticationType *PrestoAuthenticationType

	// REQUIRED; The catalog context for all request against the server.
	Catalog any

	// REQUIRED; The IP address or host name of the Presto server. (i.e. 192.168.222.160)
	Host any

	// REQUIRED; The version of the Presto server. (i.e. 0.148-t)
	ServerVersion any

	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over
	// SSL. The default value is false.
	AllowHostNameCNMismatch any

	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert any

	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSSL any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The password corresponding to the user name.
	Password SecretBaseClassification

	// The TCP port that the Presto server uses to listen for client connections. The default value is 8080.
	Port any

	// The local time zone used by the connection. Valid values for this option are specified in the IANA Time Zone Database.
	// The default value is the system time zone.
	TimeZoneID any

	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This
	// property can only be set when using SSL on self-hosted IR. The default value
	// is the cacerts.pem file installed with the IR.
	TrustedCertPath any

	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is
	// false.
	UseSystemTrustStore any

	// The user name used to connect to the Presto server.
	Username any
}

func (p *PrestoLinkedServiceTypeProperties) GetAuthenticationType() (rv *PrestoAuthenticationType) {
	if p != nil {
		return p.AuthenticationType
	}
	return
}

func (p *PrestoLinkedServiceTypeProperties) GetCatalog() (rv any) {
	if p != nil {
		return p.Catalog
	}
	return
}

func (p *PrestoLinkedServiceTypeProperties) GetHost() (rv any) {
	if p != nil {
		return p.Host
	}
	return
}

func (p *PrestoLinkedServiceTypeProperties) GetServerVersion() (rv any) {
	if p != nil {
		return p.ServerVersion
	}
	return
}

func (p *PrestoLinkedServiceTypeProperties) GetAllowHostNameCNMismatch() (rv any) {
	if p != nil {
		return p.AllowHostNameCNMismatch
	}
	return
}

func (p *PrestoLinkedServiceTypeProperties) GetAllowSelfSignedServerCert() (rv any) {
	if p != nil {
		return p.AllowSelfSignedServerCert
	}
	return
}

func (p *PrestoLinkedServiceTypeProperties) GetEnableSSL() (rv any) {
	if p != nil {
		return p.EnableSSL
	}
	return
}

func (p *PrestoLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if p != nil {
		return p.EncryptedCredential
	}
	return
}

func (p *PrestoLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if p != nil {
		return p.Password
	}
	return
}

func (p *PrestoLinkedServiceTypeProperties) GetPort() (rv any) {
	if p != nil {
		return p.Port
	}
	return
}

func (p *PrestoLinkedServiceTypeProperties) GetTimeZoneID() (rv any) {
	if p != nil {
		return p.TimeZoneID
	}
	return
}

func (p *PrestoLinkedServiceTypeProperties) GetTrustedCertPath() (rv any) {
	if p != nil {
		return p.TrustedCertPath
	}
	return
}

func (p *PrestoLinkedServiceTypeProperties) GetUseSystemTrustStore() (rv any) {
	if p != nil {
		return p.UseSystemTrustStore
	}
	return
}

func (p *PrestoLinkedServiceTypeProperties) GetUsername() (rv any) {
	if p != nil {
		return p.Username
	}
	return
}

// PrestoObjectDataset - Presto server dataset.
type PrestoObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *PrestoDatasetTypeProperties
}

func (p *PrestoObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if p != nil {
		return p.LinkedServiceName
	}
	return
}

func (p *PrestoObjectDataset) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *PrestoObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PrestoObjectDataset) GetAnnotations() (rv []any) {
	if p != nil {
		return p.Annotations
	}
	return
}

func (p *PrestoObjectDataset) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *PrestoObjectDataset) GetFolder() (rv *DatasetFolder) {
	if p != nil {
		return p.Folder
	}
	return
}

func (p *PrestoObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if p != nil {
		return p.Parameters
	}
	return
}

func (p *PrestoObjectDataset) GetSchema() (rv any) {
	if p != nil {
		return p.Schema
	}
	return
}

func (p *PrestoObjectDataset) GetStructure() (rv any) {
	if p != nil {
		return p.Structure
	}
	return
}

func (p *PrestoObjectDataset) GetTypeProperties() (rv *PrestoDatasetTypeProperties) {
	if p != nil {
		return p.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type PrestoObjectDataset.
func (p *PrestoObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: p.AdditionalProperties,
		Annotations:          p.Annotations,
		Description:          p.Description,
		Folder:               p.Folder,
		LinkedServiceName:    p.LinkedServiceName,
		Parameters:           p.Parameters,
		Schema:               p.Schema,
		Structure:            p.Structure,
		Type:                 p.Type,
	}
}

// PrestoSource - A copy activity Presto server source.
type PrestoSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (p *PrestoSource) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

func (p *PrestoSource) GetAdditionalColumns() (rv any) {
	if p != nil {
		return p.AdditionalColumns
	}
	return
}

func (p *PrestoSource) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PrestoSource) GetMaxConcurrentConnections() (rv any) {
	if p != nil {
		return p.MaxConcurrentConnections
	}
	return
}

func (p *PrestoSource) GetQuery() (rv any) {
	if p != nil {
		return p.Query
	}
	return
}

func (p *PrestoSource) GetQueryTimeout() (rv any) {
	if p != nil {
		return p.QueryTimeout
	}
	return
}

func (p *PrestoSource) GetSourceRetryCount() (rv any) {
	if p != nil {
		return p.SourceRetryCount
	}
	return
}

func (p *PrestoSource) GetSourceRetryWait() (rv any) {
	if p != nil {
		return p.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type PrestoSource.
func (p *PrestoSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     p.AdditionalProperties,
		MaxConcurrentConnections: p.MaxConcurrentConnections,
		SourceRetryCount:         p.SourceRetryCount,
		SourceRetryWait:          p.SourceRetryWait,
		Type:                     p.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type PrestoSource.
func (p *PrestoSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        p.AdditionalColumns,
		AdditionalProperties:     p.AdditionalProperties,
		MaxConcurrentConnections: p.MaxConcurrentConnections,
		QueryTimeout:             p.QueryTimeout,
		SourceRetryCount:         p.SourceRetryCount,
		SourceRetryWait:          p.SourceRetryWait,
		Type:                     p.Type,
	}
}

// PrivateEndpoint - Private endpoint details
type PrivateEndpoint struct {
	// READ-ONLY; Resource id of the private endpoint.
	ID *string
}

func (p *PrivateEndpoint) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

// PrivateEndpointConnection - A private endpoint connection
type PrivateEndpointConnection struct {
	// Private endpoint connection properties.
	Properties *PrivateEndpointConnectionProperties

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (p *PrivateEndpointConnection) GetProperties() (rv *PrivateEndpointConnectionProperties) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PrivateEndpointConnection) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PrivateEndpointConnection) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PrivateEndpointConnection) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PrivateEndpointConnectionProperties - Properties of a private endpoint connection.
type PrivateEndpointConnectionProperties struct {
	// The private endpoint which the connection belongs to.
	PrivateEndpoint *PrivateEndpoint

	// Connection state of the private endpoint connection.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState

	// READ-ONLY; Provisioning state of the private endpoint connection.
	ProvisioningState *string
}

func (p *PrivateEndpointConnectionProperties) GetPrivateEndpoint() (rv *PrivateEndpoint) {
	if p != nil {
		return p.PrivateEndpoint
	}
	return
}

func (p *PrivateEndpointConnectionProperties) GetPrivateLinkServiceConnectionState() (rv *PrivateLinkServiceConnectionState) {
	if p != nil {
		return p.PrivateLinkServiceConnectionState
	}
	return
}

func (p *PrivateEndpointConnectionProperties) GetProvisioningState() (rv string) {
	if p != nil && p.ProvisioningState != nil {
		return *p.ProvisioningState
	}
	return
}

// PrivateLinkServiceConnectionState - Connection state details of the private endpoint
type PrivateLinkServiceConnectionState struct {
	// The private link service connection description.
	Description *string

	// The private link service connection status.
	Status *string

	// READ-ONLY; The actions required for private link service connection.
	ActionsRequired *string
}

func (p *PrivateLinkServiceConnectionState) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *PrivateLinkServiceConnectionState) GetStatus() (rv string) {
	if p != nil && p.Status != nil {
		return *p.Status
	}
	return
}

func (p *PrivateLinkServiceConnectionState) GetActionsRequired() (rv string) {
	if p != nil && p.ActionsRequired != nil {
		return *p.ActionsRequired
	}
	return
}

// ProxyResource - The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a
// location
type ProxyResource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (p *ProxyResource) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *ProxyResource) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *ProxyResource) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PurviewConfiguration - Purview Configuration
type PurviewConfiguration struct {
	// Purview Resource ID
	PurviewResourceID *string
}

func (p *PurviewConfiguration) GetPurviewResourceID() (rv string) {
	if p != nil && p.PurviewResourceID != nil {
		return *p.PurviewResourceID
	}
	return
}

// QueryDataFlowDebugSessionsResponse - A list of active debug sessions.
type QueryDataFlowDebugSessionsResponse struct {
	// The link to the next page of results, if any remaining results exist.
	NextLink *string

	// Array with all active debug sessions.
	Value []*DataFlowDebugSessionInfo
}

func (q *QueryDataFlowDebugSessionsResponse) GetNextLink() (rv string) {
	if q != nil && q.NextLink != nil {
		return *q.NextLink
	}
	return
}

func (q *QueryDataFlowDebugSessionsResponse) GetValue() (rv []*DataFlowDebugSessionInfo) {
	if q != nil {
		return q.Value
	}
	return
}

type QueryTableStatusRequest struct {
	// Continuation token to query table status
	ContinuationToken any

	// Max segment count to query table status
	MaxSegmentCount *int32
}

func (q *QueryTableStatusRequest) GetContinuationToken() (rv any) {
	if q != nil {
		return q.ContinuationToken
	}
	return
}

func (q *QueryTableStatusRequest) GetMaxSegmentCount() (rv int32) {
	if q != nil && q.MaxSegmentCount != nil {
		return *q.MaxSegmentCount
	}
	return
}

// QuickBooksLinkedService - QuickBooks server linked service.
type QuickBooksLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; QuickBooks server linked service properties.
	TypeProperties *QuickBooksLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (q *QuickBooksLinkedService) GetType() (rv string) {
	if q != nil && q.Type != nil {
		return *q.Type
	}
	return
}

func (q *QuickBooksLinkedService) GetTypeProperties() (rv *QuickBooksLinkedServiceTypeProperties) {
	if q != nil {
		return q.TypeProperties
	}
	return
}

func (q *QuickBooksLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if q != nil {
		return q.AdditionalProperties
	}
	return
}

func (q *QuickBooksLinkedService) GetAnnotations() (rv []any) {
	if q != nil {
		return q.Annotations
	}
	return
}

func (q *QuickBooksLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if q != nil {
		return q.ConnectVia
	}
	return
}

func (q *QuickBooksLinkedService) GetDescription() (rv string) {
	if q != nil && q.Description != nil {
		return *q.Description
	}
	return
}

func (q *QuickBooksLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if q != nil {
		return q.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type QuickBooksLinkedService.
func (q *QuickBooksLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: q.AdditionalProperties,
		Annotations:          q.Annotations,
		ConnectVia:           q.ConnectVia,
		Description:          q.Description,
		Parameters:           q.Parameters,
		Type:                 q.Type,
	}
}

// QuickBooksLinkedServiceTypeProperties - QuickBooks server linked service properties.
type QuickBooksLinkedServiceTypeProperties struct {
	// REQUIRED; The access token for OAuth 1.0 authentication.
	AccessToken SecretBaseClassification

	// REQUIRED; The access token secret for OAuth 1.0 authentication.
	AccessTokenSecret SecretBaseClassification

	// REQUIRED; The company ID of the QuickBooks company to authorize.
	CompanyID any

	// REQUIRED; The consumer key for OAuth 1.0 authentication.
	ConsumerKey any

	// REQUIRED; The consumer secret for OAuth 1.0 authentication.
	ConsumerSecret SecretBaseClassification

	// REQUIRED; The endpoint of the QuickBooks server. (i.e. quickbooks.api.intuit.com)
	Endpoint any

	// Properties used to connect to QuickBooks. It is mutually exclusive with any other properties in the linked service. Type:
	// object.
	ConnectionProperties any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any
}

func (q *QuickBooksLinkedServiceTypeProperties) GetAccessToken() (rv SecretBaseClassification) {
	if q != nil {
		return q.AccessToken
	}
	return
}

func (q *QuickBooksLinkedServiceTypeProperties) GetAccessTokenSecret() (rv SecretBaseClassification) {
	if q != nil {
		return q.AccessTokenSecret
	}
	return
}

func (q *QuickBooksLinkedServiceTypeProperties) GetCompanyID() (rv any) {
	if q != nil {
		return q.CompanyID
	}
	return
}

func (q *QuickBooksLinkedServiceTypeProperties) GetConsumerKey() (rv any) {
	if q != nil {
		return q.ConsumerKey
	}
	return
}

func (q *QuickBooksLinkedServiceTypeProperties) GetConsumerSecret() (rv SecretBaseClassification) {
	if q != nil {
		return q.ConsumerSecret
	}
	return
}

func (q *QuickBooksLinkedServiceTypeProperties) GetEndpoint() (rv any) {
	if q != nil {
		return q.Endpoint
	}
	return
}

func (q *QuickBooksLinkedServiceTypeProperties) GetConnectionProperties() (rv any) {
	if q != nil {
		return q.ConnectionProperties
	}
	return
}

func (q *QuickBooksLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if q != nil {
		return q.EncryptedCredential
	}
	return
}

func (q *QuickBooksLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if q != nil {
		return q.UseEncryptedEndpoints
	}
	return
}

// QuickBooksObjectDataset - QuickBooks server dataset.
type QuickBooksObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (q *QuickBooksObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if q != nil {
		return q.LinkedServiceName
	}
	return
}

func (q *QuickBooksObjectDataset) GetType() (rv string) {
	if q != nil && q.Type != nil {
		return *q.Type
	}
	return
}

func (q *QuickBooksObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if q != nil {
		return q.AdditionalProperties
	}
	return
}

func (q *QuickBooksObjectDataset) GetAnnotations() (rv []any) {
	if q != nil {
		return q.Annotations
	}
	return
}

func (q *QuickBooksObjectDataset) GetDescription() (rv string) {
	if q != nil && q.Description != nil {
		return *q.Description
	}
	return
}

func (q *QuickBooksObjectDataset) GetFolder() (rv *DatasetFolder) {
	if q != nil {
		return q.Folder
	}
	return
}

func (q *QuickBooksObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if q != nil {
		return q.Parameters
	}
	return
}

func (q *QuickBooksObjectDataset) GetSchema() (rv any) {
	if q != nil {
		return q.Schema
	}
	return
}

func (q *QuickBooksObjectDataset) GetStructure() (rv any) {
	if q != nil {
		return q.Structure
	}
	return
}

func (q *QuickBooksObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if q != nil {
		return q.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type QuickBooksObjectDataset.
func (q *QuickBooksObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: q.AdditionalProperties,
		Annotations:          q.Annotations,
		Description:          q.Description,
		Folder:               q.Folder,
		LinkedServiceName:    q.LinkedServiceName,
		Parameters:           q.Parameters,
		Schema:               q.Schema,
		Structure:            q.Structure,
		Type:                 q.Type,
	}
}

// QuickBooksSource - A copy activity QuickBooks server source.
type QuickBooksSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (q *QuickBooksSource) GetType() (rv string) {
	if q != nil && q.Type != nil {
		return *q.Type
	}
	return
}

func (q *QuickBooksSource) GetAdditionalColumns() (rv any) {
	if q != nil {
		return q.AdditionalColumns
	}
	return
}

func (q *QuickBooksSource) GetAdditionalProperties() (rv map[string]any) {
	if q != nil {
		return q.AdditionalProperties
	}
	return
}

func (q *QuickBooksSource) GetMaxConcurrentConnections() (rv any) {
	if q != nil {
		return q.MaxConcurrentConnections
	}
	return
}

func (q *QuickBooksSource) GetQuery() (rv any) {
	if q != nil {
		return q.Query
	}
	return
}

func (q *QuickBooksSource) GetQueryTimeout() (rv any) {
	if q != nil {
		return q.QueryTimeout
	}
	return
}

func (q *QuickBooksSource) GetSourceRetryCount() (rv any) {
	if q != nil {
		return q.SourceRetryCount
	}
	return
}

func (q *QuickBooksSource) GetSourceRetryWait() (rv any) {
	if q != nil {
		return q.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type QuickBooksSource.
func (q *QuickBooksSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     q.AdditionalProperties,
		MaxConcurrentConnections: q.MaxConcurrentConnections,
		SourceRetryCount:         q.SourceRetryCount,
		SourceRetryWait:          q.SourceRetryWait,
		Type:                     q.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type QuickBooksSource.
func (q *QuickBooksSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        q.AdditionalColumns,
		AdditionalProperties:     q.AdditionalProperties,
		MaxConcurrentConnections: q.MaxConcurrentConnections,
		QueryTimeout:             q.QueryTimeout,
		SourceRetryCount:         q.SourceRetryCount,
		SourceRetryWait:          q.SourceRetryWait,
		Type:                     q.Type,
	}
}

// QuickbaseLinkedService - Linked service for Quickbase.
type QuickbaseLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Quickbase linked service properties.
	TypeProperties *QuickbaseLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (q *QuickbaseLinkedService) GetType() (rv string) {
	if q != nil && q.Type != nil {
		return *q.Type
	}
	return
}

func (q *QuickbaseLinkedService) GetTypeProperties() (rv *QuickbaseLinkedServiceTypeProperties) {
	if q != nil {
		return q.TypeProperties
	}
	return
}

func (q *QuickbaseLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if q != nil {
		return q.AdditionalProperties
	}
	return
}

func (q *QuickbaseLinkedService) GetAnnotations() (rv []any) {
	if q != nil {
		return q.Annotations
	}
	return
}

func (q *QuickbaseLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if q != nil {
		return q.ConnectVia
	}
	return
}

func (q *QuickbaseLinkedService) GetDescription() (rv string) {
	if q != nil && q.Description != nil {
		return *q.Description
	}
	return
}

func (q *QuickbaseLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if q != nil {
		return q.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type QuickbaseLinkedService.
func (q *QuickbaseLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: q.AdditionalProperties,
		Annotations:          q.Annotations,
		ConnectVia:           q.ConnectVia,
		Description:          q.Description,
		Parameters:           q.Parameters,
		Type:                 q.Type,
	}
}

// QuickbaseLinkedServiceTypeProperties - Quickbase linked service type properties.
type QuickbaseLinkedServiceTypeProperties struct {
	// REQUIRED; The url to connect Quickbase source. Type: string (or Expression with resultType string).
	URL any

	// REQUIRED; The user token for the Quickbase source.
	UserToken SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any
}

func (q *QuickbaseLinkedServiceTypeProperties) GetURL() (rv any) {
	if q != nil {
		return q.URL
	}
	return
}

func (q *QuickbaseLinkedServiceTypeProperties) GetUserToken() (rv SecretBaseClassification) {
	if q != nil {
		return q.UserToken
	}
	return
}

func (q *QuickbaseLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if q != nil {
		return q.EncryptedCredential
	}
	return
}

// RecurrenceSchedule - The recurrence schedule.
type RecurrenceSchedule struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The hours.
	Hours []*int32

	// The minutes.
	Minutes []*int32

	// The month days.
	MonthDays []*int32

	// The monthly occurrences.
	MonthlyOccurrences []*RecurrenceScheduleOccurrence

	// The days of the week.
	WeekDays []*DayOfWeek
}

func (r *RecurrenceSchedule) GetAdditionalProperties() (rv map[string]any) {
	if r != nil {
		return r.AdditionalProperties
	}
	return
}

func (r *RecurrenceSchedule) GetHours() (rv []*int32) {
	if r != nil {
		return r.Hours
	}
	return
}

func (r *RecurrenceSchedule) GetMinutes() (rv []*int32) {
	if r != nil {
		return r.Minutes
	}
	return
}

func (r *RecurrenceSchedule) GetMonthDays() (rv []*int32) {
	if r != nil {
		return r.MonthDays
	}
	return
}

func (r *RecurrenceSchedule) GetMonthlyOccurrences() (rv []*RecurrenceScheduleOccurrence) {
	if r != nil {
		return r.MonthlyOccurrences
	}
	return
}

func (r *RecurrenceSchedule) GetWeekDays() (rv []*DayOfWeek) {
	if r != nil {
		return r.WeekDays
	}
	return
}

// RecurrenceScheduleOccurrence - The recurrence schedule occurrence.
type RecurrenceScheduleOccurrence struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The day of the week.
	Day *DayOfWeek

	// The occurrence.
	Occurrence *int32
}

func (r *RecurrenceScheduleOccurrence) GetAdditionalProperties() (rv map[string]any) {
	if r != nil {
		return r.AdditionalProperties
	}
	return
}

func (r *RecurrenceScheduleOccurrence) GetDay() (rv *DayOfWeek) {
	if r != nil {
		return r.Day
	}
	return
}

func (r *RecurrenceScheduleOccurrence) GetOccurrence() (rv int32) {
	if r != nil && r.Occurrence != nil {
		return *r.Occurrence
	}
	return
}

// RedirectIncompatibleRowSettings - Redirect incompatible row settings
type RedirectIncompatibleRowSettings struct {
	// REQUIRED; Name of the Azure Storage, Storage SAS, or Azure Data Lake Store linked service used for redirecting incompatible
	// row. Must be specified if redirectIncompatibleRowSettings is specified. Type: string
	// (or Expression with resultType string).
	LinkedServiceName any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The path for storing the redirect incompatible row data. Type: string (or Expression with resultType string).
	Path any
}

func (r *RedirectIncompatibleRowSettings) GetLinkedServiceName() (rv any) {
	if r != nil {
		return r.LinkedServiceName
	}
	return
}

func (r *RedirectIncompatibleRowSettings) GetAdditionalProperties() (rv map[string]any) {
	if r != nil {
		return r.AdditionalProperties
	}
	return
}

func (r *RedirectIncompatibleRowSettings) GetPath() (rv any) {
	if r != nil {
		return r.Path
	}
	return
}

// RedshiftUnloadSettings - The Amazon S3 settings needed for the interim Amazon S3 when copying from Amazon Redshift with
// unload. With this, data from Amazon Redshift source will be unloaded into S3 first and then copied into
// the targeted sink from the interim S3.
type RedshiftUnloadSettings struct {
	// REQUIRED; The bucket of the interim Amazon S3 which will be used to store the unloaded data from Amazon Redshift source.
	// The bucket must be in the same region as the Amazon Redshift source. Type: string (or
	// Expression with resultType string).
	BucketName any

	// REQUIRED; The name of the Amazon S3 linked service which will be used for the unload operation when copying from the Amazon
	// Redshift source.
	S3LinkedServiceName *LinkedServiceReference
}

func (r *RedshiftUnloadSettings) GetBucketName() (rv any) {
	if r != nil {
		return r.BucketName
	}
	return
}

func (r *RedshiftUnloadSettings) GetS3LinkedServiceName() (rv *LinkedServiceReference) {
	if r != nil {
		return r.S3LinkedServiceName
	}
	return
}

// RelationalSource - A copy activity source for various relational databases.
type RelationalSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Type: string (or Expression with resultType string).
	Query any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (r *RelationalSource) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

func (r *RelationalSource) GetAdditionalColumns() (rv any) {
	if r != nil {
		return r.AdditionalColumns
	}
	return
}

func (r *RelationalSource) GetAdditionalProperties() (rv map[string]any) {
	if r != nil {
		return r.AdditionalProperties
	}
	return
}

func (r *RelationalSource) GetMaxConcurrentConnections() (rv any) {
	if r != nil {
		return r.MaxConcurrentConnections
	}
	return
}

func (r *RelationalSource) GetQuery() (rv any) {
	if r != nil {
		return r.Query
	}
	return
}

func (r *RelationalSource) GetSourceRetryCount() (rv any) {
	if r != nil {
		return r.SourceRetryCount
	}
	return
}

func (r *RelationalSource) GetSourceRetryWait() (rv any) {
	if r != nil {
		return r.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type RelationalSource.
func (r *RelationalSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     r.AdditionalProperties,
		MaxConcurrentConnections: r.MaxConcurrentConnections,
		SourceRetryCount:         r.SourceRetryCount,
		SourceRetryWait:          r.SourceRetryWait,
		Type:                     r.Type,
	}
}

// RelationalTableDataset - The relational table dataset.
type RelationalTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Relational table dataset properties.
	TypeProperties *RelationalTableDatasetTypeProperties
}

func (r *RelationalTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if r != nil {
		return r.LinkedServiceName
	}
	return
}

func (r *RelationalTableDataset) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

func (r *RelationalTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if r != nil {
		return r.AdditionalProperties
	}
	return
}

func (r *RelationalTableDataset) GetAnnotations() (rv []any) {
	if r != nil {
		return r.Annotations
	}
	return
}

func (r *RelationalTableDataset) GetDescription() (rv string) {
	if r != nil && r.Description != nil {
		return *r.Description
	}
	return
}

func (r *RelationalTableDataset) GetFolder() (rv *DatasetFolder) {
	if r != nil {
		return r.Folder
	}
	return
}

func (r *RelationalTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if r != nil {
		return r.Parameters
	}
	return
}

func (r *RelationalTableDataset) GetSchema() (rv any) {
	if r != nil {
		return r.Schema
	}
	return
}

func (r *RelationalTableDataset) GetStructure() (rv any) {
	if r != nil {
		return r.Structure
	}
	return
}

func (r *RelationalTableDataset) GetTypeProperties() (rv *RelationalTableDatasetTypeProperties) {
	if r != nil {
		return r.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type RelationalTableDataset.
func (r *RelationalTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: r.AdditionalProperties,
		Annotations:          r.Annotations,
		Description:          r.Description,
		Folder:               r.Folder,
		LinkedServiceName:    r.LinkedServiceName,
		Parameters:           r.Parameters,
		Schema:               r.Schema,
		Structure:            r.Structure,
		Type:                 r.Type,
	}
}

// RelationalTableDatasetTypeProperties - Relational table dataset properties.
type RelationalTableDatasetTypeProperties struct {
	// The relational table name. Type: string (or Expression with resultType string).
	TableName any
}

func (r *RelationalTableDatasetTypeProperties) GetTableName() (rv any) {
	if r != nil {
		return r.TableName
	}
	return
}

// RerunTriggerListResponse - A list of rerun triggers.
type RerunTriggerListResponse struct {
	// REQUIRED; List of rerun triggers.
	Value []*RerunTriggerResource

	// READ-ONLY; The continuation token for getting the next page of results, if any remaining results exist, null otherwise.
	NextLink *string
}

func (r *RerunTriggerListResponse) GetValue() (rv []*RerunTriggerResource) {
	if r != nil {
		return r.Value
	}
	return
}

func (r *RerunTriggerListResponse) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

// RerunTriggerResource - RerunTrigger resource type.
type RerunTriggerResource struct {
	// REQUIRED; Properties of the rerun trigger.
	Properties *RerunTumblingWindowTrigger

	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (r *RerunTriggerResource) GetProperties() (rv *RerunTumblingWindowTrigger) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *RerunTriggerResource) GetEtag() (rv string) {
	if r != nil && r.Etag != nil {
		return *r.Etag
	}
	return
}

func (r *RerunTriggerResource) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *RerunTriggerResource) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RerunTriggerResource) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// RerunTumblingWindowTrigger - Trigger that schedules pipeline reruns for all fixed time interval windows from a requested
// start time to requested end time.
type RerunTumblingWindowTrigger struct {
	// REQUIRED; Trigger type.
	Type *string

	// REQUIRED; Rerun Trigger properties.
	TypeProperties *RerunTumblingWindowTriggerTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the trigger.
	Annotations []any

	// Trigger description.
	Description *string

	// READ-ONLY; Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState *TriggerRuntimeState
}

func (r *RerunTumblingWindowTrigger) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

func (r *RerunTumblingWindowTrigger) GetTypeProperties() (rv *RerunTumblingWindowTriggerTypeProperties) {
	if r != nil {
		return r.TypeProperties
	}
	return
}

func (r *RerunTumblingWindowTrigger) GetAdditionalProperties() (rv map[string]any) {
	if r != nil {
		return r.AdditionalProperties
	}
	return
}

func (r *RerunTumblingWindowTrigger) GetAnnotations() (rv []any) {
	if r != nil {
		return r.Annotations
	}
	return
}

func (r *RerunTumblingWindowTrigger) GetDescription() (rv string) {
	if r != nil && r.Description != nil {
		return *r.Description
	}
	return
}

func (r *RerunTumblingWindowTrigger) GetRuntimeState() (rv *TriggerRuntimeState) {
	if r != nil {
		return r.RuntimeState
	}
	return
}

// GetTrigger implements the TriggerClassification interface for type RerunTumblingWindowTrigger.
func (r *RerunTumblingWindowTrigger) GetTrigger() *Trigger {
	return &Trigger{
		AdditionalProperties: r.AdditionalProperties,
		Annotations:          r.Annotations,
		Description:          r.Description,
		RuntimeState:         r.RuntimeState,
		Type:                 r.Type,
	}
}

// RerunTumblingWindowTriggerActionParameters - Rerun tumbling window trigger Parameters.
type RerunTumblingWindowTriggerActionParameters struct {
	// REQUIRED; The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
	EndTime *time.Time

	// REQUIRED; The max number of parallel time windows (ready for execution) for which a rerun is triggered.
	MaxConcurrency *int32

	// REQUIRED; The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
	StartTime *time.Time
}

func (r *RerunTumblingWindowTriggerActionParameters) GetEndTime() (rv *time.Time) {
	if r != nil {
		return r.EndTime
	}
	return
}

func (r *RerunTumblingWindowTriggerActionParameters) GetMaxConcurrency() (rv int32) {
	if r != nil && r.MaxConcurrency != nil {
		return *r.MaxConcurrency
	}
	return
}

func (r *RerunTumblingWindowTriggerActionParameters) GetStartTime() (rv *time.Time) {
	if r != nil {
		return r.StartTime
	}
	return
}

// RerunTumblingWindowTriggerTypeProperties - Rerun Trigger properties.
type RerunTumblingWindowTriggerTypeProperties struct {
	// REQUIRED; The parent trigger reference.
	ParentTrigger any

	// REQUIRED; The end time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedEndTime *time.Time

	// REQUIRED; The start time for the time period for which restatement is initiated. Only UTC time is currently supported.
	RequestedStartTime *time.Time

	// REQUIRED; The max number of parallel time windows (ready for execution) for which a rerun is triggered.
	RerunConcurrency *int32
}

func (r *RerunTumblingWindowTriggerTypeProperties) GetParentTrigger() (rv any) {
	if r != nil {
		return r.ParentTrigger
	}
	return
}

func (r *RerunTumblingWindowTriggerTypeProperties) GetRequestedEndTime() (rv *time.Time) {
	if r != nil {
		return r.RequestedEndTime
	}
	return
}

func (r *RerunTumblingWindowTriggerTypeProperties) GetRequestedStartTime() (rv *time.Time) {
	if r != nil {
		return r.RequestedStartTime
	}
	return
}

func (r *RerunTumblingWindowTriggerTypeProperties) GetRerunConcurrency() (rv int32) {
	if r != nil && r.RerunConcurrency != nil {
		return *r.RerunConcurrency
	}
	return
}

// Resource - Common fields that are returned in the response for all Azure Resource Manager resources
type Resource struct {
	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (r *Resource) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *Resource) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *Resource) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// ResponsysLinkedService - Responsys linked service.
type ResponsysLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Responsys linked service properties.
	TypeProperties *ResponsysLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (r *ResponsysLinkedService) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

func (r *ResponsysLinkedService) GetTypeProperties() (rv *ResponsysLinkedServiceTypeProperties) {
	if r != nil {
		return r.TypeProperties
	}
	return
}

func (r *ResponsysLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if r != nil {
		return r.AdditionalProperties
	}
	return
}

func (r *ResponsysLinkedService) GetAnnotations() (rv []any) {
	if r != nil {
		return r.Annotations
	}
	return
}

func (r *ResponsysLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if r != nil {
		return r.ConnectVia
	}
	return
}

func (r *ResponsysLinkedService) GetDescription() (rv string) {
	if r != nil && r.Description != nil {
		return *r.Description
	}
	return
}

func (r *ResponsysLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if r != nil {
		return r.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type ResponsysLinkedService.
func (r *ResponsysLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: r.AdditionalProperties,
		Annotations:          r.Annotations,
		ConnectVia:           r.ConnectVia,
		Description:          r.Description,
		Parameters:           r.Parameters,
		Type:                 r.Type,
	}
}

// ResponsysLinkedServiceTypeProperties - Responsys linked service properties.
type ResponsysLinkedServiceTypeProperties struct {
	// REQUIRED; The client ID associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientID any

	// REQUIRED; The endpoint of the Responsys server.
	Endpoint any

	// The client secret associated with the Responsys application. Type: string (or Expression with resultType string).
	ClientSecret SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression
	// with resultType boolean).
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true. Type: boolean (or Expression with
	// resultType boolean).
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean
	// (or Expression with resultType boolean).
	UsePeerVerification any
}

func (r *ResponsysLinkedServiceTypeProperties) GetClientID() (rv any) {
	if r != nil {
		return r.ClientID
	}
	return
}

func (r *ResponsysLinkedServiceTypeProperties) GetEndpoint() (rv any) {
	if r != nil {
		return r.Endpoint
	}
	return
}

func (r *ResponsysLinkedServiceTypeProperties) GetClientSecret() (rv SecretBaseClassification) {
	if r != nil {
		return r.ClientSecret
	}
	return
}

func (r *ResponsysLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if r != nil {
		return r.EncryptedCredential
	}
	return
}

func (r *ResponsysLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if r != nil {
		return r.UseEncryptedEndpoints
	}
	return
}

func (r *ResponsysLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if r != nil {
		return r.UseHostVerification
	}
	return
}

func (r *ResponsysLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if r != nil {
		return r.UsePeerVerification
	}
	return
}

// ResponsysObjectDataset - Responsys dataset.
type ResponsysObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (r *ResponsysObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if r != nil {
		return r.LinkedServiceName
	}
	return
}

func (r *ResponsysObjectDataset) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

func (r *ResponsysObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if r != nil {
		return r.AdditionalProperties
	}
	return
}

func (r *ResponsysObjectDataset) GetAnnotations() (rv []any) {
	if r != nil {
		return r.Annotations
	}
	return
}

func (r *ResponsysObjectDataset) GetDescription() (rv string) {
	if r != nil && r.Description != nil {
		return *r.Description
	}
	return
}

func (r *ResponsysObjectDataset) GetFolder() (rv *DatasetFolder) {
	if r != nil {
		return r.Folder
	}
	return
}

func (r *ResponsysObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if r != nil {
		return r.Parameters
	}
	return
}

func (r *ResponsysObjectDataset) GetSchema() (rv any) {
	if r != nil {
		return r.Schema
	}
	return
}

func (r *ResponsysObjectDataset) GetStructure() (rv any) {
	if r != nil {
		return r.Structure
	}
	return
}

func (r *ResponsysObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if r != nil {
		return r.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type ResponsysObjectDataset.
func (r *ResponsysObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: r.AdditionalProperties,
		Annotations:          r.Annotations,
		Description:          r.Description,
		Folder:               r.Folder,
		LinkedServiceName:    r.LinkedServiceName,
		Parameters:           r.Parameters,
		Schema:               r.Schema,
		Structure:            r.Structure,
		Type:                 r.Type,
	}
}

// ResponsysSource - A copy activity Responsys source.
type ResponsysSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (r *ResponsysSource) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

func (r *ResponsysSource) GetAdditionalColumns() (rv any) {
	if r != nil {
		return r.AdditionalColumns
	}
	return
}

func (r *ResponsysSource) GetAdditionalProperties() (rv map[string]any) {
	if r != nil {
		return r.AdditionalProperties
	}
	return
}

func (r *ResponsysSource) GetMaxConcurrentConnections() (rv any) {
	if r != nil {
		return r.MaxConcurrentConnections
	}
	return
}

func (r *ResponsysSource) GetQuery() (rv any) {
	if r != nil {
		return r.Query
	}
	return
}

func (r *ResponsysSource) GetQueryTimeout() (rv any) {
	if r != nil {
		return r.QueryTimeout
	}
	return
}

func (r *ResponsysSource) GetSourceRetryCount() (rv any) {
	if r != nil {
		return r.SourceRetryCount
	}
	return
}

func (r *ResponsysSource) GetSourceRetryWait() (rv any) {
	if r != nil {
		return r.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type ResponsysSource.
func (r *ResponsysSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     r.AdditionalProperties,
		MaxConcurrentConnections: r.MaxConcurrentConnections,
		SourceRetryCount:         r.SourceRetryCount,
		SourceRetryWait:          r.SourceRetryWait,
		Type:                     r.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type ResponsysSource.
func (r *ResponsysSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        r.AdditionalColumns,
		AdditionalProperties:     r.AdditionalProperties,
		MaxConcurrentConnections: r.MaxConcurrentConnections,
		QueryTimeout:             r.QueryTimeout,
		SourceRetryCount:         r.SourceRetryCount,
		SourceRetryWait:          r.SourceRetryWait,
		Type:                     r.Type,
	}
}

// RestResourceDataset - A Rest service dataset.
type RestResourceDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *RestResourceDatasetTypeProperties
}

func (r *RestResourceDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if r != nil {
		return r.LinkedServiceName
	}
	return
}

func (r *RestResourceDataset) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

func (r *RestResourceDataset) GetAdditionalProperties() (rv map[string]any) {
	if r != nil {
		return r.AdditionalProperties
	}
	return
}

func (r *RestResourceDataset) GetAnnotations() (rv []any) {
	if r != nil {
		return r.Annotations
	}
	return
}

func (r *RestResourceDataset) GetDescription() (rv string) {
	if r != nil && r.Description != nil {
		return *r.Description
	}
	return
}

func (r *RestResourceDataset) GetFolder() (rv *DatasetFolder) {
	if r != nil {
		return r.Folder
	}
	return
}

func (r *RestResourceDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if r != nil {
		return r.Parameters
	}
	return
}

func (r *RestResourceDataset) GetSchema() (rv any) {
	if r != nil {
		return r.Schema
	}
	return
}

func (r *RestResourceDataset) GetStructure() (rv any) {
	if r != nil {
		return r.Structure
	}
	return
}

func (r *RestResourceDataset) GetTypeProperties() (rv *RestResourceDatasetTypeProperties) {
	if r != nil {
		return r.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type RestResourceDataset.
func (r *RestResourceDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: r.AdditionalProperties,
		Annotations:          r.Annotations,
		Description:          r.Description,
		Folder:               r.Folder,
		LinkedServiceName:    r.LinkedServiceName,
		Parameters:           r.Parameters,
		Schema:               r.Schema,
		Structure:            r.Structure,
		Type:                 r.Type,
	}
}

// RestResourceDatasetTypeProperties - Properties specific to this dataset type.
type RestResourceDatasetTypeProperties struct {
	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders any

	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules any

	// The relative URL to the resource that the RESTful API provides. Type: string (or Expression with resultType string).
	RelativeURL any

	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody any

	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod any
}

func (r *RestResourceDatasetTypeProperties) GetAdditionalHeaders() (rv any) {
	if r != nil {
		return r.AdditionalHeaders
	}
	return
}

func (r *RestResourceDatasetTypeProperties) GetPaginationRules() (rv any) {
	if r != nil {
		return r.PaginationRules
	}
	return
}

func (r *RestResourceDatasetTypeProperties) GetRelativeURL() (rv any) {
	if r != nil {
		return r.RelativeURL
	}
	return
}

func (r *RestResourceDatasetTypeProperties) GetRequestBody() (rv any) {
	if r != nil {
		return r.RequestBody
	}
	return
}

func (r *RestResourceDatasetTypeProperties) GetRequestMethod() (rv any) {
	if r != nil {
		return r.RequestMethod
	}
	return
}

// RestServiceLinkedService - Rest Service linked service.
type RestServiceLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Rest Service linked service properties.
	TypeProperties *RestServiceLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (r *RestServiceLinkedService) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

func (r *RestServiceLinkedService) GetTypeProperties() (rv *RestServiceLinkedServiceTypeProperties) {
	if r != nil {
		return r.TypeProperties
	}
	return
}

func (r *RestServiceLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if r != nil {
		return r.AdditionalProperties
	}
	return
}

func (r *RestServiceLinkedService) GetAnnotations() (rv []any) {
	if r != nil {
		return r.Annotations
	}
	return
}

func (r *RestServiceLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if r != nil {
		return r.ConnectVia
	}
	return
}

func (r *RestServiceLinkedService) GetDescription() (rv string) {
	if r != nil && r.Description != nil {
		return *r.Description
	}
	return
}

func (r *RestServiceLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if r != nil {
		return r.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type RestServiceLinkedService.
func (r *RestServiceLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: r.AdditionalProperties,
		Annotations:          r.Annotations,
		ConnectVia:           r.ConnectVia,
		Description:          r.Description,
		Parameters:           r.Parameters,
		Type:                 r.Type,
	}
}

// RestServiceLinkedServiceTypeProperties - Rest Service linked service properties.
type RestServiceLinkedServiceTypeProperties struct {
	// REQUIRED; Type of authentication used to connect to the REST service.
	AuthenticationType *RestServiceAuthenticationType

	// REQUIRED; The base URL of the REST service.
	URL any

	// The resource you are requesting authorization to use.
	AADResourceID any

	// The additional HTTP headers in the request to RESTful API used for authorization. Type: object (or Expression with resultType
	// object).
	AuthHeaders any

	// Indicates the azure cloud type of the service principle auth. Allowed values are AzurePublic, AzureChina, AzureUsGovernment,
	// AzureGermany. Default value is the data factory regions’ cloud type. Type:
	// string (or Expression with resultType string).
	AzureCloudType any

	// The client ID associated with your application. Type: string (or Expression with resultType string).
	ClientID any

	// The client secret associated with your application.
	ClientSecret SecretBaseClassification

	// Whether to validate server side SSL certificate when connecting to the endpoint.The default value is true. Type: boolean
	// (or Expression with resultType boolean).
	EnableServerCertificateValidation any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The password used in Basic authentication type.
	Password SecretBaseClassification

	// The target service or resource to which the access will be requested. Type: string (or Expression with resultType string).
	Resource any

	// The scope of the access required. It describes what kind of access will be requested. Type: string (or Expression with
	// resultType string).
	Scope any

	// The application's client ID used in AadServicePrincipal authentication type.
	ServicePrincipalID any

	// The application's key used in AadServicePrincipal authentication type.
	ServicePrincipalKey SecretBaseClassification

	// The tenant information (domain name or tenant ID) used in AadServicePrincipal authentication type under which your application
	// resides.
	Tenant any

	// The token endpoint of the authorization server to acquire access token. Type: string (or Expression with resultType string).
	TokenEndpoint any

	// The user name used in Basic authentication type.
	UserName any
}

func (r *RestServiceLinkedServiceTypeProperties) GetAuthenticationType() (rv *RestServiceAuthenticationType) {
	if r != nil {
		return r.AuthenticationType
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetURL() (rv any) {
	if r != nil {
		return r.URL
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetAADResourceID() (rv any) {
	if r != nil {
		return r.AADResourceID
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetAuthHeaders() (rv any) {
	if r != nil {
		return r.AuthHeaders
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetAzureCloudType() (rv any) {
	if r != nil {
		return r.AzureCloudType
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetClientID() (rv any) {
	if r != nil {
		return r.ClientID
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetClientSecret() (rv SecretBaseClassification) {
	if r != nil {
		return r.ClientSecret
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetEnableServerCertificateValidation() (rv any) {
	if r != nil {
		return r.EnableServerCertificateValidation
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if r != nil {
		return r.EncryptedCredential
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if r != nil {
		return r.Password
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetResource() (rv any) {
	if r != nil {
		return r.Resource
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetScope() (rv any) {
	if r != nil {
		return r.Scope
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if r != nil {
		return r.ServicePrincipalID
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if r != nil {
		return r.ServicePrincipalKey
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetTenant() (rv any) {
	if r != nil {
		return r.Tenant
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetTokenEndpoint() (rv any) {
	if r != nil {
		return r.TokenEndpoint
	}
	return
}

func (r *RestServiceLinkedServiceTypeProperties) GetUserName() (rv any) {
	if r != nil {
		return r.UserName
	}
	return
}

// RestSink - A copy activity Rest service Sink.
type RestSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Http Compression Type to Send data in compressed format with Optimal Compression Level, Default is None. And The Only Supported
	// option is Gzip.
	HTTPCompressionType any

	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data.
	// Default value: 00:01:40. Type: string (or Expression with resultType
	// string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HTTPRequestTimeout any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The time to await before sending next request, in milliseconds
	RequestInterval any

	// The HTTP method used to call the RESTful API. The default is POST. Type: string (or Expression with resultType string).
	RequestMethod any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (r *RestSink) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

func (r *RestSink) GetAdditionalHeaders() (rv any) {
	if r != nil {
		return r.AdditionalHeaders
	}
	return
}

func (r *RestSink) GetAdditionalProperties() (rv map[string]any) {
	if r != nil {
		return r.AdditionalProperties
	}
	return
}

func (r *RestSink) GetHTTPCompressionType() (rv any) {
	if r != nil {
		return r.HTTPCompressionType
	}
	return
}

func (r *RestSink) GetHTTPRequestTimeout() (rv any) {
	if r != nil {
		return r.HTTPRequestTimeout
	}
	return
}

func (r *RestSink) GetMaxConcurrentConnections() (rv any) {
	if r != nil {
		return r.MaxConcurrentConnections
	}
	return
}

func (r *RestSink) GetRequestInterval() (rv any) {
	if r != nil {
		return r.RequestInterval
	}
	return
}

func (r *RestSink) GetRequestMethod() (rv any) {
	if r != nil {
		return r.RequestMethod
	}
	return
}

func (r *RestSink) GetSinkRetryCount() (rv any) {
	if r != nil {
		return r.SinkRetryCount
	}
	return
}

func (r *RestSink) GetSinkRetryWait() (rv any) {
	if r != nil {
		return r.SinkRetryWait
	}
	return
}

func (r *RestSink) GetWriteBatchSize() (rv any) {
	if r != nil {
		return r.WriteBatchSize
	}
	return
}

func (r *RestSink) GetWriteBatchTimeout() (rv any) {
	if r != nil {
		return r.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type RestSink.
func (r *RestSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     r.AdditionalProperties,
		MaxConcurrentConnections: r.MaxConcurrentConnections,
		SinkRetryCount:           r.SinkRetryCount,
		SinkRetryWait:            r.SinkRetryWait,
		Type:                     r.Type,
		WriteBatchSize:           r.WriteBatchSize,
		WriteBatchTimeout:        r.WriteBatchTimeout,
	}
}

// RestSource - A copy activity Rest service source.
type RestSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// The additional HTTP headers in the request to the RESTful API. Type: string (or Expression with resultType string).
	AdditionalHeaders any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data.
	// Default value: 00:01:40. Type: string (or Expression with resultType
	// string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HTTPRequestTimeout any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The pagination rules to compose next page requests. Type: string (or Expression with resultType string).
	PaginationRules any

	// The HTTP request body to the RESTful API if requestMethod is POST. Type: string (or Expression with resultType string).
	RequestBody any

	// The time to await before sending next page request.
	RequestInterval any

	// The HTTP method used to call the RESTful API. The default is GET. Type: string (or Expression with resultType string).
	RequestMethod any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (r *RestSource) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

func (r *RestSource) GetAdditionalColumns() (rv any) {
	if r != nil {
		return r.AdditionalColumns
	}
	return
}

func (r *RestSource) GetAdditionalHeaders() (rv any) {
	if r != nil {
		return r.AdditionalHeaders
	}
	return
}

func (r *RestSource) GetAdditionalProperties() (rv map[string]any) {
	if r != nil {
		return r.AdditionalProperties
	}
	return
}

func (r *RestSource) GetHTTPRequestTimeout() (rv any) {
	if r != nil {
		return r.HTTPRequestTimeout
	}
	return
}

func (r *RestSource) GetMaxConcurrentConnections() (rv any) {
	if r != nil {
		return r.MaxConcurrentConnections
	}
	return
}

func (r *RestSource) GetPaginationRules() (rv any) {
	if r != nil {
		return r.PaginationRules
	}
	return
}

func (r *RestSource) GetRequestBody() (rv any) {
	if r != nil {
		return r.RequestBody
	}
	return
}

func (r *RestSource) GetRequestInterval() (rv any) {
	if r != nil {
		return r.RequestInterval
	}
	return
}

func (r *RestSource) GetRequestMethod() (rv any) {
	if r != nil {
		return r.RequestMethod
	}
	return
}

func (r *RestSource) GetSourceRetryCount() (rv any) {
	if r != nil {
		return r.SourceRetryCount
	}
	return
}

func (r *RestSource) GetSourceRetryWait() (rv any) {
	if r != nil {
		return r.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type RestSource.
func (r *RestSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     r.AdditionalProperties,
		MaxConcurrentConnections: r.MaxConcurrentConnections,
		SourceRetryCount:         r.SourceRetryCount,
		SourceRetryWait:          r.SourceRetryWait,
		Type:                     r.Type,
	}
}

// RetryPolicy - Execution policy for an activity.
type RetryPolicy struct {
	// Maximum ordinary retry attempts. Default is 0. Type: integer (or Expression with resultType integer), minimum: 0.
	Count any

	// Interval between retries in seconds. Default is 30.
	IntervalInSeconds *int32
}

func (r *RetryPolicy) GetCount() (rv any) {
	if r != nil {
		return r.Count
	}
	return
}

func (r *RetryPolicy) GetIntervalInSeconds() (rv int32) {
	if r != nil && r.IntervalInSeconds != nil {
		return *r.IntervalInSeconds
	}
	return
}

// RunFilterParameters - Query parameters for listing runs.
type RunFilterParameters struct {
	// REQUIRED; The time at or after which the run event was updated in 'ISO 8601' format.
	LastUpdatedAfter *time.Time

	// REQUIRED; The time at or before which the run event was updated in 'ISO 8601' format.
	LastUpdatedBefore *time.Time

	// The continuation token for getting the next page of results. Null for first page.
	ContinuationToken *string

	// List of filters.
	Filters []*RunQueryFilter

	// List of OrderBy option.
	OrderBy []*RunQueryOrderBy
}

func (r *RunFilterParameters) GetLastUpdatedAfter() (rv *time.Time) {
	if r != nil {
		return r.LastUpdatedAfter
	}
	return
}

func (r *RunFilterParameters) GetLastUpdatedBefore() (rv *time.Time) {
	if r != nil {
		return r.LastUpdatedBefore
	}
	return
}

func (r *RunFilterParameters) GetContinuationToken() (rv string) {
	if r != nil && r.ContinuationToken != nil {
		return *r.ContinuationToken
	}
	return
}

func (r *RunFilterParameters) GetFilters() (rv []*RunQueryFilter) {
	if r != nil {
		return r.Filters
	}
	return
}

func (r *RunFilterParameters) GetOrderBy() (rv []*RunQueryOrderBy) {
	if r != nil {
		return r.OrderBy
	}
	return
}

// RunQueryFilter - Query filter option for listing runs.
type RunQueryFilter struct {
	// REQUIRED; Parameter name to be used for filter. The allowed operands to query pipeline runs are PipelineName, RunStart,
	// RunEnd and Status; to query activity runs are ActivityName, ActivityRunStart,
	// ActivityRunEnd, ActivityType and Status, and to query trigger runs are TriggerName, TriggerRunTimestamp and Status.
	Operand *RunQueryFilterOperand

	// REQUIRED; Operator to be used for filter.
	Operator *RunQueryFilterOperator

	// REQUIRED; List of filter values.
	Values []*string
}

func (r *RunQueryFilter) GetOperand() (rv *RunQueryFilterOperand) {
	if r != nil {
		return r.Operand
	}
	return
}

func (r *RunQueryFilter) GetOperator() (rv *RunQueryFilterOperator) {
	if r != nil {
		return r.Operator
	}
	return
}

func (r *RunQueryFilter) GetValues() (rv []*string) {
	if r != nil {
		return r.Values
	}
	return
}

// RunQueryOrderBy - An object to provide order by options for listing runs.
type RunQueryOrderBy struct {
	// REQUIRED; Sorting order of the parameter.
	Order *RunQueryOrder

	// REQUIRED; Parameter name to be used for order by. The allowed parameters to order by for pipeline runs are PipelineName,
	// RunStart, RunEnd and Status; for activity runs are ActivityName, ActivityRunStart,
	// ActivityRunEnd and Status; for trigger runs are TriggerName, TriggerRunTimestamp and Status.
	OrderBy *RunQueryOrderByField
}

func (r *RunQueryOrderBy) GetOrder() (rv *RunQueryOrder) {
	if r != nil {
		return r.Order
	}
	return
}

func (r *RunQueryOrderBy) GetOrderBy() (rv *RunQueryOrderByField) {
	if r != nil {
		return r.OrderBy
	}
	return
}

// SKU - SQL pool SKU
type SKU struct {
	// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the
	// resource this may be omitted.
	Capacity *int32

	// The SKU name
	Name *string

	// The service tier
	Tier *string
}

func (s *SKU) GetCapacity() (rv int32) {
	if s != nil && s.Capacity != nil {
		return *s.Capacity
	}
	return
}

func (s *SKU) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SKU) GetTier() (rv string) {
	if s != nil && s.Tier != nil {
		return *s.Tier
	}
	return
}

// SQLConnection - The connection used to execute the SQL script.
type SQLConnection struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The associated database name (supported by SQL pool v3)
	DatabaseName *string

	// The identifier of the connection.
	Name *string

	// The associated SQL pool name (supported by SQL pool v3)
	PoolName *string

	// The type of the connection.
	Type *SQLConnectionType
}

func (s *SQLConnection) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLConnection) GetDatabaseName() (rv string) {
	if s != nil && s.DatabaseName != nil {
		return *s.DatabaseName
	}
	return
}

func (s *SQLConnection) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SQLConnection) GetPoolName() (rv string) {
	if s != nil && s.PoolName != nil {
		return *s.PoolName
	}
	return
}

func (s *SQLConnection) GetType() (rv *SQLConnectionType) {
	if s != nil {
		return s.Type
	}
	return
}

// SQLDWSink - A copy activity SQL Data Warehouse sink.
type SQLDWSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates to use Copy Command to copy data into SQL Data Warehouse. Type: boolean (or Expression with resultType boolean).
	AllowCopyCommand any

	// Indicates to use PolyBase to copy data into SQL Data Warehouse when applicable. Type: boolean (or Expression with resultType
	// boolean).
	AllowPolyBase any

	// Specifies Copy Command related settings when allowCopyCommand is true.
	CopyCommandSettings *DWCopyCommandSettings

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Specifies PolyBase-related settings when allowPolyBase is true.
	PolyBaseSettings *PolybaseSettings

	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression
	// with resultType string).
	TableOption any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (s *SQLDWSink) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SQLDWSink) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLDWSink) GetAllowCopyCommand() (rv any) {
	if s != nil {
		return s.AllowCopyCommand
	}
	return
}

func (s *SQLDWSink) GetAllowPolyBase() (rv any) {
	if s != nil {
		return s.AllowPolyBase
	}
	return
}

func (s *SQLDWSink) GetCopyCommandSettings() (rv *DWCopyCommandSettings) {
	if s != nil {
		return s.CopyCommandSettings
	}
	return
}

func (s *SQLDWSink) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SQLDWSink) GetPolyBaseSettings() (rv *PolybaseSettings) {
	if s != nil {
		return s.PolyBaseSettings
	}
	return
}

func (s *SQLDWSink) GetPreCopyScript() (rv any) {
	if s != nil {
		return s.PreCopyScript
	}
	return
}

func (s *SQLDWSink) GetSinkRetryCount() (rv any) {
	if s != nil {
		return s.SinkRetryCount
	}
	return
}

func (s *SQLDWSink) GetSinkRetryWait() (rv any) {
	if s != nil {
		return s.SinkRetryWait
	}
	return
}

func (s *SQLDWSink) GetTableOption() (rv any) {
	if s != nil {
		return s.TableOption
	}
	return
}

func (s *SQLDWSink) GetWriteBatchSize() (rv any) {
	if s != nil {
		return s.WriteBatchSize
	}
	return
}

func (s *SQLDWSink) GetWriteBatchTimeout() (rv any) {
	if s != nil {
		return s.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type SQLDWSink.
func (s *SQLDWSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SinkRetryCount:           s.SinkRetryCount,
		SinkRetryWait:            s.SinkRetryWait,
		Type:                     s.Type,
		WriteBatchSize:           s.WriteBatchSize,
		WriteBatchTimeout:        s.WriteBatchTimeout,
	}
}

// SQLDWSource - A copy activity SQL Data Warehouse source.
type SQLDWSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable",
	// "DynamicRange".
	PartitionOption any

	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SQLPartitionSettings

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// SQL Data Warehouse reader query. Type: string (or Expression with resultType string).
	SQLReaderQuery any

	// Name of the stored procedure for a SQL Data Warehouse source. This cannot be used at the same time as SqlReaderQuery. Type:
	// string (or Expression with resultType string).
	SQLReaderStoredProcedureName any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}". Type: object
	// (or Expression with resultType object), itemType: StoredProcedureParameter.
	StoredProcedureParameters any
}

func (s *SQLDWSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SQLDWSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SQLDWSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLDWSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SQLDWSource) GetPartitionOption() (rv any) {
	if s != nil {
		return s.PartitionOption
	}
	return
}

func (s *SQLDWSource) GetPartitionSettings() (rv *SQLPartitionSettings) {
	if s != nil {
		return s.PartitionSettings
	}
	return
}

func (s *SQLDWSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SQLDWSource) GetSQLReaderQuery() (rv any) {
	if s != nil {
		return s.SQLReaderQuery
	}
	return
}

func (s *SQLDWSource) GetSQLReaderStoredProcedureName() (rv any) {
	if s != nil {
		return s.SQLReaderStoredProcedureName
	}
	return
}

func (s *SQLDWSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SQLDWSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

func (s *SQLDWSource) GetStoredProcedureParameters() (rv any) {
	if s != nil {
		return s.StoredProcedureParameters
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SQLDWSource.
func (s *SQLDWSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SQLDWSource.
func (s *SQLDWSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SQLMISink - A copy activity Azure SQL Managed Instance sink.
type SQLMISink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript any

	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SQLWriterStoredProcedureName any

	// SQL writer table type. Type: string (or Expression with resultType string).
	SQLWriterTableType any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// SQL stored procedure parameters.
	StoredProcedureParameters map[string]*StoredProcedureParameter

	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName any

	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression
	// with resultType string).
	TableOption any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (s *SQLMISink) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SQLMISink) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLMISink) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SQLMISink) GetPreCopyScript() (rv any) {
	if s != nil {
		return s.PreCopyScript
	}
	return
}

func (s *SQLMISink) GetSQLWriterStoredProcedureName() (rv any) {
	if s != nil {
		return s.SQLWriterStoredProcedureName
	}
	return
}

func (s *SQLMISink) GetSQLWriterTableType() (rv any) {
	if s != nil {
		return s.SQLWriterTableType
	}
	return
}

func (s *SQLMISink) GetSinkRetryCount() (rv any) {
	if s != nil {
		return s.SinkRetryCount
	}
	return
}

func (s *SQLMISink) GetSinkRetryWait() (rv any) {
	if s != nil {
		return s.SinkRetryWait
	}
	return
}

func (s *SQLMISink) GetStoredProcedureParameters() (rv map[string]*StoredProcedureParameter) {
	if s != nil {
		return s.StoredProcedureParameters
	}
	return
}

func (s *SQLMISink) GetStoredProcedureTableTypeParameterName() (rv any) {
	if s != nil {
		return s.StoredProcedureTableTypeParameterName
	}
	return
}

func (s *SQLMISink) GetTableOption() (rv any) {
	if s != nil {
		return s.TableOption
	}
	return
}

func (s *SQLMISink) GetWriteBatchSize() (rv any) {
	if s != nil {
		return s.WriteBatchSize
	}
	return
}

func (s *SQLMISink) GetWriteBatchTimeout() (rv any) {
	if s != nil {
		return s.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type SQLMISink.
func (s *SQLMISink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SinkRetryCount:           s.SinkRetryCount,
		SinkRetryWait:            s.SinkRetryWait,
		Type:                     s.Type,
		WriteBatchSize:           s.WriteBatchSize,
		WriteBatchTimeout:        s.WriteBatchTimeout,
	}
}

// SQLMISource - A copy activity Azure SQL Managed Instance source.
type SQLMISource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable",
	// "DynamicRange".
	PartitionOption any

	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SQLPartitionSettings

	// Which additional types to produce.
	ProduceAdditionalTypes any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// SQL reader query. Type: string (or Expression with resultType string).
	SQLReaderQuery any

	// Name of the stored procedure for a Azure SQL Managed Instance source. This cannot be used at the same time as SqlReaderQuery.
	// Type: string (or Expression with resultType string).
	SQLReaderStoredProcedureName any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]*StoredProcedureParameter
}

func (s *SQLMISource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SQLMISource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SQLMISource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLMISource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SQLMISource) GetPartitionOption() (rv any) {
	if s != nil {
		return s.PartitionOption
	}
	return
}

func (s *SQLMISource) GetPartitionSettings() (rv *SQLPartitionSettings) {
	if s != nil {
		return s.PartitionSettings
	}
	return
}

func (s *SQLMISource) GetProduceAdditionalTypes() (rv any) {
	if s != nil {
		return s.ProduceAdditionalTypes
	}
	return
}

func (s *SQLMISource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SQLMISource) GetSQLReaderQuery() (rv any) {
	if s != nil {
		return s.SQLReaderQuery
	}
	return
}

func (s *SQLMISource) GetSQLReaderStoredProcedureName() (rv any) {
	if s != nil {
		return s.SQLReaderStoredProcedureName
	}
	return
}

func (s *SQLMISource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SQLMISource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

func (s *SQLMISource) GetStoredProcedureParameters() (rv map[string]*StoredProcedureParameter) {
	if s != nil {
		return s.StoredProcedureParameters
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SQLMISource.
func (s *SQLMISource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SQLMISource.
func (s *SQLMISource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SQLPartitionSettings - The settings that will be leveraged for Sql source partitioning.
type SQLPartitionSettings struct {
	// The name of the column in integer or datetime type that will be used for proceeding partitioning. If not specified, the
	// primary key of the table is auto-detected and used as the partition column.
	// Type: string (or Expression with resultType string).
	PartitionColumnName any

	// The minimum value of the partition column for partition range splitting. This value is used to decide the partition stride,
	// not for filtering the rows in table. All rows in the table or query result
	// will be partitioned and copied. Type: string (or Expression with resultType string).
	PartitionLowerBound any

	// The maximum value of the partition column for partition range splitting. This value is used to decide the partition stride,
	// not for filtering the rows in table. All rows in the table or query result
	// will be partitioned and copied. Type: string (or Expression with resultType string).
	PartitionUpperBound any
}

func (s *SQLPartitionSettings) GetPartitionColumnName() (rv any) {
	if s != nil {
		return s.PartitionColumnName
	}
	return
}

func (s *SQLPartitionSettings) GetPartitionLowerBound() (rv any) {
	if s != nil {
		return s.PartitionLowerBound
	}
	return
}

func (s *SQLPartitionSettings) GetPartitionUpperBound() (rv any) {
	if s != nil {
		return s.PartitionUpperBound
	}
	return
}

// SQLPool - A SQL Analytics pool
type SQLPool struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// SQL pool properties
	Properties *SQLPoolResourceProperties

	// SQL pool SKU
	SKU *SKU

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (s *SQLPool) GetLocation() (rv string) {
	if s != nil && s.Location != nil {
		return *s.Location
	}
	return
}

func (s *SQLPool) GetProperties() (rv *SQLPoolResourceProperties) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SQLPool) GetSKU() (rv *SKU) {
	if s != nil {
		return s.SKU
	}
	return
}

func (s *SQLPool) GetTags() (rv map[string]*string) {
	if s != nil {
		return s.Tags
	}
	return
}

func (s *SQLPool) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SQLPool) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SQLPool) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// SQLPoolInfoListResult - List of SQL pools
type SQLPoolInfoListResult struct {
	// Link to the next page of results
	NextLink *string

	// List of SQL pools
	Value []*SQLPool
}

func (s *SQLPoolInfoListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

func (s *SQLPoolInfoListResult) GetValue() (rv []*SQLPool) {
	if s != nil {
		return s.Value
	}
	return
}

// SQLPoolReference - SQL pool reference type.
type SQLPoolReference struct {
	// REQUIRED; Reference SQL pool name.
	ReferenceName *string

	// REQUIRED; SQL pool reference type.
	Type *SQLPoolReferenceType
}

func (s *SQLPoolReference) GetReferenceName() (rv string) {
	if s != nil && s.ReferenceName != nil {
		return *s.ReferenceName
	}
	return
}

func (s *SQLPoolReference) GetType() (rv *SQLPoolReferenceType) {
	if s != nil {
		return s.Type
	}
	return
}

// SQLPoolResourceProperties - Properties of a SQL Analytics pool
type SQLPoolResourceProperties struct {
	// Collation mode
	Collation *string

	// Specifies the mode of sql pool creation.
	// Default: regular sql pool creation.
	// PointInTimeRestore: Creates a sql pool by restoring a point in time backup of an existing sql pool. sourceDatabaseId must
	// be specified as the resource ID of the existing sql pool, and
	// restorePointInTime must be specified.
	// Recovery: Creates a sql pool by a geo-replicated backup. sourceDatabaseId must be specified as the recoverableDatabaseId
	// to restore.
	// Restore: Creates a sql pool by restoring a backup of a deleted sql pool. SourceDatabaseId should be the sql pool's original
	// resource ID. SourceDatabaseId and sourceDatabaseDeletionDate must be
	// specified.
	CreateMode *CreateMode

	// Date the SQL pool was created
	CreationDate *time.Time

	// Maximum size in bytes
	MaxSizeBytes *int64

	// Resource state
	ProvisioningState *string

	// Backup database to restore from
	RecoverableDatabaseID *string

	// Snapshot time to restore
	RestorePointInTime *string

	// Source database to create from
	SourceDatabaseID *string

	// Resource status
	Status *string
}

func (s *SQLPoolResourceProperties) GetCollation() (rv string) {
	if s != nil && s.Collation != nil {
		return *s.Collation
	}
	return
}

func (s *SQLPoolResourceProperties) GetCreateMode() (rv *CreateMode) {
	if s != nil {
		return s.CreateMode
	}
	return
}

func (s *SQLPoolResourceProperties) GetCreationDate() (rv *time.Time) {
	if s != nil {
		return s.CreationDate
	}
	return
}

func (s *SQLPoolResourceProperties) GetMaxSizeBytes() (rv int64) {
	if s != nil && s.MaxSizeBytes != nil {
		return *s.MaxSizeBytes
	}
	return
}

func (s *SQLPoolResourceProperties) GetProvisioningState() (rv string) {
	if s != nil && s.ProvisioningState != nil {
		return *s.ProvisioningState
	}
	return
}

func (s *SQLPoolResourceProperties) GetRecoverableDatabaseID() (rv string) {
	if s != nil && s.RecoverableDatabaseID != nil {
		return *s.RecoverableDatabaseID
	}
	return
}

func (s *SQLPoolResourceProperties) GetRestorePointInTime() (rv string) {
	if s != nil && s.RestorePointInTime != nil {
		return *s.RestorePointInTime
	}
	return
}

func (s *SQLPoolResourceProperties) GetSourceDatabaseID() (rv string) {
	if s != nil && s.SourceDatabaseID != nil {
		return *s.SourceDatabaseID
	}
	return
}

func (s *SQLPoolResourceProperties) GetStatus() (rv string) {
	if s != nil && s.Status != nil {
		return *s.Status
	}
	return
}

// SQLPoolStoredProcedureActivity - Execute SQL pool stored procedure activity.
type SQLPoolStoredProcedureActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; SQL pool stored procedure reference.
	SQLPool *SQLPoolReference

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Execute SQL pool stored procedure activity properties.
	TypeProperties *SQLPoolStoredProcedureActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (s *SQLPoolStoredProcedureActivity) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SQLPoolStoredProcedureActivity) GetSQLPool() (rv *SQLPoolReference) {
	if s != nil {
		return s.SQLPool
	}
	return
}

func (s *SQLPoolStoredProcedureActivity) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SQLPoolStoredProcedureActivity) GetTypeProperties() (rv *SQLPoolStoredProcedureActivityTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SQLPoolStoredProcedureActivity) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLPoolStoredProcedureActivity) GetDependsOn() (rv []*ActivityDependency) {
	if s != nil {
		return s.DependsOn
	}
	return
}

func (s *SQLPoolStoredProcedureActivity) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SQLPoolStoredProcedureActivity) GetUserProperties() (rv []*UserProperty) {
	if s != nil {
		return s.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type SQLPoolStoredProcedureActivity.
func (s *SQLPoolStoredProcedureActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: s.AdditionalProperties,
		DependsOn:            s.DependsOn,
		Description:          s.Description,
		Name:                 s.Name,
		Type:                 s.Type,
		UserProperties:       s.UserProperties,
	}
}

// SQLPoolStoredProcedureActivityTypeProperties - SQL stored procedure activity properties.
type SQLPoolStoredProcedureActivityTypeProperties struct {
	// REQUIRED; Stored procedure name. Type: string (or Expression with resultType string).
	StoredProcedureName any

	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]*StoredProcedureParameter
}

func (s *SQLPoolStoredProcedureActivityTypeProperties) GetStoredProcedureName() (rv any) {
	if s != nil {
		return s.StoredProcedureName
	}
	return
}

func (s *SQLPoolStoredProcedureActivityTypeProperties) GetStoredProcedureParameters() (rv map[string]*StoredProcedureParameter) {
	if s != nil {
		return s.StoredProcedureParameters
	}
	return
}

// SQLScript - SQL script.
type SQLScript struct {
	// REQUIRED; The content of the SQL script.
	Content *SQLScriptContent

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The description of the SQL script.
	Description *string

	// The folder that this SQL script is in. If not specified, this SQL script will appear at the root level.
	Folder *SQLScriptFolder

	// The type of the SQL script.
	Type *SQLScriptType
}

func (s *SQLScript) GetContent() (rv *SQLScriptContent) {
	if s != nil {
		return s.Content
	}
	return
}

func (s *SQLScript) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLScript) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SQLScript) GetFolder() (rv *SQLScriptFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SQLScript) GetType() (rv *SQLScriptType) {
	if s != nil {
		return s.Type
	}
	return
}

// SQLScriptContent - The content of the SQL script.
type SQLScriptContent struct {
	// REQUIRED; SQL query to execute.
	Query *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The connection used to execute the SQL script.
	CurrentConnection *SQLConnection

	// The metadata of the SQL script.
	Metadata *SQLScriptMetadata

	// Limit of results, '-1' for no limit.
	ResultLimit *int32
}

func (s *SQLScriptContent) GetQuery() (rv string) {
	if s != nil && s.Query != nil {
		return *s.Query
	}
	return
}

func (s *SQLScriptContent) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLScriptContent) GetCurrentConnection() (rv *SQLConnection) {
	if s != nil {
		return s.CurrentConnection
	}
	return
}

func (s *SQLScriptContent) GetMetadata() (rv *SQLScriptMetadata) {
	if s != nil {
		return s.Metadata
	}
	return
}

func (s *SQLScriptContent) GetResultLimit() (rv int32) {
	if s != nil && s.ResultLimit != nil {
		return *s.ResultLimit
	}
	return
}

// SQLScriptFolder - The folder that this SQL script is in. If not specified, this SQL script will appear at the root level.
type SQLScriptFolder struct {
	// The name of the folder that this SQL script is in.
	Name *string
}

func (s *SQLScriptFolder) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

// SQLScriptMetadata - The metadata of the SQL script.
type SQLScriptMetadata struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The language of the SQL script.
	Language *string
}

func (s *SQLScriptMetadata) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLScriptMetadata) GetLanguage() (rv string) {
	if s != nil && s.Language != nil {
		return *s.Language
	}
	return
}

// SQLScriptResource - Sql Script resource type.
type SQLScriptResource struct {
	// REQUIRED; The name of the resource
	Name *string

	// REQUIRED; Properties of sql script.
	Properties *SQLScript

	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string
}

func (s *SQLScriptResource) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SQLScriptResource) GetProperties() (rv *SQLScript) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SQLScriptResource) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

func (s *SQLScriptResource) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SQLScriptResource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// SQLScriptsListResponse - A list of sql scripts resources.
type SQLScriptsListResponse struct {
	// REQUIRED; List of sql scripts.
	Value []*SQLScriptResource

	// The link to the next page of results, if any remaining results exist.
	NextLink *string
}

func (s *SQLScriptsListResponse) GetValue() (rv []*SQLScriptResource) {
	if s != nil {
		return s.Value
	}
	return
}

func (s *SQLScriptsListResponse) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

// SQLServerLinkedService - SQL Server linked service.
type SQLServerLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; SQL Server linked service properties.
	TypeProperties *SQLServerLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SQLServerLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SQLServerLinkedService) GetTypeProperties() (rv *SQLServerLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SQLServerLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLServerLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SQLServerLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SQLServerLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SQLServerLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SQLServerLinkedService.
func (s *SQLServerLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SQLServerLinkedServiceTypeProperties - SQL Server linked service properties.
type SQLServerLinkedServiceTypeProperties struct {
	// REQUIRED; The connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The on-premises Windows authentication password.
	Password SecretBaseClassification

	// The on-premises Windows authentication user name. Type: string (or Expression with resultType string).
	UserName any
}

func (s *SQLServerLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if s != nil {
		return s.ConnectionString
	}
	return
}

func (s *SQLServerLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SQLServerLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SQLServerLinkedServiceTypeProperties) GetUserName() (rv any) {
	if s != nil {
		return s.UserName
	}
	return
}

// SQLServerSink - A copy activity SQL server sink.
type SQLServerSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript any

	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SQLWriterStoredProcedureName any

	// SQL writer table type. Type: string (or Expression with resultType string).
	SQLWriterTableType any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// SQL stored procedure parameters.
	StoredProcedureParameters map[string]*StoredProcedureParameter

	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName any

	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression
	// with resultType string).
	TableOption any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (s *SQLServerSink) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SQLServerSink) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLServerSink) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SQLServerSink) GetPreCopyScript() (rv any) {
	if s != nil {
		return s.PreCopyScript
	}
	return
}

func (s *SQLServerSink) GetSQLWriterStoredProcedureName() (rv any) {
	if s != nil {
		return s.SQLWriterStoredProcedureName
	}
	return
}

func (s *SQLServerSink) GetSQLWriterTableType() (rv any) {
	if s != nil {
		return s.SQLWriterTableType
	}
	return
}

func (s *SQLServerSink) GetSinkRetryCount() (rv any) {
	if s != nil {
		return s.SinkRetryCount
	}
	return
}

func (s *SQLServerSink) GetSinkRetryWait() (rv any) {
	if s != nil {
		return s.SinkRetryWait
	}
	return
}

func (s *SQLServerSink) GetStoredProcedureParameters() (rv map[string]*StoredProcedureParameter) {
	if s != nil {
		return s.StoredProcedureParameters
	}
	return
}

func (s *SQLServerSink) GetStoredProcedureTableTypeParameterName() (rv any) {
	if s != nil {
		return s.StoredProcedureTableTypeParameterName
	}
	return
}

func (s *SQLServerSink) GetTableOption() (rv any) {
	if s != nil {
		return s.TableOption
	}
	return
}

func (s *SQLServerSink) GetWriteBatchSize() (rv any) {
	if s != nil {
		return s.WriteBatchSize
	}
	return
}

func (s *SQLServerSink) GetWriteBatchTimeout() (rv any) {
	if s != nil {
		return s.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type SQLServerSink.
func (s *SQLServerSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SinkRetryCount:           s.SinkRetryCount,
		SinkRetryWait:            s.SinkRetryWait,
		Type:                     s.Type,
		WriteBatchSize:           s.WriteBatchSize,
		WriteBatchTimeout:        s.WriteBatchTimeout,
	}
}

// SQLServerSource - A copy activity SQL server source.
type SQLServerSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable",
	// "DynamicRange".
	PartitionOption any

	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SQLPartitionSettings

	// Which additional types to produce.
	ProduceAdditionalTypes any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// SQL reader query. Type: string (or Expression with resultType string).
	SQLReaderQuery any

	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string
	// (or Expression with resultType string).
	SQLReaderStoredProcedureName any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]*StoredProcedureParameter
}

func (s *SQLServerSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SQLServerSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SQLServerSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLServerSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SQLServerSource) GetPartitionOption() (rv any) {
	if s != nil {
		return s.PartitionOption
	}
	return
}

func (s *SQLServerSource) GetPartitionSettings() (rv *SQLPartitionSettings) {
	if s != nil {
		return s.PartitionSettings
	}
	return
}

func (s *SQLServerSource) GetProduceAdditionalTypes() (rv any) {
	if s != nil {
		return s.ProduceAdditionalTypes
	}
	return
}

func (s *SQLServerSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SQLServerSource) GetSQLReaderQuery() (rv any) {
	if s != nil {
		return s.SQLReaderQuery
	}
	return
}

func (s *SQLServerSource) GetSQLReaderStoredProcedureName() (rv any) {
	if s != nil {
		return s.SQLReaderStoredProcedureName
	}
	return
}

func (s *SQLServerSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SQLServerSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

func (s *SQLServerSource) GetStoredProcedureParameters() (rv map[string]*StoredProcedureParameter) {
	if s != nil {
		return s.StoredProcedureParameters
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SQLServerSource.
func (s *SQLServerSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SQLServerSource.
func (s *SQLServerSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SQLServerStoredProcedureActivity - SQL stored procedure activity type.
type SQLServerStoredProcedureActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; SQL stored procedure activity properties.
	TypeProperties *SQLServerStoredProcedureActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (s *SQLServerStoredProcedureActivity) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SQLServerStoredProcedureActivity) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SQLServerStoredProcedureActivity) GetTypeProperties() (rv *SQLServerStoredProcedureActivityTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SQLServerStoredProcedureActivity) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLServerStoredProcedureActivity) GetDependsOn() (rv []*ActivityDependency) {
	if s != nil {
		return s.DependsOn
	}
	return
}

func (s *SQLServerStoredProcedureActivity) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SQLServerStoredProcedureActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SQLServerStoredProcedureActivity) GetPolicy() (rv *ActivityPolicy) {
	if s != nil {
		return s.Policy
	}
	return
}

func (s *SQLServerStoredProcedureActivity) GetUserProperties() (rv []*UserProperty) {
	if s != nil {
		return s.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type SQLServerStoredProcedureActivity.
func (s *SQLServerStoredProcedureActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: s.AdditionalProperties,
		DependsOn:            s.DependsOn,
		Description:          s.Description,
		Name:                 s.Name,
		Type:                 s.Type,
		UserProperties:       s.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type SQLServerStoredProcedureActivity.
func (s *SQLServerStoredProcedureActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: s.AdditionalProperties,
		DependsOn:            s.DependsOn,
		Description:          s.Description,
		LinkedServiceName:    s.LinkedServiceName,
		Name:                 s.Name,
		Policy:               s.Policy,
		Type:                 s.Type,
		UserProperties:       s.UserProperties,
	}
}

// SQLServerStoredProcedureActivityTypeProperties - SQL stored procedure activity properties.
type SQLServerStoredProcedureActivityTypeProperties struct {
	// REQUIRED; Stored procedure name. Type: string (or Expression with resultType string).
	StoredProcedureName any

	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters any
}

func (s *SQLServerStoredProcedureActivityTypeProperties) GetStoredProcedureName() (rv any) {
	if s != nil {
		return s.StoredProcedureName
	}
	return
}

func (s *SQLServerStoredProcedureActivityTypeProperties) GetStoredProcedureParameters() (rv any) {
	if s != nil {
		return s.StoredProcedureParameters
	}
	return
}

// SQLServerTableDataset - The on-premises SQL Server dataset.
type SQLServerTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// On-premises SQL Server dataset properties.
	TypeProperties *SQLServerTableDatasetTypeProperties
}

func (s *SQLServerTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SQLServerTableDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SQLServerTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLServerTableDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SQLServerTableDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SQLServerTableDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SQLServerTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SQLServerTableDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SQLServerTableDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

func (s *SQLServerTableDataset) GetTypeProperties() (rv *SQLServerTableDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SQLServerTableDataset.
func (s *SQLServerTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SQLServerTableDatasetTypeProperties - On-premises SQL Server dataset properties.
type SQLServerTableDatasetTypeProperties struct {
	// The schema name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the SQL Server dataset. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (s *SQLServerTableDatasetTypeProperties) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SQLServerTableDatasetTypeProperties) GetTable() (rv any) {
	if s != nil {
		return s.Table
	}
	return
}

func (s *SQLServerTableDatasetTypeProperties) GetTableName() (rv any) {
	if s != nil {
		return s.TableName
	}
	return
}

// SQLSink - A copy activity SQL sink.
type SQLSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript any

	// SQL writer stored procedure name. Type: string (or Expression with resultType string).
	SQLWriterStoredProcedureName any

	// SQL writer table type. Type: string (or Expression with resultType string).
	SQLWriterTableType any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// SQL stored procedure parameters.
	StoredProcedureParameters map[string]*StoredProcedureParameter

	// The stored procedure parameter name of the table type. Type: string (or Expression with resultType string).
	StoredProcedureTableTypeParameterName any

	// The option to handle sink table, such as autoCreate. For now only 'autoCreate' value is supported. Type: string (or Expression
	// with resultType string).
	TableOption any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (s *SQLSink) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SQLSink) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLSink) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SQLSink) GetPreCopyScript() (rv any) {
	if s != nil {
		return s.PreCopyScript
	}
	return
}

func (s *SQLSink) GetSQLWriterStoredProcedureName() (rv any) {
	if s != nil {
		return s.SQLWriterStoredProcedureName
	}
	return
}

func (s *SQLSink) GetSQLWriterTableType() (rv any) {
	if s != nil {
		return s.SQLWriterTableType
	}
	return
}

func (s *SQLSink) GetSinkRetryCount() (rv any) {
	if s != nil {
		return s.SinkRetryCount
	}
	return
}

func (s *SQLSink) GetSinkRetryWait() (rv any) {
	if s != nil {
		return s.SinkRetryWait
	}
	return
}

func (s *SQLSink) GetStoredProcedureParameters() (rv map[string]*StoredProcedureParameter) {
	if s != nil {
		return s.StoredProcedureParameters
	}
	return
}

func (s *SQLSink) GetStoredProcedureTableTypeParameterName() (rv any) {
	if s != nil {
		return s.StoredProcedureTableTypeParameterName
	}
	return
}

func (s *SQLSink) GetTableOption() (rv any) {
	if s != nil {
		return s.TableOption
	}
	return
}

func (s *SQLSink) GetWriteBatchSize() (rv any) {
	if s != nil {
		return s.WriteBatchSize
	}
	return
}

func (s *SQLSink) GetWriteBatchTimeout() (rv any) {
	if s != nil {
		return s.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type SQLSink.
func (s *SQLSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SinkRetryCount:           s.SinkRetryCount,
		SinkRetryWait:            s.SinkRetryWait,
		Type:                     s.Type,
		WriteBatchSize:           s.WriteBatchSize,
		WriteBatchTimeout:        s.WriteBatchTimeout,
	}
}

// SQLSource - A copy activity SQL source.
type SQLSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies the transaction locking behavior for the SQL source. Allowed values: ReadCommitted/ReadUncommitted/RepeatableRead/Serializable/Snapshot.
	// The default value is ReadCommitted. Type: string (or
	// Expression with resultType string).
	IsolationLevel any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The partition mechanism that will be used for Sql read in parallel. Possible values include: "None", "PhysicalPartitionsOfTable",
	// "DynamicRange".
	PartitionOption any

	// The settings that will be leveraged for Sql source partitioning.
	PartitionSettings *SQLPartitionSettings

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// SQL reader query. Type: string (or Expression with resultType string).
	SQLReaderQuery any

	// Name of the stored procedure for a SQL Database source. This cannot be used at the same time as SqlReaderQuery. Type: string
	// (or Expression with resultType string).
	SQLReaderStoredProcedureName any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Value and type setting for stored procedure parameters. Example: "{Parameter1: {value: "1", type: "int"}}".
	StoredProcedureParameters map[string]*StoredProcedureParameter
}

func (s *SQLSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SQLSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SQLSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SQLSource) GetIsolationLevel() (rv any) {
	if s != nil {
		return s.IsolationLevel
	}
	return
}

func (s *SQLSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SQLSource) GetPartitionOption() (rv any) {
	if s != nil {
		return s.PartitionOption
	}
	return
}

func (s *SQLSource) GetPartitionSettings() (rv *SQLPartitionSettings) {
	if s != nil {
		return s.PartitionSettings
	}
	return
}

func (s *SQLSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SQLSource) GetSQLReaderQuery() (rv any) {
	if s != nil {
		return s.SQLReaderQuery
	}
	return
}

func (s *SQLSource) GetSQLReaderStoredProcedureName() (rv any) {
	if s != nil {
		return s.SQLReaderStoredProcedureName
	}
	return
}

func (s *SQLSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SQLSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

func (s *SQLSource) GetStoredProcedureParameters() (rv map[string]*StoredProcedureParameter) {
	if s != nil {
		return s.StoredProcedureParameters
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SQLSource.
func (s *SQLSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SQLSource.
func (s *SQLSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SSISAccessCredential - SSIS access credential.
type SSISAccessCredential struct {
	// REQUIRED; Domain for windows authentication.
	Domain any

	// REQUIRED; Password for windows authentication.
	Password SecretBaseClassification

	// REQUIRED; UseName for windows authentication.
	UserName any
}

func (s *SSISAccessCredential) GetDomain() (rv any) {
	if s != nil {
		return s.Domain
	}
	return
}

func (s *SSISAccessCredential) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SSISAccessCredential) GetUserName() (rv any) {
	if s != nil {
		return s.UserName
	}
	return
}

// SSISChildPackage - SSIS embedded child package.
type SSISChildPackage struct {
	// REQUIRED; Content for embedded child package. Type: string (or Expression with resultType string).
	PackageContent any

	// REQUIRED; Path for embedded child package. Type: string (or Expression with resultType string).
	PackagePath any

	// Last modified date for embedded child package.
	PackageLastModifiedDate *string

	// Name for embedded child package.
	PackageName *string
}

func (s *SSISChildPackage) GetPackageContent() (rv any) {
	if s != nil {
		return s.PackageContent
	}
	return
}

func (s *SSISChildPackage) GetPackagePath() (rv any) {
	if s != nil {
		return s.PackagePath
	}
	return
}

func (s *SSISChildPackage) GetPackageLastModifiedDate() (rv string) {
	if s != nil && s.PackageLastModifiedDate != nil {
		return *s.PackageLastModifiedDate
	}
	return
}

func (s *SSISChildPackage) GetPackageName() (rv string) {
	if s != nil && s.PackageName != nil {
		return *s.PackageName
	}
	return
}

// SSISExecutionCredential - SSIS package execution credential.
type SSISExecutionCredential struct {
	// REQUIRED; Domain for windows authentication.
	Domain any

	// REQUIRED; Password for windows authentication.
	Password *SecureString

	// REQUIRED; UseName for windows authentication.
	UserName any
}

func (s *SSISExecutionCredential) GetDomain() (rv any) {
	if s != nil {
		return s.Domain
	}
	return
}

func (s *SSISExecutionCredential) GetPassword() (rv *SecureString) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SSISExecutionCredential) GetUserName() (rv any) {
	if s != nil {
		return s.UserName
	}
	return
}

// SSISExecutionParameter - SSIS execution parameter.
type SSISExecutionParameter struct {
	// REQUIRED; SSIS package execution parameter value. Type: string (or Expression with resultType string).
	Value any
}

func (s *SSISExecutionParameter) GetValue() (rv any) {
	if s != nil {
		return s.Value
	}
	return
}

// SSISLogLocation - SSIS package execution log location
type SSISLogLocation struct {
	// REQUIRED; The SSIS package execution log path. Type: string (or Expression with resultType string).
	LogPath any

	// REQUIRED; The type of SSIS log location.
	Type *SsisLogLocationType

	// REQUIRED; SSIS package execution log location properties.
	TypeProperties *SSISLogLocationTypeProperties
}

func (s *SSISLogLocation) GetLogPath() (rv any) {
	if s != nil {
		return s.LogPath
	}
	return
}

func (s *SSISLogLocation) GetType() (rv *SsisLogLocationType) {
	if s != nil {
		return s.Type
	}
	return
}

func (s *SSISLogLocation) GetTypeProperties() (rv *SSISLogLocationTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// SSISLogLocationTypeProperties - SSIS package execution log location properties.
type SSISLogLocationTypeProperties struct {
	// The package execution log access credential.
	AccessCredential *SSISAccessCredential

	// Specifies the interval to refresh log. The default interval is 5 minutes. Type: string (or Expression with resultType string),
	// pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	LogRefreshInterval any
}

func (s *SSISLogLocationTypeProperties) GetAccessCredential() (rv *SSISAccessCredential) {
	if s != nil {
		return s.AccessCredential
	}
	return
}

func (s *SSISLogLocationTypeProperties) GetLogRefreshInterval() (rv any) {
	if s != nil {
		return s.LogRefreshInterval
	}
	return
}

// SSISPackageLocation - SSIS package location.
type SSISPackageLocation struct {
	// The SSIS package path. Type: string (or Expression with resultType string).
	PackagePath any

	// The type of SSIS package location.
	Type *SsisPackageLocationType

	// SSIS package location properties.
	TypeProperties *SSISPackageLocationTypeProperties
}

func (s *SSISPackageLocation) GetPackagePath() (rv any) {
	if s != nil {
		return s.PackagePath
	}
	return
}

func (s *SSISPackageLocation) GetType() (rv *SsisPackageLocationType) {
	if s != nil {
		return s.Type
	}
	return
}

func (s *SSISPackageLocation) GetTypeProperties() (rv *SSISPackageLocationTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// SSISPackageLocationTypeProperties - SSIS package location properties.
type SSISPackageLocationTypeProperties struct {
	// The package access credential.
	AccessCredential *SSISAccessCredential

	// The embedded child package list.
	ChildPackages []*SSISChildPackage

	// The configuration file access credential.
	ConfigurationAccessCredential *SSISAccessCredential

	// The configuration file of the package execution. Type: string (or Expression with resultType string).
	ConfigurationPath any

	// The embedded package content. Type: string (or Expression with resultType string).
	PackageContent any

	// The embedded package last modified date.
	PackageLastModifiedDate *string

	// The package name.
	PackageName *string

	// Password of the package.
	PackagePassword SecretBaseClassification
}

func (s *SSISPackageLocationTypeProperties) GetAccessCredential() (rv *SSISAccessCredential) {
	if s != nil {
		return s.AccessCredential
	}
	return
}

func (s *SSISPackageLocationTypeProperties) GetChildPackages() (rv []*SSISChildPackage) {
	if s != nil {
		return s.ChildPackages
	}
	return
}

func (s *SSISPackageLocationTypeProperties) GetConfigurationAccessCredential() (rv *SSISAccessCredential) {
	if s != nil {
		return s.ConfigurationAccessCredential
	}
	return
}

func (s *SSISPackageLocationTypeProperties) GetConfigurationPath() (rv any) {
	if s != nil {
		return s.ConfigurationPath
	}
	return
}

func (s *SSISPackageLocationTypeProperties) GetPackageContent() (rv any) {
	if s != nil {
		return s.PackageContent
	}
	return
}

func (s *SSISPackageLocationTypeProperties) GetPackageLastModifiedDate() (rv string) {
	if s != nil && s.PackageLastModifiedDate != nil {
		return *s.PackageLastModifiedDate
	}
	return
}

func (s *SSISPackageLocationTypeProperties) GetPackageName() (rv string) {
	if s != nil && s.PackageName != nil {
		return *s.PackageName
	}
	return
}

func (s *SSISPackageLocationTypeProperties) GetPackagePassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.PackagePassword
	}
	return
}

// SSISPropertyOverride - SSIS property override.
type SSISPropertyOverride struct {
	// REQUIRED; SSIS package property override value. Type: string (or Expression with resultType string).
	Value any

	// Whether SSIS package property override value is sensitive data. Value will be encrypted in SSISDB if it is true
	IsSensitive *bool
}

func (s *SSISPropertyOverride) GetValue() (rv any) {
	if s != nil {
		return s.Value
	}
	return
}

func (s *SSISPropertyOverride) GetIsSensitive() (rv bool) {
	if s != nil && s.IsSensitive != nil {
		return *s.IsSensitive
	}
	return
}

// SalesforceLinkedService - Linked service for Salesforce.
type SalesforceLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Salesforce linked service properties.
	TypeProperties *SalesforceLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SalesforceLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SalesforceLinkedService) GetTypeProperties() (rv *SalesforceLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SalesforceLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SalesforceLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SalesforceLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SalesforceLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SalesforceLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SalesforceLinkedService.
func (s *SalesforceLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SalesforceLinkedServiceTypeProperties - Salesforce linked service properties.
type SalesforceLinkedServiceTypeProperties struct {
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	APIVersion any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The URL of Salesforce instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify 'https://test.salesforce.com'.
	// To copy data from custom domain, specify, for example,
	// 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentURL any

	// The password for Basic authentication of the Salesforce instance.
	Password SecretBaseClassification

	// The security token is optional to remotely access Salesforce instance.
	SecurityToken SecretBaseClassification

	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username any
}

func (s *SalesforceLinkedServiceTypeProperties) GetAPIVersion() (rv any) {
	if s != nil {
		return s.APIVersion
	}
	return
}

func (s *SalesforceLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SalesforceLinkedServiceTypeProperties) GetEnvironmentURL() (rv any) {
	if s != nil {
		return s.EnvironmentURL
	}
	return
}

func (s *SalesforceLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SalesforceLinkedServiceTypeProperties) GetSecurityToken() (rv SecretBaseClassification) {
	if s != nil {
		return s.SecurityToken
	}
	return
}

func (s *SalesforceLinkedServiceTypeProperties) GetUsername() (rv any) {
	if s != nil {
		return s.Username
	}
	return
}

// SalesforceMarketingCloudLinkedService - Salesforce Marketing Cloud linked service.
type SalesforceMarketingCloudLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Salesforce Marketing Cloud linked service properties.
	TypeProperties *SalesforceMarketingCloudLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SalesforceMarketingCloudLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SalesforceMarketingCloudLinkedService) GetTypeProperties() (rv *SalesforceMarketingCloudLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SalesforceMarketingCloudLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SalesforceMarketingCloudLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SalesforceMarketingCloudLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SalesforceMarketingCloudLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SalesforceMarketingCloudLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SalesforceMarketingCloudLinkedService.
func (s *SalesforceMarketingCloudLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SalesforceMarketingCloudLinkedServiceTypeProperties - Salesforce Marketing Cloud linked service properties.
type SalesforceMarketingCloudLinkedServiceTypeProperties struct {
	// REQUIRED; The client ID associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType
	// string).
	ClientID any

	// The client secret associated with the Salesforce Marketing Cloud application. Type: string (or Expression with resultType
	// string).
	ClientSecret SecretBaseClassification

	// Properties used to connect to Salesforce Marketing Cloud. It is mutually exclusive with any other properties in the linked
	// service. Type: object.
	ConnectionProperties any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true. Type: boolean (or Expression
	// with resultType boolean).
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true. Type: boolean (or Expression with
	// resultType boolean).
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true. Type: boolean
	// (or Expression with resultType boolean).
	UsePeerVerification any
}

func (s *SalesforceMarketingCloudLinkedServiceTypeProperties) GetClientID() (rv any) {
	if s != nil {
		return s.ClientID
	}
	return
}

func (s *SalesforceMarketingCloudLinkedServiceTypeProperties) GetClientSecret() (rv SecretBaseClassification) {
	if s != nil {
		return s.ClientSecret
	}
	return
}

func (s *SalesforceMarketingCloudLinkedServiceTypeProperties) GetConnectionProperties() (rv any) {
	if s != nil {
		return s.ConnectionProperties
	}
	return
}

func (s *SalesforceMarketingCloudLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SalesforceMarketingCloudLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if s != nil {
		return s.UseEncryptedEndpoints
	}
	return
}

func (s *SalesforceMarketingCloudLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if s != nil {
		return s.UseHostVerification
	}
	return
}

func (s *SalesforceMarketingCloudLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if s != nil {
		return s.UsePeerVerification
	}
	return
}

// SalesforceMarketingCloudObjectDataset - Salesforce Marketing Cloud dataset.
type SalesforceMarketingCloudObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (s *SalesforceMarketingCloudObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SalesforceMarketingCloudObjectDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SalesforceMarketingCloudObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SalesforceMarketingCloudObjectDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SalesforceMarketingCloudObjectDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SalesforceMarketingCloudObjectDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SalesforceMarketingCloudObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SalesforceMarketingCloudObjectDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SalesforceMarketingCloudObjectDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

func (s *SalesforceMarketingCloudObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SalesforceMarketingCloudObjectDataset.
func (s *SalesforceMarketingCloudObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SalesforceMarketingCloudSource - A copy activity Salesforce Marketing Cloud source.
type SalesforceMarketingCloudSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SalesforceMarketingCloudSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SalesforceMarketingCloudSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SalesforceMarketingCloudSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SalesforceMarketingCloudSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SalesforceMarketingCloudSource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *SalesforceMarketingCloudSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SalesforceMarketingCloudSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SalesforceMarketingCloudSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SalesforceMarketingCloudSource.
func (s *SalesforceMarketingCloudSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SalesforceMarketingCloudSource.
func (s *SalesforceMarketingCloudSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SalesforceObjectDataset - The Salesforce object dataset.
type SalesforceObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Salesforce object dataset properties.
	TypeProperties *SalesforceObjectDatasetTypeProperties
}

func (s *SalesforceObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SalesforceObjectDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SalesforceObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SalesforceObjectDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SalesforceObjectDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SalesforceObjectDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SalesforceObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SalesforceObjectDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SalesforceObjectDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

func (s *SalesforceObjectDataset) GetTypeProperties() (rv *SalesforceObjectDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SalesforceObjectDataset.
func (s *SalesforceObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SalesforceObjectDatasetTypeProperties - Salesforce object dataset properties.
type SalesforceObjectDatasetTypeProperties struct {
	// The Salesforce object API name. Type: string (or Expression with resultType string).
	ObjectAPIName any
}

func (s *SalesforceObjectDatasetTypeProperties) GetObjectAPIName() (rv any) {
	if s != nil {
		return s.ObjectAPIName
	}
	return
}

// SalesforceServiceCloudLinkedService - Linked service for Salesforce Service Cloud.
type SalesforceServiceCloudLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Salesforce Service Cloud linked service properties.
	TypeProperties *SalesforceServiceCloudLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SalesforceServiceCloudLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SalesforceServiceCloudLinkedService) GetTypeProperties() (rv *SalesforceServiceCloudLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SalesforceServiceCloudLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SalesforceServiceCloudLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SalesforceServiceCloudLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SalesforceServiceCloudLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SalesforceServiceCloudLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SalesforceServiceCloudLinkedService.
func (s *SalesforceServiceCloudLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SalesforceServiceCloudLinkedServiceTypeProperties - Salesforce Service Cloud linked service properties.
type SalesforceServiceCloudLinkedServiceTypeProperties struct {
	// The Salesforce API version used in ADF. Type: string (or Expression with resultType string).
	APIVersion any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The URL of Salesforce Service Cloud instance. Default is 'https://login.salesforce.com'. To copy data from sandbox, specify
	// 'https://test.salesforce.com'. To copy data from custom domain, specify, for
	// example, 'https://[domain].my.salesforce.com'. Type: string (or Expression with resultType string).
	EnvironmentURL any

	// Extended properties appended to the connection string. Type: string (or Expression with resultType string).
	ExtendedProperties any

	// The password for Basic authentication of the Salesforce instance.
	Password SecretBaseClassification

	// The security token is optional to remotely access Salesforce instance.
	SecurityToken SecretBaseClassification

	// The username for Basic authentication of the Salesforce instance. Type: string (or Expression with resultType string).
	Username any
}

func (s *SalesforceServiceCloudLinkedServiceTypeProperties) GetAPIVersion() (rv any) {
	if s != nil {
		return s.APIVersion
	}
	return
}

func (s *SalesforceServiceCloudLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SalesforceServiceCloudLinkedServiceTypeProperties) GetEnvironmentURL() (rv any) {
	if s != nil {
		return s.EnvironmentURL
	}
	return
}

func (s *SalesforceServiceCloudLinkedServiceTypeProperties) GetExtendedProperties() (rv any) {
	if s != nil {
		return s.ExtendedProperties
	}
	return
}

func (s *SalesforceServiceCloudLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SalesforceServiceCloudLinkedServiceTypeProperties) GetSecurityToken() (rv SecretBaseClassification) {
	if s != nil {
		return s.SecurityToken
	}
	return
}

func (s *SalesforceServiceCloudLinkedServiceTypeProperties) GetUsername() (rv any) {
	if s != nil {
		return s.Username
	}
	return
}

// SalesforceServiceCloudObjectDataset - The Salesforce Service Cloud object dataset.
type SalesforceServiceCloudObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Salesforce Service Cloud object dataset properties.
	TypeProperties *SalesforceServiceCloudObjectDatasetTypeProperties
}

func (s *SalesforceServiceCloudObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SalesforceServiceCloudObjectDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SalesforceServiceCloudObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SalesforceServiceCloudObjectDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SalesforceServiceCloudObjectDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SalesforceServiceCloudObjectDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SalesforceServiceCloudObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SalesforceServiceCloudObjectDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SalesforceServiceCloudObjectDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

func (s *SalesforceServiceCloudObjectDataset) GetTypeProperties() (rv *SalesforceServiceCloudObjectDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SalesforceServiceCloudObjectDataset.
func (s *SalesforceServiceCloudObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SalesforceServiceCloudObjectDatasetTypeProperties - Salesforce Service Cloud object dataset properties.
type SalesforceServiceCloudObjectDatasetTypeProperties struct {
	// The Salesforce Service Cloud object API name. Type: string (or Expression with resultType string).
	ObjectAPIName any
}

func (s *SalesforceServiceCloudObjectDatasetTypeProperties) GetObjectAPIName() (rv any) {
	if s != nil {
		return s.ObjectAPIName
	}
	return
}

// SalesforceServiceCloudSink - A copy activity Salesforce Service Cloud sink.
type SalesforceServiceCloudSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with
	// resultType string).
	ExternalIDFieldName any

	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation.
	// Default value is false. If set it to true, it means ADF will leave the data in
	// the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert
	// operation, versus ADF will update the data in the destination object to NULL when
	// doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType
	// boolean).
	IgnoreNullValues any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any

	// The write behavior for the operation. Default is Insert.
	WriteBehavior *SalesforceSinkWriteBehavior
}

func (s *SalesforceServiceCloudSink) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SalesforceServiceCloudSink) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SalesforceServiceCloudSink) GetExternalIDFieldName() (rv any) {
	if s != nil {
		return s.ExternalIDFieldName
	}
	return
}

func (s *SalesforceServiceCloudSink) GetIgnoreNullValues() (rv any) {
	if s != nil {
		return s.IgnoreNullValues
	}
	return
}

func (s *SalesforceServiceCloudSink) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SalesforceServiceCloudSink) GetSinkRetryCount() (rv any) {
	if s != nil {
		return s.SinkRetryCount
	}
	return
}

func (s *SalesforceServiceCloudSink) GetSinkRetryWait() (rv any) {
	if s != nil {
		return s.SinkRetryWait
	}
	return
}

func (s *SalesforceServiceCloudSink) GetWriteBatchSize() (rv any) {
	if s != nil {
		return s.WriteBatchSize
	}
	return
}

func (s *SalesforceServiceCloudSink) GetWriteBatchTimeout() (rv any) {
	if s != nil {
		return s.WriteBatchTimeout
	}
	return
}

func (s *SalesforceServiceCloudSink) GetWriteBehavior() (rv *SalesforceSinkWriteBehavior) {
	if s != nil {
		return s.WriteBehavior
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type SalesforceServiceCloudSink.
func (s *SalesforceServiceCloudSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SinkRetryCount:           s.SinkRetryCount,
		SinkRetryWait:            s.SinkRetryWait,
		Type:                     s.Type,
		WriteBatchSize:           s.WriteBatchSize,
		WriteBatchTimeout:        s.WriteBatchTimeout,
	}
}

// SalesforceServiceCloudSource - A copy activity Salesforce Service Cloud source.
type SalesforceServiceCloudSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Type: string (or Expression with resultType string).
	Query any

	// The read behavior for the operation. Default is Query.
	ReadBehavior *SalesforceSourceReadBehavior

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SalesforceServiceCloudSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SalesforceServiceCloudSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SalesforceServiceCloudSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SalesforceServiceCloudSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SalesforceServiceCloudSource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *SalesforceServiceCloudSource) GetReadBehavior() (rv *SalesforceSourceReadBehavior) {
	if s != nil {
		return s.ReadBehavior
	}
	return
}

func (s *SalesforceServiceCloudSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SalesforceServiceCloudSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SalesforceServiceCloudSource.
func (s *SalesforceServiceCloudSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SalesforceSink - A copy activity Salesforce sink.
type SalesforceSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The name of the external ID field for upsert operation. Default value is 'Id' column. Type: string (or Expression with
	// resultType string).
	ExternalIDFieldName any

	// The flag indicating whether or not to ignore null values from input dataset (except key fields) during write operation.
	// Default value is false. If set it to true, it means ADF will leave the data in
	// the destination object unchanged when doing upsert/update operation and insert defined default value when doing insert
	// operation, versus ADF will update the data in the destination object to NULL when
	// doing upsert/update operation and insert NULL value when doing insert operation. Type: boolean (or Expression with resultType
	// boolean).
	IgnoreNullValues any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any

	// The write behavior for the operation. Default is Insert.
	WriteBehavior *SalesforceSinkWriteBehavior
}

func (s *SalesforceSink) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SalesforceSink) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SalesforceSink) GetExternalIDFieldName() (rv any) {
	if s != nil {
		return s.ExternalIDFieldName
	}
	return
}

func (s *SalesforceSink) GetIgnoreNullValues() (rv any) {
	if s != nil {
		return s.IgnoreNullValues
	}
	return
}

func (s *SalesforceSink) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SalesforceSink) GetSinkRetryCount() (rv any) {
	if s != nil {
		return s.SinkRetryCount
	}
	return
}

func (s *SalesforceSink) GetSinkRetryWait() (rv any) {
	if s != nil {
		return s.SinkRetryWait
	}
	return
}

func (s *SalesforceSink) GetWriteBatchSize() (rv any) {
	if s != nil {
		return s.WriteBatchSize
	}
	return
}

func (s *SalesforceSink) GetWriteBatchTimeout() (rv any) {
	if s != nil {
		return s.WriteBatchTimeout
	}
	return
}

func (s *SalesforceSink) GetWriteBehavior() (rv *SalesforceSinkWriteBehavior) {
	if s != nil {
		return s.WriteBehavior
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type SalesforceSink.
func (s *SalesforceSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SinkRetryCount:           s.SinkRetryCount,
		SinkRetryWait:            s.SinkRetryWait,
		Type:                     s.Type,
		WriteBatchSize:           s.WriteBatchSize,
		WriteBatchTimeout:        s.WriteBatchTimeout,
	}
}

// SalesforceSource - A copy activity Salesforce source.
type SalesforceSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// The read behavior for the operation. Default is Query.
	ReadBehavior *SalesforceSourceReadBehavior

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SalesforceSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SalesforceSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SalesforceSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SalesforceSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SalesforceSource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *SalesforceSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SalesforceSource) GetReadBehavior() (rv *SalesforceSourceReadBehavior) {
	if s != nil {
		return s.ReadBehavior
	}
	return
}

func (s *SalesforceSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SalesforceSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SalesforceSource.
func (s *SalesforceSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SalesforceSource.
func (s *SalesforceSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SapBWLinkedService - SAP Business Warehouse Linked Service.
type SapBWLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Properties specific to this linked service type.
	TypeProperties *SapBWLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SapBWLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapBWLinkedService) GetTypeProperties() (rv *SapBWLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SapBWLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapBWLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapBWLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SapBWLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapBWLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SapBWLinkedService.
func (s *SapBWLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SapBWLinkedServiceTypeProperties - Properties specific to this linked service type.
type SapBWLinkedServiceTypeProperties struct {
	// REQUIRED; Client ID of the client on the BW system. (Usually a three-digit decimal number represented as a string) Type:
	// string (or Expression with resultType string).
	ClientID any

	// REQUIRED; Host name of the SAP BW instance. Type: string (or Expression with resultType string).
	Server any

	// REQUIRED; System number of the BW system. (Usually a two-digit decimal number represented as a string.) Type: string (or
	// Expression with resultType string).
	SystemNumber any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password to access the SAP BW server.
	Password SecretBaseClassification

	// Username to access the SAP BW server. Type: string (or Expression with resultType string).
	UserName any
}

func (s *SapBWLinkedServiceTypeProperties) GetClientID() (rv any) {
	if s != nil {
		return s.ClientID
	}
	return
}

func (s *SapBWLinkedServiceTypeProperties) GetServer() (rv any) {
	if s != nil {
		return s.Server
	}
	return
}

func (s *SapBWLinkedServiceTypeProperties) GetSystemNumber() (rv any) {
	if s != nil {
		return s.SystemNumber
	}
	return
}

func (s *SapBWLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SapBWLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SapBWLinkedServiceTypeProperties) GetUserName() (rv any) {
	if s != nil {
		return s.UserName
	}
	return
}

// SapBwCubeDataset - The SAP BW cube dataset.
type SapBwCubeDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (s *SapBwCubeDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SapBwCubeDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapBwCubeDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapBwCubeDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapBwCubeDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapBwCubeDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SapBwCubeDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SapBwCubeDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SapBwCubeDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SapBwCubeDataset.
func (s *SapBwCubeDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SapBwSource - A copy activity source for SapBW server via MDX.
type SapBwSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// MDX query. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SapBwSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapBwSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SapBwSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapBwSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SapBwSource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *SapBwSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SapBwSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SapBwSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SapBwSource.
func (s *SapBwSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SapBwSource.
func (s *SapBwSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SapCloudForCustomerLinkedService - Linked service for SAP Cloud for Customer.
type SapCloudForCustomerLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; SAP Cloud for Customer linked service properties.
	TypeProperties *SapCloudForCustomerLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SapCloudForCustomerLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapCloudForCustomerLinkedService) GetTypeProperties() (rv *SapCloudForCustomerLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SapCloudForCustomerLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapCloudForCustomerLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapCloudForCustomerLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SapCloudForCustomerLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapCloudForCustomerLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SapCloudForCustomerLinkedService.
func (s *SapCloudForCustomerLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SapCloudForCustomerLinkedServiceTypeProperties - SAP Cloud for Customer linked service properties.
type SapCloudForCustomerLinkedServiceTypeProperties struct {
	// REQUIRED; The URL of SAP Cloud for Customer OData API. For example, '[https://[tenantname].crm.ondemand.com/sap/c4c/odata/v1]'.
	// Type: string (or Expression with resultType string).
	URL any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Either encryptedCredential or username/password must be provided. Type:
	// string (or Expression with resultType string).
	EncryptedCredential any

	// The password for Basic authentication.
	Password SecretBaseClassification

	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username any
}

func (s *SapCloudForCustomerLinkedServiceTypeProperties) GetURL() (rv any) {
	if s != nil {
		return s.URL
	}
	return
}

func (s *SapCloudForCustomerLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SapCloudForCustomerLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SapCloudForCustomerLinkedServiceTypeProperties) GetUsername() (rv any) {
	if s != nil {
		return s.Username
	}
	return
}

// SapCloudForCustomerResourceDataset - The path of the SAP Cloud for Customer OData entity.
type SapCloudForCustomerResourceDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; SAP Cloud For Customer OData resource dataset properties.
	TypeProperties *SapCloudForCustomerResourceDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (s *SapCloudForCustomerResourceDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SapCloudForCustomerResourceDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapCloudForCustomerResourceDataset) GetTypeProperties() (rv *SapCloudForCustomerResourceDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SapCloudForCustomerResourceDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapCloudForCustomerResourceDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapCloudForCustomerResourceDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapCloudForCustomerResourceDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SapCloudForCustomerResourceDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SapCloudForCustomerResourceDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SapCloudForCustomerResourceDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SapCloudForCustomerResourceDataset.
func (s *SapCloudForCustomerResourceDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SapCloudForCustomerResourceDatasetTypeProperties - Sap Cloud For Customer OData resource dataset properties.
type SapCloudForCustomerResourceDatasetTypeProperties struct {
	// REQUIRED; The path of the SAP Cloud for Customer OData entity. Type: string (or Expression with resultType string).
	Path any
}

func (s *SapCloudForCustomerResourceDatasetTypeProperties) GetPath() (rv any) {
	if s != nil {
		return s.Path
	}
	return
}

// SapCloudForCustomerSink - A copy activity SAP Cloud for Customer sink.
type SapCloudForCustomerSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data.
	// Default value: 00:05:00. Type: string (or Expression with resultType
	// string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HTTPRequestTimeout any

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any

	// The write behavior for the operation. Default is 'Insert'.
	WriteBehavior *SapCloudForCustomerSinkWriteBehavior
}

func (s *SapCloudForCustomerSink) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapCloudForCustomerSink) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapCloudForCustomerSink) GetHTTPRequestTimeout() (rv any) {
	if s != nil {
		return s.HTTPRequestTimeout
	}
	return
}

func (s *SapCloudForCustomerSink) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SapCloudForCustomerSink) GetSinkRetryCount() (rv any) {
	if s != nil {
		return s.SinkRetryCount
	}
	return
}

func (s *SapCloudForCustomerSink) GetSinkRetryWait() (rv any) {
	if s != nil {
		return s.SinkRetryWait
	}
	return
}

func (s *SapCloudForCustomerSink) GetWriteBatchSize() (rv any) {
	if s != nil {
		return s.WriteBatchSize
	}
	return
}

func (s *SapCloudForCustomerSink) GetWriteBatchTimeout() (rv any) {
	if s != nil {
		return s.WriteBatchTimeout
	}
	return
}

func (s *SapCloudForCustomerSink) GetWriteBehavior() (rv *SapCloudForCustomerSinkWriteBehavior) {
	if s != nil {
		return s.WriteBehavior
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type SapCloudForCustomerSink.
func (s *SapCloudForCustomerSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SinkRetryCount:           s.SinkRetryCount,
		SinkRetryWait:            s.SinkRetryWait,
		Type:                     s.Type,
		WriteBatchSize:           s.WriteBatchSize,
		WriteBatchTimeout:        s.WriteBatchTimeout,
	}
}

// SapCloudForCustomerSource - A copy activity source for SAP Cloud for Customer source.
type SapCloudForCustomerSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data.
	// Default value: 00:05:00. Type: string (or Expression with resultType
	// string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HTTPRequestTimeout any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// SAP Cloud for Customer OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SapCloudForCustomerSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapCloudForCustomerSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SapCloudForCustomerSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapCloudForCustomerSource) GetHTTPRequestTimeout() (rv any) {
	if s != nil {
		return s.HTTPRequestTimeout
	}
	return
}

func (s *SapCloudForCustomerSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SapCloudForCustomerSource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *SapCloudForCustomerSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SapCloudForCustomerSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SapCloudForCustomerSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SapCloudForCustomerSource.
func (s *SapCloudForCustomerSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SapCloudForCustomerSource.
func (s *SapCloudForCustomerSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SapEccLinkedService - Linked service for SAP ERP Central Component(SAP ECC).
type SapEccLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; SAP ECC linked service properties.
	TypeProperties *SapEccLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SapEccLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapEccLinkedService) GetTypeProperties() (rv *SapEccLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SapEccLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapEccLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapEccLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SapEccLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapEccLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SapEccLinkedService.
func (s *SapEccLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SapEccLinkedServiceTypeProperties - SAP ECC linked service properties.
type SapEccLinkedServiceTypeProperties struct {
	// REQUIRED; The URL of SAP ECC OData API. For example, '[https://hostname:port/sap/opu/odata/sap/servicename/]'. Type: string
	// (or Expression with resultType string).
	URL *string

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Either encryptedCredential or username/password must be provided. Type:
	// string (or Expression with resultType string).
	EncryptedCredential *string

	// The password for Basic authentication.
	Password SecretBaseClassification

	// The username for Basic authentication. Type: string (or Expression with resultType string).
	Username *string
}

func (s *SapEccLinkedServiceTypeProperties) GetURL() (rv string) {
	if s != nil && s.URL != nil {
		return *s.URL
	}
	return
}

func (s *SapEccLinkedServiceTypeProperties) GetEncryptedCredential() (rv string) {
	if s != nil && s.EncryptedCredential != nil {
		return *s.EncryptedCredential
	}
	return
}

func (s *SapEccLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SapEccLinkedServiceTypeProperties) GetUsername() (rv string) {
	if s != nil && s.Username != nil {
		return *s.Username
	}
	return
}

// SapEccResourceDataset - The path of the SAP ECC OData entity.
type SapEccResourceDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; SAP ECC OData resource dataset properties.
	TypeProperties *SapEccResourceDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (s *SapEccResourceDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SapEccResourceDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapEccResourceDataset) GetTypeProperties() (rv *SapEccResourceDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SapEccResourceDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapEccResourceDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapEccResourceDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapEccResourceDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SapEccResourceDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SapEccResourceDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SapEccResourceDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SapEccResourceDataset.
func (s *SapEccResourceDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SapEccResourceDatasetTypeProperties - Sap ECC OData resource dataset properties.
type SapEccResourceDatasetTypeProperties struct {
	// REQUIRED; The path of the SAP ECC OData entity. Type: string (or Expression with resultType string).
	Path any
}

func (s *SapEccResourceDatasetTypeProperties) GetPath() (rv any) {
	if s != nil {
		return s.Path
	}
	return
}

// SapEccSource - A copy activity source for SAP ECC source.
type SapEccSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The timeout (TimeSpan) to get an HTTP response. It is the timeout to get a response, not the timeout to read response data.
	// Default value: 00:05:00. Type: string (or Expression with resultType
	// string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HTTPRequestTimeout any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// SAP ECC OData query. For example, "$top=1". Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SapEccSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapEccSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SapEccSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapEccSource) GetHTTPRequestTimeout() (rv any) {
	if s != nil {
		return s.HTTPRequestTimeout
	}
	return
}

func (s *SapEccSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SapEccSource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *SapEccSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SapEccSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SapEccSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SapEccSource.
func (s *SapEccSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SapEccSource.
func (s *SapEccSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SapHanaLinkedService - SAP HANA Linked Service.
type SapHanaLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Properties specific to this linked service type.
	TypeProperties *SapHanaLinkedServiceProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SapHanaLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapHanaLinkedService) GetTypeProperties() (rv *SapHanaLinkedServiceProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SapHanaLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapHanaLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapHanaLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SapHanaLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapHanaLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SapHanaLinkedService.
func (s *SapHanaLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SapHanaLinkedServiceProperties - Properties specific to this linked service type.
type SapHanaLinkedServiceProperties struct {
	// REQUIRED; Host name of the SAP HANA server. Type: string (or Expression with resultType string).
	Server any

	// The authentication type to be used to connect to the SAP HANA server.
	AuthenticationType *SapHanaAuthenticationType

	// SAP HANA ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password to access the SAP HANA server.
	Password SecretBaseClassification

	// Username to access the SAP HANA server. Type: string (or Expression with resultType string).
	UserName any
}

func (s *SapHanaLinkedServiceProperties) GetServer() (rv any) {
	if s != nil {
		return s.Server
	}
	return
}

func (s *SapHanaLinkedServiceProperties) GetAuthenticationType() (rv *SapHanaAuthenticationType) {
	if s != nil {
		return s.AuthenticationType
	}
	return
}

func (s *SapHanaLinkedServiceProperties) GetConnectionString() (rv any) {
	if s != nil {
		return s.ConnectionString
	}
	return
}

func (s *SapHanaLinkedServiceProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SapHanaLinkedServiceProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SapHanaLinkedServiceProperties) GetUserName() (rv any) {
	if s != nil {
		return s.UserName
	}
	return
}

// SapHanaPartitionSettings - The settings that will be leveraged for SAP HANA source partitioning.
type SapHanaPartitionSettings struct {
	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType
	// string).
	PartitionColumnName any
}

func (s *SapHanaPartitionSettings) GetPartitionColumnName() (rv any) {
	if s != nil {
		return s.PartitionColumnName
	}
	return
}

// SapHanaSource - A copy activity source for SAP HANA source.
type SapHanaSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The packet size of data read from SAP HANA. Type: integer(or Expression with resultType integer).
	PacketSize any

	// The partition mechanism that will be used for SAP HANA read in parallel.
	PartitionOption *SapHanaPartitionOption

	// The settings that will be leveraged for SAP HANA source partitioning.
	PartitionSettings *SapHanaPartitionSettings

	// SAP HANA Sql query. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SapHanaSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapHanaSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SapHanaSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapHanaSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SapHanaSource) GetPacketSize() (rv any) {
	if s != nil {
		return s.PacketSize
	}
	return
}

func (s *SapHanaSource) GetPartitionOption() (rv *SapHanaPartitionOption) {
	if s != nil {
		return s.PartitionOption
	}
	return
}

func (s *SapHanaSource) GetPartitionSettings() (rv *SapHanaPartitionSettings) {
	if s != nil {
		return s.PartitionSettings
	}
	return
}

func (s *SapHanaSource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *SapHanaSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SapHanaSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SapHanaSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SapHanaSource.
func (s *SapHanaSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SapHanaSource.
func (s *SapHanaSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SapHanaTableDataset - SAP HANA Table properties.
type SapHanaTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// SAP HANA Table properties.
	TypeProperties *SapHanaTableDatasetTypeProperties
}

func (s *SapHanaTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SapHanaTableDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapHanaTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapHanaTableDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapHanaTableDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapHanaTableDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SapHanaTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SapHanaTableDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SapHanaTableDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

func (s *SapHanaTableDataset) GetTypeProperties() (rv *SapHanaTableDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SapHanaTableDataset.
func (s *SapHanaTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SapHanaTableDatasetTypeProperties - SAP HANA Table properties.
type SapHanaTableDatasetTypeProperties struct {
	// The schema name of SAP HANA. Type: string (or Expression with resultType string).
	Schema any

	// The table name of SAP HANA. Type: string (or Expression with resultType string).
	Table any
}

func (s *SapHanaTableDatasetTypeProperties) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SapHanaTableDatasetTypeProperties) GetTable() (rv any) {
	if s != nil {
		return s.Table
	}
	return
}

// SapOdpLinkedService - SAP ODP Linked Service.
type SapOdpLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Properties specific to SAP ODP linked service type.
	TypeProperties *SapOdpLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SapOdpLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapOdpLinkedService) GetTypeProperties() (rv *SapOdpLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SapOdpLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapOdpLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapOdpLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SapOdpLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapOdpLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SapOdpLinkedService.
func (s *SapOdpLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SapOdpLinkedServiceTypeProperties - Properties specific to this linked service type.
type SapOdpLinkedServiceTypeProperties struct {
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented
	// as a string) Type: string (or Expression with resultType string).
	ClientID any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType
	// string).
	Language any

	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup any

	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer any

	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService any

	// Password to access the SAP server where the table is located.
	Password SecretBaseClassification

	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server any

	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with
	// resultType string).
	SncLibraryPath any

	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string
	// (or Expression with resultType string).
	SncMode any

	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName any

	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with
	// resultType string).
	SncPartnerName any

	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop any

	// The subscriber name. Type: string (or Expression with resultType string).
	SubscriberName any

	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemID any

	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.)
	// Type: string (or Expression with resultType string).
	SystemNumber any

	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName any

	// SNC X509 certificate file path. Type: string (or Expression with resultType string).
	X509CertificatePath any
}

func (s *SapOdpLinkedServiceTypeProperties) GetClientID() (rv any) {
	if s != nil {
		return s.ClientID
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetLanguage() (rv any) {
	if s != nil {
		return s.Language
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetLogonGroup() (rv any) {
	if s != nil {
		return s.LogonGroup
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetMessageServer() (rv any) {
	if s != nil {
		return s.MessageServer
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetMessageServerService() (rv any) {
	if s != nil {
		return s.MessageServerService
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetServer() (rv any) {
	if s != nil {
		return s.Server
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetSncLibraryPath() (rv any) {
	if s != nil {
		return s.SncLibraryPath
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetSncMode() (rv any) {
	if s != nil {
		return s.SncMode
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetSncMyName() (rv any) {
	if s != nil {
		return s.SncMyName
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetSncPartnerName() (rv any) {
	if s != nil {
		return s.SncPartnerName
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetSncQop() (rv any) {
	if s != nil {
		return s.SncQop
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetSubscriberName() (rv any) {
	if s != nil {
		return s.SubscriberName
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetSystemID() (rv any) {
	if s != nil {
		return s.SystemID
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetSystemNumber() (rv any) {
	if s != nil {
		return s.SystemNumber
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetUserName() (rv any) {
	if s != nil {
		return s.UserName
	}
	return
}

func (s *SapOdpLinkedServiceTypeProperties) GetX509CertificatePath() (rv any) {
	if s != nil {
		return s.X509CertificatePath
	}
	return
}

// SapOdpResourceDataset - SAP ODP Resource properties.
type SapOdpResourceDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; SAP ODP Resource properties.
	TypeProperties *SapOdpResourceDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (s *SapOdpResourceDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SapOdpResourceDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapOdpResourceDataset) GetTypeProperties() (rv *SapOdpResourceDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SapOdpResourceDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapOdpResourceDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapOdpResourceDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapOdpResourceDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SapOdpResourceDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SapOdpResourceDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SapOdpResourceDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SapOdpResourceDataset.
func (s *SapOdpResourceDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SapOdpResourceDatasetTypeProperties - SAP ODP Resource properties.
type SapOdpResourceDatasetTypeProperties struct {
	// REQUIRED; The context of the SAP ODP Object. Type: string (or Expression with resultType string).
	Context any

	// REQUIRED; The name of the SAP ODP Object. Type: string (or Expression with resultType string).
	ObjectName any
}

func (s *SapOdpResourceDatasetTypeProperties) GetContext() (rv any) {
	if s != nil {
		return s.Context
	}
	return
}

func (s *SapOdpResourceDatasetTypeProperties) GetObjectName() (rv any) {
	if s != nil {
		return s.ObjectName
	}
	return
}

// SapOdpSource - A copy activity source for SAP ODP source.
type SapOdpSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The extraction mode. Allowed value include: Full, Delta and Recovery. The default value is Full. Type: string (or Expression
	// with resultType string).
	ExtractionMode any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Specifies the columns to be selected from source data. Type: array of objects(projection) (or Expression with resultType
	// array of objects).
	Projection any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Specifies the selection conditions from source data. Type: array of objects(selection) (or Expression with resultType array
	// of objects).
	Selection any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// The subscriber process to manage the delta process. Type: string (or Expression with resultType string).
	SubscriberProcess any
}

func (s *SapOdpSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapOdpSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SapOdpSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapOdpSource) GetExtractionMode() (rv any) {
	if s != nil {
		return s.ExtractionMode
	}
	return
}

func (s *SapOdpSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SapOdpSource) GetProjection() (rv any) {
	if s != nil {
		return s.Projection
	}
	return
}

func (s *SapOdpSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SapOdpSource) GetSelection() (rv any) {
	if s != nil {
		return s.Selection
	}
	return
}

func (s *SapOdpSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SapOdpSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

func (s *SapOdpSource) GetSubscriberProcess() (rv any) {
	if s != nil {
		return s.SubscriberProcess
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SapOdpSource.
func (s *SapOdpSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SapOdpSource.
func (s *SapOdpSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SapOpenHubLinkedService - SAP Business Warehouse Open Hub Destination Linked Service.
type SapOpenHubLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Properties specific to SAP Business Warehouse Open Hub Destination linked service type.
	TypeProperties *SapOpenHubLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SapOpenHubLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapOpenHubLinkedService) GetTypeProperties() (rv *SapOpenHubLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SapOpenHubLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapOpenHubLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapOpenHubLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SapOpenHubLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapOpenHubLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SapOpenHubLinkedService.
func (s *SapOpenHubLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SapOpenHubLinkedServiceTypeProperties - Properties specific to SAP Business Warehouse Open Hub Destination linked service
// type.
type SapOpenHubLinkedServiceTypeProperties struct {
	// REQUIRED; Client ID of the client on the BW system where the open hub destination is located. (Usually a three-digit decimal
	// number represented as a string) Type: string (or Expression with resultType string).
	ClientID any

	// REQUIRED; Host name of the SAP BW instance where the open hub destination is located. Type: string (or Expression with
	// resultType string).
	Server any

	// REQUIRED; System number of the BW system where the open hub destination is located. (Usually a two-digit decimal number
	// represented as a string.) Type: string (or Expression with resultType string).
	SystemNumber any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Language of the BW system where the open hub destination is located. The default value is EN. Type: string (or Expression
	// with resultType string).
	Language any

	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup any

	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer any

	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService any

	// Password to access the SAP BW server where the open hub destination is located.
	Password SecretBaseClassification

	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemID any

	// Username to access the SAP BW server where the open hub destination is located. Type: string (or Expression with resultType
	// string).
	UserName any
}

func (s *SapOpenHubLinkedServiceTypeProperties) GetClientID() (rv any) {
	if s != nil {
		return s.ClientID
	}
	return
}

func (s *SapOpenHubLinkedServiceTypeProperties) GetServer() (rv any) {
	if s != nil {
		return s.Server
	}
	return
}

func (s *SapOpenHubLinkedServiceTypeProperties) GetSystemNumber() (rv any) {
	if s != nil {
		return s.SystemNumber
	}
	return
}

func (s *SapOpenHubLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SapOpenHubLinkedServiceTypeProperties) GetLanguage() (rv any) {
	if s != nil {
		return s.Language
	}
	return
}

func (s *SapOpenHubLinkedServiceTypeProperties) GetLogonGroup() (rv any) {
	if s != nil {
		return s.LogonGroup
	}
	return
}

func (s *SapOpenHubLinkedServiceTypeProperties) GetMessageServer() (rv any) {
	if s != nil {
		return s.MessageServer
	}
	return
}

func (s *SapOpenHubLinkedServiceTypeProperties) GetMessageServerService() (rv any) {
	if s != nil {
		return s.MessageServerService
	}
	return
}

func (s *SapOpenHubLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SapOpenHubLinkedServiceTypeProperties) GetSystemID() (rv any) {
	if s != nil {
		return s.SystemID
	}
	return
}

func (s *SapOpenHubLinkedServiceTypeProperties) GetUserName() (rv any) {
	if s != nil {
		return s.UserName
	}
	return
}

// SapOpenHubSource - A copy activity source for SAP Business Warehouse Open Hub Destination source.
type SapOpenHubSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will
	// be retrieved. The default value is 0. Type: integer (or Expression with
	// resultType integer ).
	BaseRequestID any

	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with
	// resultType string).
	CustomRFCReadTableFunctionModule any

	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType
	// boolean).
	ExcludeLastRequest any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type:
	// string (or Expression with resultType string).
	SapDataColumnDelimiter any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SapOpenHubSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapOpenHubSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SapOpenHubSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapOpenHubSource) GetBaseRequestID() (rv any) {
	if s != nil {
		return s.BaseRequestID
	}
	return
}

func (s *SapOpenHubSource) GetCustomRFCReadTableFunctionModule() (rv any) {
	if s != nil {
		return s.CustomRFCReadTableFunctionModule
	}
	return
}

func (s *SapOpenHubSource) GetExcludeLastRequest() (rv any) {
	if s != nil {
		return s.ExcludeLastRequest
	}
	return
}

func (s *SapOpenHubSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SapOpenHubSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SapOpenHubSource) GetSapDataColumnDelimiter() (rv any) {
	if s != nil {
		return s.SapDataColumnDelimiter
	}
	return
}

func (s *SapOpenHubSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SapOpenHubSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SapOpenHubSource.
func (s *SapOpenHubSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SapOpenHubSource.
func (s *SapOpenHubSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SapOpenHubTableDataset - Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; Sap Business Warehouse Open Hub Destination Table properties.
	TypeProperties *SapOpenHubTableDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (s *SapOpenHubTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SapOpenHubTableDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapOpenHubTableDataset) GetTypeProperties() (rv *SapOpenHubTableDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SapOpenHubTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapOpenHubTableDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapOpenHubTableDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapOpenHubTableDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SapOpenHubTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SapOpenHubTableDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SapOpenHubTableDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SapOpenHubTableDataset.
func (s *SapOpenHubTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SapOpenHubTableDatasetTypeProperties - Sap Business Warehouse Open Hub Destination Table properties.
type SapOpenHubTableDatasetTypeProperties struct {
	// REQUIRED; The name of the Open Hub Destination with destination type as Database Table. Type: string (or Expression with
	// resultType string).
	OpenHubDestinationName any

	// The ID of request for delta loading. Once it is set, only data with requestId larger than the value of this property will
	// be retrieved. The default value is 0. Type: integer (or Expression with
	// resultType integer ).
	BaseRequestID any

	// Whether to exclude the records of the last request. The default value is true. Type: boolean (or Expression with resultType
	// boolean).
	ExcludeLastRequest any
}

func (s *SapOpenHubTableDatasetTypeProperties) GetOpenHubDestinationName() (rv any) {
	if s != nil {
		return s.OpenHubDestinationName
	}
	return
}

func (s *SapOpenHubTableDatasetTypeProperties) GetBaseRequestID() (rv any) {
	if s != nil {
		return s.BaseRequestID
	}
	return
}

func (s *SapOpenHubTableDatasetTypeProperties) GetExcludeLastRequest() (rv any) {
	if s != nil {
		return s.ExcludeLastRequest
	}
	return
}

// SapTableLinkedService - SAP Table Linked Service.
type SapTableLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Properties specific to this linked service type.
	TypeProperties *SapTableLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SapTableLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapTableLinkedService) GetTypeProperties() (rv *SapTableLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SapTableLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapTableLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapTableLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SapTableLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapTableLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SapTableLinkedService.
func (s *SapTableLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SapTableLinkedServiceTypeProperties - Properties specific to this linked service type.
type SapTableLinkedServiceTypeProperties struct {
	// Client ID of the client on the SAP system where the table is located. (Usually a three-digit decimal number represented
	// as a string) Type: string (or Expression with resultType string).
	ClientID any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Language of the SAP system where the table is located. The default value is EN. Type: string (or Expression with resultType
	// string).
	Language any

	// The Logon Group for the SAP System. Type: string (or Expression with resultType string).
	LogonGroup any

	// The hostname of the SAP Message Server. Type: string (or Expression with resultType string).
	MessageServer any

	// The service name or port number of the Message Server. Type: string (or Expression with resultType string).
	MessageServerService any

	// Password to access the SAP server where the table is located.
	Password SecretBaseClassification

	// Host name of the SAP instance where the table is located. Type: string (or Expression with resultType string).
	Server any

	// External security product's library to access the SAP server where the table is located. Type: string (or Expression with
	// resultType string).
	SncLibraryPath any

	// SNC activation indicator to access the SAP server where the table is located. Must be either 0 (off) or 1 (on). Type: string
	// (or Expression with resultType string).
	SncMode any

	// Initiator's SNC name to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	SncMyName any

	// Communication partner's SNC name to access the SAP server where the table is located. Type: string (or Expression with
	// resultType string).
	SncPartnerName any

	// SNC Quality of Protection. Allowed value include: 1, 2, 3, 8, 9. Type: string (or Expression with resultType string).
	SncQop any

	// SystemID of the SAP system where the table is located. Type: string (or Expression with resultType string).
	SystemID any

	// System number of the SAP system where the table is located. (Usually a two-digit decimal number represented as a string.)
	// Type: string (or Expression with resultType string).
	SystemNumber any

	// Username to access the SAP server where the table is located. Type: string (or Expression with resultType string).
	UserName any
}

func (s *SapTableLinkedServiceTypeProperties) GetClientID() (rv any) {
	if s != nil {
		return s.ClientID
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetLanguage() (rv any) {
	if s != nil {
		return s.Language
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetLogonGroup() (rv any) {
	if s != nil {
		return s.LogonGroup
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetMessageServer() (rv any) {
	if s != nil {
		return s.MessageServer
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetMessageServerService() (rv any) {
	if s != nil {
		return s.MessageServerService
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetServer() (rv any) {
	if s != nil {
		return s.Server
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetSncLibraryPath() (rv any) {
	if s != nil {
		return s.SncLibraryPath
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetSncMode() (rv any) {
	if s != nil {
		return s.SncMode
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetSncMyName() (rv any) {
	if s != nil {
		return s.SncMyName
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetSncPartnerName() (rv any) {
	if s != nil {
		return s.SncPartnerName
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetSncQop() (rv any) {
	if s != nil {
		return s.SncQop
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetSystemID() (rv any) {
	if s != nil {
		return s.SystemID
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetSystemNumber() (rv any) {
	if s != nil {
		return s.SystemNumber
	}
	return
}

func (s *SapTableLinkedServiceTypeProperties) GetUserName() (rv any) {
	if s != nil {
		return s.UserName
	}
	return
}

// SapTablePartitionSettings - The settings that will be leveraged for SAP table source partitioning.
type SapTablePartitionSettings struct {
	// The maximum value of partitions the table will be split into. Type: integer (or Expression with resultType string).
	MaxPartitionsNumber any

	// The name of the column that will be used for proceeding range partitioning. Type: string (or Expression with resultType
	// string).
	PartitionColumnName any

	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type:
	// string (or Expression with resultType string).
	PartitionLowerBound any

	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type:
	// string (or Expression with resultType string).
	PartitionUpperBound any
}

func (s *SapTablePartitionSettings) GetMaxPartitionsNumber() (rv any) {
	if s != nil {
		return s.MaxPartitionsNumber
	}
	return
}

func (s *SapTablePartitionSettings) GetPartitionColumnName() (rv any) {
	if s != nil {
		return s.PartitionColumnName
	}
	return
}

func (s *SapTablePartitionSettings) GetPartitionLowerBound() (rv any) {
	if s != nil {
		return s.PartitionLowerBound
	}
	return
}

func (s *SapTablePartitionSettings) GetPartitionUpperBound() (rv any) {
	if s != nil {
		return s.PartitionUpperBound
	}
	return
}

// SapTableResourceDataset - SAP Table Resource properties.
type SapTableResourceDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; SAP Table Resource properties.
	TypeProperties *SapTableResourceDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (s *SapTableResourceDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SapTableResourceDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapTableResourceDataset) GetTypeProperties() (rv *SapTableResourceDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SapTableResourceDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapTableResourceDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SapTableResourceDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SapTableResourceDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SapTableResourceDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SapTableResourceDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SapTableResourceDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SapTableResourceDataset.
func (s *SapTableResourceDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SapTableResourceDatasetTypeProperties - SAP Table Resource properties.
type SapTableResourceDatasetTypeProperties struct {
	// REQUIRED; The name of the SAP Table. Type: string (or Expression with resultType string).
	TableName any
}

func (s *SapTableResourceDatasetTypeProperties) GetTableName() (rv any) {
	if s != nil {
		return s.TableName
	}
	return
}

// SapTableSource - A copy activity source for SAP Table source.
type SapTableSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies the maximum number of rows that will be retrieved at a time when retrieving data from SAP Table. Type: integer
	// (or Expression with resultType integer).
	BatchSize any

	// Specifies the custom RFC function module that will be used to read data from SAP Table. Type: string (or Expression with
	// resultType string).
	CustomRFCReadTableFunctionModule any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The partition mechanism that will be used for SAP table read in parallel.
	PartitionOption *SapTablePartitionOption

	// The settings that will be leveraged for SAP table source partitioning.
	PartitionSettings *SapTablePartitionSettings

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// The fields of the SAP table that will be retrieved. For example, column0, column1. Type: string (or Expression with resultType
	// string).
	RFCTableFields any

	// The options for the filtering of the SAP Table. For example, COLUMN0 EQ SOME VALUE. Type: string (or Expression with resultType
	// string).
	RFCTableOptions any

	// The number of rows to be retrieved. Type: integer(or Expression with resultType integer).
	RowCount any

	// The number of rows that will be skipped. Type: integer (or Expression with resultType integer).
	RowSkips any

	// The single character that will be used as delimiter passed to SAP RFC as well as splitting the output data retrieved. Type:
	// string (or Expression with resultType string).
	SapDataColumnDelimiter any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SapTableSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SapTableSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SapTableSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SapTableSource) GetBatchSize() (rv any) {
	if s != nil {
		return s.BatchSize
	}
	return
}

func (s *SapTableSource) GetCustomRFCReadTableFunctionModule() (rv any) {
	if s != nil {
		return s.CustomRFCReadTableFunctionModule
	}
	return
}

func (s *SapTableSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SapTableSource) GetPartitionOption() (rv *SapTablePartitionOption) {
	if s != nil {
		return s.PartitionOption
	}
	return
}

func (s *SapTableSource) GetPartitionSettings() (rv *SapTablePartitionSettings) {
	if s != nil {
		return s.PartitionSettings
	}
	return
}

func (s *SapTableSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SapTableSource) GetRFCTableFields() (rv any) {
	if s != nil {
		return s.RFCTableFields
	}
	return
}

func (s *SapTableSource) GetRFCTableOptions() (rv any) {
	if s != nil {
		return s.RFCTableOptions
	}
	return
}

func (s *SapTableSource) GetRowCount() (rv any) {
	if s != nil {
		return s.RowCount
	}
	return
}

func (s *SapTableSource) GetRowSkips() (rv any) {
	if s != nil {
		return s.RowSkips
	}
	return
}

func (s *SapTableSource) GetSapDataColumnDelimiter() (rv any) {
	if s != nil {
		return s.SapDataColumnDelimiter
	}
	return
}

func (s *SapTableSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SapTableSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SapTableSource.
func (s *SapTableSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SapTableSource.
func (s *SapTableSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// ScheduleTrigger - Trigger that creates pipeline runs periodically, on schedule.
type ScheduleTrigger struct {
	// REQUIRED; Trigger type.
	Type *string

	// REQUIRED; Schedule Trigger properties.
	TypeProperties *ScheduleTriggerTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the trigger.
	Annotations []any

	// Trigger description.
	Description *string

	// Pipelines that need to be started.
	Pipelines []*TriggerPipelineReference

	// READ-ONLY; Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState *TriggerRuntimeState
}

func (s *ScheduleTrigger) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *ScheduleTrigger) GetTypeProperties() (rv *ScheduleTriggerTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *ScheduleTrigger) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *ScheduleTrigger) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *ScheduleTrigger) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *ScheduleTrigger) GetPipelines() (rv []*TriggerPipelineReference) {
	if s != nil {
		return s.Pipelines
	}
	return
}

func (s *ScheduleTrigger) GetRuntimeState() (rv *TriggerRuntimeState) {
	if s != nil {
		return s.RuntimeState
	}
	return
}

// GetMultiplePipelineTrigger implements the MultiplePipelineTriggerClassification interface for type ScheduleTrigger.
func (s *ScheduleTrigger) GetMultiplePipelineTrigger() *MultiplePipelineTrigger {
	return &MultiplePipelineTrigger{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Pipelines:            s.Pipelines,
		RuntimeState:         s.RuntimeState,
		Type:                 s.Type,
	}
}

// GetTrigger implements the TriggerClassification interface for type ScheduleTrigger.
func (s *ScheduleTrigger) GetTrigger() *Trigger {
	return &Trigger{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		RuntimeState:         s.RuntimeState,
		Type:                 s.Type,
	}
}

// ScheduleTriggerRecurrence - The workflow trigger recurrence.
type ScheduleTriggerRecurrence struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The end time.
	EndTime *time.Time

	// The frequency.
	Frequency *RecurrenceFrequency

	// The interval.
	Interval *int32

	// The recurrence schedule.
	Schedule *RecurrenceSchedule

	// The start time.
	StartTime *time.Time

	// The time zone.
	TimeZone *string
}

func (s *ScheduleTriggerRecurrence) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *ScheduleTriggerRecurrence) GetEndTime() (rv *time.Time) {
	if s != nil {
		return s.EndTime
	}
	return
}

func (s *ScheduleTriggerRecurrence) GetFrequency() (rv *RecurrenceFrequency) {
	if s != nil {
		return s.Frequency
	}
	return
}

func (s *ScheduleTriggerRecurrence) GetInterval() (rv int32) {
	if s != nil && s.Interval != nil {
		return *s.Interval
	}
	return
}

func (s *ScheduleTriggerRecurrence) GetSchedule() (rv *RecurrenceSchedule) {
	if s != nil {
		return s.Schedule
	}
	return
}

func (s *ScheduleTriggerRecurrence) GetStartTime() (rv *time.Time) {
	if s != nil {
		return s.StartTime
	}
	return
}

func (s *ScheduleTriggerRecurrence) GetTimeZone() (rv string) {
	if s != nil && s.TimeZone != nil {
		return *s.TimeZone
	}
	return
}

// ScheduleTriggerTypeProperties - Schedule Trigger properties.
type ScheduleTriggerTypeProperties struct {
	// REQUIRED; Recurrence schedule configuration.
	Recurrence *ScheduleTriggerRecurrence
}

func (s *ScheduleTriggerTypeProperties) GetRecurrence() (rv *ScheduleTriggerRecurrence) {
	if s != nil {
		return s.Recurrence
	}
	return
}

// ScriptAction - Custom script action to run on HDI ondemand cluster once it's up.
type ScriptAction struct {
	// REQUIRED; The user provided name of the script action.
	Name *string

	// REQUIRED; The node types on which the script action should be executed.
	Roles any

	// REQUIRED; The URI for the script action.
	URI *string

	// The parameters for the script action.
	Parameters *string
}

func (s *ScriptAction) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *ScriptAction) GetRoles() (rv any) {
	if s != nil {
		return s.Roles
	}
	return
}

func (s *ScriptAction) GetURI() (rv string) {
	if s != nil && s.URI != nil {
		return *s.URI
	}
	return
}

func (s *ScriptAction) GetParameters() (rv string) {
	if s != nil && s.Parameters != nil {
		return *s.Parameters
	}
	return
}

// ScriptActivity - Script activity type.
type ScriptActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Script activity properties.
	TypeProperties *ScriptActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (s *ScriptActivity) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *ScriptActivity) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *ScriptActivity) GetTypeProperties() (rv *ScriptActivityTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *ScriptActivity) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *ScriptActivity) GetDependsOn() (rv []*ActivityDependency) {
	if s != nil {
		return s.DependsOn
	}
	return
}

func (s *ScriptActivity) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *ScriptActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *ScriptActivity) GetPolicy() (rv *ActivityPolicy) {
	if s != nil {
		return s.Policy
	}
	return
}

func (s *ScriptActivity) GetUserProperties() (rv []*UserProperty) {
	if s != nil {
		return s.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type ScriptActivity.
func (s *ScriptActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: s.AdditionalProperties,
		DependsOn:            s.DependsOn,
		Description:          s.Description,
		Name:                 s.Name,
		Type:                 s.Type,
		UserProperties:       s.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type ScriptActivity.
func (s *ScriptActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: s.AdditionalProperties,
		DependsOn:            s.DependsOn,
		Description:          s.Description,
		LinkedServiceName:    s.LinkedServiceName,
		Name:                 s.Name,
		Policy:               s.Policy,
		Type:                 s.Type,
		UserProperties:       s.UserProperties,
	}
}

// ScriptActivityParameter - Parameters of a script block.
type ScriptActivityParameter struct {
	// The direction of the parameter.
	Direction *ScriptActivityParameterDirection

	// The name of the parameter. Type: string (or Expression with resultType string).
	Name any

	// The size of the output direction parameter.
	Size *int32

	// The type of the parameter.
	Type *ScriptActivityParameterType

	// The value of the parameter.
	Value any
}

func (s *ScriptActivityParameter) GetDirection() (rv *ScriptActivityParameterDirection) {
	if s != nil {
		return s.Direction
	}
	return
}

func (s *ScriptActivityParameter) GetName() (rv any) {
	if s != nil {
		return s.Name
	}
	return
}

func (s *ScriptActivityParameter) GetSize() (rv int32) {
	if s != nil && s.Size != nil {
		return *s.Size
	}
	return
}

func (s *ScriptActivityParameter) GetType() (rv *ScriptActivityParameterType) {
	if s != nil {
		return s.Type
	}
	return
}

func (s *ScriptActivityParameter) GetValue() (rv any) {
	if s != nil {
		return s.Value
	}
	return
}

// ScriptActivityScriptBlock - Script block of scripts.
type ScriptActivityScriptBlock struct {
	// REQUIRED; The query text. Type: string (or Expression with resultType string).
	Text any

	// REQUIRED; The type of the query. Type: string.
	Type *ScriptType

	// Array of script parameters. Type: array.
	Parameters []*ScriptActivityParameter
}

func (s *ScriptActivityScriptBlock) GetText() (rv any) {
	if s != nil {
		return s.Text
	}
	return
}

func (s *ScriptActivityScriptBlock) GetType() (rv *ScriptType) {
	if s != nil {
		return s.Type
	}
	return
}

func (s *ScriptActivityScriptBlock) GetParameters() (rv []*ScriptActivityParameter) {
	if s != nil {
		return s.Parameters
	}
	return
}

// ScriptActivityTypeProperties - Script activity properties.
type ScriptActivityTypeProperties struct {
	// Log settings of script activity.
	LogSettings *ScriptActivityTypePropertiesLogSettings

	// Array of script blocks. Type: array.
	Scripts []*ScriptActivityScriptBlock
}

func (s *ScriptActivityTypeProperties) GetLogSettings() (rv *ScriptActivityTypePropertiesLogSettings) {
	if s != nil {
		return s.LogSettings
	}
	return
}

func (s *ScriptActivityTypeProperties) GetScripts() (rv []*ScriptActivityScriptBlock) {
	if s != nil {
		return s.Scripts
	}
	return
}

// ScriptActivityTypePropertiesLogSettings - Log settings of script activity.
type ScriptActivityTypePropertiesLogSettings struct {
	// REQUIRED; The destination of logs. Type: string.
	LogDestination *ScriptActivityLogDestination

	// Log location settings customer needs to provide when enabling log.
	LogLocationSettings *LogLocationSettings
}

func (s *ScriptActivityTypePropertiesLogSettings) GetLogDestination() (rv *ScriptActivityLogDestination) {
	if s != nil {
		return s.LogDestination
	}
	return
}

func (s *ScriptActivityTypePropertiesLogSettings) GetLogLocationSettings() (rv *LogLocationSettings) {
	if s != nil {
		return s.LogLocationSettings
	}
	return
}

// SecretBase - The base definition of a secret type.
type SecretBase struct {
	// REQUIRED; Type of the secret.
	Type *string
}

func (s *SecretBase) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// GetSecretBase implements the SecretBaseClassification interface for type SecretBase.
func (s *SecretBase) GetSecretBase() *SecretBase { return s }

// SecureString - Azure Synapse secure string definition. The string value will be masked with asterisks '*' during Get or
// List API calls.
type SecureString struct {
	// REQUIRED; Type of the secret.
	Type *string

	// REQUIRED; Value of secure string.
	Value *string
}

func (s *SecureString) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SecureString) GetValue() (rv string) {
	if s != nil && s.Value != nil {
		return *s.Value
	}
	return
}

// GetSecretBase implements the SecretBaseClassification interface for type SecureString.
func (s *SecureString) GetSecretBase() *SecretBase {
	return &SecretBase{
		Type: s.Type,
	}
}

// SelfDependencyTumblingWindowTriggerReference - Self referenced tumbling window trigger dependency.
type SelfDependencyTumblingWindowTriggerReference struct {
	// REQUIRED; Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset *string

	// REQUIRED; The type of dependency reference.
	Type *string

	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string
}

func (s *SelfDependencyTumblingWindowTriggerReference) GetOffset() (rv string) {
	if s != nil && s.Offset != nil {
		return *s.Offset
	}
	return
}

func (s *SelfDependencyTumblingWindowTriggerReference) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SelfDependencyTumblingWindowTriggerReference) GetSize() (rv string) {
	if s != nil && s.Size != nil {
		return *s.Size
	}
	return
}

// GetDependencyReference implements the DependencyReferenceClassification interface for type SelfDependencyTumblingWindowTriggerReference.
func (s *SelfDependencyTumblingWindowTriggerReference) GetDependencyReference() *DependencyReference {
	return &DependencyReference{
		Type: s.Type,
	}
}

// SelfHostedIntegrationRuntime - Self-hosted integration runtime.
type SelfHostedIntegrationRuntime struct {
	// REQUIRED; Type of integration runtime.
	Type *IntegrationRuntimeType

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Integration runtime description.
	Description *string

	// When this property is not null, means this is a linked integration runtime. The property is used to access original integration
	// runtime.
	TypeProperties *SelfHostedIntegrationRuntimeTypeProperties
}

func (s *SelfHostedIntegrationRuntime) GetType() (rv *IntegrationRuntimeType) {
	if s != nil {
		return s.Type
	}
	return
}

func (s *SelfHostedIntegrationRuntime) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SelfHostedIntegrationRuntime) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SelfHostedIntegrationRuntime) GetTypeProperties() (rv *SelfHostedIntegrationRuntimeTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// GetIntegrationRuntime implements the IntegrationRuntimeClassification interface for type SelfHostedIntegrationRuntime.
func (s *SelfHostedIntegrationRuntime) GetIntegrationRuntime() *IntegrationRuntime {
	return &IntegrationRuntime{
		AdditionalProperties: s.AdditionalProperties,
		Description:          s.Description,
		Type:                 s.Type,
	}
}

// SelfHostedIntegrationRuntimeTypeProperties - The self-hosted integration runtime properties.
type SelfHostedIntegrationRuntimeTypeProperties struct {
	// Linked integration runtime type from data factory
	LinkedInfo LinkedIntegrationRuntimeTypeClassification
}

func (s *SelfHostedIntegrationRuntimeTypeProperties) GetLinkedInfo() (rv LinkedIntegrationRuntimeTypeClassification) {
	if s != nil {
		return s.LinkedInfo
	}
	return
}

// ServiceNowLinkedService - ServiceNow server linked service.
type ServiceNowLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; ServiceNow server linked service properties.
	TypeProperties *ServiceNowLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *ServiceNowLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *ServiceNowLinkedService) GetTypeProperties() (rv *ServiceNowLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *ServiceNowLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *ServiceNowLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *ServiceNowLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *ServiceNowLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *ServiceNowLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type ServiceNowLinkedService.
func (s *ServiceNowLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// ServiceNowLinkedServiceTypeProperties - ServiceNow server linked service properties.
type ServiceNowLinkedServiceTypeProperties struct {
	// REQUIRED; The authentication type to use.
	AuthenticationType *ServiceNowAuthenticationType

	// REQUIRED; The endpoint of the ServiceNow server. (i.e. .service-now.com)
	Endpoint any

	// The client id for OAuth2 authentication.
	ClientID any

	// The client secret for OAuth2 authentication.
	ClientSecret SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The password corresponding to the user name for Basic and OAuth2 authentication.
	Password SecretBaseClassification

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true.
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification any

	// The user name used to connect to the ServiceNow server for Basic and OAuth2 authentication.
	Username any
}

func (s *ServiceNowLinkedServiceTypeProperties) GetAuthenticationType() (rv *ServiceNowAuthenticationType) {
	if s != nil {
		return s.AuthenticationType
	}
	return
}

func (s *ServiceNowLinkedServiceTypeProperties) GetEndpoint() (rv any) {
	if s != nil {
		return s.Endpoint
	}
	return
}

func (s *ServiceNowLinkedServiceTypeProperties) GetClientID() (rv any) {
	if s != nil {
		return s.ClientID
	}
	return
}

func (s *ServiceNowLinkedServiceTypeProperties) GetClientSecret() (rv SecretBaseClassification) {
	if s != nil {
		return s.ClientSecret
	}
	return
}

func (s *ServiceNowLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *ServiceNowLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *ServiceNowLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if s != nil {
		return s.UseEncryptedEndpoints
	}
	return
}

func (s *ServiceNowLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if s != nil {
		return s.UseHostVerification
	}
	return
}

func (s *ServiceNowLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if s != nil {
		return s.UsePeerVerification
	}
	return
}

func (s *ServiceNowLinkedServiceTypeProperties) GetUsername() (rv any) {
	if s != nil {
		return s.Username
	}
	return
}

// ServiceNowObjectDataset - ServiceNow server dataset.
type ServiceNowObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (s *ServiceNowObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *ServiceNowObjectDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *ServiceNowObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *ServiceNowObjectDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *ServiceNowObjectDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *ServiceNowObjectDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *ServiceNowObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *ServiceNowObjectDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *ServiceNowObjectDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

func (s *ServiceNowObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type ServiceNowObjectDataset.
func (s *ServiceNowObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// ServiceNowSource - A copy activity ServiceNow server source.
type ServiceNowSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *ServiceNowSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *ServiceNowSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *ServiceNowSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *ServiceNowSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *ServiceNowSource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *ServiceNowSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *ServiceNowSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *ServiceNowSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type ServiceNowSource.
func (s *ServiceNowSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type ServiceNowSource.
func (s *ServiceNowSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SetVariableActivity - Set value for a Variable.
type SetVariableActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Set Variable activity properties.
	TypeProperties *SetVariableActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (s *SetVariableActivity) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SetVariableActivity) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SetVariableActivity) GetTypeProperties() (rv *SetVariableActivityTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SetVariableActivity) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SetVariableActivity) GetDependsOn() (rv []*ActivityDependency) {
	if s != nil {
		return s.DependsOn
	}
	return
}

func (s *SetVariableActivity) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SetVariableActivity) GetUserProperties() (rv []*UserProperty) {
	if s != nil {
		return s.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type SetVariableActivity.
func (s *SetVariableActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: s.AdditionalProperties,
		DependsOn:            s.DependsOn,
		Description:          s.Description,
		Name:                 s.Name,
		Type:                 s.Type,
		UserProperties:       s.UserProperties,
	}
}

// GetControlActivity implements the ControlActivityClassification interface for type SetVariableActivity.
func (s *SetVariableActivity) GetControlActivity() *ControlActivity {
	return &ControlActivity{
		AdditionalProperties: s.AdditionalProperties,
		DependsOn:            s.DependsOn,
		Description:          s.Description,
		Name:                 s.Name,
		Type:                 s.Type,
		UserProperties:       s.UserProperties,
	}
}

// SetVariableActivityTypeProperties - SetVariable activity properties.
type SetVariableActivityTypeProperties struct {
	// Value to be set. Could be a static value or Expression
	Value any

	// Name of the variable whose value needs to be set.
	VariableName *string
}

func (s *SetVariableActivityTypeProperties) GetValue() (rv any) {
	if s != nil {
		return s.Value
	}
	return
}

func (s *SetVariableActivityTypeProperties) GetVariableName() (rv string) {
	if s != nil && s.VariableName != nil {
		return *s.VariableName
	}
	return
}

// SftpLocation - The location of SFTP dataset.
type SftpLocation struct {
	// REQUIRED; Type of dataset storage location.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specify the file name of dataset. Type: string (or Expression with resultType string).
	FileName any

	// Specify the folder path of dataset. Type: string (or Expression with resultType string)
	FolderPath any
}

func (s *SftpLocation) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SftpLocation) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SftpLocation) GetFileName() (rv any) {
	if s != nil {
		return s.FileName
	}
	return
}

func (s *SftpLocation) GetFolderPath() (rv any) {
	if s != nil {
		return s.FolderPath
	}
	return
}

// GetDatasetLocation implements the DatasetLocationClassification interface for type SftpLocation.
func (s *SftpLocation) GetDatasetLocation() *DatasetLocation {
	return &DatasetLocation{
		AdditionalProperties: s.AdditionalProperties,
		FileName:             s.FileName,
		FolderPath:           s.FolderPath,
		Type:                 s.Type,
	}
}

// SftpReadSettings - Sftp read settings.
type SftpReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Indicates whether the source files need to be deleted after copy completion. Default is false. Type: boolean (or Expression
	// with resultType boolean).
	DeleteFilesAfterCompletion any

	// If true, disable parallel reading within each file. Default is false. Type: boolean (or Expression with resultType boolean).
	DisableChunking any

	// Indicates whether to enable partition discovery.
	EnablePartitionDiscovery *bool

	// Point to a text file that lists each file (relative path to the path configured in the dataset) that you want to copy.
	// Type: string (or Expression with resultType string).
	FileListPath any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The end of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeEnd any

	// The start of file's modified datetime. Type: string (or Expression with resultType string).
	ModifiedDatetimeStart any

	// Specify the root path where partition discovery starts from. Type: string (or Expression with resultType string).
	PartitionRootPath any

	// If true, files under the folder path will be read recursively. Default is true. Type: boolean (or Expression with resultType
	// boolean).
	Recursive any

	// Sftp wildcardFileName. Type: string (or Expression with resultType string).
	WildcardFileName any

	// Sftp wildcardFolderPath. Type: string (or Expression with resultType string).
	WildcardFolderPath any
}

func (s *SftpReadSettings) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SftpReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SftpReadSettings) GetDeleteFilesAfterCompletion() (rv any) {
	if s != nil {
		return s.DeleteFilesAfterCompletion
	}
	return
}

func (s *SftpReadSettings) GetDisableChunking() (rv any) {
	if s != nil {
		return s.DisableChunking
	}
	return
}

func (s *SftpReadSettings) GetEnablePartitionDiscovery() (rv bool) {
	if s != nil && s.EnablePartitionDiscovery != nil {
		return *s.EnablePartitionDiscovery
	}
	return
}

func (s *SftpReadSettings) GetFileListPath() (rv any) {
	if s != nil {
		return s.FileListPath
	}
	return
}

func (s *SftpReadSettings) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SftpReadSettings) GetModifiedDatetimeEnd() (rv any) {
	if s != nil {
		return s.ModifiedDatetimeEnd
	}
	return
}

func (s *SftpReadSettings) GetModifiedDatetimeStart() (rv any) {
	if s != nil {
		return s.ModifiedDatetimeStart
	}
	return
}

func (s *SftpReadSettings) GetPartitionRootPath() (rv any) {
	if s != nil {
		return s.PartitionRootPath
	}
	return
}

func (s *SftpReadSettings) GetRecursive() (rv any) {
	if s != nil {
		return s.Recursive
	}
	return
}

func (s *SftpReadSettings) GetWildcardFileName() (rv any) {
	if s != nil {
		return s.WildcardFileName
	}
	return
}

func (s *SftpReadSettings) GetWildcardFolderPath() (rv any) {
	if s != nil {
		return s.WildcardFolderPath
	}
	return
}

// GetStoreReadSettings implements the StoreReadSettingsClassification interface for type SftpReadSettings.
func (s *SftpReadSettings) GetStoreReadSettings() *StoreReadSettings {
	return &StoreReadSettings{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		Type:                     s.Type,
	}
}

// SftpServerLinkedService - A linked service for an SSH File Transfer Protocol (SFTP) server.
type SftpServerLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Properties specific to this linked service type.
	TypeProperties *SftpServerLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SftpServerLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SftpServerLinkedService) GetTypeProperties() (rv *SftpServerLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SftpServerLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SftpServerLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SftpServerLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SftpServerLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SftpServerLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SftpServerLinkedService.
func (s *SftpServerLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SftpServerLinkedServiceTypeProperties - Properties specific to this linked service type.
type SftpServerLinkedServiceTypeProperties struct {
	// REQUIRED; The SFTP server host name. Type: string (or Expression with resultType string).
	Host any

	// The authentication type to be used to connect to the FTP server.
	AuthenticationType *SftpAuthenticationType

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The host key finger-print of the SFTP server. When SkipHostKeyValidation is false, HostKeyFingerprint should be specified.
	// Type: string (or Expression with resultType string).
	HostKeyFingerprint any

	// The password to decrypt the SSH private key if the SSH private key is encrypted.
	PassPhrase SecretBaseClassification

	// Password to logon the SFTP server for Basic authentication.
	Password SecretBaseClassification

	// The TCP port number that the SFTP server uses to listen for client connections. Default value is 22. Type: integer (or
	// Expression with resultType integer), minimum: 0.
	Port any

	// Base64 encoded SSH private key content for SshPublicKey authentication. For on-premises copy with SshPublicKey authentication,
	// either PrivateKeyPath or PrivateKeyContent should be specified. SSH
	// private key should be OpenSSH format.
	PrivateKeyContent SecretBaseClassification

	// The SSH private key file path for SshPublicKey authentication. Only valid for on-premises copy. For on-premises copy with
	// SshPublicKey authentication, either PrivateKeyPath or PrivateKeyContent should
	// be specified. SSH private key should be OpenSSH format. Type: string (or Expression with resultType string).
	PrivateKeyPath any

	// If true, skip the SSH host key validation. Default value is false. Type: boolean (or Expression with resultType boolean).
	SkipHostKeyValidation any

	// The username used to log on to the SFTP server. Type: string (or Expression with resultType string).
	UserName any
}

func (s *SftpServerLinkedServiceTypeProperties) GetHost() (rv any) {
	if s != nil {
		return s.Host
	}
	return
}

func (s *SftpServerLinkedServiceTypeProperties) GetAuthenticationType() (rv *SftpAuthenticationType) {
	if s != nil {
		return s.AuthenticationType
	}
	return
}

func (s *SftpServerLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SftpServerLinkedServiceTypeProperties) GetHostKeyFingerprint() (rv any) {
	if s != nil {
		return s.HostKeyFingerprint
	}
	return
}

func (s *SftpServerLinkedServiceTypeProperties) GetPassPhrase() (rv SecretBaseClassification) {
	if s != nil {
		return s.PassPhrase
	}
	return
}

func (s *SftpServerLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SftpServerLinkedServiceTypeProperties) GetPort() (rv any) {
	if s != nil {
		return s.Port
	}
	return
}

func (s *SftpServerLinkedServiceTypeProperties) GetPrivateKeyContent() (rv SecretBaseClassification) {
	if s != nil {
		return s.PrivateKeyContent
	}
	return
}

func (s *SftpServerLinkedServiceTypeProperties) GetPrivateKeyPath() (rv any) {
	if s != nil {
		return s.PrivateKeyPath
	}
	return
}

func (s *SftpServerLinkedServiceTypeProperties) GetSkipHostKeyValidation() (rv any) {
	if s != nil {
		return s.SkipHostKeyValidation
	}
	return
}

func (s *SftpServerLinkedServiceTypeProperties) GetUserName() (rv any) {
	if s != nil {
		return s.UserName
	}
	return
}

// SftpWriteSettings - Sftp write settings.
type SftpWriteSettings struct {
	// REQUIRED; The write setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The type of copy behavior for copy sink.
	CopyBehavior any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Specifies the timeout for writing each chunk to SFTP server. Default value: 01:00:00 (one hour). Type: string (or Expression
	// with resultType string).
	OperationTimeout any

	// Upload to temporary file(s) and rename. Disable this option if your SFTP server doesn't support rename operation. Type:
	// boolean (or Expression with resultType boolean).
	UseTempFileRename any
}

func (s *SftpWriteSettings) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SftpWriteSettings) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SftpWriteSettings) GetCopyBehavior() (rv any) {
	if s != nil {
		return s.CopyBehavior
	}
	return
}

func (s *SftpWriteSettings) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SftpWriteSettings) GetOperationTimeout() (rv any) {
	if s != nil {
		return s.OperationTimeout
	}
	return
}

func (s *SftpWriteSettings) GetUseTempFileRename() (rv any) {
	if s != nil {
		return s.UseTempFileRename
	}
	return
}

// GetStoreWriteSettings implements the StoreWriteSettingsClassification interface for type SftpWriteSettings.
func (s *SftpWriteSettings) GetStoreWriteSettings() *StoreWriteSettings {
	return &StoreWriteSettings{
		AdditionalProperties:     s.AdditionalProperties,
		CopyBehavior:             s.CopyBehavior,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		Type:                     s.Type,
	}
}

// SharePointOnlineListDatasetTypeProperties - Sharepoint online list dataset properties.
type SharePointOnlineListDatasetTypeProperties struct {
	// The name of the SharePoint Online list. Type: string (or Expression with resultType string).
	ListName any
}

func (s *SharePointOnlineListDatasetTypeProperties) GetListName() (rv any) {
	if s != nil {
		return s.ListName
	}
	return
}

// SharePointOnlineListLinkedService - SharePoint Online List linked service.
type SharePointOnlineListLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; SharePoint Online List linked service properties.
	TypeProperties *SharePointOnlineListLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SharePointOnlineListLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SharePointOnlineListLinkedService) GetTypeProperties() (rv *SharePointOnlineListLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SharePointOnlineListLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SharePointOnlineListLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SharePointOnlineListLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SharePointOnlineListLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SharePointOnlineListLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SharePointOnlineListLinkedService.
func (s *SharePointOnlineListLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SharePointOnlineListLinkedServiceTypeProperties - SharePoint Online List linked service properties.
type SharePointOnlineListLinkedServiceTypeProperties struct {
	// REQUIRED; The application (client) ID of your application registered in Azure Active Directory. Make sure to grant SharePoint
	// site permission to this application. Type: string (or Expression with resultType
	// string).
	ServicePrincipalID any

	// REQUIRED; The client secret of your application registered in Azure Active Directory. Type: string (or Expression with
	// resultType string).
	ServicePrincipalKey SecretBaseClassification

	// REQUIRED; The URL of the SharePoint Online site. For example, https://contoso.sharepoint.com/sites/siteName. Type: string
	// (or Expression with resultType string).
	SiteURL any

	// REQUIRED; The tenant ID under which your application resides. You can find it from Azure portal Active Directory overview
	// page. Type: string (or Expression with resultType string).
	TenantID any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any
}

func (s *SharePointOnlineListLinkedServiceTypeProperties) GetServicePrincipalID() (rv any) {
	if s != nil {
		return s.ServicePrincipalID
	}
	return
}

func (s *SharePointOnlineListLinkedServiceTypeProperties) GetServicePrincipalKey() (rv SecretBaseClassification) {
	if s != nil {
		return s.ServicePrincipalKey
	}
	return
}

func (s *SharePointOnlineListLinkedServiceTypeProperties) GetSiteURL() (rv any) {
	if s != nil {
		return s.SiteURL
	}
	return
}

func (s *SharePointOnlineListLinkedServiceTypeProperties) GetTenantID() (rv any) {
	if s != nil {
		return s.TenantID
	}
	return
}

func (s *SharePointOnlineListLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

// SharePointOnlineListResourceDataset - The sharepoint online list resource dataset.
type SharePointOnlineListResourceDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Sharepoint online list dataset properties.
	TypeProperties *SharePointOnlineListDatasetTypeProperties
}

func (s *SharePointOnlineListResourceDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SharePointOnlineListResourceDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SharePointOnlineListResourceDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SharePointOnlineListResourceDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SharePointOnlineListResourceDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SharePointOnlineListResourceDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SharePointOnlineListResourceDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SharePointOnlineListResourceDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SharePointOnlineListResourceDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

func (s *SharePointOnlineListResourceDataset) GetTypeProperties() (rv *SharePointOnlineListDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SharePointOnlineListResourceDataset.
func (s *SharePointOnlineListResourceDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SharePointOnlineListSource - A copy activity source for sharePoint online list source.
type SharePointOnlineListSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The wait time to get a response from SharePoint Online. Default value is 5 minutes (00:05:00). Type: string (or Expression
	// with resultType string), pattern:
	// ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	HTTPRequestTimeout any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The OData query to filter the data in SharePoint Online list. For example, "$top=1". Type: string (or Expression with resultType
	// string).
	Query any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SharePointOnlineListSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SharePointOnlineListSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SharePointOnlineListSource) GetHTTPRequestTimeout() (rv any) {
	if s != nil {
		return s.HTTPRequestTimeout
	}
	return
}

func (s *SharePointOnlineListSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SharePointOnlineListSource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *SharePointOnlineListSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SharePointOnlineListSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SharePointOnlineListSource.
func (s *SharePointOnlineListSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// ShopifyLinkedService - Shopify Service linked service.
type ShopifyLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Shopify Service linked service properties.
	TypeProperties *ShopifyLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *ShopifyLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *ShopifyLinkedService) GetTypeProperties() (rv *ShopifyLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *ShopifyLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *ShopifyLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *ShopifyLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *ShopifyLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *ShopifyLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type ShopifyLinkedService.
func (s *ShopifyLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// ShopifyLinkedServiceTypeProperties - Shopify Service linked service properties.
type ShopifyLinkedServiceTypeProperties struct {
	// REQUIRED; The endpoint of the Shopify server. (i.e. mystore.myshopify.com)
	Host any

	// The API access token that can be used to access Shopify’s data. The token won't expire if it is offline mode.
	AccessToken SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true.
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification any
}

func (s *ShopifyLinkedServiceTypeProperties) GetHost() (rv any) {
	if s != nil {
		return s.Host
	}
	return
}

func (s *ShopifyLinkedServiceTypeProperties) GetAccessToken() (rv SecretBaseClassification) {
	if s != nil {
		return s.AccessToken
	}
	return
}

func (s *ShopifyLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *ShopifyLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if s != nil {
		return s.UseEncryptedEndpoints
	}
	return
}

func (s *ShopifyLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if s != nil {
		return s.UseHostVerification
	}
	return
}

func (s *ShopifyLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if s != nil {
		return s.UsePeerVerification
	}
	return
}

// ShopifyObjectDataset - Shopify Service dataset.
type ShopifyObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (s *ShopifyObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *ShopifyObjectDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *ShopifyObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *ShopifyObjectDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *ShopifyObjectDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *ShopifyObjectDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *ShopifyObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *ShopifyObjectDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *ShopifyObjectDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

func (s *ShopifyObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type ShopifyObjectDataset.
func (s *ShopifyObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// ShopifySource - A copy activity Shopify Service source.
type ShopifySource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *ShopifySource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *ShopifySource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *ShopifySource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *ShopifySource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *ShopifySource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *ShopifySource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *ShopifySource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *ShopifySource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type ShopifySource.
func (s *ShopifySource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type ShopifySource.
func (s *ShopifySource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SkipErrorFile - Skip error file.
type SkipErrorFile struct {
	// Skip if source/sink file changed by other concurrent write. Default is false. Type: boolean (or Expression with resultType
	// boolean).
	DataInconsistency any

	// Skip if file is deleted by other client during copy. Default is true. Type: boolean (or Expression with resultType boolean).
	FileMissing any
}

func (s *SkipErrorFile) GetDataInconsistency() (rv any) {
	if s != nil {
		return s.DataInconsistency
	}
	return
}

func (s *SkipErrorFile) GetFileMissing() (rv any) {
	if s != nil {
		return s.FileMissing
	}
	return
}

// SmartsheetLinkedService - Linked service for Smartsheet.
type SmartsheetLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Smartsheet linked service properties.
	TypeProperties *SmartsheetLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SmartsheetLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SmartsheetLinkedService) GetTypeProperties() (rv *SmartsheetLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SmartsheetLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SmartsheetLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SmartsheetLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SmartsheetLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SmartsheetLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SmartsheetLinkedService.
func (s *SmartsheetLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SmartsheetLinkedServiceTypeProperties - Smartsheet linked service type properties.
type SmartsheetLinkedServiceTypeProperties struct {
	// REQUIRED; The api token for the Smartsheet source.
	APIToken SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any
}

func (s *SmartsheetLinkedServiceTypeProperties) GetAPIToken() (rv SecretBaseClassification) {
	if s != nil {
		return s.APIToken
	}
	return
}

func (s *SmartsheetLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

// SnowflakeDataset - The snowflake dataset.
type SnowflakeDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; Snowflake dataset properties.
	TypeProperties *SnowflakeDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (s *SnowflakeDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SnowflakeDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SnowflakeDataset) GetTypeProperties() (rv *SnowflakeDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SnowflakeDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SnowflakeDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SnowflakeDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SnowflakeDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SnowflakeDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SnowflakeDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SnowflakeDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SnowflakeDataset.
func (s *SnowflakeDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SnowflakeDatasetTypeProperties - Snowflake dataset properties.
type SnowflakeDatasetTypeProperties struct {
	// The schema name of the Snowflake database. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the Snowflake database. Type: string (or Expression with resultType string).
	Table any
}

func (s *SnowflakeDatasetTypeProperties) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SnowflakeDatasetTypeProperties) GetTable() (rv any) {
	if s != nil {
		return s.Table
	}
	return
}

// SnowflakeExportCopyCommand - Snowflake export command settings.
type SnowflakeExportCopyCommand struct {
	// REQUIRED; The export setting type.
	Type *string

	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type)
	// (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE
	// FORMAT": "MM/DD/YYYY", "TIMEFORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]any

	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type)
	// (or Expression with resultType object). Example: "additionalFormatOptions": {
	// "OVERWRITE": "TRUE", "MAXFILESIZE": "'FALSE'" }
	AdditionalFormatOptions map[string]any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

func (s *SnowflakeExportCopyCommand) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SnowflakeExportCopyCommand) GetAdditionalCopyOptions() (rv map[string]any) {
	if s != nil {
		return s.AdditionalCopyOptions
	}
	return
}

func (s *SnowflakeExportCopyCommand) GetAdditionalFormatOptions() (rv map[string]any) {
	if s != nil {
		return s.AdditionalFormatOptions
	}
	return
}

func (s *SnowflakeExportCopyCommand) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

// GetExportSettings implements the ExportSettingsClassification interface for type SnowflakeExportCopyCommand.
func (s *SnowflakeExportCopyCommand) GetExportSettings() *ExportSettings {
	return &ExportSettings{
		AdditionalProperties: s.AdditionalProperties,
		Type:                 s.Type,
	}
}

// SnowflakeImportCopyCommand - Snowflake import command settings.
type SnowflakeImportCopyCommand struct {
	// REQUIRED; The import setting type.
	Type *string

	// Additional copy options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type)
	// (or Expression with resultType object). Example: "additionalCopyOptions": { "DATE
	// FORMAT": "MM/DD/YYYY", "TIMEFORMAT": "'HH24:MI:SS.FF'" }
	AdditionalCopyOptions map[string]any

	// Additional format options directly passed to snowflake Copy Command. Type: key value pairs (value should be string type)
	// (or Expression with resultType object). Example: "additionalFormatOptions": {
	// "FORCE": "TRUE", "LOADUNCERTAINFILES": "'FALSE'" }
	AdditionalFormatOptions map[string]any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

func (s *SnowflakeImportCopyCommand) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SnowflakeImportCopyCommand) GetAdditionalCopyOptions() (rv map[string]any) {
	if s != nil {
		return s.AdditionalCopyOptions
	}
	return
}

func (s *SnowflakeImportCopyCommand) GetAdditionalFormatOptions() (rv map[string]any) {
	if s != nil {
		return s.AdditionalFormatOptions
	}
	return
}

func (s *SnowflakeImportCopyCommand) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

// GetImportSettings implements the ImportSettingsClassification interface for type SnowflakeImportCopyCommand.
func (s *SnowflakeImportCopyCommand) GetImportSettings() *ImportSettings {
	return &ImportSettings{
		AdditionalProperties: s.AdditionalProperties,
		Type:                 s.Type,
	}
}

// SnowflakeLinkedService - Snowflake linked service.
type SnowflakeLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Snowflake linked service properties.
	TypeProperties *SnowflakeLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SnowflakeLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SnowflakeLinkedService) GetTypeProperties() (rv *SnowflakeLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SnowflakeLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SnowflakeLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SnowflakeLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SnowflakeLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SnowflakeLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SnowflakeLinkedService.
func (s *SnowflakeLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SnowflakeLinkedServiceTypeProperties - Snowflake linked service properties.
type SnowflakeLinkedServiceTypeProperties struct {
	// REQUIRED; The connection string of snowflake. Type: string, SecureString.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Password *AzureKeyVaultSecretReference
}

func (s *SnowflakeLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if s != nil {
		return s.ConnectionString
	}
	return
}

func (s *SnowflakeLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SnowflakeLinkedServiceTypeProperties) GetPassword() (rv *AzureKeyVaultSecretReference) {
	if s != nil {
		return s.Password
	}
	return
}

// SnowflakeSink - A copy activity snowflake sink.
type SnowflakeSink struct {
	// REQUIRED; Copy sink type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Snowflake import settings.
	ImportSettings *SnowflakeImportCopyCommand

	// The maximum concurrent connection count for the sink data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// SQL pre-copy script. Type: string (or Expression with resultType string).
	PreCopyScript any

	// Sink retry count. Type: integer (or Expression with resultType integer).
	SinkRetryCount any

	// Sink retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SinkRetryWait any

	// Write batch size. Type: integer (or Expression with resultType integer), minimum: 0.
	WriteBatchSize any

	// Write batch timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	WriteBatchTimeout any
}

func (s *SnowflakeSink) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SnowflakeSink) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SnowflakeSink) GetImportSettings() (rv *SnowflakeImportCopyCommand) {
	if s != nil {
		return s.ImportSettings
	}
	return
}

func (s *SnowflakeSink) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SnowflakeSink) GetPreCopyScript() (rv any) {
	if s != nil {
		return s.PreCopyScript
	}
	return
}

func (s *SnowflakeSink) GetSinkRetryCount() (rv any) {
	if s != nil {
		return s.SinkRetryCount
	}
	return
}

func (s *SnowflakeSink) GetSinkRetryWait() (rv any) {
	if s != nil {
		return s.SinkRetryWait
	}
	return
}

func (s *SnowflakeSink) GetWriteBatchSize() (rv any) {
	if s != nil {
		return s.WriteBatchSize
	}
	return
}

func (s *SnowflakeSink) GetWriteBatchTimeout() (rv any) {
	if s != nil {
		return s.WriteBatchTimeout
	}
	return
}

// GetCopySink implements the CopySinkClassification interface for type SnowflakeSink.
func (s *SnowflakeSink) GetCopySink() *CopySink {
	return &CopySink{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SinkRetryCount:           s.SinkRetryCount,
		SinkRetryWait:            s.SinkRetryWait,
		Type:                     s.Type,
		WriteBatchSize:           s.WriteBatchSize,
		WriteBatchTimeout:        s.WriteBatchTimeout,
	}
}

// SnowflakeSource - A copy activity snowflake source.
type SnowflakeSource struct {
	// REQUIRED; Snowflake export settings.
	ExportSettings *SnowflakeExportCopyCommand

	// REQUIRED; Copy source type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Snowflake Sql query. Type: string (or Expression with resultType string).
	Query any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SnowflakeSource) GetExportSettings() (rv *SnowflakeExportCopyCommand) {
	if s != nil {
		return s.ExportSettings
	}
	return
}

func (s *SnowflakeSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SnowflakeSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SnowflakeSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SnowflakeSource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *SnowflakeSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SnowflakeSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SnowflakeSource.
func (s *SnowflakeSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

type SparkBatchJob struct {
	// REQUIRED; The session Id.
	ID *int32

	// The application id of this session
	AppID *string

	// The detailed application info.
	AppInfo map[string]*string

	// The artifact identifier.
	ArtifactID *string

	// The error information.
	Errors []*SparkServiceError

	// The job type.
	JobType  *SparkJobType
	LivyInfo *SparkBatchJobState

	// The log lines.
	LogLines []*string

	// The batch name.
	Name *string

	// The plugin information.
	Plugin *SparkServicePlugin

	// The Spark batch job result.
	Result *SparkBatchJobResultType

	// The scheduler information.
	Scheduler *SparkScheduler

	// The Spark pool name.
	SparkPoolName *string

	// The batch state
	State *LivyStates

	// The submitter identifier.
	SubmitterID *string

	// The submitter name.
	SubmitterName *string

	// The tags.
	Tags map[string]*string

	// The workspace name.
	WorkspaceName *string
}

func (s *SparkBatchJob) GetID() (rv int32) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SparkBatchJob) GetAppID() (rv string) {
	if s != nil && s.AppID != nil {
		return *s.AppID
	}
	return
}

func (s *SparkBatchJob) GetAppInfo() (rv map[string]*string) {
	if s != nil {
		return s.AppInfo
	}
	return
}

func (s *SparkBatchJob) GetArtifactID() (rv string) {
	if s != nil && s.ArtifactID != nil {
		return *s.ArtifactID
	}
	return
}

func (s *SparkBatchJob) GetErrors() (rv []*SparkServiceError) {
	if s != nil {
		return s.Errors
	}
	return
}

func (s *SparkBatchJob) GetJobType() (rv *SparkJobType) {
	if s != nil {
		return s.JobType
	}
	return
}

func (s *SparkBatchJob) GetLivyInfo() (rv *SparkBatchJobState) {
	if s != nil {
		return s.LivyInfo
	}
	return
}

func (s *SparkBatchJob) GetLogLines() (rv []*string) {
	if s != nil {
		return s.LogLines
	}
	return
}

func (s *SparkBatchJob) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SparkBatchJob) GetPlugin() (rv *SparkServicePlugin) {
	if s != nil {
		return s.Plugin
	}
	return
}

func (s *SparkBatchJob) GetResult() (rv *SparkBatchJobResultType) {
	if s != nil {
		return s.Result
	}
	return
}

func (s *SparkBatchJob) GetScheduler() (rv *SparkScheduler) {
	if s != nil {
		return s.Scheduler
	}
	return
}

func (s *SparkBatchJob) GetSparkPoolName() (rv string) {
	if s != nil && s.SparkPoolName != nil {
		return *s.SparkPoolName
	}
	return
}

func (s *SparkBatchJob) GetState() (rv *LivyStates) {
	if s != nil {
		return s.State
	}
	return
}

func (s *SparkBatchJob) GetSubmitterID() (rv string) {
	if s != nil && s.SubmitterID != nil {
		return *s.SubmitterID
	}
	return
}

func (s *SparkBatchJob) GetSubmitterName() (rv string) {
	if s != nil && s.SubmitterName != nil {
		return *s.SubmitterName
	}
	return
}

func (s *SparkBatchJob) GetTags() (rv map[string]*string) {
	if s != nil {
		return s.Tags
	}
	return
}

func (s *SparkBatchJob) GetWorkspaceName() (rv string) {
	if s != nil && s.WorkspaceName != nil {
		return *s.WorkspaceName
	}
	return
}

type SparkBatchJobState struct {
	// the Spark job state.
	CurrentState *string

	// time that at which "dead" livy state was first seen.
	DeadAt             *time.Time
	JobCreationRequest *SparkRequest

	// the time that at which "not_started" livy state was first seen.
	NotStartedAt *time.Time

	// the time that at which "recovering" livy state was first seen.
	RecoveringAt *time.Time

	// the time that at which "running" livy state was first seen.
	RunningAt *time.Time

	// the time that at which "starting" livy state was first seen.
	StartingAt *time.Time

	// the time that at which "success" livy state was first seen.
	SuccessAt *time.Time

	// the time that at which "killed" livy state was first seen.
	TerminatedAt *time.Time
}

func (s *SparkBatchJobState) GetCurrentState() (rv string) {
	if s != nil && s.CurrentState != nil {
		return *s.CurrentState
	}
	return
}

func (s *SparkBatchJobState) GetDeadAt() (rv *time.Time) {
	if s != nil {
		return s.DeadAt
	}
	return
}

func (s *SparkBatchJobState) GetJobCreationRequest() (rv *SparkRequest) {
	if s != nil {
		return s.JobCreationRequest
	}
	return
}

func (s *SparkBatchJobState) GetNotStartedAt() (rv *time.Time) {
	if s != nil {
		return s.NotStartedAt
	}
	return
}

func (s *SparkBatchJobState) GetRecoveringAt() (rv *time.Time) {
	if s != nil {
		return s.RecoveringAt
	}
	return
}

func (s *SparkBatchJobState) GetRunningAt() (rv *time.Time) {
	if s != nil {
		return s.RunningAt
	}
	return
}

func (s *SparkBatchJobState) GetStartingAt() (rv *time.Time) {
	if s != nil {
		return s.StartingAt
	}
	return
}

func (s *SparkBatchJobState) GetSuccessAt() (rv *time.Time) {
	if s != nil {
		return s.SuccessAt
	}
	return
}

func (s *SparkBatchJobState) GetTerminatedAt() (rv *time.Time) {
	if s != nil {
		return s.TerminatedAt
	}
	return
}

// SparkConfiguration Artifact information
type SparkConfiguration struct {
	// REQUIRED; SparkConfiguration configs.
	Configs map[string]*string

	// Annotations for SparkConfiguration.
	Annotations []*string

	// SparkConfiguration configMergeRule.
	ConfigMergeRule map[string]*string

	// The timestamp of resource creation.
	Created *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// Description about the SparkConfiguration.
	Description *string

	// additional Notes.
	Notes *string
}

func (s *SparkConfiguration) GetConfigs() (rv map[string]*string) {
	if s != nil {
		return s.Configs
	}
	return
}

func (s *SparkConfiguration) GetAnnotations() (rv []*string) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SparkConfiguration) GetConfigMergeRule() (rv map[string]*string) {
	if s != nil {
		return s.ConfigMergeRule
	}
	return
}

func (s *SparkConfiguration) GetCreated() (rv *time.Time) {
	if s != nil {
		return s.Created
	}
	return
}

func (s *SparkConfiguration) GetCreatedBy() (rv string) {
	if s != nil && s.CreatedBy != nil {
		return *s.CreatedBy
	}
	return
}

func (s *SparkConfiguration) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SparkConfiguration) GetNotes() (rv string) {
	if s != nil && s.Notes != nil {
		return *s.Notes
	}
	return
}

// SparkConfigurationListResponse - A list of sparkconfiguration resources.
type SparkConfigurationListResponse struct {
	// REQUIRED; List of sparkconfigurations.
	Value []*SparkConfigurationResource

	// The link to the next page of results, if any remaining results exist.
	NextLink *string
}

func (s *SparkConfigurationListResponse) GetValue() (rv []*SparkConfigurationResource) {
	if s != nil {
		return s.Value
	}
	return
}

func (s *SparkConfigurationListResponse) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

// SparkConfigurationParametrizationReference - Spark configuration reference.
type SparkConfigurationParametrizationReference struct {
	// REQUIRED; Reference spark configuration name. Type: string (or Expression with resultType string).
	ReferenceName any

	// REQUIRED; Spark configuration reference type.
	Type *SparkConfigurationReferenceType
}

func (s *SparkConfigurationParametrizationReference) GetReferenceName() (rv any) {
	if s != nil {
		return s.ReferenceName
	}
	return
}

func (s *SparkConfigurationParametrizationReference) GetType() (rv *SparkConfigurationReferenceType) {
	if s != nil {
		return s.Type
	}
	return
}

// SparkConfigurationReference - Spark configuration reference.
type SparkConfigurationReference struct {
	// REQUIRED; Reference spark configuration name.
	ReferenceName *string

	// REQUIRED; Spark configuration reference type.
	Type *SparkConfigurationReferenceType
}

func (s *SparkConfigurationReference) GetReferenceName() (rv string) {
	if s != nil && s.ReferenceName != nil {
		return *s.ReferenceName
	}
	return
}

func (s *SparkConfigurationReference) GetType() (rv *SparkConfigurationReferenceType) {
	if s != nil {
		return s.Type
	}
	return
}

// SparkConfigurationResource - Spark Configuration resource type.
type SparkConfigurationResource struct {
	// REQUIRED; Properties of Spark Configuration.
	Properties *SparkConfiguration

	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (s *SparkConfigurationResource) GetProperties() (rv *SparkConfiguration) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SparkConfigurationResource) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

func (s *SparkConfigurationResource) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SparkConfigurationResource) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SparkConfigurationResource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// SparkDatasetTypeProperties - Spark Properties
type SparkDatasetTypeProperties struct {
	// The schema name of the Spark. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the Spark. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (s *SparkDatasetTypeProperties) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SparkDatasetTypeProperties) GetTable() (rv any) {
	if s != nil {
		return s.Table
	}
	return
}

func (s *SparkDatasetTypeProperties) GetTableName() (rv any) {
	if s != nil {
		return s.TableName
	}
	return
}

// SparkJobDefinition - Spark job definition.
type SparkJobDefinition struct {
	// REQUIRED; The properties of the Spark job.
	JobProperties *SparkJobProperties

	// REQUIRED; Big data pool reference.
	TargetBigDataPool *BigDataPoolReference

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The description of the Spark job definition.
	Description *string

	// The folder that this Spark job definition is in. If not specified, this Spark job definition will appear at the root level.
	Folder *SparkJobDefinitionFolder

	// The language of the Spark application.
	Language *string

	// The required Spark version of the application.
	RequiredSparkVersion *string

	// The spark configuration of the spark job.
	TargetSparkConfiguration *SparkConfigurationReference
}

func (s *SparkJobDefinition) GetJobProperties() (rv *SparkJobProperties) {
	if s != nil {
		return s.JobProperties
	}
	return
}

func (s *SparkJobDefinition) GetTargetBigDataPool() (rv *BigDataPoolReference) {
	if s != nil {
		return s.TargetBigDataPool
	}
	return
}

func (s *SparkJobDefinition) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SparkJobDefinition) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SparkJobDefinition) GetFolder() (rv *SparkJobDefinitionFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SparkJobDefinition) GetLanguage() (rv string) {
	if s != nil && s.Language != nil {
		return *s.Language
	}
	return
}

func (s *SparkJobDefinition) GetRequiredSparkVersion() (rv string) {
	if s != nil && s.RequiredSparkVersion != nil {
		return *s.RequiredSparkVersion
	}
	return
}

func (s *SparkJobDefinition) GetTargetSparkConfiguration() (rv *SparkConfigurationReference) {
	if s != nil {
		return s.TargetSparkConfiguration
	}
	return
}

// SparkJobDefinitionFolder - The folder that this Spark job definition is in. If not specified, this Spark job definition
// will appear at the root level.
type SparkJobDefinitionFolder struct {
	// The name of the folder that this Spark job definition is in.
	Name *string
}

func (s *SparkJobDefinitionFolder) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

// SparkJobDefinitionResource - Spark job definition resource type.
type SparkJobDefinitionResource struct {
	// REQUIRED; Properties of spark job definition.
	Properties *SparkJobDefinition

	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (s *SparkJobDefinitionResource) GetProperties() (rv *SparkJobDefinition) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SparkJobDefinitionResource) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

func (s *SparkJobDefinitionResource) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SparkJobDefinitionResource) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SparkJobDefinitionResource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// SparkJobDefinitionsListResponse - A list of spark job definitions resources.
type SparkJobDefinitionsListResponse struct {
	// REQUIRED; List of spark job definitions.
	Value []*SparkJobDefinitionResource

	// The link to the next page of results, if any remaining results exist.
	NextLink *string
}

func (s *SparkJobDefinitionsListResponse) GetValue() (rv []*SparkJobDefinitionResource) {
	if s != nil {
		return s.Value
	}
	return
}

func (s *SparkJobDefinitionsListResponse) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

// SparkJobProperties - The properties of the Spark job.
type SparkJobProperties struct {
	// REQUIRED; Number of cores to use for the driver.
	DriverCores *int32

	// REQUIRED; Amount of memory to use for the driver process.
	DriverMemory *string

	// REQUIRED; Number of cores to use for each executor.
	ExecutorCores *int32

	// REQUIRED; Amount of memory to use per executor process.
	ExecutorMemory *string

	// REQUIRED; File containing the application to execute.
	File *string

	// REQUIRED; Number of executors to launch for this job.
	NumExecutors *int32

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Archives to be used in this job.
	Archives []*string

	// Command line arguments for the application.
	Args []*string

	// Main class for Java/Scala application.
	ClassName *string

	// Spark configuration properties.
	Conf any

	// files to be used in this job.
	Files []*string

	// Jars to be used in this job.
	Jars []*string

	// The name of the job.
	Name *string
}

func (s *SparkJobProperties) GetDriverCores() (rv int32) {
	if s != nil && s.DriverCores != nil {
		return *s.DriverCores
	}
	return
}

func (s *SparkJobProperties) GetDriverMemory() (rv string) {
	if s != nil && s.DriverMemory != nil {
		return *s.DriverMemory
	}
	return
}

func (s *SparkJobProperties) GetExecutorCores() (rv int32) {
	if s != nil && s.ExecutorCores != nil {
		return *s.ExecutorCores
	}
	return
}

func (s *SparkJobProperties) GetExecutorMemory() (rv string) {
	if s != nil && s.ExecutorMemory != nil {
		return *s.ExecutorMemory
	}
	return
}

func (s *SparkJobProperties) GetFile() (rv string) {
	if s != nil && s.File != nil {
		return *s.File
	}
	return
}

func (s *SparkJobProperties) GetNumExecutors() (rv int32) {
	if s != nil && s.NumExecutors != nil {
		return *s.NumExecutors
	}
	return
}

func (s *SparkJobProperties) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SparkJobProperties) GetArchives() (rv []*string) {
	if s != nil {
		return s.Archives
	}
	return
}

func (s *SparkJobProperties) GetArgs() (rv []*string) {
	if s != nil {
		return s.Args
	}
	return
}

func (s *SparkJobProperties) GetClassName() (rv string) {
	if s != nil && s.ClassName != nil {
		return *s.ClassName
	}
	return
}

func (s *SparkJobProperties) GetConf() (rv any) {
	if s != nil {
		return s.Conf
	}
	return
}

func (s *SparkJobProperties) GetFiles() (rv []*string) {
	if s != nil {
		return s.Files
	}
	return
}

func (s *SparkJobProperties) GetJars() (rv []*string) {
	if s != nil {
		return s.Jars
	}
	return
}

func (s *SparkJobProperties) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

// SparkLinkedService - Spark Server linked service.
type SparkLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Spark Server linked service properties.
	TypeProperties *SparkLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SparkLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SparkLinkedService) GetTypeProperties() (rv *SparkLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SparkLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SparkLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SparkLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SparkLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SparkLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SparkLinkedService.
func (s *SparkLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SparkLinkedServiceTypeProperties - Spark Server linked service properties.
type SparkLinkedServiceTypeProperties struct {
	// REQUIRED; The authentication method used to access the Spark server.
	AuthenticationType *SparkAuthenticationType

	// REQUIRED; IP address or host name of the Spark server
	Host any

	// REQUIRED; The TCP port that the Spark server uses to listen for client connections.
	Port any

	// Specifies whether to require a CA-issued SSL certificate name to match the host name of the server when connecting over
	// SSL. The default value is false.
	AllowHostNameCNMismatch any

	// Specifies whether to allow self-signed certificates from the server. The default value is false.
	AllowSelfSignedServerCert any

	// Specifies whether the connections to the server are encrypted using SSL. The default value is false.
	EnableSSL any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The partial URL corresponding to the Spark server.
	HTTPPath any

	// The password corresponding to the user name that you provided in the Username field
	Password SecretBaseClassification

	// The type of Spark server.
	ServerType *SparkServerType

	// The transport protocol to use in the Thrift layer.
	ThriftTransportProtocol *SparkThriftTransportProtocol

	// The full path of the .pem file containing trusted CA certificates for verifying the server when connecting over SSL. This
	// property can only be set when using SSL on self-hosted IR. The default value
	// is the cacerts.pem file installed with the IR.
	TrustedCertPath any

	// Specifies whether to use a CA certificate from the system trust store or from a specified PEM file. The default value is
	// false.
	UseSystemTrustStore any

	// The user name that you use to access Spark Server.
	Username any
}

func (s *SparkLinkedServiceTypeProperties) GetAuthenticationType() (rv *SparkAuthenticationType) {
	if s != nil {
		return s.AuthenticationType
	}
	return
}

func (s *SparkLinkedServiceTypeProperties) GetHost() (rv any) {
	if s != nil {
		return s.Host
	}
	return
}

func (s *SparkLinkedServiceTypeProperties) GetPort() (rv any) {
	if s != nil {
		return s.Port
	}
	return
}

func (s *SparkLinkedServiceTypeProperties) GetAllowHostNameCNMismatch() (rv any) {
	if s != nil {
		return s.AllowHostNameCNMismatch
	}
	return
}

func (s *SparkLinkedServiceTypeProperties) GetAllowSelfSignedServerCert() (rv any) {
	if s != nil {
		return s.AllowSelfSignedServerCert
	}
	return
}

func (s *SparkLinkedServiceTypeProperties) GetEnableSSL() (rv any) {
	if s != nil {
		return s.EnableSSL
	}
	return
}

func (s *SparkLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SparkLinkedServiceTypeProperties) GetHTTPPath() (rv any) {
	if s != nil {
		return s.HTTPPath
	}
	return
}

func (s *SparkLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SparkLinkedServiceTypeProperties) GetServerType() (rv *SparkServerType) {
	if s != nil {
		return s.ServerType
	}
	return
}

func (s *SparkLinkedServiceTypeProperties) GetThriftTransportProtocol() (rv *SparkThriftTransportProtocol) {
	if s != nil {
		return s.ThriftTransportProtocol
	}
	return
}

func (s *SparkLinkedServiceTypeProperties) GetTrustedCertPath() (rv any) {
	if s != nil {
		return s.TrustedCertPath
	}
	return
}

func (s *SparkLinkedServiceTypeProperties) GetUseSystemTrustStore() (rv any) {
	if s != nil {
		return s.UseSystemTrustStore
	}
	return
}

func (s *SparkLinkedServiceTypeProperties) GetUsername() (rv any) {
	if s != nil {
		return s.Username
	}
	return
}

// SparkObjectDataset - Spark Server dataset.
type SparkObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *SparkDatasetTypeProperties
}

func (s *SparkObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SparkObjectDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SparkObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SparkObjectDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SparkObjectDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SparkObjectDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SparkObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SparkObjectDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SparkObjectDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

func (s *SparkObjectDataset) GetTypeProperties() (rv *SparkDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SparkObjectDataset.
func (s *SparkObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

type SparkRequest struct {
	Archives  []*string
	Arguments []*string
	ClassName *string

	// Dictionary of
	Configuration  map[string]*string
	DriverCores    *int32
	DriverMemory   *string
	ExecutorCores  *int32
	ExecutorCount  *int32
	ExecutorMemory *string
	File           *string
	Files          []*string
	Jars           []*string
	Name           *string
	PythonFiles    []*string
}

func (s *SparkRequest) GetArchives() (rv []*string) {
	if s != nil {
		return s.Archives
	}
	return
}

func (s *SparkRequest) GetArguments() (rv []*string) {
	if s != nil {
		return s.Arguments
	}
	return
}

func (s *SparkRequest) GetClassName() (rv string) {
	if s != nil && s.ClassName != nil {
		return *s.ClassName
	}
	return
}

func (s *SparkRequest) GetConfiguration() (rv map[string]*string) {
	if s != nil {
		return s.Configuration
	}
	return
}

func (s *SparkRequest) GetDriverCores() (rv int32) {
	if s != nil && s.DriverCores != nil {
		return *s.DriverCores
	}
	return
}

func (s *SparkRequest) GetDriverMemory() (rv string) {
	if s != nil && s.DriverMemory != nil {
		return *s.DriverMemory
	}
	return
}

func (s *SparkRequest) GetExecutorCores() (rv int32) {
	if s != nil && s.ExecutorCores != nil {
		return *s.ExecutorCores
	}
	return
}

func (s *SparkRequest) GetExecutorCount() (rv int32) {
	if s != nil && s.ExecutorCount != nil {
		return *s.ExecutorCount
	}
	return
}

func (s *SparkRequest) GetExecutorMemory() (rv string) {
	if s != nil && s.ExecutorMemory != nil {
		return *s.ExecutorMemory
	}
	return
}

func (s *SparkRequest) GetFile() (rv string) {
	if s != nil && s.File != nil {
		return *s.File
	}
	return
}

func (s *SparkRequest) GetFiles() (rv []*string) {
	if s != nil {
		return s.Files
	}
	return
}

func (s *SparkRequest) GetJars() (rv []*string) {
	if s != nil {
		return s.Jars
	}
	return
}

func (s *SparkRequest) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SparkRequest) GetPythonFiles() (rv []*string) {
	if s != nil {
		return s.PythonFiles
	}
	return
}

type SparkScheduler struct {
	CancellationRequestedAt *time.Time
	CurrentState            *SchedulerCurrentState
	EndedAt                 *time.Time
	ScheduledAt             *time.Time
	SubmittedAt             *time.Time
}

func (s *SparkScheduler) GetCancellationRequestedAt() (rv *time.Time) {
	if s != nil {
		return s.CancellationRequestedAt
	}
	return
}

func (s *SparkScheduler) GetCurrentState() (rv *SchedulerCurrentState) {
	if s != nil {
		return s.CurrentState
	}
	return
}

func (s *SparkScheduler) GetEndedAt() (rv *time.Time) {
	if s != nil {
		return s.EndedAt
	}
	return
}

func (s *SparkScheduler) GetScheduledAt() (rv *time.Time) {
	if s != nil {
		return s.ScheduledAt
	}
	return
}

func (s *SparkScheduler) GetSubmittedAt() (rv *time.Time) {
	if s != nil {
		return s.SubmittedAt
	}
	return
}

type SparkServiceError struct {
	ErrorCode *string
	Message   *string
	Source    *SparkErrorSource
}

func (s *SparkServiceError) GetErrorCode() (rv string) {
	if s != nil && s.ErrorCode != nil {
		return *s.ErrorCode
	}
	return
}

func (s *SparkServiceError) GetMessage() (rv string) {
	if s != nil && s.Message != nil {
		return *s.Message
	}
	return
}

func (s *SparkServiceError) GetSource() (rv *SparkErrorSource) {
	if s != nil {
		return s.Source
	}
	return
}

type SparkServicePlugin struct {
	CleanupStartedAt             *time.Time
	CurrentState                 *PluginCurrentState
	MonitoringStartedAt          *time.Time
	PreparationStartedAt         *time.Time
	ResourceAcquisitionStartedAt *time.Time
	SubmissionStartedAt          *time.Time
}

func (s *SparkServicePlugin) GetCleanupStartedAt() (rv *time.Time) {
	if s != nil {
		return s.CleanupStartedAt
	}
	return
}

func (s *SparkServicePlugin) GetCurrentState() (rv *PluginCurrentState) {
	if s != nil {
		return s.CurrentState
	}
	return
}

func (s *SparkServicePlugin) GetMonitoringStartedAt() (rv *time.Time) {
	if s != nil {
		return s.MonitoringStartedAt
	}
	return
}

func (s *SparkServicePlugin) GetPreparationStartedAt() (rv *time.Time) {
	if s != nil {
		return s.PreparationStartedAt
	}
	return
}

func (s *SparkServicePlugin) GetResourceAcquisitionStartedAt() (rv *time.Time) {
	if s != nil {
		return s.ResourceAcquisitionStartedAt
	}
	return
}

func (s *SparkServicePlugin) GetSubmissionStartedAt() (rv *time.Time) {
	if s != nil {
		return s.SubmissionStartedAt
	}
	return
}

// SparkSource - A copy activity Spark Server source.
type SparkSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SparkSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SparkSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SparkSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SparkSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SparkSource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *SparkSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SparkSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SparkSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SparkSource.
func (s *SparkSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SparkSource.
func (s *SparkSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SquareLinkedService - Square Service linked service.
type SquareLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Square Service linked service properties.
	TypeProperties *SquareLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SquareLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SquareLinkedService) GetTypeProperties() (rv *SquareLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SquareLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SquareLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SquareLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SquareLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SquareLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SquareLinkedService.
func (s *SquareLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SquareLinkedServiceTypeProperties - Square Service linked service properties.
type SquareLinkedServiceTypeProperties struct {
	// REQUIRED; The client ID associated with your Square application.
	ClientID any

	// REQUIRED; The URL of the Square instance. (i.e. mystore.mysquare.com)
	Host any

	// REQUIRED; The redirect URL assigned in the Square application dashboard. (i.e. http://localhost:2500)
	RedirectURI any

	// The client secret associated with your Square application.
	ClientSecret SecretBaseClassification

	// Properties used to connect to Square. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true.
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification any
}

func (s *SquareLinkedServiceTypeProperties) GetClientID() (rv any) {
	if s != nil {
		return s.ClientID
	}
	return
}

func (s *SquareLinkedServiceTypeProperties) GetHost() (rv any) {
	if s != nil {
		return s.Host
	}
	return
}

func (s *SquareLinkedServiceTypeProperties) GetRedirectURI() (rv any) {
	if s != nil {
		return s.RedirectURI
	}
	return
}

func (s *SquareLinkedServiceTypeProperties) GetClientSecret() (rv SecretBaseClassification) {
	if s != nil {
		return s.ClientSecret
	}
	return
}

func (s *SquareLinkedServiceTypeProperties) GetConnectionProperties() (rv any) {
	if s != nil {
		return s.ConnectionProperties
	}
	return
}

func (s *SquareLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SquareLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if s != nil {
		return s.UseEncryptedEndpoints
	}
	return
}

func (s *SquareLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if s != nil {
		return s.UseHostVerification
	}
	return
}

func (s *SquareLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if s != nil {
		return s.UsePeerVerification
	}
	return
}

// SquareObjectDataset - Square Service dataset.
type SquareObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (s *SquareObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SquareObjectDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SquareObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SquareObjectDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SquareObjectDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SquareObjectDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SquareObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SquareObjectDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SquareObjectDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

func (s *SquareObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SquareObjectDataset.
func (s *SquareObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SquareSource - A copy activity Square Service source.
type SquareSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SquareSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SquareSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SquareSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SquareSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SquareSource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *SquareSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SquareSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SquareSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SquareSource.
func (s *SquareSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SquareSource.
func (s *SquareSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SsisObjectMetadataStatusResponse - The status of the operation.
type SsisObjectMetadataStatusResponse struct {
	// The operation error message.
	Error *string

	// The operation name.
	Name *string

	// The operation properties.
	Properties *string

	// The status of the operation.
	Status *string
}

func (s *SsisObjectMetadataStatusResponse) GetError() (rv string) {
	if s != nil && s.Error != nil {
		return *s.Error
	}
	return
}

func (s *SsisObjectMetadataStatusResponse) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SsisObjectMetadataStatusResponse) GetProperties() (rv string) {
	if s != nil && s.Properties != nil {
		return *s.Properties
	}
	return
}

func (s *SsisObjectMetadataStatusResponse) GetStatus() (rv string) {
	if s != nil && s.Status != nil {
		return *s.Status
	}
	return
}

// StagingSettings - Staging settings.
type StagingSettings struct {
	// REQUIRED; Staging linked service reference.
	LinkedServiceName *LinkedServiceReference

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Specifies whether to use compression when copying data via an interim staging. Default value is false. Type: boolean (or
	// Expression with resultType boolean).
	EnableCompression any

	// The path to storage for storing the interim data. Type: string (or Expression with resultType string).
	Path any
}

func (s *StagingSettings) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *StagingSettings) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *StagingSettings) GetEnableCompression() (rv any) {
	if s != nil {
		return s.EnableCompression
	}
	return
}

func (s *StagingSettings) GetPath() (rv any) {
	if s != nil {
		return s.Path
	}
	return
}

// StartDataFlowDebugSessionRequest - Request body structure for starting data flow debug session.
type StartDataFlowDebugSessionRequest struct {
	// Data flow instance.
	DataFlow *DataFlowResource

	// List of Data flows
	DataFlows []*DataFlowResource

	// List of datasets.
	Datasets []*DatasetResource

	// Data flow debug settings.
	DebugSettings any

	// The type of new Databricks cluster.
	IncrementalDebug *bool

	// List of linked services.
	LinkedServices []*LinkedServiceResource

	// The ID of data flow debug session.
	SessionID *string

	// Staging info for debug session.
	Staging any
}

func (s *StartDataFlowDebugSessionRequest) GetDataFlow() (rv *DataFlowResource) {
	if s != nil {
		return s.DataFlow
	}
	return
}

func (s *StartDataFlowDebugSessionRequest) GetDataFlows() (rv []*DataFlowResource) {
	if s != nil {
		return s.DataFlows
	}
	return
}

func (s *StartDataFlowDebugSessionRequest) GetDatasets() (rv []*DatasetResource) {
	if s != nil {
		return s.Datasets
	}
	return
}

func (s *StartDataFlowDebugSessionRequest) GetDebugSettings() (rv any) {
	if s != nil {
		return s.DebugSettings
	}
	return
}

func (s *StartDataFlowDebugSessionRequest) GetIncrementalDebug() (rv bool) {
	if s != nil && s.IncrementalDebug != nil {
		return *s.IncrementalDebug
	}
	return
}

func (s *StartDataFlowDebugSessionRequest) GetLinkedServices() (rv []*LinkedServiceResource) {
	if s != nil {
		return s.LinkedServices
	}
	return
}

func (s *StartDataFlowDebugSessionRequest) GetSessionID() (rv string) {
	if s != nil && s.SessionID != nil {
		return *s.SessionID
	}
	return
}

func (s *StartDataFlowDebugSessionRequest) GetStaging() (rv any) {
	if s != nil {
		return s.Staging
	}
	return
}

// StartDataFlowDebugSessionResponse - Response body structure for starting data flow debug session.
type StartDataFlowDebugSessionResponse struct {
	// The ID of data flow debug job version.
	JobVersion *string
}

func (s *StartDataFlowDebugSessionResponse) GetJobVersion() (rv string) {
	if s != nil && s.JobVersion != nil {
		return *s.JobVersion
	}
	return
}

// StoreReadSettings - Connector read setting.
type StoreReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any
}

func (s *StoreReadSettings) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *StoreReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *StoreReadSettings) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

// GetStoreReadSettings implements the StoreReadSettingsClassification interface for type StoreReadSettings.
func (s *StoreReadSettings) GetStoreReadSettings() *StoreReadSettings { return s }

// StoreWriteSettings - Connector write settings.
type StoreWriteSettings struct {
	// REQUIRED; The write setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The type of copy behavior for copy sink.
	CopyBehavior any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any
}

func (s *StoreWriteSettings) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *StoreWriteSettings) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *StoreWriteSettings) GetCopyBehavior() (rv any) {
	if s != nil {
		return s.CopyBehavior
	}
	return
}

func (s *StoreWriteSettings) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

// GetStoreWriteSettings implements the StoreWriteSettingsClassification interface for type StoreWriteSettings.
func (s *StoreWriteSettings) GetStoreWriteSettings() *StoreWriteSettings { return s }

// StoredProcedureParameter - SQL stored procedure parameter.
type StoredProcedureParameter struct {
	// Stored procedure parameter type.
	Type *StoredProcedureParameterType

	// Stored procedure parameter value. Type: string (or Expression with resultType string).
	Value any
}

func (s *StoredProcedureParameter) GetType() (rv *StoredProcedureParameterType) {
	if s != nil {
		return s.Type
	}
	return
}

func (s *StoredProcedureParameter) GetValue() (rv any) {
	if s != nil {
		return s.Value
	}
	return
}

// SubResource - Azure Synapse nested resource, which belongs to a workspace.
type SubResource struct {
	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (s *SubResource) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

func (s *SubResource) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SubResource) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SubResource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// SubResourceDebugResource - Azure Synapse nested debug resource.
type SubResourceDebugResource struct {
	// The resource name.
	Name *string
}

func (s *SubResourceDebugResource) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

// SwitchActivity - This activity evaluates an expression and executes activities under the cases property that correspond
// to the expression evaluation expected in the equals property.
type SwitchActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Switch activity properties.
	TypeProperties *SwitchActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (s *SwitchActivity) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SwitchActivity) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SwitchActivity) GetTypeProperties() (rv *SwitchActivityTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SwitchActivity) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SwitchActivity) GetDependsOn() (rv []*ActivityDependency) {
	if s != nil {
		return s.DependsOn
	}
	return
}

func (s *SwitchActivity) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SwitchActivity) GetUserProperties() (rv []*UserProperty) {
	if s != nil {
		return s.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type SwitchActivity.
func (s *SwitchActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: s.AdditionalProperties,
		DependsOn:            s.DependsOn,
		Description:          s.Description,
		Name:                 s.Name,
		Type:                 s.Type,
		UserProperties:       s.UserProperties,
	}
}

// GetControlActivity implements the ControlActivityClassification interface for type SwitchActivity.
func (s *SwitchActivity) GetControlActivity() *ControlActivity {
	return &ControlActivity{
		AdditionalProperties: s.AdditionalProperties,
		DependsOn:            s.DependsOn,
		Description:          s.Description,
		Name:                 s.Name,
		Type:                 s.Type,
		UserProperties:       s.UserProperties,
	}
}

// SwitchActivityTypeProperties - Switch activity properties.
type SwitchActivityTypeProperties struct {
	// REQUIRED; An expression that would evaluate to a string or integer. This is used to determine the block of activities in
	// cases that will be executed.
	On *Expression

	// List of cases that correspond to expected values of the 'on' property. This is an optional property and if not provided,
	// the activity will execute activities provided in defaultActivities.
	Cases []*SwitchCase

	// List of activities to execute if no case condition is satisfied. This is an optional property and if not provided, the
	// activity will exit without any action.
	DefaultActivities []ActivityClassification
}

func (s *SwitchActivityTypeProperties) GetOn() (rv *Expression) {
	if s != nil {
		return s.On
	}
	return
}

func (s *SwitchActivityTypeProperties) GetCases() (rv []*SwitchCase) {
	if s != nil {
		return s.Cases
	}
	return
}

func (s *SwitchActivityTypeProperties) GetDefaultActivities() (rv []ActivityClassification) {
	if s != nil {
		return s.DefaultActivities
	}
	return
}

// SwitchCase - Switch cases with have a value and corresponding activities.
type SwitchCase struct {
	// List of activities to execute for satisfied case condition.
	Activities []ActivityClassification

	// Expected value that satisfies the expression result of the 'on' property.
	Value *string
}

func (s *SwitchCase) GetActivities() (rv []ActivityClassification) {
	if s != nil {
		return s.Activities
	}
	return
}

func (s *SwitchCase) GetValue() (rv string) {
	if s != nil && s.Value != nil {
		return *s.Value
	}
	return
}

// SybaseLinkedService - Linked service for Sybase data source.
type SybaseLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Sybase linked service properties.
	TypeProperties *SybaseLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (s *SybaseLinkedService) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SybaseLinkedService) GetTypeProperties() (rv *SybaseLinkedServiceTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SybaseLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SybaseLinkedService) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SybaseLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if s != nil {
		return s.ConnectVia
	}
	return
}

func (s *SybaseLinkedService) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SybaseLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type SybaseLinkedService.
func (s *SybaseLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		ConnectVia:           s.ConnectVia,
		Description:          s.Description,
		Parameters:           s.Parameters,
		Type:                 s.Type,
	}
}

// SybaseLinkedServiceTypeProperties - Sybase linked service properties.
type SybaseLinkedServiceTypeProperties struct {
	// REQUIRED; Database name for connection. Type: string (or Expression with resultType string).
	Database any

	// REQUIRED; Server name for connection. Type: string (or Expression with resultType string).
	Server any

	// AuthenticationType to be used for connection.
	AuthenticationType *SybaseAuthenticationType

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password for authentication.
	Password SecretBaseClassification

	// Schema name for connection. Type: string (or Expression with resultType string).
	Schema any

	// Username for authentication. Type: string (or Expression with resultType string).
	Username any
}

func (s *SybaseLinkedServiceTypeProperties) GetDatabase() (rv any) {
	if s != nil {
		return s.Database
	}
	return
}

func (s *SybaseLinkedServiceTypeProperties) GetServer() (rv any) {
	if s != nil {
		return s.Server
	}
	return
}

func (s *SybaseLinkedServiceTypeProperties) GetAuthenticationType() (rv *SybaseAuthenticationType) {
	if s != nil {
		return s.AuthenticationType
	}
	return
}

func (s *SybaseLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if s != nil {
		return s.EncryptedCredential
	}
	return
}

func (s *SybaseLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if s != nil {
		return s.Password
	}
	return
}

func (s *SybaseLinkedServiceTypeProperties) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SybaseLinkedServiceTypeProperties) GetUsername() (rv any) {
	if s != nil {
		return s.Username
	}
	return
}

// SybaseSource - A copy activity source for Sybase databases.
type SybaseSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Database query. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (s *SybaseSource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SybaseSource) GetAdditionalColumns() (rv any) {
	if s != nil {
		return s.AdditionalColumns
	}
	return
}

func (s *SybaseSource) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SybaseSource) GetMaxConcurrentConnections() (rv any) {
	if s != nil {
		return s.MaxConcurrentConnections
	}
	return
}

func (s *SybaseSource) GetQuery() (rv any) {
	if s != nil {
		return s.Query
	}
	return
}

func (s *SybaseSource) GetQueryTimeout() (rv any) {
	if s != nil {
		return s.QueryTimeout
	}
	return
}

func (s *SybaseSource) GetSourceRetryCount() (rv any) {
	if s != nil {
		return s.SourceRetryCount
	}
	return
}

func (s *SybaseSource) GetSourceRetryWait() (rv any) {
	if s != nil {
		return s.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type SybaseSource.
func (s *SybaseSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type SybaseSource.
func (s *SybaseSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        s.AdditionalColumns,
		AdditionalProperties:     s.AdditionalProperties,
		MaxConcurrentConnections: s.MaxConcurrentConnections,
		QueryTimeout:             s.QueryTimeout,
		SourceRetryCount:         s.SourceRetryCount,
		SourceRetryWait:          s.SourceRetryWait,
		Type:                     s.Type,
	}
}

// SybaseTableDataset - The Sybase table dataset.
type SybaseTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Sybase table dataset properties.
	TypeProperties *SybaseTableDatasetTypeProperties
}

func (s *SybaseTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SybaseTableDataset) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SybaseTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SybaseTableDataset) GetAnnotations() (rv []any) {
	if s != nil {
		return s.Annotations
	}
	return
}

func (s *SybaseTableDataset) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SybaseTableDataset) GetFolder() (rv *DatasetFolder) {
	if s != nil {
		return s.Folder
	}
	return
}

func (s *SybaseTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SybaseTableDataset) GetSchema() (rv any) {
	if s != nil {
		return s.Schema
	}
	return
}

func (s *SybaseTableDataset) GetStructure() (rv any) {
	if s != nil {
		return s.Structure
	}
	return
}

func (s *SybaseTableDataset) GetTypeProperties() (rv *SybaseTableDatasetTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type SybaseTableDataset.
func (s *SybaseTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: s.AdditionalProperties,
		Annotations:          s.Annotations,
		Description:          s.Description,
		Folder:               s.Folder,
		LinkedServiceName:    s.LinkedServiceName,
		Parameters:           s.Parameters,
		Schema:               s.Schema,
		Structure:            s.Structure,
		Type:                 s.Type,
	}
}

// SybaseTableDatasetTypeProperties - Sybase table dataset properties.
type SybaseTableDatasetTypeProperties struct {
	// The Sybase table name. Type: string (or Expression with resultType string).
	TableName any
}

func (s *SybaseTableDatasetTypeProperties) GetTableName() (rv any) {
	if s != nil {
		return s.TableName
	}
	return
}

// SynapseNotebookActivity - Execute Synapse notebook activity.
type SynapseNotebookActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Execute Synapse notebook activity properties.
	TypeProperties *SynapseNotebookActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (s *SynapseNotebookActivity) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SynapseNotebookActivity) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SynapseNotebookActivity) GetTypeProperties() (rv *SynapseNotebookActivityTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SynapseNotebookActivity) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SynapseNotebookActivity) GetDependsOn() (rv []*ActivityDependency) {
	if s != nil {
		return s.DependsOn
	}
	return
}

func (s *SynapseNotebookActivity) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SynapseNotebookActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SynapseNotebookActivity) GetPolicy() (rv *ActivityPolicy) {
	if s != nil {
		return s.Policy
	}
	return
}

func (s *SynapseNotebookActivity) GetUserProperties() (rv []*UserProperty) {
	if s != nil {
		return s.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type SynapseNotebookActivity.
func (s *SynapseNotebookActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: s.AdditionalProperties,
		DependsOn:            s.DependsOn,
		Description:          s.Description,
		Name:                 s.Name,
		Type:                 s.Type,
		UserProperties:       s.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type SynapseNotebookActivity.
func (s *SynapseNotebookActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: s.AdditionalProperties,
		DependsOn:            s.DependsOn,
		Description:          s.Description,
		LinkedServiceName:    s.LinkedServiceName,
		Name:                 s.Name,
		Policy:               s.Policy,
		Type:                 s.Type,
		UserProperties:       s.UserProperties,
	}
}

// SynapseNotebookActivityTypeProperties - Execute Synapse notebook activity properties.
type SynapseNotebookActivityTypeProperties struct {
	// REQUIRED; Synapse notebook reference.
	Notebook *SynapseNotebookReference

	// Spark configuration properties, which will override the 'conf' of the notebook you provide.
	Conf any

	// Number of core and memory to be used for driver allocated in the specified Spark pool for the session, which will be used
	// for overriding 'driverCores' and 'driverMemory' of the notebook you provide.
	// Type: string (or Expression with resultType string).
	DriverSize any

	// Number of core and memory to be used for executors allocated in the specified Spark pool for the session, which will be
	// used for overriding 'executorCores' and 'executorMemory' of the notebook you
	// provide. Type: string (or Expression with resultType string).
	ExecutorSize any

	// Number of executors to launch for this session, which will override the 'numExecutors' of the notebook you provide.
	NumExecutors *int32

	// Notebook parameters.
	Parameters map[string]*NotebookParameter

	// The name of the big data pool which will be used to execute the notebook.
	SparkPool *BigDataPoolParametrizationReference
}

func (s *SynapseNotebookActivityTypeProperties) GetNotebook() (rv *SynapseNotebookReference) {
	if s != nil {
		return s.Notebook
	}
	return
}

func (s *SynapseNotebookActivityTypeProperties) GetConf() (rv any) {
	if s != nil {
		return s.Conf
	}
	return
}

func (s *SynapseNotebookActivityTypeProperties) GetDriverSize() (rv any) {
	if s != nil {
		return s.DriverSize
	}
	return
}

func (s *SynapseNotebookActivityTypeProperties) GetExecutorSize() (rv any) {
	if s != nil {
		return s.ExecutorSize
	}
	return
}

func (s *SynapseNotebookActivityTypeProperties) GetNumExecutors() (rv int32) {
	if s != nil && s.NumExecutors != nil {
		return *s.NumExecutors
	}
	return
}

func (s *SynapseNotebookActivityTypeProperties) GetParameters() (rv map[string]*NotebookParameter) {
	if s != nil {
		return s.Parameters
	}
	return
}

func (s *SynapseNotebookActivityTypeProperties) GetSparkPool() (rv *BigDataPoolParametrizationReference) {
	if s != nil {
		return s.SparkPool
	}
	return
}

// SynapseNotebookReference - Synapse notebook reference type.
type SynapseNotebookReference struct {
	// REQUIRED; Reference notebook name. Type: string (or Expression with resultType string).
	ReferenceName any

	// REQUIRED; Synapse notebook reference type.
	Type *NotebookReferenceType
}

func (s *SynapseNotebookReference) GetReferenceName() (rv any) {
	if s != nil {
		return s.ReferenceName
	}
	return
}

func (s *SynapseNotebookReference) GetType() (rv *NotebookReferenceType) {
	if s != nil {
		return s.Type
	}
	return
}

// SynapseSparkJobActivityTypeProperties - Execute spark job activity properties.
type SynapseSparkJobActivityTypeProperties struct {
	// REQUIRED; Synapse spark job reference.
	SparkJob *SynapseSparkJobReference

	// User specified arguments to SynapseSparkJobDefinitionActivity.
	Arguments []any

	// The fully-qualified identifier or the main class that is in the main definition file, which will override the 'className'
	// of the spark job definition you provide. Type: string (or Expression with
	// resultType string).
	ClassName any

	// Spark configuration properties, which will override the 'conf' of the spark job definition you provide.
	Conf any

	// The type of the spark config.
	ConfigurationType *ConfigurationType

	// Number of core and memory to be used for driver allocated in the specified Spark pool for the job, which will be used for
	// overriding 'driverCores' and 'driverMemory' of the spark job definition you
	// provide. Type: string (or Expression with resultType string).
	DriverSize any

	// Number of core and memory to be used for executors allocated in the specified Spark pool for the job, which will be used
	// for overriding 'executorCores' and 'executorMemory' of the spark job definition
	// you provide. Type: string (or Expression with resultType string).
	ExecutorSize any

	// The main file used for the job, which will override the 'file' of the spark job definition you provide. Type: string (or
	// Expression with resultType string).
	File any

	// (Deprecated. Please use pythonCodeReference and filesV2) Additional files used for reference in the main definition file,
	// which will override the 'files' of the spark job definition you provide.
	Files []any

	// Additional files used for reference in the main definition file, which will override the 'jars' and 'files' of the spark
	// job definition you provide.
	FilesV2 []any

	// Number of executors to launch for this job, which will override the 'numExecutors' of the spark job definition you provide.
	// Type: integer (or Expression with resultType integer).
	NumExecutors any

	// Additional python code files used for reference in the main definition file, which will override the 'pyFiles' of the spark
	// job definition you provide.
	PythonCodeReference []any

	// Scanning subfolders from the root folder of the main definition file, these files will be added as reference files. The
	// folders named 'jars', 'pyFiles', 'files' or 'archives' will be scanned, and the
	// folders name are case sensitive. Type: boolean (or Expression with resultType boolean).
	ScanFolder any

	// Spark configuration property.
	SparkConfig map[string]any

	// The name of the big data pool which will be used to execute the spark batch job, which will override the 'targetBigDataPool'
	// of the spark job definition you provide.
	TargetBigDataPool *BigDataPoolParametrizationReference

	// The spark configuration of the spark job.
	TargetSparkConfiguration *SparkConfigurationParametrizationReference
}

func (s *SynapseSparkJobActivityTypeProperties) GetSparkJob() (rv *SynapseSparkJobReference) {
	if s != nil {
		return s.SparkJob
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetArguments() (rv []any) {
	if s != nil {
		return s.Arguments
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetClassName() (rv any) {
	if s != nil {
		return s.ClassName
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetConf() (rv any) {
	if s != nil {
		return s.Conf
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetConfigurationType() (rv *ConfigurationType) {
	if s != nil {
		return s.ConfigurationType
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetDriverSize() (rv any) {
	if s != nil {
		return s.DriverSize
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetExecutorSize() (rv any) {
	if s != nil {
		return s.ExecutorSize
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetFile() (rv any) {
	if s != nil {
		return s.File
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetFiles() (rv []any) {
	if s != nil {
		return s.Files
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetFilesV2() (rv []any) {
	if s != nil {
		return s.FilesV2
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetNumExecutors() (rv any) {
	if s != nil {
		return s.NumExecutors
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetPythonCodeReference() (rv []any) {
	if s != nil {
		return s.PythonCodeReference
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetScanFolder() (rv any) {
	if s != nil {
		return s.ScanFolder
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetSparkConfig() (rv map[string]any) {
	if s != nil {
		return s.SparkConfig
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetTargetBigDataPool() (rv *BigDataPoolParametrizationReference) {
	if s != nil {
		return s.TargetBigDataPool
	}
	return
}

func (s *SynapseSparkJobActivityTypeProperties) GetTargetSparkConfiguration() (rv *SparkConfigurationParametrizationReference) {
	if s != nil {
		return s.TargetSparkConfiguration
	}
	return
}

// SynapseSparkJobDefinitionActivity - Execute spark job activity.
type SynapseSparkJobDefinitionActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Execute spark job activity properties.
	TypeProperties *SynapseSparkJobActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (s *SynapseSparkJobDefinitionActivity) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SynapseSparkJobDefinitionActivity) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SynapseSparkJobDefinitionActivity) GetTypeProperties() (rv *SynapseSparkJobActivityTypeProperties) {
	if s != nil {
		return s.TypeProperties
	}
	return
}

func (s *SynapseSparkJobDefinitionActivity) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SynapseSparkJobDefinitionActivity) GetDependsOn() (rv []*ActivityDependency) {
	if s != nil {
		return s.DependsOn
	}
	return
}

func (s *SynapseSparkJobDefinitionActivity) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SynapseSparkJobDefinitionActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if s != nil {
		return s.LinkedServiceName
	}
	return
}

func (s *SynapseSparkJobDefinitionActivity) GetPolicy() (rv *ActivityPolicy) {
	if s != nil {
		return s.Policy
	}
	return
}

func (s *SynapseSparkJobDefinitionActivity) GetUserProperties() (rv []*UserProperty) {
	if s != nil {
		return s.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type SynapseSparkJobDefinitionActivity.
func (s *SynapseSparkJobDefinitionActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: s.AdditionalProperties,
		DependsOn:            s.DependsOn,
		Description:          s.Description,
		Name:                 s.Name,
		Type:                 s.Type,
		UserProperties:       s.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type SynapseSparkJobDefinitionActivity.
func (s *SynapseSparkJobDefinitionActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: s.AdditionalProperties,
		DependsOn:            s.DependsOn,
		Description:          s.Description,
		LinkedServiceName:    s.LinkedServiceName,
		Name:                 s.Name,
		Policy:               s.Policy,
		Type:                 s.Type,
		UserProperties:       s.UserProperties,
	}
}

// SynapseSparkJobReference - Synapse spark job reference type.
type SynapseSparkJobReference struct {
	// REQUIRED; Reference spark job name.
	ReferenceName *string

	// REQUIRED; Synapse spark job reference type.
	Type *SparkJobReferenceType
}

func (s *SynapseSparkJobReference) GetReferenceName() (rv string) {
	if s != nil && s.ReferenceName != nil {
		return *s.ReferenceName
	}
	return
}

func (s *SynapseSparkJobReference) GetType() (rv *SparkJobReferenceType) {
	if s != nil {
		return s.Type
	}
	return
}

// TabularSource - Copy activity sources of tabular type.
type TabularSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (t *TabularSource) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

func (t *TabularSource) GetAdditionalColumns() (rv any) {
	if t != nil {
		return t.AdditionalColumns
	}
	return
}

func (t *TabularSource) GetAdditionalProperties() (rv map[string]any) {
	if t != nil {
		return t.AdditionalProperties
	}
	return
}

func (t *TabularSource) GetMaxConcurrentConnections() (rv any) {
	if t != nil {
		return t.MaxConcurrentConnections
	}
	return
}

func (t *TabularSource) GetQueryTimeout() (rv any) {
	if t != nil {
		return t.QueryTimeout
	}
	return
}

func (t *TabularSource) GetSourceRetryCount() (rv any) {
	if t != nil {
		return t.SourceRetryCount
	}
	return
}

func (t *TabularSource) GetSourceRetryWait() (rv any) {
	if t != nil {
		return t.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type TabularSource.
func (t *TabularSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     t.AdditionalProperties,
		MaxConcurrentConnections: t.MaxConcurrentConnections,
		SourceRetryCount:         t.SourceRetryCount,
		SourceRetryWait:          t.SourceRetryWait,
		Type:                     t.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type TabularSource.
func (t *TabularSource) GetTabularSource() *TabularSource { return t }

// TabularTranslator - A copy activity tabular translator.
type TabularTranslator struct {
	// REQUIRED; Copy translator type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The JSON Path of the Nested Array that is going to do cross-apply. Type: object (or Expression with resultType object).
	CollectionReference any

	// Column mappings. Example: "UserId: MyUserId, Group: MyGroup, Name: MyName" Type: string (or Expression with resultType
	// string). This property will be retired. Please use mappings property.
	ColumnMappings any

	// Whether to map complex (array and object) values to simple strings in json format. Type: boolean (or Expression with resultType
	// boolean).
	MapComplexValuesToString any

	// Column mappings with logical types. Tabular->tabular example:
	// [{"source":{"name":"CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"name":"CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}].
	// Hierarchical->tabular example:
	// [{"source":{"path":"$.CustomerName","type":"String"},"sink":{"name":"ClientName","type":"String"}},{"source":{"path":"$.CustomerAddress","type":"String"},"sink":{"name":"ClientAddress","type":"String"}}].
	// Type: object (or Expression with resultType object).
	Mappings any

	// The schema mapping to map between tabular data and hierarchical data. Example: {"Column1": "$.Column1", "Column2": "$.Column2.Property1",
	// "Column3": "$.Column2.Property2"}. Type: object (or Expression
	// with resultType object). This property will be retired. Please use mappings property.
	SchemaMapping any

	// Whether to enable the advanced type conversion feature in the Copy activity. Type: boolean (or Expression with resultType
	// boolean).
	TypeConversion any

	// Type conversion settings
	TypeConversionSettings *TypeConversionSettings
}

func (t *TabularTranslator) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

func (t *TabularTranslator) GetAdditionalProperties() (rv map[string]any) {
	if t != nil {
		return t.AdditionalProperties
	}
	return
}

func (t *TabularTranslator) GetCollectionReference() (rv any) {
	if t != nil {
		return t.CollectionReference
	}
	return
}

func (t *TabularTranslator) GetColumnMappings() (rv any) {
	if t != nil {
		return t.ColumnMappings
	}
	return
}

func (t *TabularTranslator) GetMapComplexValuesToString() (rv any) {
	if t != nil {
		return t.MapComplexValuesToString
	}
	return
}

func (t *TabularTranslator) GetMappings() (rv any) {
	if t != nil {
		return t.Mappings
	}
	return
}

func (t *TabularTranslator) GetSchemaMapping() (rv any) {
	if t != nil {
		return t.SchemaMapping
	}
	return
}

func (t *TabularTranslator) GetTypeConversion() (rv any) {
	if t != nil {
		return t.TypeConversion
	}
	return
}

func (t *TabularTranslator) GetTypeConversionSettings() (rv *TypeConversionSettings) {
	if t != nil {
		return t.TypeConversionSettings
	}
	return
}

// GetCopyTranslator implements the CopyTranslatorClassification interface for type TabularTranslator.
func (t *TabularTranslator) GetCopyTranslator() *CopyTranslator {
	return &CopyTranslator{
		AdditionalProperties: t.AdditionalProperties,
		Type:                 t.Type,
	}
}

// TarGZipReadSettings - The TarGZip compression read settings.
type TarGZipReadSettings struct {
	// REQUIRED; The Compression setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveCompressionFileNameAsFolder any
}

func (t *TarGZipReadSettings) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

func (t *TarGZipReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if t != nil {
		return t.AdditionalProperties
	}
	return
}

func (t *TarGZipReadSettings) GetPreserveCompressionFileNameAsFolder() (rv any) {
	if t != nil {
		return t.PreserveCompressionFileNameAsFolder
	}
	return
}

// GetCompressionReadSettings implements the CompressionReadSettingsClassification interface for type TarGZipReadSettings.
func (t *TarGZipReadSettings) GetCompressionReadSettings() *CompressionReadSettings {
	return &CompressionReadSettings{
		AdditionalProperties: t.AdditionalProperties,
		Type:                 t.Type,
	}
}

// TarReadSettings - The Tar compression read settings.
type TarReadSettings struct {
	// REQUIRED; The Compression setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Preserve the compression file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveCompressionFileNameAsFolder any
}

func (t *TarReadSettings) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

func (t *TarReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if t != nil {
		return t.AdditionalProperties
	}
	return
}

func (t *TarReadSettings) GetPreserveCompressionFileNameAsFolder() (rv any) {
	if t != nil {
		return t.PreserveCompressionFileNameAsFolder
	}
	return
}

// GetCompressionReadSettings implements the CompressionReadSettingsClassification interface for type TarReadSettings.
func (t *TarReadSettings) GetCompressionReadSettings() *CompressionReadSettings {
	return &CompressionReadSettings{
		AdditionalProperties: t.AdditionalProperties,
		Type:                 t.Type,
	}
}

// TeamDeskLinkedService - Linked service for TeamDesk.
type TeamDeskLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; TeamDesk linked service properties.
	TypeProperties *TeamDeskLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (t *TeamDeskLinkedService) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

func (t *TeamDeskLinkedService) GetTypeProperties() (rv *TeamDeskLinkedServiceTypeProperties) {
	if t != nil {
		return t.TypeProperties
	}
	return
}

func (t *TeamDeskLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if t != nil {
		return t.AdditionalProperties
	}
	return
}

func (t *TeamDeskLinkedService) GetAnnotations() (rv []any) {
	if t != nil {
		return t.Annotations
	}
	return
}

func (t *TeamDeskLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if t != nil {
		return t.ConnectVia
	}
	return
}

func (t *TeamDeskLinkedService) GetDescription() (rv string) {
	if t != nil && t.Description != nil {
		return *t.Description
	}
	return
}

func (t *TeamDeskLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if t != nil {
		return t.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type TeamDeskLinkedService.
func (t *TeamDeskLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: t.AdditionalProperties,
		Annotations:          t.Annotations,
		ConnectVia:           t.ConnectVia,
		Description:          t.Description,
		Parameters:           t.Parameters,
		Type:                 t.Type,
	}
}

// TeamDeskLinkedServiceTypeProperties - TeamDesk linked service type properties.
type TeamDeskLinkedServiceTypeProperties struct {
	// REQUIRED; The authentication type to use.
	AuthenticationType *TeamDeskAuthenticationType

	// REQUIRED; The url to connect TeamDesk source. Type: string (or Expression with resultType string).
	URL any

	// The api token for the TeamDesk source.
	APIToken SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The password of the TeamDesk source.
	Password SecretBaseClassification

	// The username of the TeamDesk source. Type: string (or Expression with resultType string).
	UserName any
}

func (t *TeamDeskLinkedServiceTypeProperties) GetAuthenticationType() (rv *TeamDeskAuthenticationType) {
	if t != nil {
		return t.AuthenticationType
	}
	return
}

func (t *TeamDeskLinkedServiceTypeProperties) GetURL() (rv any) {
	if t != nil {
		return t.URL
	}
	return
}

func (t *TeamDeskLinkedServiceTypeProperties) GetAPIToken() (rv SecretBaseClassification) {
	if t != nil {
		return t.APIToken
	}
	return
}

func (t *TeamDeskLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if t != nil {
		return t.EncryptedCredential
	}
	return
}

func (t *TeamDeskLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if t != nil {
		return t.Password
	}
	return
}

func (t *TeamDeskLinkedServiceTypeProperties) GetUserName() (rv any) {
	if t != nil {
		return t.UserName
	}
	return
}

// TeradataLinkedService - Linked service for Teradata data source.
type TeradataLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Teradata linked service properties.
	TypeProperties *TeradataLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (t *TeradataLinkedService) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

func (t *TeradataLinkedService) GetTypeProperties() (rv *TeradataLinkedServiceTypeProperties) {
	if t != nil {
		return t.TypeProperties
	}
	return
}

func (t *TeradataLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if t != nil {
		return t.AdditionalProperties
	}
	return
}

func (t *TeradataLinkedService) GetAnnotations() (rv []any) {
	if t != nil {
		return t.Annotations
	}
	return
}

func (t *TeradataLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if t != nil {
		return t.ConnectVia
	}
	return
}

func (t *TeradataLinkedService) GetDescription() (rv string) {
	if t != nil && t.Description != nil {
		return *t.Description
	}
	return
}

func (t *TeradataLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if t != nil {
		return t.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type TeradataLinkedService.
func (t *TeradataLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: t.AdditionalProperties,
		Annotations:          t.Annotations,
		ConnectVia:           t.ConnectVia,
		Description:          t.Description,
		Parameters:           t.Parameters,
		Type:                 t.Type,
	}
}

// TeradataLinkedServiceTypeProperties - Teradata linked service properties.
type TeradataLinkedServiceTypeProperties struct {
	// AuthenticationType to be used for connection.
	AuthenticationType *TeradataAuthenticationType

	// Teradata ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Password for authentication.
	Password SecretBaseClassification

	// Server name for connection. Type: string (or Expression with resultType string).
	Server any

	// Username for authentication. Type: string (or Expression with resultType string).
	Username any
}

func (t *TeradataLinkedServiceTypeProperties) GetAuthenticationType() (rv *TeradataAuthenticationType) {
	if t != nil {
		return t.AuthenticationType
	}
	return
}

func (t *TeradataLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if t != nil {
		return t.ConnectionString
	}
	return
}

func (t *TeradataLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if t != nil {
		return t.EncryptedCredential
	}
	return
}

func (t *TeradataLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if t != nil {
		return t.Password
	}
	return
}

func (t *TeradataLinkedServiceTypeProperties) GetServer() (rv any) {
	if t != nil {
		return t.Server
	}
	return
}

func (t *TeradataLinkedServiceTypeProperties) GetUsername() (rv any) {
	if t != nil {
		return t.Username
	}
	return
}

// TeradataPartitionSettings - The settings that will be leveraged for teradata source partitioning.
type TeradataPartitionSettings struct {
	// The name of the column that will be used for proceeding range or hash partitioning. Type: string (or Expression with resultType
	// string).
	PartitionColumnName any

	// The minimum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type:
	// string (or Expression with resultType string).
	PartitionLowerBound any

	// The maximum value of column specified in partitionColumnName that will be used for proceeding range partitioning. Type:
	// string (or Expression with resultType string).
	PartitionUpperBound any
}

func (t *TeradataPartitionSettings) GetPartitionColumnName() (rv any) {
	if t != nil {
		return t.PartitionColumnName
	}
	return
}

func (t *TeradataPartitionSettings) GetPartitionLowerBound() (rv any) {
	if t != nil {
		return t.PartitionLowerBound
	}
	return
}

func (t *TeradataPartitionSettings) GetPartitionUpperBound() (rv any) {
	if t != nil {
		return t.PartitionUpperBound
	}
	return
}

// TeradataSource - A copy activity Teradata source.
type TeradataSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// The partition mechanism that will be used for teradata read in parallel.
	PartitionOption *TeradataPartitionOption

	// The settings that will be leveraged for teradata source partitioning.
	PartitionSettings *TeradataPartitionSettings

	// Teradata query. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (t *TeradataSource) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

func (t *TeradataSource) GetAdditionalColumns() (rv any) {
	if t != nil {
		return t.AdditionalColumns
	}
	return
}

func (t *TeradataSource) GetAdditionalProperties() (rv map[string]any) {
	if t != nil {
		return t.AdditionalProperties
	}
	return
}

func (t *TeradataSource) GetMaxConcurrentConnections() (rv any) {
	if t != nil {
		return t.MaxConcurrentConnections
	}
	return
}

func (t *TeradataSource) GetPartitionOption() (rv *TeradataPartitionOption) {
	if t != nil {
		return t.PartitionOption
	}
	return
}

func (t *TeradataSource) GetPartitionSettings() (rv *TeradataPartitionSettings) {
	if t != nil {
		return t.PartitionSettings
	}
	return
}

func (t *TeradataSource) GetQuery() (rv any) {
	if t != nil {
		return t.Query
	}
	return
}

func (t *TeradataSource) GetQueryTimeout() (rv any) {
	if t != nil {
		return t.QueryTimeout
	}
	return
}

func (t *TeradataSource) GetSourceRetryCount() (rv any) {
	if t != nil {
		return t.SourceRetryCount
	}
	return
}

func (t *TeradataSource) GetSourceRetryWait() (rv any) {
	if t != nil {
		return t.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type TeradataSource.
func (t *TeradataSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     t.AdditionalProperties,
		MaxConcurrentConnections: t.MaxConcurrentConnections,
		SourceRetryCount:         t.SourceRetryCount,
		SourceRetryWait:          t.SourceRetryWait,
		Type:                     t.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type TeradataSource.
func (t *TeradataSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        t.AdditionalColumns,
		AdditionalProperties:     t.AdditionalProperties,
		MaxConcurrentConnections: t.MaxConcurrentConnections,
		QueryTimeout:             t.QueryTimeout,
		SourceRetryCount:         t.SourceRetryCount,
		SourceRetryWait:          t.SourceRetryWait,
		Type:                     t.Type,
	}
}

// TeradataTableDataset - The Teradata database dataset.
type TeradataTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Teradata dataset properties.
	TypeProperties *TeradataTableDatasetTypeProperties
}

func (t *TeradataTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if t != nil {
		return t.LinkedServiceName
	}
	return
}

func (t *TeradataTableDataset) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

func (t *TeradataTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if t != nil {
		return t.AdditionalProperties
	}
	return
}

func (t *TeradataTableDataset) GetAnnotations() (rv []any) {
	if t != nil {
		return t.Annotations
	}
	return
}

func (t *TeradataTableDataset) GetDescription() (rv string) {
	if t != nil && t.Description != nil {
		return *t.Description
	}
	return
}

func (t *TeradataTableDataset) GetFolder() (rv *DatasetFolder) {
	if t != nil {
		return t.Folder
	}
	return
}

func (t *TeradataTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if t != nil {
		return t.Parameters
	}
	return
}

func (t *TeradataTableDataset) GetSchema() (rv any) {
	if t != nil {
		return t.Schema
	}
	return
}

func (t *TeradataTableDataset) GetStructure() (rv any) {
	if t != nil {
		return t.Structure
	}
	return
}

func (t *TeradataTableDataset) GetTypeProperties() (rv *TeradataTableDatasetTypeProperties) {
	if t != nil {
		return t.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type TeradataTableDataset.
func (t *TeradataTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: t.AdditionalProperties,
		Annotations:          t.Annotations,
		Description:          t.Description,
		Folder:               t.Folder,
		LinkedServiceName:    t.LinkedServiceName,
		Parameters:           t.Parameters,
		Schema:               t.Schema,
		Structure:            t.Structure,
		Type:                 t.Type,
	}
}

// TeradataTableDatasetTypeProperties - Teradata dataset properties.
type TeradataTableDatasetTypeProperties struct {
	// The database name of Teradata. Type: string (or Expression with resultType string).
	Database any

	// The table name of Teradata. Type: string (or Expression with resultType string).
	Table any
}

func (t *TeradataTableDatasetTypeProperties) GetDatabase() (rv any) {
	if t != nil {
		return t.Database
	}
	return
}

func (t *TeradataTableDatasetTypeProperties) GetTable() (rv any) {
	if t != nil {
		return t.Table
	}
	return
}

// TextFormat - The data stored in text format.
type TextFormat struct {
	// REQUIRED; Type of dataset storage format.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The column delimiter. Type: string (or Expression with resultType string).
	ColumnDelimiter any

	// Deserializer. Type: string (or Expression with resultType string).
	Deserializer any

	// The code page name of the preferred encoding. If miss, the default value is ΓÇ£utf-8ΓÇ¥, unless BOM denotes another Unicode
	// encoding. Refer to the ΓÇ£NameΓÇ¥ column of the table in the following link
	// to set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with
	// resultType string).
	EncodingName any

	// The escape character. Type: string (or Expression with resultType string).
	EscapeChar any

	// When used as input, treat the first row of data as headers. When used as output,write the headers into the output as the
	// first row of data. The default value is false. Type: boolean (or Expression
	// with resultType boolean).
	FirstRowAsHeader any

	// The null value string. Type: string (or Expression with resultType string).
	NullValue any

	// The quote character. Type: string (or Expression with resultType string).
	QuoteChar any

	// The row delimiter. Type: string (or Expression with resultType string).
	RowDelimiter any

	// Serializer. Type: string (or Expression with resultType string).
	Serializer any

	// The number of lines/rows to be skipped when parsing text files. The default value is 0. Type: integer (or Expression with
	// resultType integer).
	SkipLineCount any

	// Treat empty column values in the text file as null. The default value is true. Type: boolean (or Expression with resultType
	// boolean).
	TreatEmptyAsNull any
}

func (t *TextFormat) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

func (t *TextFormat) GetAdditionalProperties() (rv map[string]any) {
	if t != nil {
		return t.AdditionalProperties
	}
	return
}

func (t *TextFormat) GetColumnDelimiter() (rv any) {
	if t != nil {
		return t.ColumnDelimiter
	}
	return
}

func (t *TextFormat) GetDeserializer() (rv any) {
	if t != nil {
		return t.Deserializer
	}
	return
}

func (t *TextFormat) GetEncodingName() (rv any) {
	if t != nil {
		return t.EncodingName
	}
	return
}

func (t *TextFormat) GetEscapeChar() (rv any) {
	if t != nil {
		return t.EscapeChar
	}
	return
}

func (t *TextFormat) GetFirstRowAsHeader() (rv any) {
	if t != nil {
		return t.FirstRowAsHeader
	}
	return
}

func (t *TextFormat) GetNullValue() (rv any) {
	if t != nil {
		return t.NullValue
	}
	return
}

func (t *TextFormat) GetQuoteChar() (rv any) {
	if t != nil {
		return t.QuoteChar
	}
	return
}

func (t *TextFormat) GetRowDelimiter() (rv any) {
	if t != nil {
		return t.RowDelimiter
	}
	return
}

func (t *TextFormat) GetSerializer() (rv any) {
	if t != nil {
		return t.Serializer
	}
	return
}

func (t *TextFormat) GetSkipLineCount() (rv any) {
	if t != nil {
		return t.SkipLineCount
	}
	return
}

func (t *TextFormat) GetTreatEmptyAsNull() (rv any) {
	if t != nil {
		return t.TreatEmptyAsNull
	}
	return
}

// GetDatasetStorageFormat implements the DatasetStorageFormatClassification interface for type TextFormat.
func (t *TextFormat) GetDatasetStorageFormat() *DatasetStorageFormat {
	return &DatasetStorageFormat{
		AdditionalProperties: t.AdditionalProperties,
		Deserializer:         t.Deserializer,
		Serializer:           t.Serializer,
		Type:                 t.Type,
	}
}

// TrackedResource - The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags'
// and a 'location'
type TrackedResource struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (t *TrackedResource) GetLocation() (rv string) {
	if t != nil && t.Location != nil {
		return *t.Location
	}
	return
}

func (t *TrackedResource) GetTags() (rv map[string]*string) {
	if t != nil {
		return t.Tags
	}
	return
}

func (t *TrackedResource) GetID() (rv string) {
	if t != nil && t.ID != nil {
		return *t.ID
	}
	return
}

func (t *TrackedResource) GetName() (rv string) {
	if t != nil && t.Name != nil {
		return *t.Name
	}
	return
}

func (t *TrackedResource) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

// Transformation - A data flow transformation.
type Transformation struct {
	// REQUIRED; Transformation name.
	Name *string

	// Dataset reference.
	Dataset *DatasetReference

	// Transformation description.
	Description *string

	// Flowlet Reference
	Flowlet *DataFlowReference

	// Linked service reference.
	LinkedService *LinkedServiceReference
}

func (t *Transformation) GetName() (rv string) {
	if t != nil && t.Name != nil {
		return *t.Name
	}
	return
}

func (t *Transformation) GetDataset() (rv *DatasetReference) {
	if t != nil {
		return t.Dataset
	}
	return
}

func (t *Transformation) GetDescription() (rv string) {
	if t != nil && t.Description != nil {
		return *t.Description
	}
	return
}

func (t *Transformation) GetFlowlet() (rv *DataFlowReference) {
	if t != nil {
		return t.Flowlet
	}
	return
}

func (t *Transformation) GetLinkedService() (rv *LinkedServiceReference) {
	if t != nil {
		return t.LinkedService
	}
	return
}

// Trigger - Azure Synapse nested object which contains information about creating pipeline run
type Trigger struct {
	// REQUIRED; Trigger type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the trigger.
	Annotations []any

	// Trigger description.
	Description *string

	// READ-ONLY; Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState *TriggerRuntimeState
}

func (t *Trigger) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

func (t *Trigger) GetAdditionalProperties() (rv map[string]any) {
	if t != nil {
		return t.AdditionalProperties
	}
	return
}

func (t *Trigger) GetAnnotations() (rv []any) {
	if t != nil {
		return t.Annotations
	}
	return
}

func (t *Trigger) GetDescription() (rv string) {
	if t != nil && t.Description != nil {
		return *t.Description
	}
	return
}

func (t *Trigger) GetRuntimeState() (rv *TriggerRuntimeState) {
	if t != nil {
		return t.RuntimeState
	}
	return
}

// GetTrigger implements the TriggerClassification interface for type Trigger.
func (t *Trigger) GetTrigger() *Trigger { return t }

// TriggerDependencyProvisioningStatus - Defines the response of a provision trigger dependency operation.
type TriggerDependencyProvisioningStatus struct {
	// REQUIRED; Provisioning status.
	ProvisioningStatus *string

	// REQUIRED; Trigger name.
	TriggerName *string
}

func (t *TriggerDependencyProvisioningStatus) GetProvisioningStatus() (rv string) {
	if t != nil && t.ProvisioningStatus != nil {
		return *t.ProvisioningStatus
	}
	return
}

func (t *TriggerDependencyProvisioningStatus) GetTriggerName() (rv string) {
	if t != nil && t.TriggerName != nil {
		return *t.TriggerName
	}
	return
}

// TriggerDependencyReference - Trigger referenced dependency.
type TriggerDependencyReference struct {
	// REQUIRED; Referenced trigger.
	ReferenceTrigger *TriggerReference

	// REQUIRED; The type of dependency reference.
	Type *string
}

func (t *TriggerDependencyReference) GetReferenceTrigger() (rv *TriggerReference) {
	if t != nil {
		return t.ReferenceTrigger
	}
	return
}

func (t *TriggerDependencyReference) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

// GetDependencyReference implements the DependencyReferenceClassification interface for type TriggerDependencyReference.
func (t *TriggerDependencyReference) GetDependencyReference() *DependencyReference {
	return &DependencyReference{
		Type: t.Type,
	}
}

// GetTriggerDependencyReference implements the TriggerDependencyReferenceClassification interface for type TriggerDependencyReference.
func (t *TriggerDependencyReference) GetTriggerDependencyReference() *TriggerDependencyReference {
	return t
}

// TriggerListResponse - A list of trigger resources.
type TriggerListResponse struct {
	// REQUIRED; List of triggers.
	Value []*TriggerResource

	// The link to the next page of results, if any remaining results exist.
	NextLink *string
}

func (t *TriggerListResponse) GetValue() (rv []*TriggerResource) {
	if t != nil {
		return t.Value
	}
	return
}

func (t *TriggerListResponse) GetNextLink() (rv string) {
	if t != nil && t.NextLink != nil {
		return *t.NextLink
	}
	return
}

// TriggerPipelineReference - Pipeline that needs to be triggered with the given parameters.
type TriggerPipelineReference struct {
	// Pipeline parameters.
	Parameters map[string]any

	// Pipeline reference.
	PipelineReference *PipelineReference
}

func (t *TriggerPipelineReference) GetParameters() (rv map[string]any) {
	if t != nil {
		return t.Parameters
	}
	return
}

func (t *TriggerPipelineReference) GetPipelineReference() (rv *PipelineReference) {
	if t != nil {
		return t.PipelineReference
	}
	return
}

// TriggerReference - Trigger reference type.
type TriggerReference struct {
	// REQUIRED; Reference trigger name.
	ReferenceName *string

	// REQUIRED; Trigger reference type.
	Type *TriggerReferenceType
}

func (t *TriggerReference) GetReferenceName() (rv string) {
	if t != nil && t.ReferenceName != nil {
		return *t.ReferenceName
	}
	return
}

func (t *TriggerReference) GetType() (rv *TriggerReferenceType) {
	if t != nil {
		return t.Type
	}
	return
}

// TriggerResource - Trigger resource type.
type TriggerResource struct {
	// REQUIRED; Properties of the trigger.
	Properties TriggerClassification

	// READ-ONLY; Resource Etag.
	Etag *string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (t *TriggerResource) GetProperties() (rv TriggerClassification) {
	if t != nil {
		return t.Properties
	}
	return
}

func (t *TriggerResource) GetEtag() (rv string) {
	if t != nil && t.Etag != nil {
		return *t.Etag
	}
	return
}

func (t *TriggerResource) GetID() (rv string) {
	if t != nil && t.ID != nil {
		return *t.ID
	}
	return
}

func (t *TriggerResource) GetName() (rv string) {
	if t != nil && t.Name != nil {
		return *t.Name
	}
	return
}

func (t *TriggerResource) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

// TriggerRun - Trigger runs.
type TriggerRun struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// READ-ONLY; Trigger error message.
	Message *string

	// READ-ONLY; List of property name and value related to trigger run. Name, value pair depends on type of trigger.
	Properties map[string]*string

	// READ-ONLY; Trigger run status.
	Status *TriggerRunStatus

	// READ-ONLY; Trigger name.
	TriggerName *string

	// READ-ONLY; Trigger run id.
	TriggerRunID *string

	// READ-ONLY; Trigger run start time.
	TriggerRunTimestamp *time.Time

	// READ-ONLY; Trigger type.
	TriggerType *string

	// READ-ONLY; List of pipeline name and run Id triggered by the trigger run.
	TriggeredPipelines map[string]*string
}

func (t *TriggerRun) GetAdditionalProperties() (rv map[string]any) {
	if t != nil {
		return t.AdditionalProperties
	}
	return
}

func (t *TriggerRun) GetMessage() (rv string) {
	if t != nil && t.Message != nil {
		return *t.Message
	}
	return
}

func (t *TriggerRun) GetProperties() (rv map[string]*string) {
	if t != nil {
		return t.Properties
	}
	return
}

func (t *TriggerRun) GetStatus() (rv *TriggerRunStatus) {
	if t != nil {
		return t.Status
	}
	return
}

func (t *TriggerRun) GetTriggerName() (rv string) {
	if t != nil && t.TriggerName != nil {
		return *t.TriggerName
	}
	return
}

func (t *TriggerRun) GetTriggerRunID() (rv string) {
	if t != nil && t.TriggerRunID != nil {
		return *t.TriggerRunID
	}
	return
}

func (t *TriggerRun) GetTriggerRunTimestamp() (rv *time.Time) {
	if t != nil {
		return t.TriggerRunTimestamp
	}
	return
}

func (t *TriggerRun) GetTriggerType() (rv string) {
	if t != nil && t.TriggerType != nil {
		return *t.TriggerType
	}
	return
}

func (t *TriggerRun) GetTriggeredPipelines() (rv map[string]*string) {
	if t != nil {
		return t.TriggeredPipelines
	}
	return
}

// TriggerRunsQueryResponse - A list of trigger runs.
type TriggerRunsQueryResponse struct {
	// REQUIRED; List of trigger runs.
	Value []*TriggerRun

	// The continuation token for getting the next page of results, if any remaining results exist, null otherwise.
	ContinuationToken *string
}

func (t *TriggerRunsQueryResponse) GetValue() (rv []*TriggerRun) {
	if t != nil {
		return t.Value
	}
	return
}

func (t *TriggerRunsQueryResponse) GetContinuationToken() (rv string) {
	if t != nil && t.ContinuationToken != nil {
		return *t.ContinuationToken
	}
	return
}

// TriggerSubscriptionOperationStatus - Defines the response of a trigger subscription operation.
type TriggerSubscriptionOperationStatus struct {
	// READ-ONLY; Event Subscription Status.
	Status *EventSubscriptionStatus

	// READ-ONLY; Trigger name.
	TriggerName *string
}

func (t *TriggerSubscriptionOperationStatus) GetStatus() (rv *EventSubscriptionStatus) {
	if t != nil {
		return t.Status
	}
	return
}

func (t *TriggerSubscriptionOperationStatus) GetTriggerName() (rv string) {
	if t != nil && t.TriggerName != nil {
		return *t.TriggerName
	}
	return
}

// TumblingWindowTrigger - Trigger that schedules pipeline runs for all fixed time interval windows from a start time without
// gaps and also supports backfill scenarios (when start time is in the past).
type TumblingWindowTrigger struct {
	// REQUIRED; Pipeline for which runs are created when an event is fired for trigger window that is ready.
	Pipeline *TriggerPipelineReference

	// REQUIRED; Trigger type.
	Type *string

	// REQUIRED; Tumbling Window Trigger properties.
	TypeProperties *TumblingWindowTriggerTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the trigger.
	Annotations []any

	// Trigger description.
	Description *string

	// READ-ONLY; Indicates if trigger is running or not. Updated when Start/Stop APIs are called on the Trigger.
	RuntimeState *TriggerRuntimeState
}

func (t *TumblingWindowTrigger) GetPipeline() (rv *TriggerPipelineReference) {
	if t != nil {
		return t.Pipeline
	}
	return
}

func (t *TumblingWindowTrigger) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

func (t *TumblingWindowTrigger) GetTypeProperties() (rv *TumblingWindowTriggerTypeProperties) {
	if t != nil {
		return t.TypeProperties
	}
	return
}

func (t *TumblingWindowTrigger) GetAdditionalProperties() (rv map[string]any) {
	if t != nil {
		return t.AdditionalProperties
	}
	return
}

func (t *TumblingWindowTrigger) GetAnnotations() (rv []any) {
	if t != nil {
		return t.Annotations
	}
	return
}

func (t *TumblingWindowTrigger) GetDescription() (rv string) {
	if t != nil && t.Description != nil {
		return *t.Description
	}
	return
}

func (t *TumblingWindowTrigger) GetRuntimeState() (rv *TriggerRuntimeState) {
	if t != nil {
		return t.RuntimeState
	}
	return
}

// GetTrigger implements the TriggerClassification interface for type TumblingWindowTrigger.
func (t *TumblingWindowTrigger) GetTrigger() *Trigger {
	return &Trigger{
		AdditionalProperties: t.AdditionalProperties,
		Annotations:          t.Annotations,
		Description:          t.Description,
		RuntimeState:         t.RuntimeState,
		Type:                 t.Type,
	}
}

// TumblingWindowTriggerDependencyReference - Referenced tumbling window trigger dependency.
type TumblingWindowTriggerDependencyReference struct {
	// REQUIRED; Referenced trigger.
	ReferenceTrigger *TriggerReference

	// REQUIRED; The type of dependency reference.
	Type *string

	// Timespan applied to the start time of a tumbling window when evaluating dependency.
	Offset *string

	// The size of the window when evaluating the dependency. If undefined the frequency of the tumbling window will be used.
	Size *string
}

func (t *TumblingWindowTriggerDependencyReference) GetReferenceTrigger() (rv *TriggerReference) {
	if t != nil {
		return t.ReferenceTrigger
	}
	return
}

func (t *TumblingWindowTriggerDependencyReference) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

func (t *TumblingWindowTriggerDependencyReference) GetOffset() (rv string) {
	if t != nil && t.Offset != nil {
		return *t.Offset
	}
	return
}

func (t *TumblingWindowTriggerDependencyReference) GetSize() (rv string) {
	if t != nil && t.Size != nil {
		return *t.Size
	}
	return
}

// GetDependencyReference implements the DependencyReferenceClassification interface for type TumblingWindowTriggerDependencyReference.
func (t *TumblingWindowTriggerDependencyReference) GetDependencyReference() *DependencyReference {
	return &DependencyReference{
		Type: t.Type,
	}
}

// GetTriggerDependencyReference implements the TriggerDependencyReferenceClassification interface for type TumblingWindowTriggerDependencyReference.
func (t *TumblingWindowTriggerDependencyReference) GetTriggerDependencyReference() *TriggerDependencyReference {
	return &TriggerDependencyReference{
		ReferenceTrigger: t.ReferenceTrigger,
		Type:             t.Type,
	}
}

// TumblingWindowTriggerTypeProperties - Tumbling Window Trigger properties.
type TumblingWindowTriggerTypeProperties struct {
	// REQUIRED; The frequency of the time windows.
	Frequency *TumblingWindowFrequency

	// REQUIRED; The interval of the time windows. The minimum interval allowed is 15 Minutes.
	Interval *int32

	// REQUIRED; The max number of parallel time windows (ready for execution) for which a new run is triggered.
	MaxConcurrency *int32

	// REQUIRED; The start time for the time period for the trigger during which events are fired for windows that are ready.
	// Only UTC time is currently supported.
	StartTime *time.Time

	// Specifies how long the trigger waits past due time before triggering new run. It doesn't alter window start and end time.
	// The default is 0. Type: string (or Expression with resultType string),
	// pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Delay any

	// Triggers that this trigger depends on. Only tumbling window triggers are supported.
	DependsOn []DependencyReferenceClassification

	// The end time for the time period for the trigger during which events are fired for windows that are ready. Only UTC time
	// is currently supported.
	EndTime *time.Time

	// Retry policy that will be applied for failed pipeline runs.
	RetryPolicy *RetryPolicy
}

func (t *TumblingWindowTriggerTypeProperties) GetFrequency() (rv *TumblingWindowFrequency) {
	if t != nil {
		return t.Frequency
	}
	return
}

func (t *TumblingWindowTriggerTypeProperties) GetInterval() (rv int32) {
	if t != nil && t.Interval != nil {
		return *t.Interval
	}
	return
}

func (t *TumblingWindowTriggerTypeProperties) GetMaxConcurrency() (rv int32) {
	if t != nil && t.MaxConcurrency != nil {
		return *t.MaxConcurrency
	}
	return
}

func (t *TumblingWindowTriggerTypeProperties) GetStartTime() (rv *time.Time) {
	if t != nil {
		return t.StartTime
	}
	return
}

func (t *TumblingWindowTriggerTypeProperties) GetDelay() (rv any) {
	if t != nil {
		return t.Delay
	}
	return
}

func (t *TumblingWindowTriggerTypeProperties) GetDependsOn() (rv []DependencyReferenceClassification) {
	if t != nil {
		return t.DependsOn
	}
	return
}

func (t *TumblingWindowTriggerTypeProperties) GetEndTime() (rv *time.Time) {
	if t != nil {
		return t.EndTime
	}
	return
}

func (t *TumblingWindowTriggerTypeProperties) GetRetryPolicy() (rv *RetryPolicy) {
	if t != nil {
		return t.RetryPolicy
	}
	return
}

// TwilioLinkedService - Linked service for Twilio.
type TwilioLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Twilio linked service properties.
	TypeProperties *TwilioLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (t *TwilioLinkedService) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

func (t *TwilioLinkedService) GetTypeProperties() (rv *TwilioLinkedServiceTypeProperties) {
	if t != nil {
		return t.TypeProperties
	}
	return
}

func (t *TwilioLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if t != nil {
		return t.AdditionalProperties
	}
	return
}

func (t *TwilioLinkedService) GetAnnotations() (rv []any) {
	if t != nil {
		return t.Annotations
	}
	return
}

func (t *TwilioLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if t != nil {
		return t.ConnectVia
	}
	return
}

func (t *TwilioLinkedService) GetDescription() (rv string) {
	if t != nil && t.Description != nil {
		return *t.Description
	}
	return
}

func (t *TwilioLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if t != nil {
		return t.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type TwilioLinkedService.
func (t *TwilioLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: t.AdditionalProperties,
		Annotations:          t.Annotations,
		ConnectVia:           t.ConnectVia,
		Description:          t.Description,
		Parameters:           t.Parameters,
		Type:                 t.Type,
	}
}

// TwilioLinkedServiceTypeProperties - Twilio linked service type properties.
type TwilioLinkedServiceTypeProperties struct {
	// REQUIRED; The auth token of Twilio service.
	Password SecretBaseClassification

	// REQUIRED; The Account SID of Twilio service.
	UserName any
}

func (t *TwilioLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if t != nil {
		return t.Password
	}
	return
}

func (t *TwilioLinkedServiceTypeProperties) GetUserName() (rv any) {
	if t != nil {
		return t.UserName
	}
	return
}

// TypeConversionSettings - Type conversion settings
type TypeConversionSettings struct {
	// Whether to allow data truncation when converting the data. Type: boolean (or Expression with resultType boolean).
	AllowDataTruncation any

	// The culture used to convert data from/to string. Type: string (or Expression with resultType string).
	Culture any

	// The format for DateTime values. Type: string (or Expression with resultType string).
	DateTimeFormat any

	// The format for DateTimeOffset values. Type: string (or Expression with resultType string).
	DateTimeOffsetFormat any

	// The format for TimeSpan values. Type: string (or Expression with resultType string).
	TimeSpanFormat any

	// Whether to treat boolean values as numbers. Type: boolean (or Expression with resultType boolean).
	TreatBooleanAsNumber any
}

func (t *TypeConversionSettings) GetAllowDataTruncation() (rv any) {
	if t != nil {
		return t.AllowDataTruncation
	}
	return
}

func (t *TypeConversionSettings) GetCulture() (rv any) {
	if t != nil {
		return t.Culture
	}
	return
}

func (t *TypeConversionSettings) GetDateTimeFormat() (rv any) {
	if t != nil {
		return t.DateTimeFormat
	}
	return
}

func (t *TypeConversionSettings) GetDateTimeOffsetFormat() (rv any) {
	if t != nil {
		return t.DateTimeOffsetFormat
	}
	return
}

func (t *TypeConversionSettings) GetTimeSpanFormat() (rv any) {
	if t != nil {
		return t.TimeSpanFormat
	}
	return
}

func (t *TypeConversionSettings) GetTreatBooleanAsNumber() (rv any) {
	if t != nil {
		return t.TreatBooleanAsNumber
	}
	return
}

// UntilActivity - This activity executes inner activities until the specified boolean expression results to true or timeout
// is reached, whichever is earlier.
type UntilActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Until activity properties.
	TypeProperties *UntilActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (u *UntilActivity) GetName() (rv string) {
	if u != nil && u.Name != nil {
		return *u.Name
	}
	return
}

func (u *UntilActivity) GetType() (rv string) {
	if u != nil && u.Type != nil {
		return *u.Type
	}
	return
}

func (u *UntilActivity) GetTypeProperties() (rv *UntilActivityTypeProperties) {
	if u != nil {
		return u.TypeProperties
	}
	return
}

func (u *UntilActivity) GetAdditionalProperties() (rv map[string]any) {
	if u != nil {
		return u.AdditionalProperties
	}
	return
}

func (u *UntilActivity) GetDependsOn() (rv []*ActivityDependency) {
	if u != nil {
		return u.DependsOn
	}
	return
}

func (u *UntilActivity) GetDescription() (rv string) {
	if u != nil && u.Description != nil {
		return *u.Description
	}
	return
}

func (u *UntilActivity) GetUserProperties() (rv []*UserProperty) {
	if u != nil {
		return u.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type UntilActivity.
func (u *UntilActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: u.AdditionalProperties,
		DependsOn:            u.DependsOn,
		Description:          u.Description,
		Name:                 u.Name,
		Type:                 u.Type,
		UserProperties:       u.UserProperties,
	}
}

// GetControlActivity implements the ControlActivityClassification interface for type UntilActivity.
func (u *UntilActivity) GetControlActivity() *ControlActivity {
	return &ControlActivity{
		AdditionalProperties: u.AdditionalProperties,
		DependsOn:            u.DependsOn,
		Description:          u.Description,
		Name:                 u.Name,
		Type:                 u.Type,
		UserProperties:       u.UserProperties,
	}
}

// UntilActivityTypeProperties - Until activity properties.
type UntilActivityTypeProperties struct {
	// REQUIRED; List of activities to execute.
	Activities []ActivityClassification

	// REQUIRED; An expression that would evaluate to Boolean. The loop will continue until this expression evaluates to true
	Expression *Expression

	// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7)
	// which is 1 week as default. Type: string (or Expression with resultType
	// string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])). Type: string (or Expression with resultType string),
	// pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout any
}

func (u *UntilActivityTypeProperties) GetActivities() (rv []ActivityClassification) {
	if u != nil {
		return u.Activities
	}
	return
}

func (u *UntilActivityTypeProperties) GetExpression() (rv *Expression) {
	if u != nil {
		return u.Expression
	}
	return
}

func (u *UntilActivityTypeProperties) GetTimeout() (rv any) {
	if u != nil {
		return u.Timeout
	}
	return
}

type UpdateLandingZoneCredential struct {
	// Landing zone's sas token
	SasToken *SecureString
}

func (u *UpdateLandingZoneCredential) GetSasToken() (rv *SecureString) {
	if u != nil {
		return u.SasToken
	}
	return
}

// UserProperty - User property.
type UserProperty struct {
	// REQUIRED; User property name.
	Name *string

	// REQUIRED; User property value. Type: string (or Expression with resultType string).
	Value any
}

func (u *UserProperty) GetName() (rv string) {
	if u != nil && u.Name != nil {
		return *u.Name
	}
	return
}

func (u *UserProperty) GetValue() (rv any) {
	if u != nil {
		return u.Value
	}
	return
}

// ValidationActivity - This activity verifies that an external resource exists.
type ValidationActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Validation activity properties.
	TypeProperties *ValidationActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (v *ValidationActivity) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *ValidationActivity) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

func (v *ValidationActivity) GetTypeProperties() (rv *ValidationActivityTypeProperties) {
	if v != nil {
		return v.TypeProperties
	}
	return
}

func (v *ValidationActivity) GetAdditionalProperties() (rv map[string]any) {
	if v != nil {
		return v.AdditionalProperties
	}
	return
}

func (v *ValidationActivity) GetDependsOn() (rv []*ActivityDependency) {
	if v != nil {
		return v.DependsOn
	}
	return
}

func (v *ValidationActivity) GetDescription() (rv string) {
	if v != nil && v.Description != nil {
		return *v.Description
	}
	return
}

func (v *ValidationActivity) GetUserProperties() (rv []*UserProperty) {
	if v != nil {
		return v.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type ValidationActivity.
func (v *ValidationActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: v.AdditionalProperties,
		DependsOn:            v.DependsOn,
		Description:          v.Description,
		Name:                 v.Name,
		Type:                 v.Type,
		UserProperties:       v.UserProperties,
	}
}

// GetControlActivity implements the ControlActivityClassification interface for type ValidationActivity.
func (v *ValidationActivity) GetControlActivity() *ControlActivity {
	return &ControlActivity{
		AdditionalProperties: v.AdditionalProperties,
		DependsOn:            v.DependsOn,
		Description:          v.Description,
		Name:                 v.Name,
		Type:                 v.Type,
		UserProperties:       v.UserProperties,
	}
}

// ValidationActivityTypeProperties - Validation activity properties.
type ValidationActivityTypeProperties struct {
	// REQUIRED; Validation activity dataset reference.
	Dataset *DatasetReference

	// Can be used if dataset points to a folder. If set to true, the folder must have at least one file. If set to false, the
	// folder must be empty. Type: boolean (or Expression with resultType boolean).
	ChildItems any

	// Can be used if dataset points to a file. The file must be greater than or equal in size to the value specified. Type: integer
	// (or Expression with resultType integer).
	MinimumSize any

	// A delay in seconds between validation attempts. If no value is specified, 10 seconds will be used as the default. Type:
	// integer (or Expression with resultType integer).
	Sleep any

	// Specifies the timeout for the activity to run. If there is no value specified, it takes the value of TimeSpan.FromDays(7)
	// which is 1 week as default. Type: string (or Expression with resultType
	// string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout any
}

func (v *ValidationActivityTypeProperties) GetDataset() (rv *DatasetReference) {
	if v != nil {
		return v.Dataset
	}
	return
}

func (v *ValidationActivityTypeProperties) GetChildItems() (rv any) {
	if v != nil {
		return v.ChildItems
	}
	return
}

func (v *ValidationActivityTypeProperties) GetMinimumSize() (rv any) {
	if v != nil {
		return v.MinimumSize
	}
	return
}

func (v *ValidationActivityTypeProperties) GetSleep() (rv any) {
	if v != nil {
		return v.Sleep
	}
	return
}

func (v *ValidationActivityTypeProperties) GetTimeout() (rv any) {
	if v != nil {
		return v.Timeout
	}
	return
}

// VariableSpecification - Definition of a single variable for a Pipeline.
type VariableSpecification struct {
	// REQUIRED; Variable type.
	Type *VariableType

	// Default value of variable.
	DefaultValue any
}

func (v *VariableSpecification) GetType() (rv *VariableType) {
	if v != nil {
		return v.Type
	}
	return
}

func (v *VariableSpecification) GetDefaultValue() (rv any) {
	if v != nil {
		return v.DefaultValue
	}
	return
}

// VerticaDatasetTypeProperties - Vertica Properties
type VerticaDatasetTypeProperties struct {
	// The schema name of the Vertica. Type: string (or Expression with resultType string).
	Schema any

	// The table name of the Vertica. Type: string (or Expression with resultType string).
	Table any

	// This property will be retired. Please consider using schema + table properties instead.
	TableName any
}

func (v *VerticaDatasetTypeProperties) GetSchema() (rv any) {
	if v != nil {
		return v.Schema
	}
	return
}

func (v *VerticaDatasetTypeProperties) GetTable() (rv any) {
	if v != nil {
		return v.Table
	}
	return
}

func (v *VerticaDatasetTypeProperties) GetTableName() (rv any) {
	if v != nil {
		return v.TableName
	}
	return
}

// VerticaLinkedService - Vertica linked service.
type VerticaLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Vertica linked service properties.
	TypeProperties *VerticaLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (v *VerticaLinkedService) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

func (v *VerticaLinkedService) GetTypeProperties() (rv *VerticaLinkedServiceTypeProperties) {
	if v != nil {
		return v.TypeProperties
	}
	return
}

func (v *VerticaLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if v != nil {
		return v.AdditionalProperties
	}
	return
}

func (v *VerticaLinkedService) GetAnnotations() (rv []any) {
	if v != nil {
		return v.Annotations
	}
	return
}

func (v *VerticaLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if v != nil {
		return v.ConnectVia
	}
	return
}

func (v *VerticaLinkedService) GetDescription() (rv string) {
	if v != nil && v.Description != nil {
		return *v.Description
	}
	return
}

func (v *VerticaLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if v != nil {
		return v.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type VerticaLinkedService.
func (v *VerticaLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: v.AdditionalProperties,
		Annotations:          v.Annotations,
		ConnectVia:           v.ConnectVia,
		Description:          v.Description,
		Parameters:           v.Parameters,
		Type:                 v.Type,
	}
}

// VerticaLinkedServiceTypeProperties - Vertica linked service properties.
type VerticaLinkedServiceTypeProperties struct {
	// An ODBC connection string. Type: string, SecureString or AzureKeyVaultSecretReference.
	ConnectionString any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The Azure key vault secret reference of password in connection string.
	Pwd *AzureKeyVaultSecretReference
}

func (v *VerticaLinkedServiceTypeProperties) GetConnectionString() (rv any) {
	if v != nil {
		return v.ConnectionString
	}
	return
}

func (v *VerticaLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if v != nil {
		return v.EncryptedCredential
	}
	return
}

func (v *VerticaLinkedServiceTypeProperties) GetPwd() (rv *AzureKeyVaultSecretReference) {
	if v != nil {
		return v.Pwd
	}
	return
}

// VerticaSource - A copy activity Vertica source.
type VerticaSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (v *VerticaSource) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

func (v *VerticaSource) GetAdditionalColumns() (rv any) {
	if v != nil {
		return v.AdditionalColumns
	}
	return
}

func (v *VerticaSource) GetAdditionalProperties() (rv map[string]any) {
	if v != nil {
		return v.AdditionalProperties
	}
	return
}

func (v *VerticaSource) GetMaxConcurrentConnections() (rv any) {
	if v != nil {
		return v.MaxConcurrentConnections
	}
	return
}

func (v *VerticaSource) GetQuery() (rv any) {
	if v != nil {
		return v.Query
	}
	return
}

func (v *VerticaSource) GetQueryTimeout() (rv any) {
	if v != nil {
		return v.QueryTimeout
	}
	return
}

func (v *VerticaSource) GetSourceRetryCount() (rv any) {
	if v != nil {
		return v.SourceRetryCount
	}
	return
}

func (v *VerticaSource) GetSourceRetryWait() (rv any) {
	if v != nil {
		return v.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type VerticaSource.
func (v *VerticaSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     v.AdditionalProperties,
		MaxConcurrentConnections: v.MaxConcurrentConnections,
		SourceRetryCount:         v.SourceRetryCount,
		SourceRetryWait:          v.SourceRetryWait,
		Type:                     v.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type VerticaSource.
func (v *VerticaSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        v.AdditionalColumns,
		AdditionalProperties:     v.AdditionalProperties,
		MaxConcurrentConnections: v.MaxConcurrentConnections,
		QueryTimeout:             v.QueryTimeout,
		SourceRetryCount:         v.SourceRetryCount,
		SourceRetryWait:          v.SourceRetryWait,
		Type:                     v.Type,
	}
}

// VerticaTableDataset - Vertica dataset.
type VerticaTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *VerticaDatasetTypeProperties
}

func (v *VerticaTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if v != nil {
		return v.LinkedServiceName
	}
	return
}

func (v *VerticaTableDataset) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

func (v *VerticaTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if v != nil {
		return v.AdditionalProperties
	}
	return
}

func (v *VerticaTableDataset) GetAnnotations() (rv []any) {
	if v != nil {
		return v.Annotations
	}
	return
}

func (v *VerticaTableDataset) GetDescription() (rv string) {
	if v != nil && v.Description != nil {
		return *v.Description
	}
	return
}

func (v *VerticaTableDataset) GetFolder() (rv *DatasetFolder) {
	if v != nil {
		return v.Folder
	}
	return
}

func (v *VerticaTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if v != nil {
		return v.Parameters
	}
	return
}

func (v *VerticaTableDataset) GetSchema() (rv any) {
	if v != nil {
		return v.Schema
	}
	return
}

func (v *VerticaTableDataset) GetStructure() (rv any) {
	if v != nil {
		return v.Structure
	}
	return
}

func (v *VerticaTableDataset) GetTypeProperties() (rv *VerticaDatasetTypeProperties) {
	if v != nil {
		return v.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type VerticaTableDataset.
func (v *VerticaTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: v.AdditionalProperties,
		Annotations:          v.Annotations,
		Description:          v.Description,
		Folder:               v.Folder,
		LinkedServiceName:    v.LinkedServiceName,
		Parameters:           v.Parameters,
		Schema:               v.Schema,
		Structure:            v.Structure,
		Type:                 v.Type,
	}
}

// VirtualNetworkProfile - Virtual Network Profile
type VirtualNetworkProfile struct {
	// Subnet ID used for computes in workspace
	ComputeSubnetID *string
}

func (v *VirtualNetworkProfile) GetComputeSubnetID() (rv string) {
	if v != nil && v.ComputeSubnetID != nil {
		return *v.ComputeSubnetID
	}
	return
}

// WaitActivity - This activity suspends pipeline execution for the specified interval.
type WaitActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Wait activity properties.
	TypeProperties *WaitActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (w *WaitActivity) GetName() (rv string) {
	if w != nil && w.Name != nil {
		return *w.Name
	}
	return
}

func (w *WaitActivity) GetType() (rv string) {
	if w != nil && w.Type != nil {
		return *w.Type
	}
	return
}

func (w *WaitActivity) GetTypeProperties() (rv *WaitActivityTypeProperties) {
	if w != nil {
		return w.TypeProperties
	}
	return
}

func (w *WaitActivity) GetAdditionalProperties() (rv map[string]any) {
	if w != nil {
		return w.AdditionalProperties
	}
	return
}

func (w *WaitActivity) GetDependsOn() (rv []*ActivityDependency) {
	if w != nil {
		return w.DependsOn
	}
	return
}

func (w *WaitActivity) GetDescription() (rv string) {
	if w != nil && w.Description != nil {
		return *w.Description
	}
	return
}

func (w *WaitActivity) GetUserProperties() (rv []*UserProperty) {
	if w != nil {
		return w.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type WaitActivity.
func (w *WaitActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: w.AdditionalProperties,
		DependsOn:            w.DependsOn,
		Description:          w.Description,
		Name:                 w.Name,
		Type:                 w.Type,
		UserProperties:       w.UserProperties,
	}
}

// GetControlActivity implements the ControlActivityClassification interface for type WaitActivity.
func (w *WaitActivity) GetControlActivity() *ControlActivity {
	return &ControlActivity{
		AdditionalProperties: w.AdditionalProperties,
		DependsOn:            w.DependsOn,
		Description:          w.Description,
		Name:                 w.Name,
		Type:                 w.Type,
		UserProperties:       w.UserProperties,
	}
}

// WaitActivityTypeProperties - Wait activity properties.
type WaitActivityTypeProperties struct {
	// REQUIRED; Duration in seconds.
	WaitTimeInSeconds any
}

func (w *WaitActivityTypeProperties) GetWaitTimeInSeconds() (rv any) {
	if w != nil {
		return w.WaitTimeInSeconds
	}
	return
}

// WebActivity - Web activity.
type WebActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; Web activity properties.
	TypeProperties *WebActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// Activity policy.
	Policy *ActivityPolicy

	// Activity user properties.
	UserProperties []*UserProperty
}

func (w *WebActivity) GetName() (rv string) {
	if w != nil && w.Name != nil {
		return *w.Name
	}
	return
}

func (w *WebActivity) GetType() (rv string) {
	if w != nil && w.Type != nil {
		return *w.Type
	}
	return
}

func (w *WebActivity) GetTypeProperties() (rv *WebActivityTypeProperties) {
	if w != nil {
		return w.TypeProperties
	}
	return
}

func (w *WebActivity) GetAdditionalProperties() (rv map[string]any) {
	if w != nil {
		return w.AdditionalProperties
	}
	return
}

func (w *WebActivity) GetDependsOn() (rv []*ActivityDependency) {
	if w != nil {
		return w.DependsOn
	}
	return
}

func (w *WebActivity) GetDescription() (rv string) {
	if w != nil && w.Description != nil {
		return *w.Description
	}
	return
}

func (w *WebActivity) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if w != nil {
		return w.LinkedServiceName
	}
	return
}

func (w *WebActivity) GetPolicy() (rv *ActivityPolicy) {
	if w != nil {
		return w.Policy
	}
	return
}

func (w *WebActivity) GetUserProperties() (rv []*UserProperty) {
	if w != nil {
		return w.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type WebActivity.
func (w *WebActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: w.AdditionalProperties,
		DependsOn:            w.DependsOn,
		Description:          w.Description,
		Name:                 w.Name,
		Type:                 w.Type,
		UserProperties:       w.UserProperties,
	}
}

// GetExecutionActivity implements the ExecutionActivityClassification interface for type WebActivity.
func (w *WebActivity) GetExecutionActivity() *ExecutionActivity {
	return &ExecutionActivity{
		AdditionalProperties: w.AdditionalProperties,
		DependsOn:            w.DependsOn,
		Description:          w.Description,
		LinkedServiceName:    w.LinkedServiceName,
		Name:                 w.Name,
		Policy:               w.Policy,
		Type:                 w.Type,
		UserProperties:       w.UserProperties,
	}
}

// WebActivityAuthentication - Web activity authentication properties.
type WebActivityAuthentication struct {
	// REQUIRED; Web activity authentication (Basic/ClientCertificate/MSI)
	Type *string

	// Password for the PFX file or basic authentication.
	Password SecretBaseClassification

	// Base64-encoded contents of a PFX file.
	Pfx SecretBaseClassification

	// Resource for which Azure Auth token will be requested when using MSI Authentication.
	Resource *string

	// Web activity authentication user name for basic authentication.
	Username *string
}

func (w *WebActivityAuthentication) GetType() (rv string) {
	if w != nil && w.Type != nil {
		return *w.Type
	}
	return
}

func (w *WebActivityAuthentication) GetPassword() (rv SecretBaseClassification) {
	if w != nil {
		return w.Password
	}
	return
}

func (w *WebActivityAuthentication) GetPfx() (rv SecretBaseClassification) {
	if w != nil {
		return w.Pfx
	}
	return
}

func (w *WebActivityAuthentication) GetResource() (rv string) {
	if w != nil && w.Resource != nil {
		return *w.Resource
	}
	return
}

func (w *WebActivityAuthentication) GetUsername() (rv string) {
	if w != nil && w.Username != nil {
		return *w.Username
	}
	return
}

// WebActivityTypeProperties - Web activity type properties.
type WebActivityTypeProperties struct {
	// REQUIRED; Rest API method for target endpoint.
	Method *WebActivityMethod

	// REQUIRED; Web activity target endpoint and path. Type: string (or Expression with resultType string).
	URL any

	// Authentication method used for calling the endpoint.
	Authentication *WebActivityAuthentication

	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type:
	// string (or Expression with resultType string).
	Body any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// List of datasets passed to web endpoint.
	Datasets []*DatasetReference

	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers"
	// : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type:
	// string (or Expression with resultType string).
	Headers any

	// List of linked services passed to web endpoint.
	LinkedServices []*LinkedServiceReference
}

func (w *WebActivityTypeProperties) GetMethod() (rv *WebActivityMethod) {
	if w != nil {
		return w.Method
	}
	return
}

func (w *WebActivityTypeProperties) GetURL() (rv any) {
	if w != nil {
		return w.URL
	}
	return
}

func (w *WebActivityTypeProperties) GetAuthentication() (rv *WebActivityAuthentication) {
	if w != nil {
		return w.Authentication
	}
	return
}

func (w *WebActivityTypeProperties) GetBody() (rv any) {
	if w != nil {
		return w.Body
	}
	return
}

func (w *WebActivityTypeProperties) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if w != nil {
		return w.ConnectVia
	}
	return
}

func (w *WebActivityTypeProperties) GetDatasets() (rv []*DatasetReference) {
	if w != nil {
		return w.Datasets
	}
	return
}

func (w *WebActivityTypeProperties) GetHeaders() (rv any) {
	if w != nil {
		return w.Headers
	}
	return
}

func (w *WebActivityTypeProperties) GetLinkedServices() (rv []*LinkedServiceReference) {
	if w != nil {
		return w.LinkedServices
	}
	return
}

// WebAnonymousAuthentication - A WebLinkedService that uses anonymous authentication to communicate with an HTTP endpoint.
type WebAnonymousAuthentication struct {
	// REQUIRED; Type of authentication used to connect to the web table source.
	AuthenticationType *WebAuthenticationType

	// REQUIRED; The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType
	// string).
	URL any
}

func (w *WebAnonymousAuthentication) GetAuthenticationType() (rv *WebAuthenticationType) {
	if w != nil {
		return w.AuthenticationType
	}
	return
}

func (w *WebAnonymousAuthentication) GetURL() (rv any) {
	if w != nil {
		return w.URL
	}
	return
}

// GetWebLinkedServiceTypeProperties implements the WebLinkedServiceTypePropertiesClassification interface for type WebAnonymousAuthentication.
func (w *WebAnonymousAuthentication) GetWebLinkedServiceTypeProperties() *WebLinkedServiceTypeProperties {
	return &WebLinkedServiceTypeProperties{
		AuthenticationType: w.AuthenticationType,
		URL:                w.URL,
	}
}

// WebBasicAuthentication - A WebLinkedService that uses basic authentication to communicate with an HTTP endpoint.
type WebBasicAuthentication struct {
	// REQUIRED; Type of authentication used to connect to the web table source.
	AuthenticationType *WebAuthenticationType

	// REQUIRED; The password for Basic authentication.
	Password SecretBaseClassification

	// REQUIRED; The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType
	// string).
	URL any

	// REQUIRED; User name for Basic authentication. Type: string (or Expression with resultType string).
	Username any
}

func (w *WebBasicAuthentication) GetAuthenticationType() (rv *WebAuthenticationType) {
	if w != nil {
		return w.AuthenticationType
	}
	return
}

func (w *WebBasicAuthentication) GetPassword() (rv SecretBaseClassification) {
	if w != nil {
		return w.Password
	}
	return
}

func (w *WebBasicAuthentication) GetURL() (rv any) {
	if w != nil {
		return w.URL
	}
	return
}

func (w *WebBasicAuthentication) GetUsername() (rv any) {
	if w != nil {
		return w.Username
	}
	return
}

// GetWebLinkedServiceTypeProperties implements the WebLinkedServiceTypePropertiesClassification interface for type WebBasicAuthentication.
func (w *WebBasicAuthentication) GetWebLinkedServiceTypeProperties() *WebLinkedServiceTypeProperties {
	return &WebLinkedServiceTypeProperties{
		AuthenticationType: w.AuthenticationType,
		URL:                w.URL,
	}
}

// WebClientCertificateAuthentication - A WebLinkedService that uses client certificate based authentication to communicate
// with an HTTP endpoint. This scheme follows mutual authentication; the server must also provide valid credentials to
// the client.
type WebClientCertificateAuthentication struct {
	// REQUIRED; Type of authentication used to connect to the web table source.
	AuthenticationType *WebAuthenticationType

	// REQUIRED; Password for the PFX file.
	Password SecretBaseClassification

	// REQUIRED; Base64-encoded contents of a PFX file.
	Pfx SecretBaseClassification

	// REQUIRED; The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType
	// string).
	URL any
}

func (w *WebClientCertificateAuthentication) GetAuthenticationType() (rv *WebAuthenticationType) {
	if w != nil {
		return w.AuthenticationType
	}
	return
}

func (w *WebClientCertificateAuthentication) GetPassword() (rv SecretBaseClassification) {
	if w != nil {
		return w.Password
	}
	return
}

func (w *WebClientCertificateAuthentication) GetPfx() (rv SecretBaseClassification) {
	if w != nil {
		return w.Pfx
	}
	return
}

func (w *WebClientCertificateAuthentication) GetURL() (rv any) {
	if w != nil {
		return w.URL
	}
	return
}

// GetWebLinkedServiceTypeProperties implements the WebLinkedServiceTypePropertiesClassification interface for type WebClientCertificateAuthentication.
func (w *WebClientCertificateAuthentication) GetWebLinkedServiceTypeProperties() *WebLinkedServiceTypeProperties {
	return &WebLinkedServiceTypeProperties{
		AuthenticationType: w.AuthenticationType,
		URL:                w.URL,
	}
}

// WebHookActivity - WebHook activity.
type WebHookActivity struct {
	// REQUIRED; Activity name.
	Name *string

	// REQUIRED; Type of activity.
	Type *string

	// REQUIRED; WebHook activity properties.
	TypeProperties *WebHookActivityTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Activity depends on condition.
	DependsOn []*ActivityDependency

	// Activity description.
	Description *string

	// Activity user properties.
	UserProperties []*UserProperty
}

func (w *WebHookActivity) GetName() (rv string) {
	if w != nil && w.Name != nil {
		return *w.Name
	}
	return
}

func (w *WebHookActivity) GetType() (rv string) {
	if w != nil && w.Type != nil {
		return *w.Type
	}
	return
}

func (w *WebHookActivity) GetTypeProperties() (rv *WebHookActivityTypeProperties) {
	if w != nil {
		return w.TypeProperties
	}
	return
}

func (w *WebHookActivity) GetAdditionalProperties() (rv map[string]any) {
	if w != nil {
		return w.AdditionalProperties
	}
	return
}

func (w *WebHookActivity) GetDependsOn() (rv []*ActivityDependency) {
	if w != nil {
		return w.DependsOn
	}
	return
}

func (w *WebHookActivity) GetDescription() (rv string) {
	if w != nil && w.Description != nil {
		return *w.Description
	}
	return
}

func (w *WebHookActivity) GetUserProperties() (rv []*UserProperty) {
	if w != nil {
		return w.UserProperties
	}
	return
}

// GetActivity implements the ActivityClassification interface for type WebHookActivity.
func (w *WebHookActivity) GetActivity() *Activity {
	return &Activity{
		AdditionalProperties: w.AdditionalProperties,
		DependsOn:            w.DependsOn,
		Description:          w.Description,
		Name:                 w.Name,
		Type:                 w.Type,
		UserProperties:       w.UserProperties,
	}
}

// GetControlActivity implements the ControlActivityClassification interface for type WebHookActivity.
func (w *WebHookActivity) GetControlActivity() *ControlActivity {
	return &ControlActivity{
		AdditionalProperties: w.AdditionalProperties,
		DependsOn:            w.DependsOn,
		Description:          w.Description,
		Name:                 w.Name,
		Type:                 w.Type,
		UserProperties:       w.UserProperties,
	}
}

// WebHookActivityTypeProperties - WebHook activity type properties.
type WebHookActivityTypeProperties struct {
	// REQUIRED; Rest API method for target endpoint.
	Method *WebHookActivityMethod

	// REQUIRED; WebHook activity target endpoint and path. Type: string (or Expression with resultType string).
	URL any

	// Authentication method used for calling the endpoint.
	Authentication *WebActivityAuthentication

	// Represents the payload that will be sent to the endpoint. Required for POST/PUT method, not allowed for GET method Type:
	// string (or Expression with resultType string).
	Body any

	// Represents the headers that will be sent to the request. For example, to set the language and type on a request: "headers"
	// : { "Accept-Language": "en-us", "Content-Type": "application/json" }. Type:
	// string (or Expression with resultType string).
	Headers any

	// When set to true, statusCode, output and error in callback request body will be consumed by activity. The activity can
	// be marked as failed by setting statusCode >= 400 in callback request. Default is
	// false. Type: boolean (or Expression with resultType boolean).
	ReportStatusOnCallBack any

	// The timeout within which the webhook should be called back. If there is no value specified, it defaults to 10 minutes.
	// Type: string. Pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	Timeout *string
}

func (w *WebHookActivityTypeProperties) GetMethod() (rv *WebHookActivityMethod) {
	if w != nil {
		return w.Method
	}
	return
}

func (w *WebHookActivityTypeProperties) GetURL() (rv any) {
	if w != nil {
		return w.URL
	}
	return
}

func (w *WebHookActivityTypeProperties) GetAuthentication() (rv *WebActivityAuthentication) {
	if w != nil {
		return w.Authentication
	}
	return
}

func (w *WebHookActivityTypeProperties) GetBody() (rv any) {
	if w != nil {
		return w.Body
	}
	return
}

func (w *WebHookActivityTypeProperties) GetHeaders() (rv any) {
	if w != nil {
		return w.Headers
	}
	return
}

func (w *WebHookActivityTypeProperties) GetReportStatusOnCallBack() (rv any) {
	if w != nil {
		return w.ReportStatusOnCallBack
	}
	return
}

func (w *WebHookActivityTypeProperties) GetTimeout() (rv string) {
	if w != nil && w.Timeout != nil {
		return *w.Timeout
	}
	return
}

// WebLinkedService - Web linked service.
type WebLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Web linked service properties.
	TypeProperties WebLinkedServiceTypePropertiesClassification

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (w *WebLinkedService) GetType() (rv string) {
	if w != nil && w.Type != nil {
		return *w.Type
	}
	return
}

func (w *WebLinkedService) GetTypeProperties() (rv WebLinkedServiceTypePropertiesClassification) {
	if w != nil {
		return w.TypeProperties
	}
	return
}

func (w *WebLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if w != nil {
		return w.AdditionalProperties
	}
	return
}

func (w *WebLinkedService) GetAnnotations() (rv []any) {
	if w != nil {
		return w.Annotations
	}
	return
}

func (w *WebLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if w != nil {
		return w.ConnectVia
	}
	return
}

func (w *WebLinkedService) GetDescription() (rv string) {
	if w != nil && w.Description != nil {
		return *w.Description
	}
	return
}

func (w *WebLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if w != nil {
		return w.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type WebLinkedService.
func (w *WebLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: w.AdditionalProperties,
		Annotations:          w.Annotations,
		ConnectVia:           w.ConnectVia,
		Description:          w.Description,
		Parameters:           w.Parameters,
		Type:                 w.Type,
	}
}

// WebLinkedServiceTypeProperties - Base definition of WebLinkedServiceTypeProperties, this typeProperties is polymorphic
// based on authenticationType, so not flattened in SDK models.
type WebLinkedServiceTypeProperties struct {
	// REQUIRED; Type of authentication used to connect to the web table source.
	AuthenticationType *WebAuthenticationType

	// REQUIRED; The URL of the web service endpoint, e.g. http://www.microsoft.com . Type: string (or Expression with resultType
	// string).
	URL any
}

func (w *WebLinkedServiceTypeProperties) GetAuthenticationType() (rv *WebAuthenticationType) {
	if w != nil {
		return w.AuthenticationType
	}
	return
}

func (w *WebLinkedServiceTypeProperties) GetURL() (rv any) {
	if w != nil {
		return w.URL
	}
	return
}

// GetWebLinkedServiceTypeProperties implements the WebLinkedServiceTypePropertiesClassification interface for type WebLinkedServiceTypeProperties.
func (w *WebLinkedServiceTypeProperties) GetWebLinkedServiceTypeProperties() *WebLinkedServiceTypeProperties {
	return w
}

// WebSource - A copy activity source for web page table.
type WebSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (w *WebSource) GetType() (rv string) {
	if w != nil && w.Type != nil {
		return *w.Type
	}
	return
}

func (w *WebSource) GetAdditionalColumns() (rv any) {
	if w != nil {
		return w.AdditionalColumns
	}
	return
}

func (w *WebSource) GetAdditionalProperties() (rv map[string]any) {
	if w != nil {
		return w.AdditionalProperties
	}
	return
}

func (w *WebSource) GetMaxConcurrentConnections() (rv any) {
	if w != nil {
		return w.MaxConcurrentConnections
	}
	return
}

func (w *WebSource) GetSourceRetryCount() (rv any) {
	if w != nil {
		return w.SourceRetryCount
	}
	return
}

func (w *WebSource) GetSourceRetryWait() (rv any) {
	if w != nil {
		return w.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type WebSource.
func (w *WebSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     w.AdditionalProperties,
		MaxConcurrentConnections: w.MaxConcurrentConnections,
		SourceRetryCount:         w.SourceRetryCount,
		SourceRetryWait:          w.SourceRetryWait,
		Type:                     w.Type,
	}
}

// WebTableDataset - The dataset points to a HTML table in the web page.
type WebTableDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// REQUIRED; Web table dataset properties.
	TypeProperties *WebTableDatasetTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any
}

func (w *WebTableDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if w != nil {
		return w.LinkedServiceName
	}
	return
}

func (w *WebTableDataset) GetType() (rv string) {
	if w != nil && w.Type != nil {
		return *w.Type
	}
	return
}

func (w *WebTableDataset) GetTypeProperties() (rv *WebTableDatasetTypeProperties) {
	if w != nil {
		return w.TypeProperties
	}
	return
}

func (w *WebTableDataset) GetAdditionalProperties() (rv map[string]any) {
	if w != nil {
		return w.AdditionalProperties
	}
	return
}

func (w *WebTableDataset) GetAnnotations() (rv []any) {
	if w != nil {
		return w.Annotations
	}
	return
}

func (w *WebTableDataset) GetDescription() (rv string) {
	if w != nil && w.Description != nil {
		return *w.Description
	}
	return
}

func (w *WebTableDataset) GetFolder() (rv *DatasetFolder) {
	if w != nil {
		return w.Folder
	}
	return
}

func (w *WebTableDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if w != nil {
		return w.Parameters
	}
	return
}

func (w *WebTableDataset) GetSchema() (rv any) {
	if w != nil {
		return w.Schema
	}
	return
}

func (w *WebTableDataset) GetStructure() (rv any) {
	if w != nil {
		return w.Structure
	}
	return
}

// GetDataset implements the DatasetClassification interface for type WebTableDataset.
func (w *WebTableDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: w.AdditionalProperties,
		Annotations:          w.Annotations,
		Description:          w.Description,
		Folder:               w.Folder,
		LinkedServiceName:    w.LinkedServiceName,
		Parameters:           w.Parameters,
		Schema:               w.Schema,
		Structure:            w.Structure,
		Type:                 w.Type,
	}
}

// WebTableDatasetTypeProperties - Web table dataset properties.
type WebTableDatasetTypeProperties struct {
	// REQUIRED; The zero-based index of the table in the web page. Type: integer (or Expression with resultType integer), minimum:
	// 0.
	Index any

	// The relative URL to the web page from the linked service URL. Type: string (or Expression with resultType string).
	Path any
}

func (w *WebTableDatasetTypeProperties) GetIndex() (rv any) {
	if w != nil {
		return w.Index
	}
	return
}

func (w *WebTableDatasetTypeProperties) GetPath() (rv any) {
	if w != nil {
		return w.Path
	}
	return
}

// Workspace - A workspace
type Workspace struct {
	// REQUIRED; The geo-location where the resource lives
	Location *string

	// Identity of the workspace
	Identity *ManagedIdentity

	// Workspace resource properties
	Properties *WorkspaceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
	ID *string

	// READ-ONLY; The name of the resource
	Name *string

	// READ-ONLY; The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
	Type *string
}

func (w *Workspace) GetLocation() (rv string) {
	if w != nil && w.Location != nil {
		return *w.Location
	}
	return
}

func (w *Workspace) GetIdentity() (rv *ManagedIdentity) {
	if w != nil {
		return w.Identity
	}
	return
}

func (w *Workspace) GetProperties() (rv *WorkspaceProperties) {
	if w != nil {
		return w.Properties
	}
	return
}

func (w *Workspace) GetTags() (rv map[string]*string) {
	if w != nil {
		return w.Tags
	}
	return
}

func (w *Workspace) GetID() (rv string) {
	if w != nil && w.ID != nil {
		return *w.ID
	}
	return
}

func (w *Workspace) GetName() (rv string) {
	if w != nil && w.Name != nil {
		return *w.Name
	}
	return
}

func (w *Workspace) GetType() (rv string) {
	if w != nil && w.Type != nil {
		return *w.Type
	}
	return
}

// WorkspaceIdentity - Identity properties of the workspace resource.
type WorkspaceIdentity struct {
	// CONSTANT; The identity type. Currently the only supported type is 'SystemAssigned'.
	// Field has constant value "SystemAssigned", any specified value is ignored.
	Type *string

	// READ-ONLY; The principal id of the identity.
	PrincipalID *string

	// READ-ONLY; The client tenant id of the identity.
	TenantID *string
}

func (w *WorkspaceIdentity) GetType() (rv *string) {
	if w != nil {
		return w.Type
	}
	return
}

func (w *WorkspaceIdentity) GetPrincipalID() (rv string) {
	if w != nil && w.PrincipalID != nil {
		return *w.PrincipalID
	}
	return
}

func (w *WorkspaceIdentity) GetTenantID() (rv string) {
	if w != nil && w.TenantID != nil {
		return *w.TenantID
	}
	return
}

// WorkspaceKeyDetails - Details of the customer managed key associated with the workspace
type WorkspaceKeyDetails struct {
	// Workspace Key sub-resource key vault url
	KeyVaultURL *string

	// Workspace Key sub-resource name
	Name *string
}

func (w *WorkspaceKeyDetails) GetKeyVaultURL() (rv string) {
	if w != nil && w.KeyVaultURL != nil {
		return *w.KeyVaultURL
	}
	return
}

func (w *WorkspaceKeyDetails) GetName() (rv string) {
	if w != nil && w.Name != nil {
		return *w.Name
	}
	return
}

// WorkspaceProperties - Workspace properties
type WorkspaceProperties struct {
	// Connectivity endpoints
	ConnectivityEndpoints map[string]*string

	// Workspace default data lake storage account details
	DefaultDataLakeStorage *DataLakeStorageAccountDetails

	// The encryption details of the workspace
	Encryption *EncryptionDetails

	// Workspace managed resource group. The resource group name uniquely identifies the resource group within the user subscriptionId.
	// The resource group name must be no longer than 90 characters long, and
	// must be alphanumeric characters (Char.IsLetterOrDigit()) and '-', '_', '(', ')' and'.'. Note that the name cannot end with
	// '.'
	ManagedResourceGroupName *string

	// Setting this to 'default' will ensure that all compute for this workspace is in a virtual network managed on behalf of
	// the user.
	ManagedVirtualNetwork *string

	// Managed Virtual Network Settings
	ManagedVirtualNetworkSettings *ManagedVirtualNetworkSettings

	// Private endpoint connections to the workspace
	PrivateEndpointConnections []*PrivateEndpointConnection

	// Purview Configuration
	PurviewConfiguration *PurviewConfiguration

	// Login for workspace SQL active directory administrator
	SQLAdministratorLogin *string

	// SQL administrator login password
	SQLAdministratorLoginPassword *string

	// Virtual Network profile
	VirtualNetworkProfile *VirtualNetworkProfile

	// Git integration settings
	WorkspaceRepositoryConfiguration *WorkspaceRepositoryConfiguration

	// READ-ONLY; The ADLA resource ID.
	AdlaResourceID *string

	// READ-ONLY; Workspace level configs and feature flags
	ExtraProperties map[string]any

	// READ-ONLY; Resource provisioning state
	ProvisioningState *string

	// READ-ONLY; The workspace unique identifier
	WorkspaceUID *string
}

func (w *WorkspaceProperties) GetConnectivityEndpoints() (rv map[string]*string) {
	if w != nil {
		return w.ConnectivityEndpoints
	}
	return
}

func (w *WorkspaceProperties) GetDefaultDataLakeStorage() (rv *DataLakeStorageAccountDetails) {
	if w != nil {
		return w.DefaultDataLakeStorage
	}
	return
}

func (w *WorkspaceProperties) GetEncryption() (rv *EncryptionDetails) {
	if w != nil {
		return w.Encryption
	}
	return
}

func (w *WorkspaceProperties) GetManagedResourceGroupName() (rv string) {
	if w != nil && w.ManagedResourceGroupName != nil {
		return *w.ManagedResourceGroupName
	}
	return
}

func (w *WorkspaceProperties) GetManagedVirtualNetwork() (rv string) {
	if w != nil && w.ManagedVirtualNetwork != nil {
		return *w.ManagedVirtualNetwork
	}
	return
}

func (w *WorkspaceProperties) GetManagedVirtualNetworkSettings() (rv *ManagedVirtualNetworkSettings) {
	if w != nil {
		return w.ManagedVirtualNetworkSettings
	}
	return
}

func (w *WorkspaceProperties) GetPrivateEndpointConnections() (rv []*PrivateEndpointConnection) {
	if w != nil {
		return w.PrivateEndpointConnections
	}
	return
}

func (w *WorkspaceProperties) GetPurviewConfiguration() (rv *PurviewConfiguration) {
	if w != nil {
		return w.PurviewConfiguration
	}
	return
}

func (w *WorkspaceProperties) GetSQLAdministratorLogin() (rv string) {
	if w != nil && w.SQLAdministratorLogin != nil {
		return *w.SQLAdministratorLogin
	}
	return
}

func (w *WorkspaceProperties) GetSQLAdministratorLoginPassword() (rv string) {
	if w != nil && w.SQLAdministratorLoginPassword != nil {
		return *w.SQLAdministratorLoginPassword
	}
	return
}

func (w *WorkspaceProperties) GetVirtualNetworkProfile() (rv *VirtualNetworkProfile) {
	if w != nil {
		return w.VirtualNetworkProfile
	}
	return
}

func (w *WorkspaceProperties) GetWorkspaceRepositoryConfiguration() (rv *WorkspaceRepositoryConfiguration) {
	if w != nil {
		return w.WorkspaceRepositoryConfiguration
	}
	return
}

func (w *WorkspaceProperties) GetAdlaResourceID() (rv string) {
	if w != nil && w.AdlaResourceID != nil {
		return *w.AdlaResourceID
	}
	return
}

func (w *WorkspaceProperties) GetExtraProperties() (rv map[string]any) {
	if w != nil {
		return w.ExtraProperties
	}
	return
}

func (w *WorkspaceProperties) GetProvisioningState() (rv string) {
	if w != nil && w.ProvisioningState != nil {
		return *w.ProvisioningState
	}
	return
}

func (w *WorkspaceProperties) GetWorkspaceUID() (rv string) {
	if w != nil && w.WorkspaceUID != nil {
		return *w.WorkspaceUID
	}
	return
}

// WorkspaceRepositoryConfiguration - Git integration settings
type WorkspaceRepositoryConfiguration struct {
	// Account name
	AccountName *string

	// GitHub bring your own app client id
	ClientID *string

	// GitHub bring your own app client secret information.
	ClientSecret *GitHubClientSecret

	// Collaboration branch
	CollaborationBranch *string

	// GitHub Enterprise host name. For example: https://github.mydomain.com
	HostName *string

	// The last commit ID
	LastCommitID *string

	// VSTS project name
	ProjectName *string

	// Repository name
	RepositoryName *string

	// Root folder to use in the repository
	RootFolder *string

	// The VSTS tenant ID
	TenantID *string

	// Type of workspace repositoryID configuration. Example WorkspaceVSTSConfiguration, WorkspaceGitHubConfiguration
	Type *string
}

func (w *WorkspaceRepositoryConfiguration) GetAccountName() (rv string) {
	if w != nil && w.AccountName != nil {
		return *w.AccountName
	}
	return
}

func (w *WorkspaceRepositoryConfiguration) GetClientID() (rv string) {
	if w != nil && w.ClientID != nil {
		return *w.ClientID
	}
	return
}

func (w *WorkspaceRepositoryConfiguration) GetClientSecret() (rv *GitHubClientSecret) {
	if w != nil {
		return w.ClientSecret
	}
	return
}

func (w *WorkspaceRepositoryConfiguration) GetCollaborationBranch() (rv string) {
	if w != nil && w.CollaborationBranch != nil {
		return *w.CollaborationBranch
	}
	return
}

func (w *WorkspaceRepositoryConfiguration) GetHostName() (rv string) {
	if w != nil && w.HostName != nil {
		return *w.HostName
	}
	return
}

func (w *WorkspaceRepositoryConfiguration) GetLastCommitID() (rv string) {
	if w != nil && w.LastCommitID != nil {
		return *w.LastCommitID
	}
	return
}

func (w *WorkspaceRepositoryConfiguration) GetProjectName() (rv string) {
	if w != nil && w.ProjectName != nil {
		return *w.ProjectName
	}
	return
}

func (w *WorkspaceRepositoryConfiguration) GetRepositoryName() (rv string) {
	if w != nil && w.RepositoryName != nil {
		return *w.RepositoryName
	}
	return
}

func (w *WorkspaceRepositoryConfiguration) GetRootFolder() (rv string) {
	if w != nil && w.RootFolder != nil {
		return *w.RootFolder
	}
	return
}

func (w *WorkspaceRepositoryConfiguration) GetTenantID() (rv string) {
	if w != nil && w.TenantID != nil {
		return *w.TenantID
	}
	return
}

func (w *WorkspaceRepositoryConfiguration) GetType() (rv string) {
	if w != nil && w.Type != nil {
		return *w.Type
	}
	return
}

// WorkspaceUpdateParameters - Parameters for updating a workspace resource.
type WorkspaceUpdateParameters struct {
	// Managed service identity of the workspace.
	Identity *WorkspaceIdentity

	// The resource tags.
	Tags map[string]*string
}

func (w *WorkspaceUpdateParameters) GetIdentity() (rv *WorkspaceIdentity) {
	if w != nil {
		return w.Identity
	}
	return
}

func (w *WorkspaceUpdateParameters) GetTags() (rv map[string]*string) {
	if w != nil {
		return w.Tags
	}
	return
}

// XMLDataset - Xml dataset.
type XMLDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Xml dataset properties.
	TypeProperties *XMLDatasetTypeProperties
}

func (x *XMLDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if x != nil {
		return x.LinkedServiceName
	}
	return
}

func (x *XMLDataset) GetType() (rv string) {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return
}

func (x *XMLDataset) GetAdditionalProperties() (rv map[string]any) {
	if x != nil {
		return x.AdditionalProperties
	}
	return
}

func (x *XMLDataset) GetAnnotations() (rv []any) {
	if x != nil {
		return x.Annotations
	}
	return
}

func (x *XMLDataset) GetDescription() (rv string) {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return
}

func (x *XMLDataset) GetFolder() (rv *DatasetFolder) {
	if x != nil {
		return x.Folder
	}
	return
}

func (x *XMLDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if x != nil {
		return x.Parameters
	}
	return
}

func (x *XMLDataset) GetSchema() (rv any) {
	if x != nil {
		return x.Schema
	}
	return
}

func (x *XMLDataset) GetStructure() (rv any) {
	if x != nil {
		return x.Structure
	}
	return
}

func (x *XMLDataset) GetTypeProperties() (rv *XMLDatasetTypeProperties) {
	if x != nil {
		return x.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type XMLDataset.
func (x *XMLDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: x.AdditionalProperties,
		Annotations:          x.Annotations,
		Description:          x.Description,
		Folder:               x.Folder,
		LinkedServiceName:    x.LinkedServiceName,
		Parameters:           x.Parameters,
		Schema:               x.Schema,
		Structure:            x.Structure,
		Type:                 x.Type,
	}
}

// XMLDatasetTypeProperties - Xml dataset properties.
type XMLDatasetTypeProperties struct {
	// REQUIRED; The location of the json data storage.
	Location DatasetLocationClassification

	// The data compression method used for the json dataset.
	Compression *DatasetCompression

	// The code page name of the preferred encoding. If not specified, the default value is UTF-8, unless BOM denotes another
	// Unicode encoding. Refer to the name column of the table in the following link to
	// set supported values: https://msdn.microsoft.com/library/system.text.encoding.aspx. Type: string (or Expression with resultType
	// string).
	EncodingName any

	// The null value string. Type: string (or Expression with resultType string).
	NullValue any
}

func (x *XMLDatasetTypeProperties) GetLocation() (rv DatasetLocationClassification) {
	if x != nil {
		return x.Location
	}
	return
}

func (x *XMLDatasetTypeProperties) GetCompression() (rv *DatasetCompression) {
	if x != nil {
		return x.Compression
	}
	return
}

func (x *XMLDatasetTypeProperties) GetEncodingName() (rv any) {
	if x != nil {
		return x.EncodingName
	}
	return
}

func (x *XMLDatasetTypeProperties) GetNullValue() (rv any) {
	if x != nil {
		return x.NullValue
	}
	return
}

// XMLReadSettings - Xml read settings.
type XMLReadSettings struct {
	// REQUIRED; The read setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Compression settings.
	CompressionProperties CompressionReadSettingsClassification

	// Indicates whether type detection is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
	DetectDataType any

	// Namespace uri to prefix mappings to override the prefixes in column names when namespace is enabled, if no prefix is defined
	// for a namespace uri, the prefix of xml element/attribute name in the xml
	// data file will be used. Example: "{"http://www.example.com/xml":"prefix"}" Type: object (or Expression with resultType
	// object).
	NamespacePrefixes any

	// Indicates whether namespace is enabled when reading the xml files. Type: boolean (or Expression with resultType boolean).
	Namespaces any

	// Indicates what validation method is used when reading the xml files. Allowed values: 'none', 'xsd', or 'dtd'. Type: string
	// (or Expression with resultType string).
	ValidationMode any
}

func (x *XMLReadSettings) GetType() (rv string) {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return
}

func (x *XMLReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if x != nil {
		return x.AdditionalProperties
	}
	return
}

func (x *XMLReadSettings) GetCompressionProperties() (rv CompressionReadSettingsClassification) {
	if x != nil {
		return x.CompressionProperties
	}
	return
}

func (x *XMLReadSettings) GetDetectDataType() (rv any) {
	if x != nil {
		return x.DetectDataType
	}
	return
}

func (x *XMLReadSettings) GetNamespacePrefixes() (rv any) {
	if x != nil {
		return x.NamespacePrefixes
	}
	return
}

func (x *XMLReadSettings) GetNamespaces() (rv any) {
	if x != nil {
		return x.Namespaces
	}
	return
}

func (x *XMLReadSettings) GetValidationMode() (rv any) {
	if x != nil {
		return x.ValidationMode
	}
	return
}

// GetFormatReadSettings implements the FormatReadSettingsClassification interface for type XMLReadSettings.
func (x *XMLReadSettings) GetFormatReadSettings() *FormatReadSettings {
	return &FormatReadSettings{
		AdditionalProperties: x.AdditionalProperties,
		Type:                 x.Type,
	}
}

// XMLSource - A copy activity Xml source.
type XMLSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Xml format settings.
	FormatSettings *XMLReadSettings

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any

	// Xml store settings.
	StoreSettings StoreReadSettingsClassification
}

func (x *XMLSource) GetType() (rv string) {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return
}

func (x *XMLSource) GetAdditionalColumns() (rv any) {
	if x != nil {
		return x.AdditionalColumns
	}
	return
}

func (x *XMLSource) GetAdditionalProperties() (rv map[string]any) {
	if x != nil {
		return x.AdditionalProperties
	}
	return
}

func (x *XMLSource) GetFormatSettings() (rv *XMLReadSettings) {
	if x != nil {
		return x.FormatSettings
	}
	return
}

func (x *XMLSource) GetMaxConcurrentConnections() (rv any) {
	if x != nil {
		return x.MaxConcurrentConnections
	}
	return
}

func (x *XMLSource) GetSourceRetryCount() (rv any) {
	if x != nil {
		return x.SourceRetryCount
	}
	return
}

func (x *XMLSource) GetSourceRetryWait() (rv any) {
	if x != nil {
		return x.SourceRetryWait
	}
	return
}

func (x *XMLSource) GetStoreSettings() (rv StoreReadSettingsClassification) {
	if x != nil {
		return x.StoreSettings
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type XMLSource.
func (x *XMLSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     x.AdditionalProperties,
		MaxConcurrentConnections: x.MaxConcurrentConnections,
		SourceRetryCount:         x.SourceRetryCount,
		SourceRetryWait:          x.SourceRetryWait,
		Type:                     x.Type,
	}
}

// XeroLinkedService - Xero Service linked service.
type XeroLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Xero Service linked service properties.
	TypeProperties *XeroLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (x *XeroLinkedService) GetType() (rv string) {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return
}

func (x *XeroLinkedService) GetTypeProperties() (rv *XeroLinkedServiceTypeProperties) {
	if x != nil {
		return x.TypeProperties
	}
	return
}

func (x *XeroLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if x != nil {
		return x.AdditionalProperties
	}
	return
}

func (x *XeroLinkedService) GetAnnotations() (rv []any) {
	if x != nil {
		return x.Annotations
	}
	return
}

func (x *XeroLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if x != nil {
		return x.ConnectVia
	}
	return
}

func (x *XeroLinkedService) GetDescription() (rv string) {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return
}

func (x *XeroLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if x != nil {
		return x.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type XeroLinkedService.
func (x *XeroLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: x.AdditionalProperties,
		Annotations:          x.Annotations,
		ConnectVia:           x.ConnectVia,
		Description:          x.Description,
		Parameters:           x.Parameters,
		Type:                 x.Type,
	}
}

// XeroLinkedServiceTypeProperties - Xero Service linked service properties.
type XeroLinkedServiceTypeProperties struct {
	// REQUIRED; The endpoint of the Xero server. (i.e. api.xero.com)
	Host any

	// Properties used to connect to Xero. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties any

	// The consumer key associated with the Xero application.
	ConsumerKey SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The private key from the .pem file that was generated for your Xero private application. You must include all the text
	// from the .pem file, including the Unix line endings( ).
	PrivateKey SecretBaseClassification

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true.
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification any
}

func (x *XeroLinkedServiceTypeProperties) GetHost() (rv any) {
	if x != nil {
		return x.Host
	}
	return
}

func (x *XeroLinkedServiceTypeProperties) GetConnectionProperties() (rv any) {
	if x != nil {
		return x.ConnectionProperties
	}
	return
}

func (x *XeroLinkedServiceTypeProperties) GetConsumerKey() (rv SecretBaseClassification) {
	if x != nil {
		return x.ConsumerKey
	}
	return
}

func (x *XeroLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if x != nil {
		return x.EncryptedCredential
	}
	return
}

func (x *XeroLinkedServiceTypeProperties) GetPrivateKey() (rv SecretBaseClassification) {
	if x != nil {
		return x.PrivateKey
	}
	return
}

func (x *XeroLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if x != nil {
		return x.UseEncryptedEndpoints
	}
	return
}

func (x *XeroLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if x != nil {
		return x.UseHostVerification
	}
	return
}

func (x *XeroLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if x != nil {
		return x.UsePeerVerification
	}
	return
}

// XeroObjectDataset - Xero Service dataset.
type XeroObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (x *XeroObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if x != nil {
		return x.LinkedServiceName
	}
	return
}

func (x *XeroObjectDataset) GetType() (rv string) {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return
}

func (x *XeroObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if x != nil {
		return x.AdditionalProperties
	}
	return
}

func (x *XeroObjectDataset) GetAnnotations() (rv []any) {
	if x != nil {
		return x.Annotations
	}
	return
}

func (x *XeroObjectDataset) GetDescription() (rv string) {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return
}

func (x *XeroObjectDataset) GetFolder() (rv *DatasetFolder) {
	if x != nil {
		return x.Folder
	}
	return
}

func (x *XeroObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if x != nil {
		return x.Parameters
	}
	return
}

func (x *XeroObjectDataset) GetSchema() (rv any) {
	if x != nil {
		return x.Schema
	}
	return
}

func (x *XeroObjectDataset) GetStructure() (rv any) {
	if x != nil {
		return x.Structure
	}
	return
}

func (x *XeroObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if x != nil {
		return x.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type XeroObjectDataset.
func (x *XeroObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: x.AdditionalProperties,
		Annotations:          x.Annotations,
		Description:          x.Description,
		Folder:               x.Folder,
		LinkedServiceName:    x.LinkedServiceName,
		Parameters:           x.Parameters,
		Schema:               x.Schema,
		Structure:            x.Structure,
		Type:                 x.Type,
	}
}

// XeroSource - A copy activity Xero Service source.
type XeroSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (x *XeroSource) GetType() (rv string) {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return
}

func (x *XeroSource) GetAdditionalColumns() (rv any) {
	if x != nil {
		return x.AdditionalColumns
	}
	return
}

func (x *XeroSource) GetAdditionalProperties() (rv map[string]any) {
	if x != nil {
		return x.AdditionalProperties
	}
	return
}

func (x *XeroSource) GetMaxConcurrentConnections() (rv any) {
	if x != nil {
		return x.MaxConcurrentConnections
	}
	return
}

func (x *XeroSource) GetQuery() (rv any) {
	if x != nil {
		return x.Query
	}
	return
}

func (x *XeroSource) GetQueryTimeout() (rv any) {
	if x != nil {
		return x.QueryTimeout
	}
	return
}

func (x *XeroSource) GetSourceRetryCount() (rv any) {
	if x != nil {
		return x.SourceRetryCount
	}
	return
}

func (x *XeroSource) GetSourceRetryWait() (rv any) {
	if x != nil {
		return x.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type XeroSource.
func (x *XeroSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     x.AdditionalProperties,
		MaxConcurrentConnections: x.MaxConcurrentConnections,
		SourceRetryCount:         x.SourceRetryCount,
		SourceRetryWait:          x.SourceRetryWait,
		Type:                     x.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type XeroSource.
func (x *XeroSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        x.AdditionalColumns,
		AdditionalProperties:     x.AdditionalProperties,
		MaxConcurrentConnections: x.MaxConcurrentConnections,
		QueryTimeout:             x.QueryTimeout,
		SourceRetryCount:         x.SourceRetryCount,
		SourceRetryWait:          x.SourceRetryWait,
		Type:                     x.Type,
	}
}

// ZendeskLinkedService - Linked service for Zendesk.
type ZendeskLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Zendesk linked service properties.
	TypeProperties *ZendeskLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (z *ZendeskLinkedService) GetType() (rv string) {
	if z != nil && z.Type != nil {
		return *z.Type
	}
	return
}

func (z *ZendeskLinkedService) GetTypeProperties() (rv *ZendeskLinkedServiceTypeProperties) {
	if z != nil {
		return z.TypeProperties
	}
	return
}

func (z *ZendeskLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if z != nil {
		return z.AdditionalProperties
	}
	return
}

func (z *ZendeskLinkedService) GetAnnotations() (rv []any) {
	if z != nil {
		return z.Annotations
	}
	return
}

func (z *ZendeskLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if z != nil {
		return z.ConnectVia
	}
	return
}

func (z *ZendeskLinkedService) GetDescription() (rv string) {
	if z != nil && z.Description != nil {
		return *z.Description
	}
	return
}

func (z *ZendeskLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if z != nil {
		return z.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type ZendeskLinkedService.
func (z *ZendeskLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: z.AdditionalProperties,
		Annotations:          z.Annotations,
		ConnectVia:           z.ConnectVia,
		Description:          z.Description,
		Parameters:           z.Parameters,
		Type:                 z.Type,
	}
}

// ZendeskLinkedServiceTypeProperties - Zendesk linked service type properties.
type ZendeskLinkedServiceTypeProperties struct {
	// REQUIRED; The authentication type to use.
	AuthenticationType *ZendeskAuthenticationType

	// REQUIRED; The url to connect Zendesk source. Type: string (or Expression with resultType string).
	URL any

	// The api token for the Zendesk source.
	APIToken SecretBaseClassification

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// The password of the Zendesk source.
	Password SecretBaseClassification

	// The username of the Zendesk source. Type: string (or Expression with resultType string).
	UserName any
}

func (z *ZendeskLinkedServiceTypeProperties) GetAuthenticationType() (rv *ZendeskAuthenticationType) {
	if z != nil {
		return z.AuthenticationType
	}
	return
}

func (z *ZendeskLinkedServiceTypeProperties) GetURL() (rv any) {
	if z != nil {
		return z.URL
	}
	return
}

func (z *ZendeskLinkedServiceTypeProperties) GetAPIToken() (rv SecretBaseClassification) {
	if z != nil {
		return z.APIToken
	}
	return
}

func (z *ZendeskLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if z != nil {
		return z.EncryptedCredential
	}
	return
}

func (z *ZendeskLinkedServiceTypeProperties) GetPassword() (rv SecretBaseClassification) {
	if z != nil {
		return z.Password
	}
	return
}

func (z *ZendeskLinkedServiceTypeProperties) GetUserName() (rv any) {
	if z != nil {
		return z.UserName
	}
	return
}

// ZipDeflateReadSettings - The ZipDeflate compression read settings.
type ZipDeflateReadSettings struct {
	// REQUIRED; The Compression setting type.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// Preserve the zip file name as folder path. Type: boolean (or Expression with resultType boolean).
	PreserveZipFileNameAsFolder any
}

func (z *ZipDeflateReadSettings) GetType() (rv string) {
	if z != nil && z.Type != nil {
		return *z.Type
	}
	return
}

func (z *ZipDeflateReadSettings) GetAdditionalProperties() (rv map[string]any) {
	if z != nil {
		return z.AdditionalProperties
	}
	return
}

func (z *ZipDeflateReadSettings) GetPreserveZipFileNameAsFolder() (rv any) {
	if z != nil {
		return z.PreserveZipFileNameAsFolder
	}
	return
}

// GetCompressionReadSettings implements the CompressionReadSettingsClassification interface for type ZipDeflateReadSettings.
func (z *ZipDeflateReadSettings) GetCompressionReadSettings() *CompressionReadSettings {
	return &CompressionReadSettings{
		AdditionalProperties: z.AdditionalProperties,
		Type:                 z.Type,
	}
}

// ZohoLinkedService - Zoho server linked service.
type ZohoLinkedService struct {
	// REQUIRED; Type of linked service.
	Type *string

	// REQUIRED; Zoho server linked service properties.
	TypeProperties *ZohoLinkedServiceTypeProperties

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the linked service.
	Annotations []any

	// The integration runtime reference.
	ConnectVia *IntegrationRuntimeReference

	// Linked service description.
	Description *string

	// Parameters for linked service.
	Parameters map[string]*ParameterSpecification
}

func (z *ZohoLinkedService) GetType() (rv string) {
	if z != nil && z.Type != nil {
		return *z.Type
	}
	return
}

func (z *ZohoLinkedService) GetTypeProperties() (rv *ZohoLinkedServiceTypeProperties) {
	if z != nil {
		return z.TypeProperties
	}
	return
}

func (z *ZohoLinkedService) GetAdditionalProperties() (rv map[string]any) {
	if z != nil {
		return z.AdditionalProperties
	}
	return
}

func (z *ZohoLinkedService) GetAnnotations() (rv []any) {
	if z != nil {
		return z.Annotations
	}
	return
}

func (z *ZohoLinkedService) GetConnectVia() (rv *IntegrationRuntimeReference) {
	if z != nil {
		return z.ConnectVia
	}
	return
}

func (z *ZohoLinkedService) GetDescription() (rv string) {
	if z != nil && z.Description != nil {
		return *z.Description
	}
	return
}

func (z *ZohoLinkedService) GetParameters() (rv map[string]*ParameterSpecification) {
	if z != nil {
		return z.Parameters
	}
	return
}

// GetLinkedService implements the LinkedServiceClassification interface for type ZohoLinkedService.
func (z *ZohoLinkedService) GetLinkedService() *LinkedService {
	return &LinkedService{
		AdditionalProperties: z.AdditionalProperties,
		Annotations:          z.Annotations,
		ConnectVia:           z.ConnectVia,
		Description:          z.Description,
		Parameters:           z.Parameters,
		Type:                 z.Type,
	}
}

// ZohoLinkedServiceTypeProperties - Zoho server linked service properties.
type ZohoLinkedServiceTypeProperties struct {
	// REQUIRED; The endpoint of the Zoho server. (i.e. crm.zoho.com/crm/private)
	Endpoint any

	// The access token for Zoho authentication.
	AccessToken SecretBaseClassification

	// Properties used to connect to Zoho. It is mutually exclusive with any other properties in the linked service. Type: object.
	ConnectionProperties any

	// The encrypted credential used for authentication. Credentials are encrypted using the integration runtime credential manager.
	// Type: string (or Expression with resultType string).
	EncryptedCredential any

	// Specifies whether the data source endpoints are encrypted using HTTPS. The default value is true.
	UseEncryptedEndpoints any

	// Specifies whether to require the host name in the server's certificate to match the host name of the server when connecting
	// over SSL. The default value is true.
	UseHostVerification any

	// Specifies whether to verify the identity of the server when connecting over SSL. The default value is true.
	UsePeerVerification any
}

func (z *ZohoLinkedServiceTypeProperties) GetEndpoint() (rv any) {
	if z != nil {
		return z.Endpoint
	}
	return
}

func (z *ZohoLinkedServiceTypeProperties) GetAccessToken() (rv SecretBaseClassification) {
	if z != nil {
		return z.AccessToken
	}
	return
}

func (z *ZohoLinkedServiceTypeProperties) GetConnectionProperties() (rv any) {
	if z != nil {
		return z.ConnectionProperties
	}
	return
}

func (z *ZohoLinkedServiceTypeProperties) GetEncryptedCredential() (rv any) {
	if z != nil {
		return z.EncryptedCredential
	}
	return
}

func (z *ZohoLinkedServiceTypeProperties) GetUseEncryptedEndpoints() (rv any) {
	if z != nil {
		return z.UseEncryptedEndpoints
	}
	return
}

func (z *ZohoLinkedServiceTypeProperties) GetUseHostVerification() (rv any) {
	if z != nil {
		return z.UseHostVerification
	}
	return
}

func (z *ZohoLinkedServiceTypeProperties) GetUsePeerVerification() (rv any) {
	if z != nil {
		return z.UsePeerVerification
	}
	return
}

// ZohoObjectDataset - Zoho server dataset.
type ZohoObjectDataset struct {
	// REQUIRED; Linked service reference.
	LinkedServiceName *LinkedServiceReference

	// REQUIRED; Type of dataset.
	Type *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// List of tags that can be used for describing the Dataset.
	Annotations []any

	// Dataset description.
	Description *string

	// The folder that this Dataset is in. If not specified, Dataset will appear at the root level.
	Folder *DatasetFolder

	// Parameters for dataset.
	Parameters map[string]*ParameterSpecification

	// Columns that define the physical type schema of the dataset. Type: array (or Expression with resultType array), itemType:
	// DatasetSchemaDataElement.
	Schema any

	// Columns that define the structure of the dataset. Type: array (or Expression with resultType array), itemType: DatasetDataElement.
	Structure any

	// Properties specific to this dataset type.
	TypeProperties *GenericDatasetTypeProperties
}

func (z *ZohoObjectDataset) GetLinkedServiceName() (rv *LinkedServiceReference) {
	if z != nil {
		return z.LinkedServiceName
	}
	return
}

func (z *ZohoObjectDataset) GetType() (rv string) {
	if z != nil && z.Type != nil {
		return *z.Type
	}
	return
}

func (z *ZohoObjectDataset) GetAdditionalProperties() (rv map[string]any) {
	if z != nil {
		return z.AdditionalProperties
	}
	return
}

func (z *ZohoObjectDataset) GetAnnotations() (rv []any) {
	if z != nil {
		return z.Annotations
	}
	return
}

func (z *ZohoObjectDataset) GetDescription() (rv string) {
	if z != nil && z.Description != nil {
		return *z.Description
	}
	return
}

func (z *ZohoObjectDataset) GetFolder() (rv *DatasetFolder) {
	if z != nil {
		return z.Folder
	}
	return
}

func (z *ZohoObjectDataset) GetParameters() (rv map[string]*ParameterSpecification) {
	if z != nil {
		return z.Parameters
	}
	return
}

func (z *ZohoObjectDataset) GetSchema() (rv any) {
	if z != nil {
		return z.Schema
	}
	return
}

func (z *ZohoObjectDataset) GetStructure() (rv any) {
	if z != nil {
		return z.Structure
	}
	return
}

func (z *ZohoObjectDataset) GetTypeProperties() (rv *GenericDatasetTypeProperties) {
	if z != nil {
		return z.TypeProperties
	}
	return
}

// GetDataset implements the DatasetClassification interface for type ZohoObjectDataset.
func (z *ZohoObjectDataset) GetDataset() *Dataset {
	return &Dataset{
		AdditionalProperties: z.AdditionalProperties,
		Annotations:          z.Annotations,
		Description:          z.Description,
		Folder:               z.Folder,
		LinkedServiceName:    z.LinkedServiceName,
		Parameters:           z.Parameters,
		Schema:               z.Schema,
		Structure:            z.Structure,
		Type:                 z.Type,
	}
}

// ZohoSource - A copy activity Zoho server source.
type ZohoSource struct {
	// REQUIRED; Copy source type.
	Type *string

	// Specifies the additional columns to be added to source data. Type: array of objects(AdditionalColumns) (or Expression with
	// resultType array of objects).
	AdditionalColumns any

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any

	// The maximum concurrent connection count for the source data store. Type: integer (or Expression with resultType integer).
	MaxConcurrentConnections any

	// A query to retrieve data from source. Type: string (or Expression with resultType string).
	Query any

	// Query timeout. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	QueryTimeout any

	// Source retry count. Type: integer (or Expression with resultType integer).
	SourceRetryCount any

	// Source retry wait. Type: string (or Expression with resultType string), pattern: ((\d+).)?(\d\d):(60|([0-5][0-9])):(60|([0-5][0-9])).
	SourceRetryWait any
}

func (z *ZohoSource) GetType() (rv string) {
	if z != nil && z.Type != nil {
		return *z.Type
	}
	return
}

func (z *ZohoSource) GetAdditionalColumns() (rv any) {
	if z != nil {
		return z.AdditionalColumns
	}
	return
}

func (z *ZohoSource) GetAdditionalProperties() (rv map[string]any) {
	if z != nil {
		return z.AdditionalProperties
	}
	return
}

func (z *ZohoSource) GetMaxConcurrentConnections() (rv any) {
	if z != nil {
		return z.MaxConcurrentConnections
	}
	return
}

func (z *ZohoSource) GetQuery() (rv any) {
	if z != nil {
		return z.Query
	}
	return
}

func (z *ZohoSource) GetQueryTimeout() (rv any) {
	if z != nil {
		return z.QueryTimeout
	}
	return
}

func (z *ZohoSource) GetSourceRetryCount() (rv any) {
	if z != nil {
		return z.SourceRetryCount
	}
	return
}

func (z *ZohoSource) GetSourceRetryWait() (rv any) {
	if z != nil {
		return z.SourceRetryWait
	}
	return
}

// GetCopySource implements the CopySourceClassification interface for type ZohoSource.
func (z *ZohoSource) GetCopySource() *CopySource {
	return &CopySource{
		AdditionalProperties:     z.AdditionalProperties,
		MaxConcurrentConnections: z.MaxConcurrentConnections,
		SourceRetryCount:         z.SourceRetryCount,
		SourceRetryWait:          z.SourceRetryWait,
		Type:                     z.Type,
	}
}

// GetTabularSource implements the TabularSourceClassification interface for type ZohoSource.
func (z *ZohoSource) GetTabularSource() *TabularSource {
	return &TabularSource{
		AdditionalColumns:        z.AdditionalColumns,
		AdditionalProperties:     z.AdditionalProperties,
		MaxConcurrentConnections: z.MaxConcurrentConnections,
		QueryTimeout:             z.QueryTimeout,
		SourceRetryCount:         z.SourceRetryCount,
		SourceRetryWait:          z.SourceRetryWait,
		Type:                     z.Type,
	}
}
