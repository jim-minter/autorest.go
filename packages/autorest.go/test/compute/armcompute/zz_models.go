//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armcompute

import "time"

// APIEntityReference - The API entity reference.
type APIEntityReference struct {
	// The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/…
	ID *string
}

func (a *APIEntityReference) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

// APIError - Api error.
type APIError struct {
	// The error code.
	Code *string

	// The Api error details
	Details []APIErrorBase

	// The Api inner error
	Innererror *InnerError

	// The error message.
	Message *string

	// The target of the particular error.
	Target *string
}

func (a *APIError) GetCode() (rv string) {
	if a != nil && a.Code != nil {
		return *a.Code
	}
	return
}

func (a *APIError) GetDetails() (rv []APIErrorBase) {
	if a != nil {
		return a.Details
	}
	return
}

func (a *APIError) GetInnererror() (rv *InnerError) {
	if a != nil {
		return a.Innererror
	}
	return
}

func (a *APIError) GetMessage() (rv string) {
	if a != nil && a.Message != nil {
		return *a.Message
	}
	return
}

func (a *APIError) GetTarget() (rv string) {
	if a != nil && a.Target != nil {
		return *a.Target
	}
	return
}

// APIErrorBase - Api error base.
type APIErrorBase struct {
	// The error code.
	Code *string

	// The error message.
	Message *string

	// The target of the particular error.
	Target *string
}

func (a *APIErrorBase) GetCode() (rv string) {
	if a != nil && a.Code != nil {
		return *a.Code
	}
	return
}

func (a *APIErrorBase) GetMessage() (rv string) {
	if a != nil && a.Message != nil {
		return *a.Message
	}
	return
}

func (a *APIErrorBase) GetTarget() (rv string) {
	if a != nil && a.Target != nil {
		return *a.Target
	}
	return
}

// AccessURI - A disk access SAS uri.
type AccessURI struct {
	// READ-ONLY; A SAS uri for accessing a disk.
	AccessSAS *string

	// READ-ONLY; A SAS uri for accessing a VM guest state.
	SecurityDataAccessSAS *string
}

func (a *AccessURI) GetAccessSAS() (rv string) {
	if a != nil && a.AccessSAS != nil {
		return *a.AccessSAS
	}
	return
}

func (a *AccessURI) GetSecurityDataAccessSAS() (rv string) {
	if a != nil && a.SecurityDataAccessSAS != nil {
		return *a.SecurityDataAccessSAS
	}
	return
}

// AdditionalCapabilities - Enables or disables a capability on the virtual machine or virtual machine scale set.
type AdditionalCapabilities struct {
	// The flag that enables or disables hibernation capability on the VM.
	HibernationEnabled *bool

	// The flag that enables or disables a capability to have one or more managed data disks with UltraSSDLRS storage account
	// type on the VM or VMSS. Managed disks with storage account type UltraSSDLRS can
	// be added to a virtual machine or virtual machine scale set only if this property is enabled.
	UltraSSDEnabled *bool
}

func (a *AdditionalCapabilities) GetHibernationEnabled() (rv bool) {
	if a != nil && a.HibernationEnabled != nil {
		return *a.HibernationEnabled
	}
	return
}

func (a *AdditionalCapabilities) GetUltraSSDEnabled() (rv bool) {
	if a != nil && a.UltraSSDEnabled != nil {
		return *a.UltraSSDEnabled
	}
	return
}

// AdditionalUnattendContent - Specifies additional XML formatted information that can be included in the Unattend.xml file,
// which is used by Windows Setup. Contents are defined by setting name, component name, and the pass in
// which the content is applied.
type AdditionalUnattendContent struct {
	// The component name. Currently, the only allowable value is Microsoft-Windows-Shell-Setup.
	ComponentName *string

	// Specifies the XML formatted content that is added to the unattend.xml file for the specified path and component. The XML
	// must be less than 4KB and must include the root element for the setting or
	// feature that is being inserted.
	Content *string

	// The pass name. Currently, the only allowable value is OobeSystem.
	PassName *string

	// Specifies the name of the setting to which the content applies. Possible values are: FirstLogonCommands and AutoLogon.
	SettingName *SettingNames
}

func (a *AdditionalUnattendContent) GetComponentName() (rv *string) {
	if a != nil {
		return a.ComponentName
	}
	return
}

func (a *AdditionalUnattendContent) GetContent() (rv string) {
	if a != nil && a.Content != nil {
		return *a.Content
	}
	return
}

func (a *AdditionalUnattendContent) GetPassName() (rv *string) {
	if a != nil {
		return a.PassName
	}
	return
}

func (a *AdditionalUnattendContent) GetSettingName() (rv *SettingNames) {
	if a != nil {
		return a.SettingName
	}
	return
}

// ApplicationProfile - Contains the list of gallery applications that should be made available to the VM/VMSS
type ApplicationProfile struct {
	// Specifies the gallery applications that should be made available to the VM/VMSS
	GalleryApplications []VMGalleryApplication
}

func (a *ApplicationProfile) GetGalleryApplications() (rv []VMGalleryApplication) {
	if a != nil {
		return a.GalleryApplications
	}
	return
}

// AutomaticOSUpgradePolicy - The configuration parameters used for performing automatic OS upgrade.
type AutomaticOSUpgradePolicy struct {
	// Whether OS image rollback feature should be disabled. Default value is false.
	DisableAutomaticRollback *bool

	// Indicates whether OS upgrades should automatically be applied to scale set instances in a rolling fashion when a newer
	// version of the OS image becomes available. Default value is false.
	// If this is set to true for Windows based scale sets, enableAutomaticUpdates
	// [https://docs.microsoft.com/dotnet/api/microsoft.azure.management.compute.models.windowsconfiguration.enableautomaticupdates?view=azure-dotnet]
	// is automatically set to false and cannot be set to true.
	EnableAutomaticOSUpgrade *bool
}

func (a *AutomaticOSUpgradePolicy) GetDisableAutomaticRollback() (rv bool) {
	if a != nil && a.DisableAutomaticRollback != nil {
		return *a.DisableAutomaticRollback
	}
	return
}

func (a *AutomaticOSUpgradePolicy) GetEnableAutomaticOSUpgrade() (rv bool) {
	if a != nil && a.EnableAutomaticOSUpgrade != nil {
		return *a.EnableAutomaticOSUpgrade
	}
	return
}

// AutomaticOSUpgradeProperties - Describes automatic OS upgrade properties on the image.
type AutomaticOSUpgradeProperties struct {
	// REQUIRED; Specifies whether automatic OS upgrade is supported on the image.
	AutomaticOSUpgradeSupported *bool
}

func (a *AutomaticOSUpgradeProperties) GetAutomaticOSUpgradeSupported() (rv bool) {
	if a != nil && a.AutomaticOSUpgradeSupported != nil {
		return *a.AutomaticOSUpgradeSupported
	}
	return
}

// AutomaticRepairsPolicy - Specifies the configuration parameters for automatic repairs on the virtual machine scale set.
type AutomaticRepairsPolicy struct {
	// Specifies whether automatic repairs should be enabled on the virtual machine scale set. The default value is false.
	Enabled *bool

	// The amount of time for which automatic repairs are suspended due to a state change on VM. The grace time starts after the
	// state change has completed. This helps avoid premature or accidental repairs.
	// The time duration should be specified in ISO 8601 format. The minimum allowed grace period is 10 minutes (PT10M), which
	// is also the default value. The maximum allowed grace period is 90 minutes
	// (PT90M).
	GracePeriod *string

	// Type of repair action (replace, restart, reimage) that will be used for repairing unhealthy virtual machines in the scale
	// set. Default value is replace.
	RepairAction *RepairAction
}

func (a *AutomaticRepairsPolicy) GetEnabled() (rv bool) {
	if a != nil && a.Enabled != nil {
		return *a.Enabled
	}
	return
}

func (a *AutomaticRepairsPolicy) GetGracePeriod() (rv string) {
	if a != nil && a.GracePeriod != nil {
		return *a.GracePeriod
	}
	return
}

func (a *AutomaticRepairsPolicy) GetRepairAction() (rv *RepairAction) {
	if a != nil {
		return a.RepairAction
	}
	return
}

// AvailabilitySet - Specifies information about the availability set that the virtual machine should be assigned to. Virtual
// machines specified in the same availability set are allocated to different nodes to maximize
// availability. For more information about availability sets, see Availability sets overview [https://docs.microsoft.com/azure/virtual-machines/availability-set-overview].
// For more information on Azure planned maintenance, see Maintenance and updates for Virtual Machines in Azure [https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates]
// Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability
// set.
type AvailabilitySet struct {
	// REQUIRED; Resource location
	Location *string

	// The instance view of a resource.
	Properties *AvailabilitySetProperties

	// Sku of the availability set, only name is required to be set. See AvailabilitySetSkuTypes for possible set of values. Use
	// 'Aligned' for virtual machines with managed disks and 'Classic' for virtual
	// machines with unmanaged disks. Default value is 'Classic'.
	SKU *SKU

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (a *AvailabilitySet) GetLocation() (rv string) {
	if a != nil && a.Location != nil {
		return *a.Location
	}
	return
}

func (a *AvailabilitySet) GetProperties() (rv *AvailabilitySetProperties) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *AvailabilitySet) GetSKU() (rv *SKU) {
	if a != nil {
		return a.SKU
	}
	return
}

func (a *AvailabilitySet) GetTags() (rv map[string]*string) {
	if a != nil {
		return a.Tags
	}
	return
}

func (a *AvailabilitySet) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AvailabilitySet) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AvailabilitySet) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// AvailabilitySetListResult - The List Availability Set operation response.
type AvailabilitySetListResult struct {
	// REQUIRED; The list of availability sets
	Value []AvailabilitySet

	// The URI to fetch the next page of AvailabilitySets. Call ListNext() with this URI to fetch the next page of AvailabilitySets.
	NextLink *string
}

func (a *AvailabilitySetListResult) GetValue() (rv []AvailabilitySet) {
	if a != nil {
		return a.Value
	}
	return
}

func (a *AvailabilitySetListResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

// AvailabilitySetProperties - The instance view of a resource.
type AvailabilitySetProperties struct {
	// Fault Domain count.
	PlatformFaultDomainCount *int32

	// Update Domain count.
	PlatformUpdateDomainCount *int32

	// Specifies information about the proximity placement group that the availability set should be assigned to.
	// Minimum api-version: 2018-04-01.
	ProximityPlacementGroup *SubResource

	// A list of references to all virtual machines in the availability set.
	VirtualMachines []SubResource

	// READ-ONLY; The resource status information.
	Statuses []InstanceViewStatus
}

func (a *AvailabilitySetProperties) GetPlatformFaultDomainCount() (rv int32) {
	if a != nil && a.PlatformFaultDomainCount != nil {
		return *a.PlatformFaultDomainCount
	}
	return
}

func (a *AvailabilitySetProperties) GetPlatformUpdateDomainCount() (rv int32) {
	if a != nil && a.PlatformUpdateDomainCount != nil {
		return *a.PlatformUpdateDomainCount
	}
	return
}

func (a *AvailabilitySetProperties) GetProximityPlacementGroup() (rv *SubResource) {
	if a != nil {
		return a.ProximityPlacementGroup
	}
	return
}

func (a *AvailabilitySetProperties) GetVirtualMachines() (rv []SubResource) {
	if a != nil {
		return a.VirtualMachines
	}
	return
}

func (a *AvailabilitySetProperties) GetStatuses() (rv []InstanceViewStatus) {
	if a != nil {
		return a.Statuses
	}
	return
}

// AvailabilitySetUpdate - Specifies information about the availability set that the virtual machine should be assigned to.
// Only tags may be updated.
type AvailabilitySetUpdate struct {
	// The instance view of a resource.
	Properties *AvailabilitySetProperties

	// Sku of the availability set
	SKU *SKU

	// Resource tags
	Tags map[string]*string
}

func (a *AvailabilitySetUpdate) GetProperties() (rv *AvailabilitySetProperties) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *AvailabilitySetUpdate) GetSKU() (rv *SKU) {
	if a != nil {
		return a.SKU
	}
	return
}

func (a *AvailabilitySetUpdate) GetTags() (rv map[string]*string) {
	if a != nil {
		return a.Tags
	}
	return
}

// AvailablePatchSummary - Describes the properties of an virtual machine instance view for available patch summary.
type AvailablePatchSummary struct {
	// READ-ONLY; The activity ID of the operation that produced this result. It is used to correlate across CRP and extension
	// logs.
	AssessmentActivityID *string

	// READ-ONLY; The number of critical or security patches that have been detected as available and not yet installed.
	CriticalAndSecurityPatchCount *int32

	// READ-ONLY; The errors that were encountered during execution of the operation. The details array contains the list of them.
	Error *APIError

	// READ-ONLY; The UTC timestamp when the operation began.
	LastModifiedTime *time.Time

	// READ-ONLY; The number of all available patches excluding critical and security.
	OtherPatchCount *int32

	// READ-ONLY; The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete
	// installation but the reboot has not yet occurred.
	RebootPending *bool

	// READ-ONLY; The UTC timestamp when the operation began.
	StartTime *time.Time

	// READ-ONLY; The overall success or failure status of the operation. It remains "InProgress" until the operation completes.
	// At that point it will become "Unknown", "Failed", "Succeeded", or
	// "CompletedWithWarnings."
	Status *PatchOperationStatus
}

func (a *AvailablePatchSummary) GetAssessmentActivityID() (rv string) {
	if a != nil && a.AssessmentActivityID != nil {
		return *a.AssessmentActivityID
	}
	return
}

func (a *AvailablePatchSummary) GetCriticalAndSecurityPatchCount() (rv int32) {
	if a != nil && a.CriticalAndSecurityPatchCount != nil {
		return *a.CriticalAndSecurityPatchCount
	}
	return
}

func (a *AvailablePatchSummary) GetError() (rv *APIError) {
	if a != nil {
		return a.Error
	}
	return
}

func (a *AvailablePatchSummary) GetLastModifiedTime() (rv *time.Time) {
	if a != nil {
		return a.LastModifiedTime
	}
	return
}

func (a *AvailablePatchSummary) GetOtherPatchCount() (rv int32) {
	if a != nil && a.OtherPatchCount != nil {
		return *a.OtherPatchCount
	}
	return
}

func (a *AvailablePatchSummary) GetRebootPending() (rv bool) {
	if a != nil && a.RebootPending != nil {
		return *a.RebootPending
	}
	return
}

func (a *AvailablePatchSummary) GetStartTime() (rv *time.Time) {
	if a != nil {
		return a.StartTime
	}
	return
}

func (a *AvailablePatchSummary) GetStatus() (rv *PatchOperationStatus) {
	if a != nil {
		return a.Status
	}
	return
}

// BillingProfile - Specifies the billing related details of a Azure Spot VM or VMSS.
// Minimum api-version: 2019-03-01.
type BillingProfile struct {
	// Specifies the maximum price you are willing to pay for a Azure Spot VM/VMSS. This price is in US Dollars.
	// This price will be compared with the current Azure Spot price for the VM size. Also, the prices are compared at the time
	// of create/update of Azure Spot VM/VMSS and the operation will only succeed if
	// the maxPrice is greater than the current Azure Spot price.
	// The maxPrice will also be used for evicting a Azure Spot VM/VMSS if the current Azure Spot price goes beyond the maxPrice
	// after creation of VM/VMSS.
	// Possible values are:
	// - Any decimal value greater than zero. Example: 0.01538
	// -1 – indicates default price to be up-to on-demand.
	// You can set the maxPrice to -1 to indicate that the Azure Spot VM/VMSS should not be evicted for price reasons. Also, the
	// default max price is -1 if it is not provided by you.
	// Minimum api-version: 2019-03-01.
	MaxPrice *float64
}

func (b *BillingProfile) GetMaxPrice() (rv float64) {
	if b != nil && b.MaxPrice != nil {
		return *b.MaxPrice
	}
	return
}

// BootDiagnostics - Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose
// VM status.
// You can easily view the output of your console log.
// Azure also enables you to see a screenshot of the VM from the hypervisor.
type BootDiagnostics struct {
	// Whether boot diagnostics should be enabled on the Virtual Machine.
	Enabled *bool

	// Uri of the storage account to use for placing the console output and screenshot.
	// If storageUri is not specified while enabling boot diagnostics, managed storage will be used.
	StorageURI *string
}

func (b *BootDiagnostics) GetEnabled() (rv bool) {
	if b != nil && b.Enabled != nil {
		return *b.Enabled
	}
	return
}

func (b *BootDiagnostics) GetStorageURI() (rv string) {
	if b != nil && b.StorageURI != nil {
		return *b.StorageURI
	}
	return
}

// BootDiagnosticsInstanceView - The instance view of a virtual machine boot diagnostics.
type BootDiagnosticsInstanceView struct {
	// READ-ONLY; The console screenshot blob URI.
	// NOTE: This will not be set if boot diagnostics is currently enabled with managed storage.
	ConsoleScreenshotBlobURI *string

	// READ-ONLY; The serial console log blob Uri.
	// NOTE: This will not be set if boot diagnostics is currently enabled with managed storage.
	SerialConsoleLogBlobURI *string

	// READ-ONLY; The boot diagnostics status information for the VM.
	// NOTE: It will be set only if there are errors encountered in enabling boot diagnostics.
	Status *InstanceViewStatus
}

func (b *BootDiagnosticsInstanceView) GetConsoleScreenshotBlobURI() (rv string) {
	if b != nil && b.ConsoleScreenshotBlobURI != nil {
		return *b.ConsoleScreenshotBlobURI
	}
	return
}

func (b *BootDiagnosticsInstanceView) GetSerialConsoleLogBlobURI() (rv string) {
	if b != nil && b.SerialConsoleLogBlobURI != nil {
		return *b.SerialConsoleLogBlobURI
	}
	return
}

func (b *BootDiagnosticsInstanceView) GetStatus() (rv *InstanceViewStatus) {
	if b != nil {
		return b.Status
	}
	return
}

// CapacityReservation - Specifies information about the capacity reservation.
type CapacityReservation struct {
	// REQUIRED; Resource location
	Location *string

	// REQUIRED; SKU of the resource for which capacity needs be reserved. The SKU name and capacity is required to be set. Currently
	// VM Skus with the capability called 'CapacityReservationSupported' set to true are
	// supported. Refer to List Microsoft.Compute SKUs in a region (https://docs.microsoft.com/rest/api/compute/resourceskus/list)
	// for supported values.
	SKU *SKU

	// Properties of the Capacity reservation.
	Properties *CapacityReservationProperties

	// Resource tags
	Tags map[string]*string

	// Availability Zone to use for this capacity reservation. The zone has to be single value and also should be part for the
	// list of zones specified during the capacity reservation group creation. The zone
	// can be assigned only during creation. If not provided, the reservation supports only non-zonal deployments. If provided,
	// enforces VM/VMSS using this capacity reservation to be in same zone.
	Zones []string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (c *CapacityReservation) GetLocation() (rv string) {
	if c != nil && c.Location != nil {
		return *c.Location
	}
	return
}

func (c *CapacityReservation) GetSKU() (rv *SKU) {
	if c != nil {
		return c.SKU
	}
	return
}

func (c *CapacityReservation) GetProperties() (rv *CapacityReservationProperties) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *CapacityReservation) GetTags() (rv map[string]*string) {
	if c != nil {
		return c.Tags
	}
	return
}

func (c *CapacityReservation) GetZones() (rv []string) {
	if c != nil {
		return c.Zones
	}
	return
}

func (c *CapacityReservation) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *CapacityReservation) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CapacityReservation) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// CapacityReservationGroup - Specifies information about the capacity reservation group that the capacity reservations should
// be assigned to.
// Currently, a capacity reservation can only be added to a capacity reservation group at creation time. An existing capacity
// reservation cannot be added or moved to another capacity reservation group.
type CapacityReservationGroup struct {
	// REQUIRED; Resource location
	Location *string

	// capacity reservation group Properties.
	Properties *CapacityReservationGroupProperties

	// Resource tags
	Tags map[string]*string

	// Availability Zones to use for this capacity reservation group. The zones can be assigned only during creation. If not provided,
	// the group supports only regional resources in the region. If provided,
	// enforces each capacity reservation in the group to be in one of the zones.
	Zones []string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (c *CapacityReservationGroup) GetLocation() (rv string) {
	if c != nil && c.Location != nil {
		return *c.Location
	}
	return
}

func (c *CapacityReservationGroup) GetProperties() (rv *CapacityReservationGroupProperties) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *CapacityReservationGroup) GetTags() (rv map[string]*string) {
	if c != nil {
		return c.Tags
	}
	return
}

func (c *CapacityReservationGroup) GetZones() (rv []string) {
	if c != nil {
		return c.Zones
	}
	return
}

func (c *CapacityReservationGroup) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *CapacityReservationGroup) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CapacityReservationGroup) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

type CapacityReservationGroupInstanceView struct {
	// READ-ONLY; List of instance view of the capacity reservations under the capacity reservation group.
	CapacityReservations []CapacityReservationInstanceViewWithName
}

func (c *CapacityReservationGroupInstanceView) GetCapacityReservations() (rv []CapacityReservationInstanceViewWithName) {
	if c != nil {
		return c.CapacityReservations
	}
	return
}

// CapacityReservationGroupListResult - The List capacity reservation group with resource group response.
type CapacityReservationGroupListResult struct {
	// REQUIRED; The list of capacity reservation groups
	Value []CapacityReservationGroup

	// The URI to fetch the next page of capacity reservation groups. Call ListNext() with this URI to fetch the next page of
	// capacity reservation groups.
	NextLink *string
}

func (c *CapacityReservationGroupListResult) GetValue() (rv []CapacityReservationGroup) {
	if c != nil {
		return c.Value
	}
	return
}

func (c *CapacityReservationGroupListResult) GetNextLink() (rv string) {
	if c != nil && c.NextLink != nil {
		return *c.NextLink
	}
	return
}

// CapacityReservationGroupProperties - capacity reservation group Properties.
type CapacityReservationGroupProperties struct {
	// READ-ONLY; A list of all capacity reservation resource ids that belong to capacity reservation group.
	CapacityReservations []SubResourceReadOnly

	// READ-ONLY; The capacity reservation group instance view which has the list of instance views for all the capacity reservations
	// that belong to the capacity reservation group.
	InstanceView *CapacityReservationGroupInstanceView

	// READ-ONLY; A list of references to all virtual machines associated to the capacity reservation group.
	VirtualMachinesAssociated []SubResourceReadOnly
}

func (c *CapacityReservationGroupProperties) GetCapacityReservations() (rv []SubResourceReadOnly) {
	if c != nil {
		return c.CapacityReservations
	}
	return
}

func (c *CapacityReservationGroupProperties) GetInstanceView() (rv *CapacityReservationGroupInstanceView) {
	if c != nil {
		return c.InstanceView
	}
	return
}

func (c *CapacityReservationGroupProperties) GetVirtualMachinesAssociated() (rv []SubResourceReadOnly) {
	if c != nil {
		return c.VirtualMachinesAssociated
	}
	return
}

// CapacityReservationGroupUpdate - Specifies information about the capacity reservation group. Only tags can be updated.
type CapacityReservationGroupUpdate struct {
	// capacity reservation group Properties.
	Properties *CapacityReservationGroupProperties

	// Resource tags
	Tags map[string]*string
}

func (c *CapacityReservationGroupUpdate) GetProperties() (rv *CapacityReservationGroupProperties) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *CapacityReservationGroupUpdate) GetTags() (rv map[string]*string) {
	if c != nil {
		return c.Tags
	}
	return
}

// CapacityReservationInstanceView - The instance view of a capacity reservation that provides as snapshot of the runtime
// properties of the capacity reservation that is managed by the platform and can change outside of control plane
// operations.
type CapacityReservationInstanceView struct {
	// The resource status information.
	Statuses []InstanceViewStatus

	// Unutilized capacity of the capacity reservation.
	UtilizationInfo *CapacityReservationUtilization
}

func (c *CapacityReservationInstanceView) GetStatuses() (rv []InstanceViewStatus) {
	if c != nil {
		return c.Statuses
	}
	return
}

func (c *CapacityReservationInstanceView) GetUtilizationInfo() (rv *CapacityReservationUtilization) {
	if c != nil {
		return c.UtilizationInfo
	}
	return
}

// CapacityReservationInstanceViewWithName - The instance view of a capacity reservation that includes the name of the capacity
// reservation. It is used for the response to the instance view of a capacity reservation group.
type CapacityReservationInstanceViewWithName struct {
	// The resource status information.
	Statuses []InstanceViewStatus

	// Unutilized capacity of the capacity reservation.
	UtilizationInfo *CapacityReservationUtilization

	// READ-ONLY; The name of the capacity reservation.
	Name *string
}

func (c *CapacityReservationInstanceViewWithName) GetStatuses() (rv []InstanceViewStatus) {
	if c != nil {
		return c.Statuses
	}
	return
}

func (c *CapacityReservationInstanceViewWithName) GetUtilizationInfo() (rv *CapacityReservationUtilization) {
	if c != nil {
		return c.UtilizationInfo
	}
	return
}

func (c *CapacityReservationInstanceViewWithName) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

// CapacityReservationListResult - The list capacity reservation operation response.
type CapacityReservationListResult struct {
	// REQUIRED; The list of capacity reservations
	Value []CapacityReservation

	// The URI to fetch the next page of capacity reservations. Call ListNext() with this URI to fetch the next page of capacity
	// reservations.
	NextLink *string
}

func (c *CapacityReservationListResult) GetValue() (rv []CapacityReservation) {
	if c != nil {
		return c.Value
	}
	return
}

func (c *CapacityReservationListResult) GetNextLink() (rv string) {
	if c != nil && c.NextLink != nil {
		return *c.NextLink
	}
	return
}

// CapacityReservationProfile - The parameters of a capacity reservation Profile.
type CapacityReservationProfile struct {
	// Specifies the capacity reservation group resource id that should be used for allocating the virtual machine or scaleset
	// vm instances provided enough capacity has been reserved. Please refer to
	// https://aka.ms/CapacityReservation for more details.
	CapacityReservationGroup *SubResource
}

func (c *CapacityReservationProfile) GetCapacityReservationGroup() (rv *SubResource) {
	if c != nil {
		return c.CapacityReservationGroup
	}
	return
}

// CapacityReservationProperties - Properties of the Capacity reservation.
type CapacityReservationProperties struct {
	// READ-ONLY; The Capacity reservation instance view.
	InstanceView *CapacityReservationInstanceView

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string

	// READ-ONLY; The date time when the capacity reservation was last updated.
	ProvisioningTime *time.Time

	// READ-ONLY; A unique id generated and assigned to the capacity reservation by the platform which does not change throughout
	// the lifetime of the resource.
	ReservationID *string

	// READ-ONLY; Specifies the time at which the Capacity Reservation resource was created.
	// Minimum api-version: 2021-11-01.
	TimeCreated *time.Time

	// READ-ONLY; A list of all virtual machine resource ids that are associated with the capacity reservation.
	VirtualMachinesAssociated []SubResourceReadOnly
}

func (c *CapacityReservationProperties) GetInstanceView() (rv *CapacityReservationInstanceView) {
	if c != nil {
		return c.InstanceView
	}
	return
}

func (c *CapacityReservationProperties) GetProvisioningState() (rv string) {
	if c != nil && c.ProvisioningState != nil {
		return *c.ProvisioningState
	}
	return
}

func (c *CapacityReservationProperties) GetProvisioningTime() (rv *time.Time) {
	if c != nil {
		return c.ProvisioningTime
	}
	return
}

func (c *CapacityReservationProperties) GetReservationID() (rv string) {
	if c != nil && c.ReservationID != nil {
		return *c.ReservationID
	}
	return
}

func (c *CapacityReservationProperties) GetTimeCreated() (rv *time.Time) {
	if c != nil {
		return c.TimeCreated
	}
	return
}

func (c *CapacityReservationProperties) GetVirtualMachinesAssociated() (rv []SubResourceReadOnly) {
	if c != nil {
		return c.VirtualMachinesAssociated
	}
	return
}

// CapacityReservationUpdate - Specifies information about the capacity reservation. Only tags and sku.capacity can be updated.
type CapacityReservationUpdate struct {
	// Properties of the Capacity reservation.
	Properties *CapacityReservationProperties

	// SKU of the resource for which capacity needs be reserved. The SKU name and capacity is required to be set. Currently VM
	// Skus with the capability called 'CapacityReservationSupported' set to true are
	// supported. Refer to List Microsoft.Compute SKUs in a region (https://docs.microsoft.com/rest/api/compute/resourceskus/list)
	// for supported values.
	SKU *SKU

	// Resource tags
	Tags map[string]*string
}

func (c *CapacityReservationUpdate) GetProperties() (rv *CapacityReservationProperties) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *CapacityReservationUpdate) GetSKU() (rv *SKU) {
	if c != nil {
		return c.SKU
	}
	return
}

func (c *CapacityReservationUpdate) GetTags() (rv map[string]*string) {
	if c != nil {
		return c.Tags
	}
	return
}

// CapacityReservationUtilization - Represents the capacity reservation utilization in terms of resources allocated.
type CapacityReservationUtilization struct {
	// READ-ONLY; A list of all virtual machines resource ids allocated against the capacity reservation.
	VirtualMachinesAllocated []SubResourceReadOnly
}

func (c *CapacityReservationUtilization) GetVirtualMachinesAllocated() (rv []SubResourceReadOnly) {
	if c != nil {
		return c.VirtualMachinesAllocated
	}
	return
}

// CloudService - Describes the cloud service.
type CloudService struct {
	// REQUIRED; Resource location.
	Location *string

	// Cloud service properties
	Properties *CloudServiceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (c *CloudService) GetLocation() (rv string) {
	if c != nil && c.Location != nil {
		return *c.Location
	}
	return
}

func (c *CloudService) GetProperties() (rv *CloudServiceProperties) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *CloudService) GetTags() (rv map[string]*string) {
	if c != nil {
		return c.Tags
	}
	return
}

func (c *CloudService) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *CloudService) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CloudService) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// CloudServiceExtensionProfile - Describes a cloud service extension profile.
type CloudServiceExtensionProfile struct {
	// List of extensions for the cloud service.
	Extensions []Extension
}

func (c *CloudServiceExtensionProfile) GetExtensions() (rv []Extension) {
	if c != nil {
		return c.Extensions
	}
	return
}

// CloudServiceExtensionProperties - Extension Properties.
type CloudServiceExtensionProperties struct {
	// Explicitly specify whether platform can automatically upgrade typeHandlerVersion to higher minor versions when they become
	// available.
	AutoUpgradeMinorVersion *bool

	// Tag to force apply the provided public and protected settings. Changing the tag value allows for re-running the extension
	// without changing any of the public or protected settings. If forceUpdateTag is
	// not changed, updates to public or protected settings would still be applied by the handler. If neither forceUpdateTag nor
	// any of public or protected settings change, extension would flow to the role
	// instance with the same sequence-number, and it is up to handler implementation whether to re-run it or not
	ForceUpdateTag *string

	// Protected settings for the extension which are encrypted before sent to the role instance.
	ProtectedSettings             *string
	ProtectedSettingsFromKeyVault *CloudServiceVaultAndSecretReference

	// The name of the extension handler publisher.
	Publisher *string

	// Optional list of roles to apply this extension. If property is not specified or '*' is specified, extension is applied
	// to all roles in the cloud service.
	RolesAppliedTo []string

	// Public settings for the extension. For JSON extensions, this is the JSON settings for the extension. For XML Extension
	// (like RDP), this is the XML setting for the extension.
	Settings *string

	// Specifies the type of the extension.
	Type *string

	// Specifies the version of the extension. Specifies the version of the extension. If this element is not specified or an
	// asterisk (*) is used as the value, the latest version of the extension is used.
	// If the value is specified with a major version number and an asterisk as the minor version number (X.), the latest minor
	// version of the specified major version is selected. If a major version number
	// and a minor version number are specified (X.Y), the specific extension version is selected. If a version is specified,
	// an auto-upgrade is performed on the role instance.
	TypeHandlerVersion *string

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string
}

func (c *CloudServiceExtensionProperties) GetAutoUpgradeMinorVersion() (rv bool) {
	if c != nil && c.AutoUpgradeMinorVersion != nil {
		return *c.AutoUpgradeMinorVersion
	}
	return
}

func (c *CloudServiceExtensionProperties) GetForceUpdateTag() (rv string) {
	if c != nil && c.ForceUpdateTag != nil {
		return *c.ForceUpdateTag
	}
	return
}

func (c *CloudServiceExtensionProperties) GetProtectedSettings() (rv string) {
	if c != nil && c.ProtectedSettings != nil {
		return *c.ProtectedSettings
	}
	return
}

func (c *CloudServiceExtensionProperties) GetProtectedSettingsFromKeyVault() (rv *CloudServiceVaultAndSecretReference) {
	if c != nil {
		return c.ProtectedSettingsFromKeyVault
	}
	return
}

func (c *CloudServiceExtensionProperties) GetPublisher() (rv string) {
	if c != nil && c.Publisher != nil {
		return *c.Publisher
	}
	return
}

func (c *CloudServiceExtensionProperties) GetRolesAppliedTo() (rv []string) {
	if c != nil {
		return c.RolesAppliedTo
	}
	return
}

func (c *CloudServiceExtensionProperties) GetSettings() (rv string) {
	if c != nil && c.Settings != nil {
		return *c.Settings
	}
	return
}

func (c *CloudServiceExtensionProperties) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

func (c *CloudServiceExtensionProperties) GetTypeHandlerVersion() (rv string) {
	if c != nil && c.TypeHandlerVersion != nil {
		return *c.TypeHandlerVersion
	}
	return
}

func (c *CloudServiceExtensionProperties) GetProvisioningState() (rv string) {
	if c != nil && c.ProvisioningState != nil {
		return *c.ProvisioningState
	}
	return
}

// CloudServiceInstanceView - InstanceView of CloudService as a whole
type CloudServiceInstanceView struct {
	// Instance view statuses.
	RoleInstance *InstanceViewStatusesSummary

	// READ-ONLY; Specifies a list of unique identifiers generated internally for the cloud service.
	// NOTE: If you are using Azure Diagnostics extension, this property can be used as 'DeploymentId' for querying details.
	PrivateIDs []string

	// READ-ONLY; The version of the SDK that was used to generate the package for the cloud service.
	SdkVersion *string

	// READ-ONLY
	Statuses []ResourceInstanceViewStatus
}

func (c *CloudServiceInstanceView) GetRoleInstance() (rv *InstanceViewStatusesSummary) {
	if c != nil {
		return c.RoleInstance
	}
	return
}

func (c *CloudServiceInstanceView) GetPrivateIDs() (rv []string) {
	if c != nil {
		return c.PrivateIDs
	}
	return
}

func (c *CloudServiceInstanceView) GetSdkVersion() (rv string) {
	if c != nil && c.SdkVersion != nil {
		return *c.SdkVersion
	}
	return
}

func (c *CloudServiceInstanceView) GetStatuses() (rv []ResourceInstanceViewStatus) {
	if c != nil {
		return c.Statuses
	}
	return
}

type CloudServiceListResult struct {
	// REQUIRED
	Value    []CloudService
	NextLink *string
}

func (c *CloudServiceListResult) GetValue() (rv []CloudService) {
	if c != nil {
		return c.Value
	}
	return
}

func (c *CloudServiceListResult) GetNextLink() (rv string) {
	if c != nil && c.NextLink != nil {
		return *c.NextLink
	}
	return
}

// CloudServiceNetworkProfile - Network Profile for the cloud service.
type CloudServiceNetworkProfile struct {
	// List of Load balancer configurations. Cloud service can have up to two load balancer configurations, corresponding to a
	// Public Load Balancer and an Internal Load Balancer.
	LoadBalancerConfigurations []LoadBalancerConfiguration

	// The id reference of the cloud service containing the target IP with which the subject cloud service can perform a swap.
	// This property cannot be updated once it is set. The swappable cloud service
	// referred by this id must be present otherwise an error will be thrown.
	SwappableCloudService *SubResource
}

func (c *CloudServiceNetworkProfile) GetLoadBalancerConfigurations() (rv []LoadBalancerConfiguration) {
	if c != nil {
		return c.LoadBalancerConfigurations
	}
	return
}

func (c *CloudServiceNetworkProfile) GetSwappableCloudService() (rv *SubResource) {
	if c != nil {
		return c.SwappableCloudService
	}
	return
}

// CloudServiceOsProfile - Describes the OS profile for the cloud service.
type CloudServiceOsProfile struct {
	// Specifies set of certificates that should be installed onto the role instances.
	Secrets []CloudServiceVaultSecretGroup
}

func (c *CloudServiceOsProfile) GetSecrets() (rv []CloudServiceVaultSecretGroup) {
	if c != nil {
		return c.Secrets
	}
	return
}

// CloudServiceProperties - Cloud service properties
type CloudServiceProperties struct {
	// (Optional) Indicates whether the role sku properties (roleProfile.roles.sku) specified in the model/template should override
	// the role instance count and vm size specified in the .cscfg and .csdef
	// respectively. The default value is false.
	AllowModelOverride *bool

	// Specifies the XML service configuration (.cscfg) for the cloud service.
	Configuration *string

	// Specifies a URL that refers to the location of the service configuration in the Blob service. The service package URL can
	// be Shared Access Signature (SAS) URI from any storage account. This is a
	// write-only property and is not returned in GET calls.
	ConfigurationURL *string

	// Describes a cloud service extension profile.
	ExtensionProfile *CloudServiceExtensionProfile

	// Network Profile for the cloud service.
	NetworkProfile *CloudServiceNetworkProfile

	// Describes the OS profile for the cloud service.
	OSProfile *CloudServiceOsProfile

	// Specifies a URL that refers to the location of the service package in the Blob service. The service package URL can be
	// Shared Access Signature (SAS) URI from any storage account. This is a write-only
	// property and is not returned in GET calls.
	PackageURL *string

	// Describes the role profile for the cloud service.
	RoleProfile *CloudServiceRoleProfile

	// (Optional) Indicates whether to start the cloud service immediately after it is created. The default value is true. If
	// false, the service model is still deployed, but the code is not run immediately.
	// Instead, the service is PoweredOff until you call Start, at which time the service will be started. A deployed service
	// still incurs charges, even if it is poweredoff.
	StartCloudService *bool

	// Update mode for the cloud service. Role instances are allocated to update domains when the service is deployed. Updates
	// can be initiated manually in each update domain or initiated automatically in
	// all update domains. Possible Values are
	// Auto
	// Manual
	// Simultaneous
	// If not specified, the default value is Auto. If set to Manual, PUT UpdateDomain must be called to apply the update. If
	// set to Auto, the update is automatically applied to each update domain in
	// sequence.
	UpgradeMode *CloudServiceUpgradeMode

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string

	// READ-ONLY; The unique identifier for the cloud service.
	UniqueID *string
}

func (c *CloudServiceProperties) GetAllowModelOverride() (rv bool) {
	if c != nil && c.AllowModelOverride != nil {
		return *c.AllowModelOverride
	}
	return
}

func (c *CloudServiceProperties) GetConfiguration() (rv string) {
	if c != nil && c.Configuration != nil {
		return *c.Configuration
	}
	return
}

func (c *CloudServiceProperties) GetConfigurationURL() (rv string) {
	if c != nil && c.ConfigurationURL != nil {
		return *c.ConfigurationURL
	}
	return
}

func (c *CloudServiceProperties) GetExtensionProfile() (rv *CloudServiceExtensionProfile) {
	if c != nil {
		return c.ExtensionProfile
	}
	return
}

func (c *CloudServiceProperties) GetNetworkProfile() (rv *CloudServiceNetworkProfile) {
	if c != nil {
		return c.NetworkProfile
	}
	return
}

func (c *CloudServiceProperties) GetOSProfile() (rv *CloudServiceOsProfile) {
	if c != nil {
		return c.OSProfile
	}
	return
}

func (c *CloudServiceProperties) GetPackageURL() (rv string) {
	if c != nil && c.PackageURL != nil {
		return *c.PackageURL
	}
	return
}

func (c *CloudServiceProperties) GetRoleProfile() (rv *CloudServiceRoleProfile) {
	if c != nil {
		return c.RoleProfile
	}
	return
}

func (c *CloudServiceProperties) GetStartCloudService() (rv bool) {
	if c != nil && c.StartCloudService != nil {
		return *c.StartCloudService
	}
	return
}

func (c *CloudServiceProperties) GetUpgradeMode() (rv *CloudServiceUpgradeMode) {
	if c != nil {
		return c.UpgradeMode
	}
	return
}

func (c *CloudServiceProperties) GetProvisioningState() (rv string) {
	if c != nil && c.ProvisioningState != nil {
		return *c.ProvisioningState
	}
	return
}

func (c *CloudServiceProperties) GetUniqueID() (rv string) {
	if c != nil && c.UniqueID != nil {
		return *c.UniqueID
	}
	return
}

// CloudServiceRole - Describes a role of the cloud service.
type CloudServiceRole struct {
	Properties *CloudServiceRoleProperties

	// Describes the cloud service role sku.
	SKU *CloudServiceRoleSKU

	// READ-ONLY; Resource id
	ID *string

	// READ-ONLY; Resource location
	Location *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (c *CloudServiceRole) GetProperties() (rv *CloudServiceRoleProperties) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *CloudServiceRole) GetSKU() (rv *CloudServiceRoleSKU) {
	if c != nil {
		return c.SKU
	}
	return
}

func (c *CloudServiceRole) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *CloudServiceRole) GetLocation() (rv string) {
	if c != nil && c.Location != nil {
		return *c.Location
	}
	return
}

func (c *CloudServiceRole) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CloudServiceRole) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

type CloudServiceRoleListResult struct {
	// REQUIRED
	Value    []CloudServiceRole
	NextLink *string
}

func (c *CloudServiceRoleListResult) GetValue() (rv []CloudServiceRole) {
	if c != nil {
		return c.Value
	}
	return
}

func (c *CloudServiceRoleListResult) GetNextLink() (rv string) {
	if c != nil && c.NextLink != nil {
		return *c.NextLink
	}
	return
}

// CloudServiceRoleProfile - Describes the role profile for the cloud service.
type CloudServiceRoleProfile struct {
	// List of roles for the cloud service.
	Roles []CloudServiceRoleProfileProperties
}

func (c *CloudServiceRoleProfile) GetRoles() (rv []CloudServiceRoleProfileProperties) {
	if c != nil {
		return c.Roles
	}
	return
}

// CloudServiceRoleProfileProperties - Describes the role properties.
type CloudServiceRoleProfileProperties struct {
	// Resource name.
	Name *string

	// Describes the cloud service role sku.
	SKU *CloudServiceRoleSKU
}

func (c *CloudServiceRoleProfileProperties) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CloudServiceRoleProfileProperties) GetSKU() (rv *CloudServiceRoleSKU) {
	if c != nil {
		return c.SKU
	}
	return
}

type CloudServiceRoleProperties struct {
	// READ-ONLY; Specifies the ID which uniquely identifies a cloud service role.
	UniqueID *string
}

func (c *CloudServiceRoleProperties) GetUniqueID() (rv string) {
	if c != nil && c.UniqueID != nil {
		return *c.UniqueID
	}
	return
}

// CloudServiceRoleSKU - Describes the cloud service role sku.
type CloudServiceRoleSKU struct {
	// Specifies the number of role instances in the cloud service.
	Capacity *int64

	// The sku name. NOTE: If the new SKU is not supported on the hardware the cloud service is currently on, you need to delete
	// and recreate the cloud service or move back to the old sku.
	Name *string

	// Specifies the tier of the cloud service. Possible Values are
	// Standard
	// Basic
	Tier *string
}

func (c *CloudServiceRoleSKU) GetCapacity() (rv int64) {
	if c != nil && c.Capacity != nil {
		return *c.Capacity
	}
	return
}

func (c *CloudServiceRoleSKU) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CloudServiceRoleSKU) GetTier() (rv string) {
	if c != nil && c.Tier != nil {
		return *c.Tier
	}
	return
}

type CloudServiceUpdate struct {
	// Resource tags
	Tags map[string]*string
}

func (c *CloudServiceUpdate) GetTags() (rv map[string]*string) {
	if c != nil {
		return c.Tags
	}
	return
}

type CloudServiceVaultAndSecretReference struct {
	SecretURL   *string
	SourceVault *SubResource
}

func (c *CloudServiceVaultAndSecretReference) GetSecretURL() (rv string) {
	if c != nil && c.SecretURL != nil {
		return *c.SecretURL
	}
	return
}

func (c *CloudServiceVaultAndSecretReference) GetSourceVault() (rv *SubResource) {
	if c != nil {
		return c.SourceVault
	}
	return
}

// CloudServiceVaultCertificate - Describes a single certificate reference in a Key Vault, and where the certificate should
// reside on the role instance.
type CloudServiceVaultCertificate struct {
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret.
	CertificateURL *string
}

func (c *CloudServiceVaultCertificate) GetCertificateURL() (rv string) {
	if c != nil && c.CertificateURL != nil {
		return *c.CertificateURL
	}
	return
}

// CloudServiceVaultSecretGroup - Describes a set of certificates which are all in the same Key Vault.
type CloudServiceVaultSecretGroup struct {
	// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
	SourceVault *SubResource

	// The list of key vault references in SourceVault which contain certificates.
	VaultCertificates []CloudServiceVaultCertificate
}

func (c *CloudServiceVaultSecretGroup) GetSourceVault() (rv *SubResource) {
	if c != nil {
		return c.SourceVault
	}
	return
}

func (c *CloudServiceVaultSecretGroup) GetVaultCertificates() (rv []CloudServiceVaultCertificate) {
	if c != nil {
		return c.VaultCertificates
	}
	return
}

// CommunityGallery - Specifies information about the Community Gallery that you want to create or update.
type CommunityGallery struct {
	// The identifier information of community gallery.
	Identifier *CommunityGalleryIdentifier

	// READ-ONLY; Resource location
	Location *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (c *CommunityGallery) GetIdentifier() (rv *CommunityGalleryIdentifier) {
	if c != nil {
		return c.Identifier
	}
	return
}

func (c *CommunityGallery) GetLocation() (rv string) {
	if c != nil && c.Location != nil {
		return *c.Location
	}
	return
}

func (c *CommunityGallery) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CommunityGallery) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// CommunityGalleryIdentifier - The identifier information of community gallery.
type CommunityGalleryIdentifier struct {
	// The unique id of this community gallery.
	UniqueID *string
}

func (c *CommunityGalleryIdentifier) GetUniqueID() (rv string) {
	if c != nil && c.UniqueID != nil {
		return *c.UniqueID
	}
	return
}

// CommunityGalleryImage - Specifies information about the gallery image definition that you want to create or update.
type CommunityGalleryImage struct {
	// The identifier information of community gallery.
	Identifier *CommunityGalleryIdentifier

	// Describes the properties of a gallery image definition.
	Properties *CommunityGalleryImageProperties

	// READ-ONLY; Resource location
	Location *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (c *CommunityGalleryImage) GetIdentifier() (rv *CommunityGalleryIdentifier) {
	if c != nil {
		return c.Identifier
	}
	return
}

func (c *CommunityGalleryImage) GetProperties() (rv *CommunityGalleryImageProperties) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *CommunityGalleryImage) GetLocation() (rv string) {
	if c != nil && c.Location != nil {
		return *c.Location
	}
	return
}

func (c *CommunityGalleryImage) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CommunityGalleryImage) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// CommunityGalleryImageProperties - Describes the properties of a gallery image definition.
type CommunityGalleryImageProperties struct {
	// REQUIRED; This is the gallery image definition identifier.
	Identifier *GalleryImageIdentifier

	// REQUIRED; This property allows the user to specify whether the virtual machines created under this image are 'Generalized'
	// or 'Specialized'.
	OSState *OperatingSystemStateTypes

	// REQUIRED; This property allows you to specify the type of the OS that is included in the disk when creating a VM from a
	// managed image.
	// Possible values are:
	// Windows
	// Linux
	OSType *OperatingSystemTypes

	// Describes the disallowed disk types.
	Disallowed *Disallowed

	// The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property
	// is updatable.
	EndOfLifeDate *time.Time

	// A list of gallery image features.
	Features []GalleryImageFeature

	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *HyperVGeneration

	// Describes the gallery image definition purchase plan. This is used by marketplace images.
	PurchasePlan *ImagePurchasePlan

	// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
	Recommended *RecommendedMachineConfiguration
}

func (c *CommunityGalleryImageProperties) GetIdentifier() (rv *GalleryImageIdentifier) {
	if c != nil {
		return c.Identifier
	}
	return
}

func (c *CommunityGalleryImageProperties) GetOSState() (rv *OperatingSystemStateTypes) {
	if c != nil {
		return c.OSState
	}
	return
}

func (c *CommunityGalleryImageProperties) GetOSType() (rv *OperatingSystemTypes) {
	if c != nil {
		return c.OSType
	}
	return
}

func (c *CommunityGalleryImageProperties) GetDisallowed() (rv *Disallowed) {
	if c != nil {
		return c.Disallowed
	}
	return
}

func (c *CommunityGalleryImageProperties) GetEndOfLifeDate() (rv *time.Time) {
	if c != nil {
		return c.EndOfLifeDate
	}
	return
}

func (c *CommunityGalleryImageProperties) GetFeatures() (rv []GalleryImageFeature) {
	if c != nil {
		return c.Features
	}
	return
}

func (c *CommunityGalleryImageProperties) GetHyperVGeneration() (rv *HyperVGeneration) {
	if c != nil {
		return c.HyperVGeneration
	}
	return
}

func (c *CommunityGalleryImageProperties) GetPurchasePlan() (rv *ImagePurchasePlan) {
	if c != nil {
		return c.PurchasePlan
	}
	return
}

func (c *CommunityGalleryImageProperties) GetRecommended() (rv *RecommendedMachineConfiguration) {
	if c != nil {
		return c.Recommended
	}
	return
}

// CommunityGalleryImageVersion - Specifies information about the gallery image version that you want to create or update.
type CommunityGalleryImageVersion struct {
	// The identifier information of community gallery.
	Identifier *CommunityGalleryIdentifier

	// Describes the properties of a gallery image version.
	Properties *CommunityGalleryImageVersionProperties

	// READ-ONLY; Resource location
	Location *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (c *CommunityGalleryImageVersion) GetIdentifier() (rv *CommunityGalleryIdentifier) {
	if c != nil {
		return c.Identifier
	}
	return
}

func (c *CommunityGalleryImageVersion) GetProperties() (rv *CommunityGalleryImageVersionProperties) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *CommunityGalleryImageVersion) GetLocation() (rv string) {
	if c != nil && c.Location != nil {
		return *c.Location
	}
	return
}

func (c *CommunityGalleryImageVersion) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CommunityGalleryImageVersion) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// CommunityGalleryImageVersionProperties - Describes the properties of a gallery image version.
type CommunityGalleryImageVersionProperties struct {
	// The end of life date of the gallery image version Definition. This property can be used for decommissioning purposes. This
	// property is updatable.
	EndOfLifeDate *time.Time

	// The published date of the gallery image version Definition. This property can be used for decommissioning purposes. This
	// property is updatable.
	PublishedDate *time.Time
}

func (c *CommunityGalleryImageVersionProperties) GetEndOfLifeDate() (rv *time.Time) {
	if c != nil {
		return c.EndOfLifeDate
	}
	return
}

func (c *CommunityGalleryImageVersionProperties) GetPublishedDate() (rv *time.Time) {
	if c != nil {
		return c.PublishedDate
	}
	return
}

// CommunityGalleryInfo - Information of community gallery if current gallery is shared to community
type CommunityGalleryInfo struct {
	// Community gallery publisher eula
	Eula *string

	// Community gallery public name prefix
	PublicNamePrefix *string

	// Community gallery publisher contact email
	PublisherContact *string

	// Community gallery publisher uri
	PublisherURI *string

	// READ-ONLY; Contains info about whether community gallery sharing is enabled.
	CommunityGalleryEnabled *bool

	// READ-ONLY; Community gallery public name list.
	PublicNames []string
}

func (c *CommunityGalleryInfo) GetEula() (rv string) {
	if c != nil && c.Eula != nil {
		return *c.Eula
	}
	return
}

func (c *CommunityGalleryInfo) GetPublicNamePrefix() (rv string) {
	if c != nil && c.PublicNamePrefix != nil {
		return *c.PublicNamePrefix
	}
	return
}

func (c *CommunityGalleryInfo) GetPublisherContact() (rv string) {
	if c != nil && c.PublisherContact != nil {
		return *c.PublisherContact
	}
	return
}

func (c *CommunityGalleryInfo) GetPublisherURI() (rv string) {
	if c != nil && c.PublisherURI != nil {
		return *c.PublisherURI
	}
	return
}

func (c *CommunityGalleryInfo) GetCommunityGalleryEnabled() (rv bool) {
	if c != nil && c.CommunityGalleryEnabled != nil {
		return *c.CommunityGalleryEnabled
	}
	return
}

func (c *CommunityGalleryInfo) GetPublicNames() (rv []string) {
	if c != nil {
		return c.PublicNames
	}
	return
}

// CreationData - Data used when creating a disk.
type CreationData struct {
	// REQUIRED; This enumerates the possible sources of a disk's creation.
	CreateOption *DiskCreateOption

	// Required if creating from a Gallery Image. The id of the ImageDiskReference will be the ARM id of the shared galley image
	// version from which to create a disk.
	GalleryImageReference *ImageDiskReference

	// Disk source information.
	ImageReference *ImageDiskReference

	// Logical sector size in bytes for Ultra disks. Supported values are 512 ad 4096. 4096 is the default.
	LogicalSectorSize *int32

	// If createOption is ImportSecure, this is the URI of a blob to be imported into VM guest state.
	SecurityDataURI *string

	// If createOption is Copy, this is the ARM id of the source snapshot or disk.
	SourceResourceID *string

	// If createOption is Import, this is the URI of a blob to be imported into a managed disk.
	SourceURI *string

	// Required if createOption is Import. The Azure Resource Manager identifier of the storage account containing the blob to
	// import as a disk.
	StorageAccountID *string

	// If createOption is Upload, this is the size of the contents of the upload including the VHD footer. This value should be
	// between 20972032 (20 MiB + 512 bytes for the VHD footer) and 35183298347520
	// bytes (32 TiB + 512 bytes for the VHD footer).
	UploadSizeBytes *int64

	// READ-ONLY; If this field is set, this is the unique id identifying the source of this resource.
	SourceUniqueID *string
}

func (c *CreationData) GetCreateOption() (rv *DiskCreateOption) {
	if c != nil {
		return c.CreateOption
	}
	return
}

func (c *CreationData) GetGalleryImageReference() (rv *ImageDiskReference) {
	if c != nil {
		return c.GalleryImageReference
	}
	return
}

func (c *CreationData) GetImageReference() (rv *ImageDiskReference) {
	if c != nil {
		return c.ImageReference
	}
	return
}

func (c *CreationData) GetLogicalSectorSize() (rv int32) {
	if c != nil && c.LogicalSectorSize != nil {
		return *c.LogicalSectorSize
	}
	return
}

func (c *CreationData) GetSecurityDataURI() (rv string) {
	if c != nil && c.SecurityDataURI != nil {
		return *c.SecurityDataURI
	}
	return
}

func (c *CreationData) GetSourceResourceID() (rv string) {
	if c != nil && c.SourceResourceID != nil {
		return *c.SourceResourceID
	}
	return
}

func (c *CreationData) GetSourceURI() (rv string) {
	if c != nil && c.SourceURI != nil {
		return *c.SourceURI
	}
	return
}

func (c *CreationData) GetStorageAccountID() (rv string) {
	if c != nil && c.StorageAccountID != nil {
		return *c.StorageAccountID
	}
	return
}

func (c *CreationData) GetUploadSizeBytes() (rv int64) {
	if c != nil && c.UploadSizeBytes != nil {
		return *c.UploadSizeBytes
	}
	return
}

func (c *CreationData) GetSourceUniqueID() (rv string) {
	if c != nil && c.SourceUniqueID != nil {
		return *c.SourceUniqueID
	}
	return
}

// DataDisk - Describes a data disk.
type DataDisk struct {
	// REQUIRED; Specifies how the virtual machine should be created.
	// Possible values are:
	// Attach \u2013 This value is used when you are using a specialized disk to create the virtual machine.
	// FromImage \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform
	// image, you also use the imageReference element described above. If you are
	// using a marketplace image, you also use the plan element previously described.
	CreateOption *DiskCreateOptionTypes

	// REQUIRED; Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and
	// therefore must be unique for each data disk attached to a VM.
	Lun *int32

	// Specifies the caching requirements.
	// Possible values are:
	// None
	// ReadOnly
	// ReadWrite
	// Default: None for Standard storage. ReadOnly for Premium storage
	Caching *CachingTypes

	// Specifies whether data disk should be deleted or detached upon VM deletion.
	// Possible values:
	// Delete If this value is used, the data disk is deleted when VM is deleted.
	// Detach If this value is used, the data disk is retained after VM is deleted.
	// The default value is set to detach
	DeleteOption *DiskDeleteOptionTypes

	// Specifies the detach behavior to be used while detaching a disk or which is already in the process of detachment from the
	// virtual machine. Supported values: ForceDetach.
	// detachOption: ForceDetach is applicable only for managed data disks. If a previous detachment attempt of the data disk
	// did not complete due to an unexpected failure from the virtual machine and the
	// disk is still not released then use force-detach as a last resort option to detach the disk forcibly from the VM. All writes
	// might not have been flushed when using this detach behavior.
	// This feature is still in preview mode and is not supported for VirtualMachineScaleSet. To force-detach a data disk update
	// toBeDetached to 'true' along with setting detachOption: 'ForceDetach'.
	DetachOption *DiskDetachOptionTypes

	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a
	// virtual machine image.
	// This value cannot be larger than 1023 GB
	DiskSizeGB *int32

	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine.
	// If SourceImage is provided, the destination virtual hard drive must not
	// exist.
	Image *VirtualHardDisk

	// The managed disk parameters.
	ManagedDisk *ManagedDiskParameters

	// The disk name.
	Name *string

	// Specifies whether the data disk is in process of detachment from the VirtualMachine/VirtualMachineScaleset
	ToBeDetached *bool

	// The virtual hard disk.
	Vhd *VirtualHardDisk

	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool

	// READ-ONLY; Specifies the Read-Write IOPS for the managed disk when StorageAccountType is UltraSSD_LRS. Returned only for
	// VirtualMachine ScaleSet VM disks. Can be updated only via updates to the VirtualMachine
	// Scale Set.
	DiskIOPSReadWrite *int64

	// READ-ONLY; Specifies the bandwidth in MB per second for the managed disk when StorageAccountType is UltraSSD_LRS. Returned
	// only for VirtualMachine ScaleSet VM disks. Can be updated only via updates to the
	// VirtualMachine Scale Set.
	DiskMBpsReadWrite *int64
}

func (d *DataDisk) GetCreateOption() (rv *DiskCreateOptionTypes) {
	if d != nil {
		return d.CreateOption
	}
	return
}

func (d *DataDisk) GetLun() (rv int32) {
	if d != nil && d.Lun != nil {
		return *d.Lun
	}
	return
}

func (d *DataDisk) GetCaching() (rv *CachingTypes) {
	if d != nil {
		return d.Caching
	}
	return
}

func (d *DataDisk) GetDeleteOption() (rv *DiskDeleteOptionTypes) {
	if d != nil {
		return d.DeleteOption
	}
	return
}

func (d *DataDisk) GetDetachOption() (rv *DiskDetachOptionTypes) {
	if d != nil {
		return d.DetachOption
	}
	return
}

func (d *DataDisk) GetDiskSizeGB() (rv int32) {
	if d != nil && d.DiskSizeGB != nil {
		return *d.DiskSizeGB
	}
	return
}

func (d *DataDisk) GetImage() (rv *VirtualHardDisk) {
	if d != nil {
		return d.Image
	}
	return
}

func (d *DataDisk) GetManagedDisk() (rv *ManagedDiskParameters) {
	if d != nil {
		return d.ManagedDisk
	}
	return
}

func (d *DataDisk) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DataDisk) GetToBeDetached() (rv bool) {
	if d != nil && d.ToBeDetached != nil {
		return *d.ToBeDetached
	}
	return
}

func (d *DataDisk) GetVhd() (rv *VirtualHardDisk) {
	if d != nil {
		return d.Vhd
	}
	return
}

func (d *DataDisk) GetWriteAcceleratorEnabled() (rv bool) {
	if d != nil && d.WriteAcceleratorEnabled != nil {
		return *d.WriteAcceleratorEnabled
	}
	return
}

func (d *DataDisk) GetDiskIOPSReadWrite() (rv int64) {
	if d != nil && d.DiskIOPSReadWrite != nil {
		return *d.DiskIOPSReadWrite
	}
	return
}

func (d *DataDisk) GetDiskMBpsReadWrite() (rv int64) {
	if d != nil && d.DiskMBpsReadWrite != nil {
		return *d.DiskMBpsReadWrite
	}
	return
}

// DataDiskImage - Contains the data disk images information.
type DataDiskImage struct {
	// READ-ONLY; Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM
	// and therefore must be unique for each data disk attached to a VM.
	Lun *int32
}

func (d *DataDiskImage) GetLun() (rv int32) {
	if d != nil && d.Lun != nil {
		return *d.Lun
	}
	return
}

// DataDiskImageEncryption - Contains encryption settings for a data disk image.
type DataDiskImageEncryption struct {
	// REQUIRED; This property specifies the logical unit number of the data disk. This value is used to identify data disks within
	// the Virtual Machine and therefore must be unique for each data disk attached to the
	// Virtual Machine.
	Lun *int32

	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetID *string
}

func (d *DataDiskImageEncryption) GetLun() (rv int32) {
	if d != nil && d.Lun != nil {
		return *d.Lun
	}
	return
}

func (d *DataDiskImageEncryption) GetDiskEncryptionSetID() (rv string) {
	if d != nil && d.DiskEncryptionSetID != nil {
		return *d.DiskEncryptionSetID
	}
	return
}

// DedicatedHost - Specifies information about the Dedicated host.
type DedicatedHost struct {
	// REQUIRED; Resource location
	Location *string

	// REQUIRED; SKU of the dedicated host for Hardware Generation and VM family. Only name is required to be set. List Microsoft.Compute
	// SKUs for a list of possible values.
	SKU *SKU

	// Properties of the dedicated host.
	Properties *DedicatedHostProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (d *DedicatedHost) GetLocation() (rv string) {
	if d != nil && d.Location != nil {
		return *d.Location
	}
	return
}

func (d *DedicatedHost) GetSKU() (rv *SKU) {
	if d != nil {
		return d.SKU
	}
	return
}

func (d *DedicatedHost) GetProperties() (rv *DedicatedHostProperties) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DedicatedHost) GetTags() (rv map[string]*string) {
	if d != nil {
		return d.Tags
	}
	return
}

func (d *DedicatedHost) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *DedicatedHost) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DedicatedHost) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

// DedicatedHostAllocatableVM - Represents the dedicated host unutilized capacity in terms of a specific VM size.
type DedicatedHostAllocatableVM struct {
	// Maximum number of VMs of size vmSize that can fit in the dedicated host's remaining capacity.
	Count *float64

	// VM size in terms of which the unutilized capacity is represented.
	VMSize *string
}

func (d *DedicatedHostAllocatableVM) GetCount() (rv float64) {
	if d != nil && d.Count != nil {
		return *d.Count
	}
	return
}

func (d *DedicatedHostAllocatableVM) GetVMSize() (rv string) {
	if d != nil && d.VMSize != nil {
		return *d.VMSize
	}
	return
}

// DedicatedHostAvailableCapacity - Dedicated host unutilized capacity.
type DedicatedHostAvailableCapacity struct {
	// The unutilized capacity of the dedicated host represented in terms of each VM size that is allowed to be deployed to the
	// dedicated host.
	AllocatableVMs []DedicatedHostAllocatableVM
}

func (d *DedicatedHostAvailableCapacity) GetAllocatableVMs() (rv []DedicatedHostAllocatableVM) {
	if d != nil {
		return d.AllocatableVMs
	}
	return
}

// DedicatedHostGroup - Specifies information about the dedicated host group that the dedicated hosts should be assigned to.
// Currently, a dedicated host can only be added to a dedicated host group at creation time. An existing dedicated host cannot
// be added to another dedicated host group.
type DedicatedHostGroup struct {
	// REQUIRED; Resource location
	Location *string

	// Dedicated Host Group Properties.
	Properties *DedicatedHostGroupProperties

	// Resource tags
	Tags map[string]*string

	// Availability Zone to use for this host group. Only single zone is supported. The zone can be assigned only during creation.
	// If not provided, the group supports all zones in the region. If provided,
	// enforces each host in the group to be in the same zone.
	Zones []string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (d *DedicatedHostGroup) GetLocation() (rv string) {
	if d != nil && d.Location != nil {
		return *d.Location
	}
	return
}

func (d *DedicatedHostGroup) GetProperties() (rv *DedicatedHostGroupProperties) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DedicatedHostGroup) GetTags() (rv map[string]*string) {
	if d != nil {
		return d.Tags
	}
	return
}

func (d *DedicatedHostGroup) GetZones() (rv []string) {
	if d != nil {
		return d.Zones
	}
	return
}

func (d *DedicatedHostGroup) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *DedicatedHostGroup) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DedicatedHostGroup) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

type DedicatedHostGroupInstanceView struct {
	// List of instance view of the dedicated hosts under the dedicated host group.
	Hosts []DedicatedHostInstanceViewWithName
}

func (d *DedicatedHostGroupInstanceView) GetHosts() (rv []DedicatedHostInstanceViewWithName) {
	if d != nil {
		return d.Hosts
	}
	return
}

// DedicatedHostGroupListResult - The List Dedicated Host Group with resource group response.
type DedicatedHostGroupListResult struct {
	// REQUIRED; The list of dedicated host groups
	Value []DedicatedHostGroup

	// The URI to fetch the next page of Dedicated Host Groups. Call ListNext() with this URI to fetch the next page of Dedicated
	// Host Groups.
	NextLink *string
}

func (d *DedicatedHostGroupListResult) GetValue() (rv []DedicatedHostGroup) {
	if d != nil {
		return d.Value
	}
	return
}

func (d *DedicatedHostGroupListResult) GetNextLink() (rv string) {
	if d != nil && d.NextLink != nil {
		return *d.NextLink
	}
	return
}

// DedicatedHostGroupProperties - Dedicated Host Group Properties.
type DedicatedHostGroupProperties struct {
	// REQUIRED; Number of fault domains that the host group can span.
	PlatformFaultDomainCount *int32

	// Specifies whether virtual machines or virtual machine scale sets can be placed automatically on the dedicated host group.
	// Automatic placement means resources are allocated on dedicated hosts, that are
	// chosen by Azure, under the dedicated host group. The value is defaulted to 'false' when not provided.
	// Minimum api-version: 2020-06-01.
	SupportAutomaticPlacement *bool

	// READ-ONLY; A list of references to all dedicated hosts in the dedicated host group.
	Hosts []SubResourceReadOnly

	// READ-ONLY; The dedicated host group instance view, which has the list of instance view of the dedicated hosts under the
	// dedicated host group.
	InstanceView *DedicatedHostGroupInstanceView
}

func (d *DedicatedHostGroupProperties) GetPlatformFaultDomainCount() (rv int32) {
	if d != nil && d.PlatformFaultDomainCount != nil {
		return *d.PlatformFaultDomainCount
	}
	return
}

func (d *DedicatedHostGroupProperties) GetSupportAutomaticPlacement() (rv bool) {
	if d != nil && d.SupportAutomaticPlacement != nil {
		return *d.SupportAutomaticPlacement
	}
	return
}

func (d *DedicatedHostGroupProperties) GetHosts() (rv []SubResourceReadOnly) {
	if d != nil {
		return d.Hosts
	}
	return
}

func (d *DedicatedHostGroupProperties) GetInstanceView() (rv *DedicatedHostGroupInstanceView) {
	if d != nil {
		return d.InstanceView
	}
	return
}

// DedicatedHostGroupUpdate - Specifies information about the dedicated host group that the dedicated host should be assigned
// to. Only tags may be updated.
type DedicatedHostGroupUpdate struct {
	// Dedicated Host Group Properties.
	Properties *DedicatedHostGroupProperties

	// Resource tags
	Tags map[string]*string

	// Availability Zone to use for this host group. Only single zone is supported. The zone can be assigned only during creation.
	// If not provided, the group supports all zones in the region. If provided,
	// enforces each host in the group to be in the same zone.
	Zones []string
}

func (d *DedicatedHostGroupUpdate) GetProperties() (rv *DedicatedHostGroupProperties) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DedicatedHostGroupUpdate) GetTags() (rv map[string]*string) {
	if d != nil {
		return d.Tags
	}
	return
}

func (d *DedicatedHostGroupUpdate) GetZones() (rv []string) {
	if d != nil {
		return d.Zones
	}
	return
}

// DedicatedHostInstanceView - The instance view of a dedicated host.
type DedicatedHostInstanceView struct {
	// Unutilized capacity of the dedicated host.
	AvailableCapacity *DedicatedHostAvailableCapacity

	// The resource status information.
	Statuses []InstanceViewStatus

	// READ-ONLY; Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
	AssetID *string
}

func (d *DedicatedHostInstanceView) GetAvailableCapacity() (rv *DedicatedHostAvailableCapacity) {
	if d != nil {
		return d.AvailableCapacity
	}
	return
}

func (d *DedicatedHostInstanceView) GetStatuses() (rv []InstanceViewStatus) {
	if d != nil {
		return d.Statuses
	}
	return
}

func (d *DedicatedHostInstanceView) GetAssetID() (rv string) {
	if d != nil && d.AssetID != nil {
		return *d.AssetID
	}
	return
}

// DedicatedHostInstanceViewWithName - The instance view of a dedicated host that includes the name of the dedicated host.
// It is used for the response to the instance view of a dedicated host group.
type DedicatedHostInstanceViewWithName struct {
	// Unutilized capacity of the dedicated host.
	AvailableCapacity *DedicatedHostAvailableCapacity

	// The resource status information.
	Statuses []InstanceViewStatus

	// READ-ONLY; Specifies the unique id of the dedicated physical machine on which the dedicated host resides.
	AssetID *string

	// READ-ONLY; The name of the dedicated host.
	Name *string
}

func (d *DedicatedHostInstanceViewWithName) GetAvailableCapacity() (rv *DedicatedHostAvailableCapacity) {
	if d != nil {
		return d.AvailableCapacity
	}
	return
}

func (d *DedicatedHostInstanceViewWithName) GetStatuses() (rv []InstanceViewStatus) {
	if d != nil {
		return d.Statuses
	}
	return
}

func (d *DedicatedHostInstanceViewWithName) GetAssetID() (rv string) {
	if d != nil && d.AssetID != nil {
		return *d.AssetID
	}
	return
}

func (d *DedicatedHostInstanceViewWithName) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

// DedicatedHostListResult - The list dedicated host operation response.
type DedicatedHostListResult struct {
	// REQUIRED; The list of dedicated hosts
	Value []DedicatedHost

	// The URI to fetch the next page of dedicated hosts. Call ListNext() with this URI to fetch the next page of dedicated hosts.
	NextLink *string
}

func (d *DedicatedHostListResult) GetValue() (rv []DedicatedHost) {
	if d != nil {
		return d.Value
	}
	return
}

func (d *DedicatedHostListResult) GetNextLink() (rv string) {
	if d != nil && d.NextLink != nil {
		return *d.NextLink
	}
	return
}

// DedicatedHostProperties - Properties of the dedicated host.
type DedicatedHostProperties struct {
	// Specifies whether the dedicated host should be replaced automatically in case of a failure. The value is defaulted to 'true'
	// when not provided.
	AutoReplaceOnFailure *bool

	// Specifies the software license type that will be applied to the VMs deployed on the dedicated host.
	// Possible values are:
	// None
	// WindowsServerHybrid
	// WindowsServerPerpetual
	// Default: None
	LicenseType *DedicatedHostLicenseTypes

	// Fault domain of the dedicated host within a dedicated host group.
	PlatformFaultDomain *int32

	// READ-ONLY; A unique id generated and assigned to the dedicated host by the platform.
	// Does not change throughout the lifetime of the host.
	HostID *string

	// READ-ONLY; The dedicated host instance view.
	InstanceView *DedicatedHostInstanceView

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string

	// READ-ONLY; The date when the host was first provisioned.
	ProvisioningTime *time.Time

	// READ-ONLY; Specifies the time at which the Dedicated Host resource was created.
	// Minimum api-version: 2021-11-01.
	TimeCreated *time.Time

	// READ-ONLY; A list of references to all virtual machines in the Dedicated Host.
	VirtualMachines []SubResourceReadOnly
}

func (d *DedicatedHostProperties) GetAutoReplaceOnFailure() (rv bool) {
	if d != nil && d.AutoReplaceOnFailure != nil {
		return *d.AutoReplaceOnFailure
	}
	return
}

func (d *DedicatedHostProperties) GetLicenseType() (rv *DedicatedHostLicenseTypes) {
	if d != nil {
		return d.LicenseType
	}
	return
}

func (d *DedicatedHostProperties) GetPlatformFaultDomain() (rv int32) {
	if d != nil && d.PlatformFaultDomain != nil {
		return *d.PlatformFaultDomain
	}
	return
}

func (d *DedicatedHostProperties) GetHostID() (rv string) {
	if d != nil && d.HostID != nil {
		return *d.HostID
	}
	return
}

func (d *DedicatedHostProperties) GetInstanceView() (rv *DedicatedHostInstanceView) {
	if d != nil {
		return d.InstanceView
	}
	return
}

func (d *DedicatedHostProperties) GetProvisioningState() (rv string) {
	if d != nil && d.ProvisioningState != nil {
		return *d.ProvisioningState
	}
	return
}

func (d *DedicatedHostProperties) GetProvisioningTime() (rv *time.Time) {
	if d != nil {
		return d.ProvisioningTime
	}
	return
}

func (d *DedicatedHostProperties) GetTimeCreated() (rv *time.Time) {
	if d != nil {
		return d.TimeCreated
	}
	return
}

func (d *DedicatedHostProperties) GetVirtualMachines() (rv []SubResourceReadOnly) {
	if d != nil {
		return d.VirtualMachines
	}
	return
}

// DedicatedHostUpdate - Specifies information about the dedicated host. Only tags, autoReplaceOnFailure and licenseType may
// be updated.
type DedicatedHostUpdate struct {
	// Properties of the dedicated host.
	Properties *DedicatedHostProperties

	// Resource tags
	Tags map[string]*string
}

func (d *DedicatedHostUpdate) GetProperties() (rv *DedicatedHostProperties) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DedicatedHostUpdate) GetTags() (rv map[string]*string) {
	if d != nil {
		return d.Tags
	}
	return
}

// DiagnosticsProfile - Specifies the boot diagnostic settings state.
// Minimum api-version: 2015-06-15.
type DiagnosticsProfile struct {
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status.
	// NOTE: If storageUri is being specified then ensure that the storage account is in the same region and subscription as the
	// VM.
	// You can easily view the output of your console log.
	// Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnostics
}

func (d *DiagnosticsProfile) GetBootDiagnostics() (rv *BootDiagnostics) {
	if d != nil {
		return d.BootDiagnostics
	}
	return
}

// DiffDiskSettings - Describes the parameters of ephemeral disk settings that can be specified for operating system disk.
// NOTE: The ephemeral disk settings can only be specified for managed disk.
type DiffDiskSettings struct {
	// Specifies the ephemeral disk settings for operating system disk.
	Option *DiffDiskOptions

	// Specifies the ephemeral disk placement for operating system disk.
	// Possible values are:
	// CacheDisk
	// ResourceDisk
	// Default: CacheDisk if one is configured for the VM size otherwise ResourceDisk is used.
	// Refer to VM size documentation for Windows VM at https://docs.microsoft.com/azure/virtual-machines/windows/sizes and Linux
	// VM at https://docs.microsoft.com/azure/virtual-machines/linux/sizes to check
	// which VM sizes exposes a cache disk.
	Placement *DiffDiskPlacement
}

func (d *DiffDiskSettings) GetOption() (rv *DiffDiskOptions) {
	if d != nil {
		return d.Option
	}
	return
}

func (d *DiffDiskSettings) GetPlacement() (rv *DiffDiskPlacement) {
	if d != nil {
		return d.Placement
	}
	return
}

// Disallowed - Describes the disallowed disk types.
type Disallowed struct {
	// A list of disk types.
	DiskTypes []string
}

func (d *Disallowed) GetDiskTypes() (rv []string) {
	if d != nil {
		return d.DiskTypes
	}
	return
}

// DisallowedConfiguration - Specifies the disallowed configuration for a virtual machine image.
type DisallowedConfiguration struct {
	// VM disk types which are disallowed.
	VMDiskType *VMDiskTypes
}

func (d *DisallowedConfiguration) GetVMDiskType() (rv *VMDiskTypes) {
	if d != nil {
		return d.VMDiskType
	}
	return
}

// Disk resource.
type Disk struct {
	// REQUIRED; Resource location
	Location *string

	// The extended location where the disk will be created. Extended location cannot be changed.
	ExtendedLocation *ExtendedLocation

	// Disk resource properties.
	Properties *DiskProperties

	// The disks sku name. Can be StandardLRS, PremiumLRS, StandardSSDLRS, UltraSSDLRS, PremiumZRS, or StandardSSDZRS.
	SKU *DiskSKU

	// Resource tags
	Tags map[string]*string

	// The Logical zone list for Disk.
	Zones []string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; A relative URI containing the ID of the VM that has the disk attached.
	ManagedBy *string

	// READ-ONLY; List of relative URIs containing the IDs of the VMs that have the disk attached. maxShares should be set to
	// a value greater than one for disks to allow attaching them to multiple VMs.
	ManagedByExtended []string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (d *Disk) GetLocation() (rv string) {
	if d != nil && d.Location != nil {
		return *d.Location
	}
	return
}

func (d *Disk) GetExtendedLocation() (rv *ExtendedLocation) {
	if d != nil {
		return d.ExtendedLocation
	}
	return
}

func (d *Disk) GetProperties() (rv *DiskProperties) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *Disk) GetSKU() (rv *DiskSKU) {
	if d != nil {
		return d.SKU
	}
	return
}

func (d *Disk) GetTags() (rv map[string]*string) {
	if d != nil {
		return d.Tags
	}
	return
}

func (d *Disk) GetZones() (rv []string) {
	if d != nil {
		return d.Zones
	}
	return
}

func (d *Disk) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *Disk) GetManagedBy() (rv string) {
	if d != nil && d.ManagedBy != nil {
		return *d.ManagedBy
	}
	return
}

func (d *Disk) GetManagedByExtended() (rv []string) {
	if d != nil {
		return d.ManagedByExtended
	}
	return
}

func (d *Disk) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *Disk) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

// DiskAccess - disk access resource.
type DiskAccess struct {
	// REQUIRED; Resource location
	Location *string

	// The extended location where the disk access will be created. Extended location cannot be changed.
	ExtendedLocation *ExtendedLocation
	Properties       *DiskAccessProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (d *DiskAccess) GetLocation() (rv string) {
	if d != nil && d.Location != nil {
		return *d.Location
	}
	return
}

func (d *DiskAccess) GetExtendedLocation() (rv *ExtendedLocation) {
	if d != nil {
		return d.ExtendedLocation
	}
	return
}

func (d *DiskAccess) GetProperties() (rv *DiskAccessProperties) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DiskAccess) GetTags() (rv map[string]*string) {
	if d != nil {
		return d.Tags
	}
	return
}

func (d *DiskAccess) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *DiskAccess) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DiskAccess) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

// DiskAccessList - The List disk access operation response.
type DiskAccessList struct {
	// REQUIRED; A list of disk access resources.
	Value []DiskAccess

	// The uri to fetch the next page of disk access resources. Call ListNext() with this to fetch the next page of disk access
	// resources.
	NextLink *string
}

func (d *DiskAccessList) GetValue() (rv []DiskAccess) {
	if d != nil {
		return d.Value
	}
	return
}

func (d *DiskAccessList) GetNextLink() (rv string) {
	if d != nil && d.NextLink != nil {
		return *d.NextLink
	}
	return
}

type DiskAccessProperties struct {
	// READ-ONLY; A readonly collection of private endpoint connections created on the disk. Currently only one endpoint connection
	// is supported.
	PrivateEndpointConnections []PrivateEndpointConnection

	// READ-ONLY; The disk access resource provisioning state.
	ProvisioningState *string

	// READ-ONLY; The time when the disk access was created.
	TimeCreated *time.Time
}

func (d *DiskAccessProperties) GetPrivateEndpointConnections() (rv []PrivateEndpointConnection) {
	if d != nil {
		return d.PrivateEndpointConnections
	}
	return
}

func (d *DiskAccessProperties) GetProvisioningState() (rv string) {
	if d != nil && d.ProvisioningState != nil {
		return *d.ProvisioningState
	}
	return
}

func (d *DiskAccessProperties) GetTimeCreated() (rv *time.Time) {
	if d != nil {
		return d.TimeCreated
	}
	return
}

// DiskAccessUpdate - Used for updating a disk access resource.
type DiskAccessUpdate struct {
	// Resource tags
	Tags map[string]*string
}

func (d *DiskAccessUpdate) GetTags() (rv map[string]*string) {
	if d != nil {
		return d.Tags
	}
	return
}

// DiskEncryptionSet - disk encryption set resource.
type DiskEncryptionSet struct {
	// REQUIRED; Resource location
	Location *string

	// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used
	// to encrypt disks.
	Identity   *EncryptionSetIdentity
	Properties *EncryptionSetProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (d *DiskEncryptionSet) GetLocation() (rv string) {
	if d != nil && d.Location != nil {
		return *d.Location
	}
	return
}

func (d *DiskEncryptionSet) GetIdentity() (rv *EncryptionSetIdentity) {
	if d != nil {
		return d.Identity
	}
	return
}

func (d *DiskEncryptionSet) GetProperties() (rv *EncryptionSetProperties) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DiskEncryptionSet) GetTags() (rv map[string]*string) {
	if d != nil {
		return d.Tags
	}
	return
}

func (d *DiskEncryptionSet) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *DiskEncryptionSet) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DiskEncryptionSet) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

// DiskEncryptionSetList - The List disk encryption set operation response.
type DiskEncryptionSetList struct {
	// REQUIRED; A list of disk encryption sets.
	Value []DiskEncryptionSet

	// The uri to fetch the next page of disk encryption sets. Call ListNext() with this to fetch the next page of disk encryption
	// sets.
	NextLink *string
}

func (d *DiskEncryptionSetList) GetValue() (rv []DiskEncryptionSet) {
	if d != nil {
		return d.Value
	}
	return
}

func (d *DiskEncryptionSetList) GetNextLink() (rv string) {
	if d != nil && d.NextLink != nil {
		return *d.NextLink
	}
	return
}

// DiskEncryptionSetParameters - Describes the parameter of customer managed disk encryption set resource id that can be specified
// for disk.
// NOTE: The disk encryption set resource id can only be specified for managed disk. Please refer https://aka.ms/mdssewithcmkoverview
// for more details.
type DiskEncryptionSetParameters struct {
	// Resource Id
	ID *string
}

func (d *DiskEncryptionSetParameters) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

// DiskEncryptionSetUpdate - disk encryption set update resource.
type DiskEncryptionSetUpdate struct {
	// The managed identity for the disk encryption set. It should be given permission on the key vault before it can be used
	// to encrypt disks.
	Identity *EncryptionSetIdentity

	// disk encryption set resource update properties.
	Properties *DiskEncryptionSetUpdateProperties

	// Resource tags
	Tags map[string]*string
}

func (d *DiskEncryptionSetUpdate) GetIdentity() (rv *EncryptionSetIdentity) {
	if d != nil {
		return d.Identity
	}
	return
}

func (d *DiskEncryptionSetUpdate) GetProperties() (rv *DiskEncryptionSetUpdateProperties) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DiskEncryptionSetUpdate) GetTags() (rv map[string]*string) {
	if d != nil {
		return d.Tags
	}
	return
}

// DiskEncryptionSetUpdateProperties - disk encryption set resource update properties.
type DiskEncryptionSetUpdateProperties struct {
	// Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots
	ActiveKey *KeyForDiskEncryptionSet

	// The type of key used to encrypt the data of the disk.
	EncryptionType *DiskEncryptionSetType

	// Set this flag to true to enable auto-updating of this disk encryption set to the latest key version.
	RotationToLatestKeyVersionEnabled *bool
}

func (d *DiskEncryptionSetUpdateProperties) GetActiveKey() (rv *KeyForDiskEncryptionSet) {
	if d != nil {
		return d.ActiveKey
	}
	return
}

func (d *DiskEncryptionSetUpdateProperties) GetEncryptionType() (rv *DiskEncryptionSetType) {
	if d != nil {
		return d.EncryptionType
	}
	return
}

func (d *DiskEncryptionSetUpdateProperties) GetRotationToLatestKeyVersionEnabled() (rv bool) {
	if d != nil && d.RotationToLatestKeyVersionEnabled != nil {
		return *d.RotationToLatestKeyVersionEnabled
	}
	return
}

// DiskEncryptionSettings - Describes a Encryption Settings for a Disk
type DiskEncryptionSettings struct {
	// Specifies the location of the disk encryption key, which is a Key Vault Secret.
	DiskEncryptionKey *KeyVaultSecretReference

	// Specifies whether disk encryption should be enabled on the virtual machine.
	Enabled *bool

	// Specifies the location of the key encryption key in Key Vault.
	KeyEncryptionKey *KeyVaultKeyReference
}

func (d *DiskEncryptionSettings) GetDiskEncryptionKey() (rv *KeyVaultSecretReference) {
	if d != nil {
		return d.DiskEncryptionKey
	}
	return
}

func (d *DiskEncryptionSettings) GetEnabled() (rv bool) {
	if d != nil && d.Enabled != nil {
		return *d.Enabled
	}
	return
}

func (d *DiskEncryptionSettings) GetKeyEncryptionKey() (rv *KeyVaultKeyReference) {
	if d != nil {
		return d.KeyEncryptionKey
	}
	return
}

// DiskInstanceView - The instance view of the disk.
type DiskInstanceView struct {
	// Specifies the encryption settings for the OS Disk.
	// Minimum api-version: 2015-06-15
	EncryptionSettings []DiskEncryptionSettings

	// The disk name.
	Name *string

	// The resource status information.
	Statuses []InstanceViewStatus
}

func (d *DiskInstanceView) GetEncryptionSettings() (rv []DiskEncryptionSettings) {
	if d != nil {
		return d.EncryptionSettings
	}
	return
}

func (d *DiskInstanceView) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DiskInstanceView) GetStatuses() (rv []InstanceViewStatus) {
	if d != nil {
		return d.Statuses
	}
	return
}

// DiskList - The List Disks operation response.
type DiskList struct {
	// REQUIRED; A list of disks.
	Value []Disk

	// The uri to fetch the next page of disks. Call ListNext() with this to fetch the next page of disks.
	NextLink *string
}

func (d *DiskList) GetValue() (rv []Disk) {
	if d != nil {
		return d.Value
	}
	return
}

func (d *DiskList) GetNextLink() (rv string) {
	if d != nil && d.NextLink != nil {
		return *d.NextLink
	}
	return
}

// DiskProperties - Disk resource properties.
type DiskProperties struct {
	// REQUIRED; Disk source information. CreationData information cannot be changed after the disk has been created.
	CreationData *CreationData

	// Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default.
	// Does not apply to Ultra disks.
	BurstingEnabled *bool

	// Percentage complete for the background copy when a resource is created via the CopyStart operation.
	CompletionPercent *float32

	// Additional authentication requirements when exporting or uploading to a disk or snapshot.
	DataAccessAuthMode *DataAccessAuthMode

	// ARM id of the DiskAccess resource for using private endpoints on disks.
	DiskAccessID *string

	// The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer
	// between 4k and 256k bytes.
	DiskIOPSReadOnly *int64

	// The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k
	// bytes.
	DiskIOPSReadWrite *int64

	// The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions
	// of bytes per second - MB here uses the ISO notation, of powers of 10.
	DiskMBpsReadOnly *int64

	// The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here
	// uses the ISO notation, of powers of 10.
	DiskMBpsReadWrite *int64

	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this
	// field is present for updates or creation with other options, it indicates a
	// resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB *int32

	// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *Encryption

	// Encryption settings collection used for Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollection

	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *HyperVGeneration

	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can
	// be mounted on multiple VMs at the same time.
	MaxShares *int32

	// Policy for accessing the disk via network.
	NetworkAccessPolicy *NetworkAccessPolicy

	// The Operating System type.
	OSType *OperatingSystemTypes

	// Policy for controlling export on the disk.
	PublicNetworkAccess *PublicNetworkAccess

	// Purchase plan information for the the image from which the OS disk was created. E.g. - {name: 2019-Datacenter, publisher:
	// MicrosoftWindowsServer, product: WindowsServer}
	PurchasePlan *PurchasePlanAutoGenerated

	// Contains the security related information for the resource.
	SecurityProfile *DiskSecurityProfile

	// List of supported capabilities for the image from which the OS disk was created.
	SupportedCapabilities *SupportedCapabilities

	// Indicates the OS on a disk supports hibernation.
	SupportsHibernation *bool

	// Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/.
	// Does not apply to Ultra disks.
	Tier *string

	// READ-ONLY; The size of the disk in bytes. This field is read only.
	DiskSizeBytes *int64

	// READ-ONLY; The state of the disk.
	DiskState *DiskState

	// READ-ONLY; Properties of the disk for which update is pending.
	PropertyUpdatesInProgress *PropertyUpdatesInProgress

	// READ-ONLY; The disk provisioning state.
	ProvisioningState *string

	// READ-ONLY; Details of the list of all VMs that have the disk attached. maxShares should be set to a value greater than
	// one for disks to allow attaching them to multiple VMs.
	ShareInfo []ShareInfoElement

	// READ-ONLY; The time when the disk was created.
	TimeCreated *time.Time

	// READ-ONLY; Unique Guid identifying the resource.
	UniqueID *string
}

func (d *DiskProperties) GetCreationData() (rv *CreationData) {
	if d != nil {
		return d.CreationData
	}
	return
}

func (d *DiskProperties) GetBurstingEnabled() (rv bool) {
	if d != nil && d.BurstingEnabled != nil {
		return *d.BurstingEnabled
	}
	return
}

func (d *DiskProperties) GetCompletionPercent() (rv float32) {
	if d != nil && d.CompletionPercent != nil {
		return *d.CompletionPercent
	}
	return
}

func (d *DiskProperties) GetDataAccessAuthMode() (rv *DataAccessAuthMode) {
	if d != nil {
		return d.DataAccessAuthMode
	}
	return
}

func (d *DiskProperties) GetDiskAccessID() (rv string) {
	if d != nil && d.DiskAccessID != nil {
		return *d.DiskAccessID
	}
	return
}

func (d *DiskProperties) GetDiskIOPSReadOnly() (rv int64) {
	if d != nil && d.DiskIOPSReadOnly != nil {
		return *d.DiskIOPSReadOnly
	}
	return
}

func (d *DiskProperties) GetDiskIOPSReadWrite() (rv int64) {
	if d != nil && d.DiskIOPSReadWrite != nil {
		return *d.DiskIOPSReadWrite
	}
	return
}

func (d *DiskProperties) GetDiskMBpsReadOnly() (rv int64) {
	if d != nil && d.DiskMBpsReadOnly != nil {
		return *d.DiskMBpsReadOnly
	}
	return
}

func (d *DiskProperties) GetDiskMBpsReadWrite() (rv int64) {
	if d != nil && d.DiskMBpsReadWrite != nil {
		return *d.DiskMBpsReadWrite
	}
	return
}

func (d *DiskProperties) GetDiskSizeGB() (rv int32) {
	if d != nil && d.DiskSizeGB != nil {
		return *d.DiskSizeGB
	}
	return
}

func (d *DiskProperties) GetEncryption() (rv *Encryption) {
	if d != nil {
		return d.Encryption
	}
	return
}

func (d *DiskProperties) GetEncryptionSettingsCollection() (rv *EncryptionSettingsCollection) {
	if d != nil {
		return d.EncryptionSettingsCollection
	}
	return
}

func (d *DiskProperties) GetHyperVGeneration() (rv *HyperVGeneration) {
	if d != nil {
		return d.HyperVGeneration
	}
	return
}

func (d *DiskProperties) GetMaxShares() (rv int32) {
	if d != nil && d.MaxShares != nil {
		return *d.MaxShares
	}
	return
}

func (d *DiskProperties) GetNetworkAccessPolicy() (rv *NetworkAccessPolicy) {
	if d != nil {
		return d.NetworkAccessPolicy
	}
	return
}

func (d *DiskProperties) GetOSType() (rv *OperatingSystemTypes) {
	if d != nil {
		return d.OSType
	}
	return
}

func (d *DiskProperties) GetPublicNetworkAccess() (rv *PublicNetworkAccess) {
	if d != nil {
		return d.PublicNetworkAccess
	}
	return
}

func (d *DiskProperties) GetPurchasePlan() (rv *PurchasePlanAutoGenerated) {
	if d != nil {
		return d.PurchasePlan
	}
	return
}

func (d *DiskProperties) GetSecurityProfile() (rv *DiskSecurityProfile) {
	if d != nil {
		return d.SecurityProfile
	}
	return
}

func (d *DiskProperties) GetSupportedCapabilities() (rv *SupportedCapabilities) {
	if d != nil {
		return d.SupportedCapabilities
	}
	return
}

func (d *DiskProperties) GetSupportsHibernation() (rv bool) {
	if d != nil && d.SupportsHibernation != nil {
		return *d.SupportsHibernation
	}
	return
}

func (d *DiskProperties) GetTier() (rv string) {
	if d != nil && d.Tier != nil {
		return *d.Tier
	}
	return
}

func (d *DiskProperties) GetDiskSizeBytes() (rv int64) {
	if d != nil && d.DiskSizeBytes != nil {
		return *d.DiskSizeBytes
	}
	return
}

func (d *DiskProperties) GetDiskState() (rv *DiskState) {
	if d != nil {
		return d.DiskState
	}
	return
}

func (d *DiskProperties) GetPropertyUpdatesInProgress() (rv *PropertyUpdatesInProgress) {
	if d != nil {
		return d.PropertyUpdatesInProgress
	}
	return
}

func (d *DiskProperties) GetProvisioningState() (rv string) {
	if d != nil && d.ProvisioningState != nil {
		return *d.ProvisioningState
	}
	return
}

func (d *DiskProperties) GetShareInfo() (rv []ShareInfoElement) {
	if d != nil {
		return d.ShareInfo
	}
	return
}

func (d *DiskProperties) GetTimeCreated() (rv *time.Time) {
	if d != nil {
		return d.TimeCreated
	}
	return
}

func (d *DiskProperties) GetUniqueID() (rv string) {
	if d != nil && d.UniqueID != nil {
		return *d.UniqueID
	}
	return
}

// DiskRestorePoint - Properties of disk restore point
type DiskRestorePoint struct {
	// Properties of an incremental disk restore point
	Properties *DiskRestorePointProperties

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (d *DiskRestorePoint) GetProperties() (rv *DiskRestorePointProperties) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DiskRestorePoint) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *DiskRestorePoint) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DiskRestorePoint) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

// DiskRestorePointInstanceView - The instance view of a disk restore point.
type DiskRestorePointInstanceView struct {
	// Disk restore point Id.
	ID *string

	// The disk restore point replication status information.
	ReplicationStatus any
}

func (d *DiskRestorePointInstanceView) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *DiskRestorePointInstanceView) GetReplicationStatus() (rv any) {
	if d != nil {
		return d.ReplicationStatus
	}
	return
}

// DiskRestorePointList - The List Disk Restore Points operation response.
type DiskRestorePointList struct {
	// REQUIRED; A list of disk restore points.
	Value []DiskRestorePoint

	// The uri to fetch the next page of disk restore points. Call ListNext() with this to fetch the next page of disk restore
	// points.
	NextLink *string
}

func (d *DiskRestorePointList) GetValue() (rv []DiskRestorePoint) {
	if d != nil {
		return d.Value
	}
	return
}

func (d *DiskRestorePointList) GetNextLink() (rv string) {
	if d != nil && d.NextLink != nil {
		return *d.NextLink
	}
	return
}

// DiskRestorePointProperties - Properties of an incremental disk restore point
type DiskRestorePointProperties struct {
	// Percentage complete for the background copy of disk restore point when source resource is from a different region.
	CompletionPercent *float32

	// ARM id of the DiskAccess resource for using private endpoints on disks.
	DiskAccessID *string

	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *HyperVGeneration

	// Policy for accessing the disk via network.
	NetworkAccessPolicy *NetworkAccessPolicy

	// Policy for controlling export on the disk.
	PublicNetworkAccess *PublicNetworkAccess

	// Purchase plan information for the the image from which the OS disk was created.
	PurchasePlan *PurchasePlanAutoGenerated

	// List of supported capabilities for the image from which the OS disk was created.
	SupportedCapabilities *SupportedCapabilities

	// Indicates the OS on a disk supports hibernation.
	SupportsHibernation *bool

	// READ-ONLY; Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *Encryption

	// READ-ONLY; id of the backing snapshot's MIS family
	FamilyID *string

	// READ-ONLY; The Operating System type.
	OSType *OperatingSystemTypes

	// READ-ONLY; Replication state of disk restore point when source resource is from a different region.
	ReplicationState *string

	// READ-ONLY; arm id of source disk or source disk restore point.
	SourceResourceID *string

	// READ-ONLY; Location of source disk or source disk restore point when source resource is from a different region.
	SourceResourceLocation *string

	// READ-ONLY; unique incarnation id of the source disk
	SourceUniqueID *string

	// READ-ONLY; The timestamp of restorePoint creation
	TimeCreated *time.Time
}

func (d *DiskRestorePointProperties) GetCompletionPercent() (rv float32) {
	if d != nil && d.CompletionPercent != nil {
		return *d.CompletionPercent
	}
	return
}

func (d *DiskRestorePointProperties) GetDiskAccessID() (rv string) {
	if d != nil && d.DiskAccessID != nil {
		return *d.DiskAccessID
	}
	return
}

func (d *DiskRestorePointProperties) GetHyperVGeneration() (rv *HyperVGeneration) {
	if d != nil {
		return d.HyperVGeneration
	}
	return
}

func (d *DiskRestorePointProperties) GetNetworkAccessPolicy() (rv *NetworkAccessPolicy) {
	if d != nil {
		return d.NetworkAccessPolicy
	}
	return
}

func (d *DiskRestorePointProperties) GetPublicNetworkAccess() (rv *PublicNetworkAccess) {
	if d != nil {
		return d.PublicNetworkAccess
	}
	return
}

func (d *DiskRestorePointProperties) GetPurchasePlan() (rv *PurchasePlanAutoGenerated) {
	if d != nil {
		return d.PurchasePlan
	}
	return
}

func (d *DiskRestorePointProperties) GetSupportedCapabilities() (rv *SupportedCapabilities) {
	if d != nil {
		return d.SupportedCapabilities
	}
	return
}

func (d *DiskRestorePointProperties) GetSupportsHibernation() (rv bool) {
	if d != nil && d.SupportsHibernation != nil {
		return *d.SupportsHibernation
	}
	return
}

func (d *DiskRestorePointProperties) GetEncryption() (rv *Encryption) {
	if d != nil {
		return d.Encryption
	}
	return
}

func (d *DiskRestorePointProperties) GetFamilyID() (rv string) {
	if d != nil && d.FamilyID != nil {
		return *d.FamilyID
	}
	return
}

func (d *DiskRestorePointProperties) GetOSType() (rv *OperatingSystemTypes) {
	if d != nil {
		return d.OSType
	}
	return
}

func (d *DiskRestorePointProperties) GetReplicationState() (rv string) {
	if d != nil && d.ReplicationState != nil {
		return *d.ReplicationState
	}
	return
}

func (d *DiskRestorePointProperties) GetSourceResourceID() (rv string) {
	if d != nil && d.SourceResourceID != nil {
		return *d.SourceResourceID
	}
	return
}

func (d *DiskRestorePointProperties) GetSourceResourceLocation() (rv string) {
	if d != nil && d.SourceResourceLocation != nil {
		return *d.SourceResourceLocation
	}
	return
}

func (d *DiskRestorePointProperties) GetSourceUniqueID() (rv string) {
	if d != nil && d.SourceUniqueID != nil {
		return *d.SourceUniqueID
	}
	return
}

func (d *DiskRestorePointProperties) GetTimeCreated() (rv *time.Time) {
	if d != nil {
		return d.TimeCreated
	}
	return
}

// DiskSKU - The disks sku name. Can be StandardLRS, PremiumLRS, StandardSSDLRS, UltraSSDLRS, PremiumZRS, or StandardSSDZRS.
type DiskSKU struct {
	// The sku name.
	Name *DiskStorageAccountTypes

	// READ-ONLY; The sku tier.
	Tier *string
}

func (d *DiskSKU) GetName() (rv *DiskStorageAccountTypes) {
	if d != nil {
		return d.Name
	}
	return
}

func (d *DiskSKU) GetTier() (rv string) {
	if d != nil && d.Tier != nil {
		return *d.Tier
	}
	return
}

// DiskSecurityProfile - Contains the security related information for the resource.
type DiskSecurityProfile struct {
	// ResourceId of the disk encryption set associated to Confidential VM supported disk encrypted with customer managed key
	SecureVMDiskEncryptionSetID *string

	// Specifies the SecurityType of the VM. Applicable for OS disks only.
	SecurityType *DiskSecurityTypes
}

func (d *DiskSecurityProfile) GetSecureVMDiskEncryptionSetID() (rv string) {
	if d != nil && d.SecureVMDiskEncryptionSetID != nil {
		return *d.SecureVMDiskEncryptionSetID
	}
	return
}

func (d *DiskSecurityProfile) GetSecurityType() (rv *DiskSecurityTypes) {
	if d != nil {
		return d.SecurityType
	}
	return
}

// DiskUpdate - Disk update resource.
type DiskUpdate struct {
	// Disk resource update properties.
	Properties *DiskUpdateProperties

	// The disks sku name. Can be StandardLRS, PremiumLRS, StandardSSDLRS, UltraSSDLRS, PremiumZRS, or StandardSSDZRS.
	SKU *DiskSKU

	// Resource tags
	Tags map[string]*string
}

func (d *DiskUpdate) GetProperties() (rv *DiskUpdateProperties) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DiskUpdate) GetSKU() (rv *DiskSKU) {
	if d != nil {
		return d.SKU
	}
	return
}

func (d *DiskUpdate) GetTags() (rv map[string]*string) {
	if d != nil {
		return d.Tags
	}
	return
}

// DiskUpdateProperties - Disk resource update properties.
type DiskUpdateProperties struct {
	// Set to true to enable bursting beyond the provisioned performance target of the disk. Bursting is disabled by default.
	// Does not apply to Ultra disks.
	BurstingEnabled *bool

	// Additional authentication requirements when exporting or uploading to a disk or snapshot.
	DataAccessAuthMode *DataAccessAuthMode

	// ARM id of the DiskAccess resource for using private endpoints on disks.
	DiskAccessID *string

	// The total number of IOPS that will be allowed across all VMs mounting the shared disk as ReadOnly. One operation can transfer
	// between 4k and 256k bytes.
	DiskIOPSReadOnly *int64

	// The number of IOPS allowed for this disk; only settable for UltraSSD disks. One operation can transfer between 4k and 256k
	// bytes.
	DiskIOPSReadWrite *int64

	// The total throughput (MBps) that will be allowed across all VMs mounting the shared disk as ReadOnly. MBps means millions
	// of bytes per second - MB here uses the ISO notation, of powers of 10.
	DiskMBpsReadOnly *int64

	// The bandwidth allowed for this disk; only settable for UltraSSD disks. MBps means millions of bytes per second - MB here
	// uses the ISO notation, of powers of 10.
	DiskMBpsReadWrite *int64

	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this
	// field is present for updates or creation with other options, it indicates a
	// resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB *int32

	// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *Encryption

	// Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollection

	// The maximum number of VMs that can attach to the disk at the same time. Value greater than one indicates a disk that can
	// be mounted on multiple VMs at the same time.
	MaxShares *int32

	// Policy for accessing the disk via network.
	NetworkAccessPolicy *NetworkAccessPolicy

	// the Operating System type.
	OSType *OperatingSystemTypes

	// Policy for controlling export on the disk.
	PublicNetworkAccess *PublicNetworkAccess

	// Purchase plan information to be added on the OS disk
	PurchasePlan *PurchasePlanAutoGenerated

	// List of supported capabilities to be added on the OS disk.
	SupportedCapabilities *SupportedCapabilities

	// Indicates the OS on a disk supports hibernation.
	SupportsHibernation *bool

	// Performance tier of the disk (e.g, P4, S10) as described here: https://azure.microsoft.com/en-us/pricing/details/managed-disks/.
	// Does not apply to Ultra disks.
	Tier *string

	// READ-ONLY; Properties of the disk for which update is pending.
	PropertyUpdatesInProgress *PropertyUpdatesInProgress
}

func (d *DiskUpdateProperties) GetBurstingEnabled() (rv bool) {
	if d != nil && d.BurstingEnabled != nil {
		return *d.BurstingEnabled
	}
	return
}

func (d *DiskUpdateProperties) GetDataAccessAuthMode() (rv *DataAccessAuthMode) {
	if d != nil {
		return d.DataAccessAuthMode
	}
	return
}

func (d *DiskUpdateProperties) GetDiskAccessID() (rv string) {
	if d != nil && d.DiskAccessID != nil {
		return *d.DiskAccessID
	}
	return
}

func (d *DiskUpdateProperties) GetDiskIOPSReadOnly() (rv int64) {
	if d != nil && d.DiskIOPSReadOnly != nil {
		return *d.DiskIOPSReadOnly
	}
	return
}

func (d *DiskUpdateProperties) GetDiskIOPSReadWrite() (rv int64) {
	if d != nil && d.DiskIOPSReadWrite != nil {
		return *d.DiskIOPSReadWrite
	}
	return
}

func (d *DiskUpdateProperties) GetDiskMBpsReadOnly() (rv int64) {
	if d != nil && d.DiskMBpsReadOnly != nil {
		return *d.DiskMBpsReadOnly
	}
	return
}

func (d *DiskUpdateProperties) GetDiskMBpsReadWrite() (rv int64) {
	if d != nil && d.DiskMBpsReadWrite != nil {
		return *d.DiskMBpsReadWrite
	}
	return
}

func (d *DiskUpdateProperties) GetDiskSizeGB() (rv int32) {
	if d != nil && d.DiskSizeGB != nil {
		return *d.DiskSizeGB
	}
	return
}

func (d *DiskUpdateProperties) GetEncryption() (rv *Encryption) {
	if d != nil {
		return d.Encryption
	}
	return
}

func (d *DiskUpdateProperties) GetEncryptionSettingsCollection() (rv *EncryptionSettingsCollection) {
	if d != nil {
		return d.EncryptionSettingsCollection
	}
	return
}

func (d *DiskUpdateProperties) GetMaxShares() (rv int32) {
	if d != nil && d.MaxShares != nil {
		return *d.MaxShares
	}
	return
}

func (d *DiskUpdateProperties) GetNetworkAccessPolicy() (rv *NetworkAccessPolicy) {
	if d != nil {
		return d.NetworkAccessPolicy
	}
	return
}

func (d *DiskUpdateProperties) GetOSType() (rv *OperatingSystemTypes) {
	if d != nil {
		return d.OSType
	}
	return
}

func (d *DiskUpdateProperties) GetPublicNetworkAccess() (rv *PublicNetworkAccess) {
	if d != nil {
		return d.PublicNetworkAccess
	}
	return
}

func (d *DiskUpdateProperties) GetPurchasePlan() (rv *PurchasePlanAutoGenerated) {
	if d != nil {
		return d.PurchasePlan
	}
	return
}

func (d *DiskUpdateProperties) GetSupportedCapabilities() (rv *SupportedCapabilities) {
	if d != nil {
		return d.SupportedCapabilities
	}
	return
}

func (d *DiskUpdateProperties) GetSupportsHibernation() (rv bool) {
	if d != nil && d.SupportsHibernation != nil {
		return *d.SupportsHibernation
	}
	return
}

func (d *DiskUpdateProperties) GetTier() (rv string) {
	if d != nil && d.Tier != nil {
		return *d.Tier
	}
	return
}

func (d *DiskUpdateProperties) GetPropertyUpdatesInProgress() (rv *PropertyUpdatesInProgress) {
	if d != nil {
		return d.PropertyUpdatesInProgress
	}
	return
}

// Encryption at rest settings for disk or snapshot
type Encryption struct {
	// ResourceId of the disk encryption set to use for enabling encryption at rest.
	DiskEncryptionSetID *string

	// The type of key used to encrypt the data of the disk.
	Type *EncryptionType
}

func (e *Encryption) GetDiskEncryptionSetID() (rv string) {
	if e != nil && e.DiskEncryptionSetID != nil {
		return *e.DiskEncryptionSetID
	}
	return
}

func (e *Encryption) GetType() (rv *EncryptionType) {
	if e != nil {
		return e.Type
	}
	return
}

// EncryptionImages - Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the
// gallery artifact.
type EncryptionImages struct {
	// A list of encryption specifications for data disk images.
	DataDiskImages []DataDiskImageEncryption

	// Contains encryption settings for an OS disk image.
	OSDiskImage *OSDiskImageEncryption
}

func (e *EncryptionImages) GetDataDiskImages() (rv []DataDiskImageEncryption) {
	if e != nil {
		return e.DataDiskImages
	}
	return
}

func (e *EncryptionImages) GetOSDiskImage() (rv *OSDiskImageEncryption) {
	if e != nil {
		return e.OSDiskImage
	}
	return
}

// EncryptionSetIdentity - The managed identity for the disk encryption set. It should be given permission on the key vault
// before it can be used to encrypt disks.
type EncryptionSetIdentity struct {
	// The type of Managed Identity used by the DiskEncryptionSet. Only SystemAssigned is supported for new creations. Disk Encryption
	// Sets can be updated with Identity type None during migration of
	// subscription to a new Azure Active Directory tenant; it will cause the encrypted resources to lose access to the keys.
	Type *DiskEncryptionSetIdentityType

	// READ-ONLY; The object id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-identity-principal-id
	// header in the PUT request if the resource has a systemAssigned(implicit)
	// identity
	PrincipalID *string

	// READ-ONLY; The tenant id of the Managed Identity Resource. This will be sent to the RP from ARM via the x-ms-client-tenant-id
	// header in the PUT request if the resource has a systemAssigned(implicit) identity
	TenantID *string
}

func (e *EncryptionSetIdentity) GetType() (rv *DiskEncryptionSetIdentityType) {
	if e != nil {
		return e.Type
	}
	return
}

func (e *EncryptionSetIdentity) GetPrincipalID() (rv string) {
	if e != nil && e.PrincipalID != nil {
		return *e.PrincipalID
	}
	return
}

func (e *EncryptionSetIdentity) GetTenantID() (rv string) {
	if e != nil && e.TenantID != nil {
		return *e.TenantID
	}
	return
}

type EncryptionSetProperties struct {
	// The key vault key which is currently used by this disk encryption set.
	ActiveKey *KeyForDiskEncryptionSet

	// The type of key used to encrypt the data of the disk.
	EncryptionType *DiskEncryptionSetType

	// Set this flag to true to enable auto-updating of this disk encryption set to the latest key version.
	RotationToLatestKeyVersionEnabled *bool

	// READ-ONLY; The error that was encountered during auto-key rotation. If an error is present, then auto-key rotation will
	// not be attempted until the error on this disk encryption set is fixed.
	AutoKeyRotationError *APIError

	// READ-ONLY; The time when the active key of this disk encryption set was updated.
	LastKeyRotationTimestamp *time.Time

	// READ-ONLY; A readonly collection of key vault keys previously used by this disk encryption set while a key rotation is
	// in progress. It will be empty if there is no ongoing key rotation.
	PreviousKeys []KeyForDiskEncryptionSet

	// READ-ONLY; The disk encryption set provisioning state.
	ProvisioningState *string
}

func (e *EncryptionSetProperties) GetActiveKey() (rv *KeyForDiskEncryptionSet) {
	if e != nil {
		return e.ActiveKey
	}
	return
}

func (e *EncryptionSetProperties) GetEncryptionType() (rv *DiskEncryptionSetType) {
	if e != nil {
		return e.EncryptionType
	}
	return
}

func (e *EncryptionSetProperties) GetRotationToLatestKeyVersionEnabled() (rv bool) {
	if e != nil && e.RotationToLatestKeyVersionEnabled != nil {
		return *e.RotationToLatestKeyVersionEnabled
	}
	return
}

func (e *EncryptionSetProperties) GetAutoKeyRotationError() (rv *APIError) {
	if e != nil {
		return e.AutoKeyRotationError
	}
	return
}

func (e *EncryptionSetProperties) GetLastKeyRotationTimestamp() (rv *time.Time) {
	if e != nil {
		return e.LastKeyRotationTimestamp
	}
	return
}

func (e *EncryptionSetProperties) GetPreviousKeys() (rv []KeyForDiskEncryptionSet) {
	if e != nil {
		return e.PreviousKeys
	}
	return
}

func (e *EncryptionSetProperties) GetProvisioningState() (rv string) {
	if e != nil && e.ProvisioningState != nil {
		return *e.ProvisioningState
	}
	return
}

// EncryptionSettingsCollection - Encryption settings for disk or snapshot
type EncryptionSettingsCollection struct {
	// REQUIRED; Set this flag to true and provide DiskEncryptionKey and optional KeyEncryptionKey to enable encryption. Set this
	// flag to false and remove DiskEncryptionKey and KeyEncryptionKey to disable encryption.
	// If EncryptionSettings is null in the request object, the existing settings remain unchanged.
	Enabled *bool

	// A collection of encryption settings, one for each disk volume.
	EncryptionSettings []EncryptionSettingsElement

	// Describes what type of encryption is used for the disks. Once this field is set, it cannot be overwritten. '1.0' corresponds
	// to Azure Disk Encryption with AAD app.'1.1' corresponds to Azure Disk
	// Encryption.
	EncryptionSettingsVersion *string
}

func (e *EncryptionSettingsCollection) GetEnabled() (rv bool) {
	if e != nil && e.Enabled != nil {
		return *e.Enabled
	}
	return
}

func (e *EncryptionSettingsCollection) GetEncryptionSettings() (rv []EncryptionSettingsElement) {
	if e != nil {
		return e.EncryptionSettings
	}
	return
}

func (e *EncryptionSettingsCollection) GetEncryptionSettingsVersion() (rv string) {
	if e != nil && e.EncryptionSettingsVersion != nil {
		return *e.EncryptionSettingsVersion
	}
	return
}

// EncryptionSettingsElement - Encryption settings for one disk volume.
type EncryptionSettingsElement struct {
	// Key Vault Secret Url and vault id of the disk encryption key
	DiskEncryptionKey *KeyVaultAndSecretReference

	// Key Vault Key Url and vault id of the key encryption key. KeyEncryptionKey is optional and when provided is used to unwrap
	// the disk encryption key.
	KeyEncryptionKey *KeyVaultAndKeyReference
}

func (e *EncryptionSettingsElement) GetDiskEncryptionKey() (rv *KeyVaultAndSecretReference) {
	if e != nil {
		return e.DiskEncryptionKey
	}
	return
}

func (e *EncryptionSettingsElement) GetKeyEncryptionKey() (rv *KeyVaultAndKeyReference) {
	if e != nil {
		return e.KeyEncryptionKey
	}
	return
}

// ExtendedLocation - The complex type of the extended location.
type ExtendedLocation struct {
	// The name of the extended location.
	Name *string

	// The type of the extended location.
	Type *ExtendedLocationTypes
}

func (e *ExtendedLocation) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExtendedLocation) GetType() (rv *ExtendedLocationTypes) {
	if e != nil {
		return e.Type
	}
	return
}

// Extension - Describes a cloud service Extension.
type Extension struct {
	// The name of the extension.
	Name *string

	// Extension Properties.
	Properties *CloudServiceExtensionProperties
}

func (e *Extension) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *Extension) GetProperties() (rv *CloudServiceExtensionProperties) {
	if e != nil {
		return e.Properties
	}
	return
}

// Gallery - Specifies information about the Shared Image Gallery that you want to create or update.
type Gallery struct {
	// REQUIRED; Resource location
	Location *string

	// Describes the properties of a Shared Image Gallery.
	Properties *GalleryProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (g *Gallery) GetLocation() (rv string) {
	if g != nil && g.Location != nil {
		return *g.Location
	}
	return
}

func (g *Gallery) GetProperties() (rv *GalleryProperties) {
	if g != nil {
		return g.Properties
	}
	return
}

func (g *Gallery) GetTags() (rv map[string]*string) {
	if g != nil {
		return g.Tags
	}
	return
}

func (g *Gallery) GetID() (rv string) {
	if g != nil && g.ID != nil {
		return *g.ID
	}
	return
}

func (g *Gallery) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *Gallery) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

// GalleryApplication - Specifies information about the gallery Application Definition that you want to create or update.
type GalleryApplication struct {
	// REQUIRED; Resource location
	Location *string

	// Describes the properties of a gallery Application Definition.
	Properties *GalleryApplicationProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (g *GalleryApplication) GetLocation() (rv string) {
	if g != nil && g.Location != nil {
		return *g.Location
	}
	return
}

func (g *GalleryApplication) GetProperties() (rv *GalleryApplicationProperties) {
	if g != nil {
		return g.Properties
	}
	return
}

func (g *GalleryApplication) GetTags() (rv map[string]*string) {
	if g != nil {
		return g.Tags
	}
	return
}

func (g *GalleryApplication) GetID() (rv string) {
	if g != nil && g.ID != nil {
		return *g.ID
	}
	return
}

func (g *GalleryApplication) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *GalleryApplication) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

// GalleryApplicationList - The List Gallery Applications operation response.
type GalleryApplicationList struct {
	// REQUIRED; A list of Gallery Applications.
	Value []GalleryApplication

	// The uri to fetch the next page of Application Definitions in the Application Gallery. Call ListNext() with this to fetch
	// the next page of gallery Application Definitions.
	NextLink *string
}

func (g *GalleryApplicationList) GetValue() (rv []GalleryApplication) {
	if g != nil {
		return g.Value
	}
	return
}

func (g *GalleryApplicationList) GetNextLink() (rv string) {
	if g != nil && g.NextLink != nil {
		return *g.NextLink
	}
	return
}

// GalleryApplicationProperties - Describes the properties of a gallery Application Definition.
type GalleryApplicationProperties struct {
	// REQUIRED; This property allows you to specify the supported type of the OS that application is built for.
	// Possible values are:
	// Windows
	// Linux
	SupportedOSType *OperatingSystemTypes

	// The description of this gallery Application Definition resource. This property is updatable.
	Description *string

	// The end of life date of the gallery Application Definition. This property can be used for decommissioning purposes. This
	// property is updatable.
	EndOfLifeDate *time.Time

	// The Eula agreement for the gallery Application Definition.
	Eula *string

	// The privacy statement uri.
	PrivacyStatementURI *string

	// The release note uri.
	ReleaseNoteURI *string
}

func (g *GalleryApplicationProperties) GetSupportedOSType() (rv *OperatingSystemTypes) {
	if g != nil {
		return g.SupportedOSType
	}
	return
}

func (g *GalleryApplicationProperties) GetDescription() (rv string) {
	if g != nil && g.Description != nil {
		return *g.Description
	}
	return
}

func (g *GalleryApplicationProperties) GetEndOfLifeDate() (rv *time.Time) {
	if g != nil {
		return g.EndOfLifeDate
	}
	return
}

func (g *GalleryApplicationProperties) GetEula() (rv string) {
	if g != nil && g.Eula != nil {
		return *g.Eula
	}
	return
}

func (g *GalleryApplicationProperties) GetPrivacyStatementURI() (rv string) {
	if g != nil && g.PrivacyStatementURI != nil {
		return *g.PrivacyStatementURI
	}
	return
}

func (g *GalleryApplicationProperties) GetReleaseNoteURI() (rv string) {
	if g != nil && g.ReleaseNoteURI != nil {
		return *g.ReleaseNoteURI
	}
	return
}

// GalleryApplicationUpdate - Specifies information about the gallery Application Definition that you want to update.
type GalleryApplicationUpdate struct {
	// Describes the properties of a gallery Application Definition.
	Properties *GalleryApplicationProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (g *GalleryApplicationUpdate) GetProperties() (rv *GalleryApplicationProperties) {
	if g != nil {
		return g.Properties
	}
	return
}

func (g *GalleryApplicationUpdate) GetTags() (rv map[string]*string) {
	if g != nil {
		return g.Tags
	}
	return
}

func (g *GalleryApplicationUpdate) GetID() (rv string) {
	if g != nil && g.ID != nil {
		return *g.ID
	}
	return
}

func (g *GalleryApplicationUpdate) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *GalleryApplicationUpdate) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

// GalleryApplicationVersion - Specifies information about the gallery Application Version that you want to create or update.
type GalleryApplicationVersion struct {
	// REQUIRED; Resource location
	Location *string

	// Describes the properties of a gallery image version.
	Properties *GalleryApplicationVersionProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (g *GalleryApplicationVersion) GetLocation() (rv string) {
	if g != nil && g.Location != nil {
		return *g.Location
	}
	return
}

func (g *GalleryApplicationVersion) GetProperties() (rv *GalleryApplicationVersionProperties) {
	if g != nil {
		return g.Properties
	}
	return
}

func (g *GalleryApplicationVersion) GetTags() (rv map[string]*string) {
	if g != nil {
		return g.Tags
	}
	return
}

func (g *GalleryApplicationVersion) GetID() (rv string) {
	if g != nil && g.ID != nil {
		return *g.ID
	}
	return
}

func (g *GalleryApplicationVersion) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *GalleryApplicationVersion) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

// GalleryApplicationVersionList - The List Gallery Application version operation response.
type GalleryApplicationVersionList struct {
	// REQUIRED; A list of gallery Application Versions.
	Value []GalleryApplicationVersion

	// The uri to fetch the next page of gallery Application Versions. Call ListNext() with this to fetch the next page of gallery
	// Application Versions.
	NextLink *string
}

func (g *GalleryApplicationVersionList) GetValue() (rv []GalleryApplicationVersion) {
	if g != nil {
		return g.Value
	}
	return
}

func (g *GalleryApplicationVersionList) GetNextLink() (rv string) {
	if g != nil && g.NextLink != nil {
		return *g.NextLink
	}
	return
}

// GalleryApplicationVersionProperties - Describes the properties of a gallery image version.
type GalleryApplicationVersionProperties struct {
	// REQUIRED; The publishing profile of a gallery image version.
	PublishingProfile *GalleryApplicationVersionPublishingProfile

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *GalleryApplicationVersionPropertiesProvisioningState

	// READ-ONLY; This is the replication status of the gallery image version.
	ReplicationStatus *ReplicationStatus
}

func (g *GalleryApplicationVersionProperties) GetPublishingProfile() (rv *GalleryApplicationVersionPublishingProfile) {
	if g != nil {
		return g.PublishingProfile
	}
	return
}

func (g *GalleryApplicationVersionProperties) GetProvisioningState() (rv *GalleryApplicationVersionPropertiesProvisioningState) {
	if g != nil {
		return g.ProvisioningState
	}
	return
}

func (g *GalleryApplicationVersionProperties) GetReplicationStatus() (rv *ReplicationStatus) {
	if g != nil {
		return g.ReplicationStatus
	}
	return
}

// GalleryApplicationVersionPublishingProfile - The publishing profile of a gallery image version.
type GalleryApplicationVersionPublishingProfile struct {
	// REQUIRED; The source image from which the Image Version is going to be created.
	Source *UserArtifactSource

	// Optional. Whether or not this application reports health.
	EnableHealthCheck *bool

	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property
	// is updatable.
	EndOfLifeDate *time.Time

	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest *bool
	ManageActions     *UserArtifactManage

	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when
	// regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount *int32

	// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
	ReplicationMode *ReplicationMode

	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *StorageAccountType

	// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
	TargetExtendedLocations []GalleryTargetExtendedLocation

	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions []TargetRegion

	// READ-ONLY; The timestamp for when the gallery image version is published.
	PublishedDate *time.Time
}

func (g *GalleryApplicationVersionPublishingProfile) GetSource() (rv *UserArtifactSource) {
	if g != nil {
		return g.Source
	}
	return
}

func (g *GalleryApplicationVersionPublishingProfile) GetEnableHealthCheck() (rv bool) {
	if g != nil && g.EnableHealthCheck != nil {
		return *g.EnableHealthCheck
	}
	return
}

func (g *GalleryApplicationVersionPublishingProfile) GetEndOfLifeDate() (rv *time.Time) {
	if g != nil {
		return g.EndOfLifeDate
	}
	return
}

func (g *GalleryApplicationVersionPublishingProfile) GetExcludeFromLatest() (rv bool) {
	if g != nil && g.ExcludeFromLatest != nil {
		return *g.ExcludeFromLatest
	}
	return
}

func (g *GalleryApplicationVersionPublishingProfile) GetManageActions() (rv *UserArtifactManage) {
	if g != nil {
		return g.ManageActions
	}
	return
}

func (g *GalleryApplicationVersionPublishingProfile) GetReplicaCount() (rv int32) {
	if g != nil && g.ReplicaCount != nil {
		return *g.ReplicaCount
	}
	return
}

func (g *GalleryApplicationVersionPublishingProfile) GetReplicationMode() (rv *ReplicationMode) {
	if g != nil {
		return g.ReplicationMode
	}
	return
}

func (g *GalleryApplicationVersionPublishingProfile) GetStorageAccountType() (rv *StorageAccountType) {
	if g != nil {
		return g.StorageAccountType
	}
	return
}

func (g *GalleryApplicationVersionPublishingProfile) GetTargetExtendedLocations() (rv []GalleryTargetExtendedLocation) {
	if g != nil {
		return g.TargetExtendedLocations
	}
	return
}

func (g *GalleryApplicationVersionPublishingProfile) GetTargetRegions() (rv []TargetRegion) {
	if g != nil {
		return g.TargetRegions
	}
	return
}

func (g *GalleryApplicationVersionPublishingProfile) GetPublishedDate() (rv *time.Time) {
	if g != nil {
		return g.PublishedDate
	}
	return
}

// GalleryApplicationVersionUpdate - Specifies information about the gallery Application Version that you want to update.
type GalleryApplicationVersionUpdate struct {
	// Describes the properties of a gallery image version.
	Properties *GalleryApplicationVersionProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (g *GalleryApplicationVersionUpdate) GetProperties() (rv *GalleryApplicationVersionProperties) {
	if g != nil {
		return g.Properties
	}
	return
}

func (g *GalleryApplicationVersionUpdate) GetTags() (rv map[string]*string) {
	if g != nil {
		return g.Tags
	}
	return
}

func (g *GalleryApplicationVersionUpdate) GetID() (rv string) {
	if g != nil && g.ID != nil {
		return *g.ID
	}
	return
}

func (g *GalleryApplicationVersionUpdate) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *GalleryApplicationVersionUpdate) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

// GalleryArtifactVersionSource - The gallery artifact version source.
type GalleryArtifactVersionSource struct {
	// The id of the gallery artifact version source. Can specify a disk uri, snapshot uri, user image or storage account resource.
	ID *string

	// The uri of the gallery artifact version source. Currently used to specify vhd/blob source.
	URI *string
}

func (g *GalleryArtifactVersionSource) GetID() (rv string) {
	if g != nil && g.ID != nil {
		return *g.ID
	}
	return
}

func (g *GalleryArtifactVersionSource) GetURI() (rv string) {
	if g != nil && g.URI != nil {
		return *g.URI
	}
	return
}

// GalleryDataDiskImage - This is the data disk image.
type GalleryDataDiskImage struct {
	// REQUIRED; This property specifies the logical unit number of the data disk. This value is used to identify data disks within
	// the Virtual Machine and therefore must be unique for each data disk attached to the
	// Virtual Machine.
	Lun *int32

	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching *HostCaching

	// The gallery artifact version source.
	Source *GalleryArtifactVersionSource

	// READ-ONLY; This property indicates the size of the VHD to be created.
	SizeInGB *int32
}

func (g *GalleryDataDiskImage) GetLun() (rv int32) {
	if g != nil && g.Lun != nil {
		return *g.Lun
	}
	return
}

func (g *GalleryDataDiskImage) GetHostCaching() (rv *HostCaching) {
	if g != nil {
		return g.HostCaching
	}
	return
}

func (g *GalleryDataDiskImage) GetSource() (rv *GalleryArtifactVersionSource) {
	if g != nil {
		return g.Source
	}
	return
}

func (g *GalleryDataDiskImage) GetSizeInGB() (rv int32) {
	if g != nil && g.SizeInGB != nil {
		return *g.SizeInGB
	}
	return
}

// GalleryExtendedLocation - The name of the extended location.
type GalleryExtendedLocation struct {
	Name *string

	// It is type of the extended location.
	Type *GalleryExtendedLocationType
}

func (g *GalleryExtendedLocation) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *GalleryExtendedLocation) GetType() (rv *GalleryExtendedLocationType) {
	if g != nil {
		return g.Type
	}
	return
}

// GalleryIdentifier - Describes the gallery unique name.
type GalleryIdentifier struct {
	// READ-ONLY; The unique name of the Shared Image Gallery. This name is generated automatically by Azure.
	UniqueName *string
}

func (g *GalleryIdentifier) GetUniqueName() (rv string) {
	if g != nil && g.UniqueName != nil {
		return *g.UniqueName
	}
	return
}

// GalleryImage - Specifies information about the gallery image definition that you want to create or update.
type GalleryImage struct {
	// REQUIRED; Resource location
	Location *string

	// Describes the properties of a gallery image definition.
	Properties *GalleryImageProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (g *GalleryImage) GetLocation() (rv string) {
	if g != nil && g.Location != nil {
		return *g.Location
	}
	return
}

func (g *GalleryImage) GetProperties() (rv *GalleryImageProperties) {
	if g != nil {
		return g.Properties
	}
	return
}

func (g *GalleryImage) GetTags() (rv map[string]*string) {
	if g != nil {
		return g.Tags
	}
	return
}

func (g *GalleryImage) GetID() (rv string) {
	if g != nil && g.ID != nil {
		return *g.ID
	}
	return
}

func (g *GalleryImage) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *GalleryImage) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

// GalleryImageFeature - A feature for gallery image.
type GalleryImageFeature struct {
	// The name of the gallery image feature.
	Name *string

	// The value of the gallery image feature.
	Value *string
}

func (g *GalleryImageFeature) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *GalleryImageFeature) GetValue() (rv string) {
	if g != nil && g.Value != nil {
		return *g.Value
	}
	return
}

// GalleryImageIdentifier - This is the gallery image definition identifier.
type GalleryImageIdentifier struct {
	// REQUIRED; The name of the gallery image definition offer.
	Offer *string

	// REQUIRED; The name of the gallery image definition publisher.
	Publisher *string

	// REQUIRED; The name of the gallery image definition SKU.
	SKU *string
}

func (g *GalleryImageIdentifier) GetOffer() (rv string) {
	if g != nil && g.Offer != nil {
		return *g.Offer
	}
	return
}

func (g *GalleryImageIdentifier) GetPublisher() (rv string) {
	if g != nil && g.Publisher != nil {
		return *g.Publisher
	}
	return
}

func (g *GalleryImageIdentifier) GetSKU() (rv string) {
	if g != nil && g.SKU != nil {
		return *g.SKU
	}
	return
}

// GalleryImageList - The List Gallery Images operation response.
type GalleryImageList struct {
	// REQUIRED; A list of Shared Image Gallery images.
	Value []GalleryImage

	// The uri to fetch the next page of Image Definitions in the Shared Image Gallery. Call ListNext() with this to fetch the
	// next page of gallery image definitions.
	NextLink *string
}

func (g *GalleryImageList) GetValue() (rv []GalleryImage) {
	if g != nil {
		return g.Value
	}
	return
}

func (g *GalleryImageList) GetNextLink() (rv string) {
	if g != nil && g.NextLink != nil {
		return *g.NextLink
	}
	return
}

// GalleryImageProperties - Describes the properties of a gallery image definition.
type GalleryImageProperties struct {
	// REQUIRED; This is the gallery image definition identifier.
	Identifier *GalleryImageIdentifier

	// REQUIRED; This property allows the user to specify whether the virtual machines created under this image are 'Generalized'
	// or 'Specialized'.
	OSState *OperatingSystemStateTypes

	// REQUIRED; This property allows you to specify the type of the OS that is included in the disk when creating a VM from a
	// managed image.
	// Possible values are:
	// Windows
	// Linux
	OSType *OperatingSystemTypes

	// The architecture of the image. Applicable to OS disks only.
	Architecture *Architecture

	// The description of this gallery image definition resource. This property is updatable.
	Description *string

	// Describes the disallowed disk types.
	Disallowed *Disallowed

	// The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property
	// is updatable.
	EndOfLifeDate *time.Time

	// The Eula agreement for the gallery image definition.
	Eula *string

	// A list of gallery image features.
	Features []GalleryImageFeature

	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *HyperVGeneration

	// The privacy statement uri.
	PrivacyStatementURI *string

	// Describes the gallery image definition purchase plan. This is used by marketplace images.
	PurchasePlan *ImagePurchasePlan

	// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
	Recommended *RecommendedMachineConfiguration

	// The release note uri.
	ReleaseNoteURI *string

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *GalleryImagePropertiesProvisioningState
}

func (g *GalleryImageProperties) GetIdentifier() (rv *GalleryImageIdentifier) {
	if g != nil {
		return g.Identifier
	}
	return
}

func (g *GalleryImageProperties) GetOSState() (rv *OperatingSystemStateTypes) {
	if g != nil {
		return g.OSState
	}
	return
}

func (g *GalleryImageProperties) GetOSType() (rv *OperatingSystemTypes) {
	if g != nil {
		return g.OSType
	}
	return
}

func (g *GalleryImageProperties) GetArchitecture() (rv *Architecture) {
	if g != nil {
		return g.Architecture
	}
	return
}

func (g *GalleryImageProperties) GetDescription() (rv string) {
	if g != nil && g.Description != nil {
		return *g.Description
	}
	return
}

func (g *GalleryImageProperties) GetDisallowed() (rv *Disallowed) {
	if g != nil {
		return g.Disallowed
	}
	return
}

func (g *GalleryImageProperties) GetEndOfLifeDate() (rv *time.Time) {
	if g != nil {
		return g.EndOfLifeDate
	}
	return
}

func (g *GalleryImageProperties) GetEula() (rv string) {
	if g != nil && g.Eula != nil {
		return *g.Eula
	}
	return
}

func (g *GalleryImageProperties) GetFeatures() (rv []GalleryImageFeature) {
	if g != nil {
		return g.Features
	}
	return
}

func (g *GalleryImageProperties) GetHyperVGeneration() (rv *HyperVGeneration) {
	if g != nil {
		return g.HyperVGeneration
	}
	return
}

func (g *GalleryImageProperties) GetPrivacyStatementURI() (rv string) {
	if g != nil && g.PrivacyStatementURI != nil {
		return *g.PrivacyStatementURI
	}
	return
}

func (g *GalleryImageProperties) GetPurchasePlan() (rv *ImagePurchasePlan) {
	if g != nil {
		return g.PurchasePlan
	}
	return
}

func (g *GalleryImageProperties) GetRecommended() (rv *RecommendedMachineConfiguration) {
	if g != nil {
		return g.Recommended
	}
	return
}

func (g *GalleryImageProperties) GetReleaseNoteURI() (rv string) {
	if g != nil && g.ReleaseNoteURI != nil {
		return *g.ReleaseNoteURI
	}
	return
}

func (g *GalleryImageProperties) GetProvisioningState() (rv *GalleryImagePropertiesProvisioningState) {
	if g != nil {
		return g.ProvisioningState
	}
	return
}

// GalleryImageUpdate - Specifies information about the gallery image definition that you want to update.
type GalleryImageUpdate struct {
	// Describes the properties of a gallery image definition.
	Properties *GalleryImageProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (g *GalleryImageUpdate) GetProperties() (rv *GalleryImageProperties) {
	if g != nil {
		return g.Properties
	}
	return
}

func (g *GalleryImageUpdate) GetTags() (rv map[string]*string) {
	if g != nil {
		return g.Tags
	}
	return
}

func (g *GalleryImageUpdate) GetID() (rv string) {
	if g != nil && g.ID != nil {
		return *g.ID
	}
	return
}

func (g *GalleryImageUpdate) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *GalleryImageUpdate) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

// GalleryImageVersion - Specifies information about the gallery image version that you want to create or update.
type GalleryImageVersion struct {
	// REQUIRED; Resource location
	Location *string

	// Describes the properties of a gallery image version.
	Properties *GalleryImageVersionProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (g *GalleryImageVersion) GetLocation() (rv string) {
	if g != nil && g.Location != nil {
		return *g.Location
	}
	return
}

func (g *GalleryImageVersion) GetProperties() (rv *GalleryImageVersionProperties) {
	if g != nil {
		return g.Properties
	}
	return
}

func (g *GalleryImageVersion) GetTags() (rv map[string]*string) {
	if g != nil {
		return g.Tags
	}
	return
}

func (g *GalleryImageVersion) GetID() (rv string) {
	if g != nil && g.ID != nil {
		return *g.ID
	}
	return
}

func (g *GalleryImageVersion) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *GalleryImageVersion) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

// GalleryImageVersionList - The List Gallery Image version operation response.
type GalleryImageVersionList struct {
	// REQUIRED; A list of gallery image versions.
	Value []GalleryImageVersion

	// The uri to fetch the next page of gallery image versions. Call ListNext() with this to fetch the next page of gallery image
	// versions.
	NextLink *string
}

func (g *GalleryImageVersionList) GetValue() (rv []GalleryImageVersion) {
	if g != nil {
		return g.Value
	}
	return
}

func (g *GalleryImageVersionList) GetNextLink() (rv string) {
	if g != nil && g.NextLink != nil {
		return *g.NextLink
	}
	return
}

// GalleryImageVersionProperties - Describes the properties of a gallery image version.
type GalleryImageVersionProperties struct {
	// REQUIRED; This is the storage profile of a Gallery Image Version.
	StorageProfile *GalleryImageVersionStorageProfile

	// The publishing profile of a gallery image Version.
	PublishingProfile *GalleryImageVersionPublishingProfile

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *GalleryImageVersionPropertiesProvisioningState

	// READ-ONLY; This is the replication status of the gallery image version.
	ReplicationStatus *ReplicationStatus
}

func (g *GalleryImageVersionProperties) GetStorageProfile() (rv *GalleryImageVersionStorageProfile) {
	if g != nil {
		return g.StorageProfile
	}
	return
}

func (g *GalleryImageVersionProperties) GetPublishingProfile() (rv *GalleryImageVersionPublishingProfile) {
	if g != nil {
		return g.PublishingProfile
	}
	return
}

func (g *GalleryImageVersionProperties) GetProvisioningState() (rv *GalleryImageVersionPropertiesProvisioningState) {
	if g != nil {
		return g.ProvisioningState
	}
	return
}

func (g *GalleryImageVersionProperties) GetReplicationStatus() (rv *ReplicationStatus) {
	if g != nil {
		return g.ReplicationStatus
	}
	return
}

// GalleryImageVersionPublishingProfile - The publishing profile of a gallery image Version.
type GalleryImageVersionPublishingProfile struct {
	// The end of life date of the gallery image version. This property can be used for decommissioning purposes. This property
	// is updatable.
	EndOfLifeDate *time.Time

	// If set to true, Virtual Machines deployed from the latest version of the Image Definition won't use this Image Version.
	ExcludeFromLatest *bool

	// The number of replicas of the Image Version to be created per region. This property would take effect for a region when
	// regionalReplicaCount is not specified. This property is updatable.
	ReplicaCount *int32

	// Optional parameter which specifies the mode to be used for replication. This property is not updatable.
	ReplicationMode *ReplicationMode

	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *StorageAccountType

	// The target extended locations where the Image Version is going to be replicated to. This property is updatable.
	TargetExtendedLocations []GalleryTargetExtendedLocation

	// The target regions where the Image Version is going to be replicated to. This property is updatable.
	TargetRegions []TargetRegion

	// READ-ONLY; The timestamp for when the gallery image version is published.
	PublishedDate *time.Time
}

func (g *GalleryImageVersionPublishingProfile) GetEndOfLifeDate() (rv *time.Time) {
	if g != nil {
		return g.EndOfLifeDate
	}
	return
}

func (g *GalleryImageVersionPublishingProfile) GetExcludeFromLatest() (rv bool) {
	if g != nil && g.ExcludeFromLatest != nil {
		return *g.ExcludeFromLatest
	}
	return
}

func (g *GalleryImageVersionPublishingProfile) GetReplicaCount() (rv int32) {
	if g != nil && g.ReplicaCount != nil {
		return *g.ReplicaCount
	}
	return
}

func (g *GalleryImageVersionPublishingProfile) GetReplicationMode() (rv *ReplicationMode) {
	if g != nil {
		return g.ReplicationMode
	}
	return
}

func (g *GalleryImageVersionPublishingProfile) GetStorageAccountType() (rv *StorageAccountType) {
	if g != nil {
		return g.StorageAccountType
	}
	return
}

func (g *GalleryImageVersionPublishingProfile) GetTargetExtendedLocations() (rv []GalleryTargetExtendedLocation) {
	if g != nil {
		return g.TargetExtendedLocations
	}
	return
}

func (g *GalleryImageVersionPublishingProfile) GetTargetRegions() (rv []TargetRegion) {
	if g != nil {
		return g.TargetRegions
	}
	return
}

func (g *GalleryImageVersionPublishingProfile) GetPublishedDate() (rv *time.Time) {
	if g != nil {
		return g.PublishedDate
	}
	return
}

// GalleryImageVersionStorageProfile - This is the storage profile of a Gallery Image Version.
type GalleryImageVersionStorageProfile struct {
	// A list of data disk images.
	DataDiskImages []GalleryDataDiskImage

	// This is the OS disk image.
	OSDiskImage *GalleryOSDiskImage

	// The gallery artifact version source.
	Source *GalleryArtifactVersionSource
}

func (g *GalleryImageVersionStorageProfile) GetDataDiskImages() (rv []GalleryDataDiskImage) {
	if g != nil {
		return g.DataDiskImages
	}
	return
}

func (g *GalleryImageVersionStorageProfile) GetOSDiskImage() (rv *GalleryOSDiskImage) {
	if g != nil {
		return g.OSDiskImage
	}
	return
}

func (g *GalleryImageVersionStorageProfile) GetSource() (rv *GalleryArtifactVersionSource) {
	if g != nil {
		return g.Source
	}
	return
}

// GalleryImageVersionUpdate - Specifies information about the gallery image version that you want to update.
type GalleryImageVersionUpdate struct {
	// Describes the properties of a gallery image version.
	Properties *GalleryImageVersionProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (g *GalleryImageVersionUpdate) GetProperties() (rv *GalleryImageVersionProperties) {
	if g != nil {
		return g.Properties
	}
	return
}

func (g *GalleryImageVersionUpdate) GetTags() (rv map[string]*string) {
	if g != nil {
		return g.Tags
	}
	return
}

func (g *GalleryImageVersionUpdate) GetID() (rv string) {
	if g != nil && g.ID != nil {
		return *g.ID
	}
	return
}

func (g *GalleryImageVersionUpdate) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *GalleryImageVersionUpdate) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

// GalleryList - The List Galleries operation response.
type GalleryList struct {
	// REQUIRED; A list of galleries.
	Value []Gallery

	// The uri to fetch the next page of galleries. Call ListNext() with this to fetch the next page of galleries.
	NextLink *string
}

func (g *GalleryList) GetValue() (rv []Gallery) {
	if g != nil {
		return g.Value
	}
	return
}

func (g *GalleryList) GetNextLink() (rv string) {
	if g != nil && g.NextLink != nil {
		return *g.NextLink
	}
	return
}

// GalleryOSDiskImage - This is the OS disk image.
type GalleryOSDiskImage struct {
	// The host caching of the disk. Valid values are 'None', 'ReadOnly', and 'ReadWrite'
	HostCaching *HostCaching

	// The gallery artifact version source.
	Source *GalleryArtifactVersionSource

	// READ-ONLY; This property indicates the size of the VHD to be created.
	SizeInGB *int32
}

func (g *GalleryOSDiskImage) GetHostCaching() (rv *HostCaching) {
	if g != nil {
		return g.HostCaching
	}
	return
}

func (g *GalleryOSDiskImage) GetSource() (rv *GalleryArtifactVersionSource) {
	if g != nil {
		return g.Source
	}
	return
}

func (g *GalleryOSDiskImage) GetSizeInGB() (rv int32) {
	if g != nil && g.SizeInGB != nil {
		return *g.SizeInGB
	}
	return
}

// GalleryProperties - Describes the properties of a Shared Image Gallery.
type GalleryProperties struct {
	// The description of this Shared Image Gallery resource. This property is updatable.
	Description *string

	// Describes the gallery unique name.
	Identifier *GalleryIdentifier

	// Profile for gallery sharing to subscription or tenant
	SharingProfile *SharingProfile

	// Contains information about the soft deletion policy of the gallery.
	SoftDeletePolicy *SoftDeletePolicy

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *GalleryPropertiesProvisioningState

	// READ-ONLY; Sharing status of current gallery.
	SharingStatus *SharingStatus
}

func (g *GalleryProperties) GetDescription() (rv string) {
	if g != nil && g.Description != nil {
		return *g.Description
	}
	return
}

func (g *GalleryProperties) GetIdentifier() (rv *GalleryIdentifier) {
	if g != nil {
		return g.Identifier
	}
	return
}

func (g *GalleryProperties) GetSharingProfile() (rv *SharingProfile) {
	if g != nil {
		return g.SharingProfile
	}
	return
}

func (g *GalleryProperties) GetSoftDeletePolicy() (rv *SoftDeletePolicy) {
	if g != nil {
		return g.SoftDeletePolicy
	}
	return
}

func (g *GalleryProperties) GetProvisioningState() (rv *GalleryPropertiesProvisioningState) {
	if g != nil {
		return g.ProvisioningState
	}
	return
}

func (g *GalleryProperties) GetSharingStatus() (rv *SharingStatus) {
	if g != nil {
		return g.SharingStatus
	}
	return
}

type GalleryTargetExtendedLocation struct {
	// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
	Encryption *EncryptionImages

	// The name of the extended location.
	ExtendedLocation *GalleryExtendedLocation

	// The number of replicas of the Image Version to be created per extended location. This property is updatable.
	ExtendedLocationReplicaCount *int32

	// The name of the region.
	Name *string

	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *StorageAccountType
}

func (g *GalleryTargetExtendedLocation) GetEncryption() (rv *EncryptionImages) {
	if g != nil {
		return g.Encryption
	}
	return
}

func (g *GalleryTargetExtendedLocation) GetExtendedLocation() (rv *GalleryExtendedLocation) {
	if g != nil {
		return g.ExtendedLocation
	}
	return
}

func (g *GalleryTargetExtendedLocation) GetExtendedLocationReplicaCount() (rv int32) {
	if g != nil && g.ExtendedLocationReplicaCount != nil {
		return *g.ExtendedLocationReplicaCount
	}
	return
}

func (g *GalleryTargetExtendedLocation) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *GalleryTargetExtendedLocation) GetStorageAccountType() (rv *StorageAccountType) {
	if g != nil {
		return g.StorageAccountType
	}
	return
}

// GalleryUpdate - Specifies information about the Shared Image Gallery that you want to update.
type GalleryUpdate struct {
	// Describes the properties of a Shared Image Gallery.
	Properties *GalleryProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (g *GalleryUpdate) GetProperties() (rv *GalleryProperties) {
	if g != nil {
		return g.Properties
	}
	return
}

func (g *GalleryUpdate) GetTags() (rv map[string]*string) {
	if g != nil {
		return g.Tags
	}
	return
}

func (g *GalleryUpdate) GetID() (rv string) {
	if g != nil && g.ID != nil {
		return *g.ID
	}
	return
}

func (g *GalleryUpdate) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *GalleryUpdate) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

// GrantAccessData - Data used for requesting a SAS.
type GrantAccessData struct {
	// REQUIRED
	Access *AccessLevel

	// REQUIRED; Time duration in seconds until the SAS access expires.
	DurationInSeconds *int32

	// Set this flag to true to get additional SAS for VM guest state
	GetSecureVMGuestStateSAS *bool
}

func (g *GrantAccessData) GetAccess() (rv *AccessLevel) {
	if g != nil {
		return g.Access
	}
	return
}

func (g *GrantAccessData) GetDurationInSeconds() (rv int32) {
	if g != nil && g.DurationInSeconds != nil {
		return *g.DurationInSeconds
	}
	return
}

func (g *GrantAccessData) GetGetSecureVMGuestStateSAS() (rv bool) {
	if g != nil && g.GetSecureVMGuestStateSAS != nil {
		return *g.GetSecureVMGuestStateSAS
	}
	return
}

// HardwareProfile - Specifies the hardware settings for the virtual machine.
type HardwareProfile struct {
	// Specifies the size of the virtual machine.
	// The enum data type is currently deprecated and will be removed by December 23rd 2023.
	// Recommended way to get the list of available sizes is using these APIs:
	// List all available virtual machine sizes in an availability set [https://docs.microsoft.com/rest/api/compute/availabilitysets/listavailablesizes]
	// List all available virtual machine sizes in a region [https://docs.microsoft.com/rest/api/compute/resourceskus/list]
	// List all available virtual machine sizes for resizing [https://docs.microsoft.com/rest/api/compute/virtualmachines/listavailablesizes].
	// For more information about virtual machine sizes, see Sizes for
	// virtual machines [https://docs.microsoft.com/azure/virtual-machines/sizes].
	// The available VM sizes depend on region and availability set.
	VMSize *VirtualMachineSizeTypes

	// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-07-01.
	// This feature is still in preview mode and is not supported for VirtualMachineScaleSet.
	// Please follow the instructions in VM Customization [https://aka.ms/vmcustomization] for more details.
	VMSizeProperties *VMSizeProperties
}

func (h *HardwareProfile) GetVMSize() (rv *VirtualMachineSizeTypes) {
	if h != nil {
		return h.VMSize
	}
	return
}

func (h *HardwareProfile) GetVMSizeProperties() (rv *VMSizeProperties) {
	if h != nil {
		return h.VMSizeProperties
	}
	return
}

// Image - The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual
// machine. If SourceImage is provided, the destination virtual hard drive must not
// exist.
type Image struct {
	// REQUIRED; Resource location
	Location *string

	// The extended location of the Image.
	ExtendedLocation *ExtendedLocation

	// Describes the properties of an Image.
	Properties *ImageProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (i *Image) GetLocation() (rv string) {
	if i != nil && i.Location != nil {
		return *i.Location
	}
	return
}

func (i *Image) GetExtendedLocation() (rv *ExtendedLocation) {
	if i != nil {
		return i.ExtendedLocation
	}
	return
}

func (i *Image) GetProperties() (rv *ImageProperties) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *Image) GetTags() (rv map[string]*string) {
	if i != nil {
		return i.Tags
	}
	return
}

func (i *Image) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *Image) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *Image) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

// ImageDataDisk - Describes a data disk.
type ImageDataDisk struct {
	// REQUIRED; Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and
	// therefore must be unique for each data disk attached to a VM.
	Lun *int32

	// The Virtual Hard Disk.
	BlobURI *string

	// Specifies the caching requirements.
	// Possible values are:
	// None
	// ReadOnly
	// ReadWrite
	// Default: None for Standard storage. ReadOnly for Premium storage
	Caching *CachingTypes

	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet *DiskEncryptionSetParameters

	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual
	// machine image.
	// This value cannot be larger than 1023 GB
	DiskSizeGB *int32

	// The managedDisk.
	ManagedDisk *SubResource

	// The snapshot.
	Snapshot *SubResource

	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot
	// be used with OS Disk.
	StorageAccountType *StorageAccountTypes
}

func (i *ImageDataDisk) GetLun() (rv int32) {
	if i != nil && i.Lun != nil {
		return *i.Lun
	}
	return
}

func (i *ImageDataDisk) GetBlobURI() (rv string) {
	if i != nil && i.BlobURI != nil {
		return *i.BlobURI
	}
	return
}

func (i *ImageDataDisk) GetCaching() (rv *CachingTypes) {
	if i != nil {
		return i.Caching
	}
	return
}

func (i *ImageDataDisk) GetDiskEncryptionSet() (rv *DiskEncryptionSetParameters) {
	if i != nil {
		return i.DiskEncryptionSet
	}
	return
}

func (i *ImageDataDisk) GetDiskSizeGB() (rv int32) {
	if i != nil && i.DiskSizeGB != nil {
		return *i.DiskSizeGB
	}
	return
}

func (i *ImageDataDisk) GetManagedDisk() (rv *SubResource) {
	if i != nil {
		return i.ManagedDisk
	}
	return
}

func (i *ImageDataDisk) GetSnapshot() (rv *SubResource) {
	if i != nil {
		return i.Snapshot
	}
	return
}

func (i *ImageDataDisk) GetStorageAccountType() (rv *StorageAccountTypes) {
	if i != nil {
		return i.StorageAccountType
	}
	return
}

// ImageDiskReference - The source image used for creating the disk.
type ImageDiskReference struct {
	// REQUIRED; A relative uri containing either a Platform Image Repository or user image reference.
	ID *string

	// If the disk is created from an image's data disk, this is an index that indicates which of the data disks in the image
	// to use. For OS disks, this field is null.
	Lun *int32
}

func (i *ImageDiskReference) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *ImageDiskReference) GetLun() (rv int32) {
	if i != nil && i.Lun != nil {
		return *i.Lun
	}
	return
}

// ImageListResult - The List Image operation response.
type ImageListResult struct {
	// REQUIRED; The list of Images.
	Value []Image

	// The uri to fetch the next page of Images. Call ListNext() with this to fetch the next page of Images.
	NextLink *string
}

func (i *ImageListResult) GetValue() (rv []Image) {
	if i != nil {
		return i.Value
	}
	return
}

func (i *ImageListResult) GetNextLink() (rv string) {
	if i != nil && i.NextLink != nil {
		return *i.NextLink
	}
	return
}

// ImageOSDisk - Describes an Operating System disk.
type ImageOSDisk struct {
	// REQUIRED; The OS State.
	OSState *OperatingSystemStateTypes

	// REQUIRED; This property allows you to specify the type of the OS that is included in the disk if creating a VM from a custom
	// image.
	// Possible values are:
	// Windows
	// Linux
	OSType *OperatingSystemTypes

	// The Virtual Hard Disk.
	BlobURI *string

	// Specifies the caching requirements.
	// Possible values are:
	// None
	// ReadOnly
	// ReadWrite
	// Default: None for Standard storage. ReadOnly for Premium storage
	Caching *CachingTypes

	// Specifies the customer managed disk encryption set resource id for the managed image disk.
	DiskEncryptionSet *DiskEncryptionSetParameters

	// Specifies the size of empty data disks in gigabytes. This element can be used to overwrite the name of the disk in a virtual
	// machine image.
	// This value cannot be larger than 1023 GB
	DiskSizeGB *int32

	// The managedDisk.
	ManagedDisk *SubResource

	// The snapshot.
	Snapshot *SubResource

	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot
	// be used with OS Disk.
	StorageAccountType *StorageAccountTypes
}

func (i *ImageOSDisk) GetOSState() (rv *OperatingSystemStateTypes) {
	if i != nil {
		return i.OSState
	}
	return
}

func (i *ImageOSDisk) GetOSType() (rv *OperatingSystemTypes) {
	if i != nil {
		return i.OSType
	}
	return
}

func (i *ImageOSDisk) GetBlobURI() (rv string) {
	if i != nil && i.BlobURI != nil {
		return *i.BlobURI
	}
	return
}

func (i *ImageOSDisk) GetCaching() (rv *CachingTypes) {
	if i != nil {
		return i.Caching
	}
	return
}

func (i *ImageOSDisk) GetDiskEncryptionSet() (rv *DiskEncryptionSetParameters) {
	if i != nil {
		return i.DiskEncryptionSet
	}
	return
}

func (i *ImageOSDisk) GetDiskSizeGB() (rv int32) {
	if i != nil && i.DiskSizeGB != nil {
		return *i.DiskSizeGB
	}
	return
}

func (i *ImageOSDisk) GetManagedDisk() (rv *SubResource) {
	if i != nil {
		return i.ManagedDisk
	}
	return
}

func (i *ImageOSDisk) GetSnapshot() (rv *SubResource) {
	if i != nil {
		return i.Snapshot
	}
	return
}

func (i *ImageOSDisk) GetStorageAccountType() (rv *StorageAccountTypes) {
	if i != nil {
		return i.StorageAccountType
	}
	return
}

// ImageProperties - Describes the properties of an Image.
type ImageProperties struct {
	// Specifies the HyperVGenerationType of the VirtualMachine created from the image. From API Version 2019-03-01 if the image
	// source is a blob, then we need the user to specify the value, if the source is
	// managed resource like disk or snapshot, we may require the user to specify the property if we cannot deduce it from the
	// source managed resource.
	HyperVGeneration *HyperVGenerationTypes

	// The source virtual machine from which Image is created.
	SourceVirtualMachine *SubResource

	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *ImageStorageProfile

	// READ-ONLY; The provisioning state.
	ProvisioningState *string
}

func (i *ImageProperties) GetHyperVGeneration() (rv *HyperVGenerationTypes) {
	if i != nil {
		return i.HyperVGeneration
	}
	return
}

func (i *ImageProperties) GetSourceVirtualMachine() (rv *SubResource) {
	if i != nil {
		return i.SourceVirtualMachine
	}
	return
}

func (i *ImageProperties) GetStorageProfile() (rv *ImageStorageProfile) {
	if i != nil {
		return i.StorageProfile
	}
	return
}

func (i *ImageProperties) GetProvisioningState() (rv string) {
	if i != nil && i.ProvisioningState != nil {
		return *i.ProvisioningState
	}
	return
}

// ImagePurchasePlan - Describes the gallery image definition purchase plan. This is used by marketplace images.
type ImagePurchasePlan struct {
	// The plan ID.
	Name *string

	// The product ID.
	Product *string

	// The publisher ID.
	Publisher *string
}

func (i *ImagePurchasePlan) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *ImagePurchasePlan) GetProduct() (rv string) {
	if i != nil && i.Product != nil {
		return *i.Product
	}
	return
}

func (i *ImagePurchasePlan) GetPublisher() (rv string) {
	if i != nil && i.Publisher != nil {
		return *i.Publisher
	}
	return
}

// ImageReference - Specifies information about the image to use. You can specify information about platform images, marketplace
// images, or virtual machine images. This element is required when you want to use a platform
// image, marketplace image, or virtual machine image, but is not used in other creation operations. NOTE: Image reference
// publisher and offer can only be set when you create the scale set.
type ImageReference struct {
	// Specified the community gallery image unique id for vm deployment. This can be fetched from community gallery image GET
	// call.
	CommunityGalleryImageID *string

	// Resource Id
	ID *string

	// Specifies the offer of the platform image or marketplace image used to create the virtual machine.
	Offer *string

	// The image publisher.
	Publisher *string

	// The image SKU.
	SKU *string

	// Specified the shared gallery image unique id for vm deployment. This can be fetched from shared gallery image GET call.
	SharedGalleryImageID *string

	// Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats
	// are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers.
	// Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image
	// will not automatically update after deploy time even if a new version becomes
	// available. Please do not use field 'version' for gallery image deployment, gallery image should always use 'id' field for
	// deployment, to use 'latest' version of gallery image, just set
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/images/{imageName}'
	// in the 'id' field without version input.
	Version *string

	// READ-ONLY; Specifies in decimal numbers, the version of platform image or marketplace image used to create the virtual
	// machine. This readonly field differs from 'version', only if the value specified in
	// 'version' field is 'latest'.
	ExactVersion *string
}

func (i *ImageReference) GetCommunityGalleryImageID() (rv string) {
	if i != nil && i.CommunityGalleryImageID != nil {
		return *i.CommunityGalleryImageID
	}
	return
}

func (i *ImageReference) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *ImageReference) GetOffer() (rv string) {
	if i != nil && i.Offer != nil {
		return *i.Offer
	}
	return
}

func (i *ImageReference) GetPublisher() (rv string) {
	if i != nil && i.Publisher != nil {
		return *i.Publisher
	}
	return
}

func (i *ImageReference) GetSKU() (rv string) {
	if i != nil && i.SKU != nil {
		return *i.SKU
	}
	return
}

func (i *ImageReference) GetSharedGalleryImageID() (rv string) {
	if i != nil && i.SharedGalleryImageID != nil {
		return *i.SharedGalleryImageID
	}
	return
}

func (i *ImageReference) GetVersion() (rv string) {
	if i != nil && i.Version != nil {
		return *i.Version
	}
	return
}

func (i *ImageReference) GetExactVersion() (rv string) {
	if i != nil && i.ExactVersion != nil {
		return *i.ExactVersion
	}
	return
}

// ImageStorageProfile - Describes a storage profile.
type ImageStorageProfile struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine.
	// For more information about disks, see About disks and VHDs for Azure virtual machines [https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview].
	DataDisks []ImageDataDisk

	// Specifies information about the operating system disk used by the virtual machine.
	// For more information about disks, see About disks and VHDs for Azure virtual machines [https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview].
	OSDisk *ImageOSDisk

	// Specifies whether an image is zone resilient or not. Default is false. Zone resilient images can be created only in regions
	// that provide Zone Redundant Storage (ZRS).
	ZoneResilient *bool
}

func (i *ImageStorageProfile) GetDataDisks() (rv []ImageDataDisk) {
	if i != nil {
		return i.DataDisks
	}
	return
}

func (i *ImageStorageProfile) GetOSDisk() (rv *ImageOSDisk) {
	if i != nil {
		return i.OSDisk
	}
	return
}

func (i *ImageStorageProfile) GetZoneResilient() (rv bool) {
	if i != nil && i.ZoneResilient != nil {
		return *i.ZoneResilient
	}
	return
}

// ImageUpdate - The source user image virtual hard disk. Only tags may be updated.
type ImageUpdate struct {
	// Describes the properties of an Image.
	Properties *ImageProperties

	// Resource tags
	Tags map[string]*string
}

func (i *ImageUpdate) GetProperties() (rv *ImageProperties) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *ImageUpdate) GetTags() (rv map[string]*string) {
	if i != nil {
		return i.Tags
	}
	return
}

// InnerError - Inner error details.
type InnerError struct {
	// The internal error message or exception dump.
	Errordetail *string

	// The exception type.
	Exceptiontype *string
}

func (i *InnerError) GetErrordetail() (rv string) {
	if i != nil && i.Errordetail != nil {
		return *i.Errordetail
	}
	return
}

func (i *InnerError) GetExceptiontype() (rv string) {
	if i != nil && i.Exceptiontype != nil {
		return *i.Exceptiontype
	}
	return
}

type InstanceSKU struct {
	// READ-ONLY; The sku name.
	Name *string

	// READ-ONLY; The tier of the cloud service role instance.
	Tier *string
}

func (i *InstanceSKU) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *InstanceSKU) GetTier() (rv string) {
	if i != nil && i.Tier != nil {
		return *i.Tier
	}
	return
}

// InstanceViewStatus - Instance view status.
type InstanceViewStatus struct {
	// The status code.
	Code *string

	// The short localizable label for the status.
	DisplayStatus *string

	// The level code.
	Level *StatusLevelTypes

	// The detailed status message, including for alerts and error messages.
	Message *string

	// The time of the status.
	Time *time.Time
}

func (i *InstanceViewStatus) GetCode() (rv string) {
	if i != nil && i.Code != nil {
		return *i.Code
	}
	return
}

func (i *InstanceViewStatus) GetDisplayStatus() (rv string) {
	if i != nil && i.DisplayStatus != nil {
		return *i.DisplayStatus
	}
	return
}

func (i *InstanceViewStatus) GetLevel() (rv *StatusLevelTypes) {
	if i != nil {
		return i.Level
	}
	return
}

func (i *InstanceViewStatus) GetMessage() (rv string) {
	if i != nil && i.Message != nil {
		return *i.Message
	}
	return
}

func (i *InstanceViewStatus) GetTime() (rv *time.Time) {
	if i != nil {
		return i.Time
	}
	return
}

// InstanceViewStatusesSummary - Instance view statuses.
type InstanceViewStatusesSummary struct {
	// READ-ONLY
	StatusesSummary []StatusCodeCount
}

func (i *InstanceViewStatusesSummary) GetStatusesSummary() (rv []StatusCodeCount) {
	if i != nil {
		return i.StatusesSummary
	}
	return
}

// KeyForDiskEncryptionSet - Key Vault Key Url to be used for server side encryption of Managed Disks and Snapshots
type KeyForDiskEncryptionSet struct {
	// REQUIRED; Fully versioned Key Url pointing to a key in KeyVault. Version segment of the Url is required regardless of rotationToLatestKeyVersionEnabled
	// value.
	KeyURL *string

	// Resource id of the KeyVault containing the key or secret. This property is optional and cannot be used if the KeyVault
	// subscription is not the same as the Disk Encryption Set subscription.
	SourceVault *SourceVault
}

func (k *KeyForDiskEncryptionSet) GetKeyURL() (rv string) {
	if k != nil && k.KeyURL != nil {
		return *k.KeyURL
	}
	return
}

func (k *KeyForDiskEncryptionSet) GetSourceVault() (rv *SourceVault) {
	if k != nil {
		return k.SourceVault
	}
	return
}

// KeyVaultAndKeyReference - Key Vault Key Url and vault id of KeK, KeK is optional and when provided is used to unwrap the
// encryptionKey
type KeyVaultAndKeyReference struct {
	// REQUIRED; Url pointing to a key or secret in KeyVault
	KeyURL *string

	// REQUIRED; Resource id of the KeyVault containing the key or secret
	SourceVault *SourceVault
}

func (k *KeyVaultAndKeyReference) GetKeyURL() (rv string) {
	if k != nil && k.KeyURL != nil {
		return *k.KeyURL
	}
	return
}

func (k *KeyVaultAndKeyReference) GetSourceVault() (rv *SourceVault) {
	if k != nil {
		return k.SourceVault
	}
	return
}

// KeyVaultAndSecretReference - Key Vault Secret Url and vault id of the encryption key
type KeyVaultAndSecretReference struct {
	// REQUIRED; Url pointing to a key or secret in KeyVault
	SecretURL *string

	// REQUIRED; Resource id of the KeyVault containing the key or secret
	SourceVault *SourceVault
}

func (k *KeyVaultAndSecretReference) GetSecretURL() (rv string) {
	if k != nil && k.SecretURL != nil {
		return *k.SecretURL
	}
	return
}

func (k *KeyVaultAndSecretReference) GetSourceVault() (rv *SourceVault) {
	if k != nil {
		return k.SourceVault
	}
	return
}

// KeyVaultKeyReference - Describes a reference to Key Vault Key
type KeyVaultKeyReference struct {
	// REQUIRED; The URL referencing a key encryption key in Key Vault.
	KeyURL *string

	// REQUIRED; The relative URL of the Key Vault containing the key.
	SourceVault *SubResource
}

func (k *KeyVaultKeyReference) GetKeyURL() (rv string) {
	if k != nil && k.KeyURL != nil {
		return *k.KeyURL
	}
	return
}

func (k *KeyVaultKeyReference) GetSourceVault() (rv *SubResource) {
	if k != nil {
		return k.SourceVault
	}
	return
}

// KeyVaultSecretReference - Describes a reference to Key Vault Secret
type KeyVaultSecretReference struct {
	// REQUIRED; The URL referencing a secret in a Key Vault.
	SecretURL *string

	// REQUIRED; The relative URL of the Key Vault containing the secret.
	SourceVault *SubResource
}

func (k *KeyVaultSecretReference) GetSecretURL() (rv string) {
	if k != nil && k.SecretURL != nil {
		return *k.SecretURL
	}
	return
}

func (k *KeyVaultSecretReference) GetSourceVault() (rv *SubResource) {
	if k != nil {
		return k.SourceVault
	}
	return
}

// LastPatchInstallationSummary - Describes the properties of the last installed patch summary.
type LastPatchInstallationSummary struct {
	// READ-ONLY; The errors that were encountered during execution of the operation. The details array contains the list of them.
	Error *APIError

	// READ-ONLY; The number of all available patches but excluded explicitly by a customer-specified exclusion list match.
	ExcludedPatchCount *int32

	// READ-ONLY; The count of patches that failed installation.
	FailedPatchCount *int32

	// READ-ONLY; The activity ID of the operation that produced this result. It is used to correlate across CRP and extension
	// logs.
	InstallationActivityID *string

	// READ-ONLY; The count of patches that successfully installed.
	InstalledPatchCount *int32

	// READ-ONLY; The UTC timestamp when the operation began.
	LastModifiedTime *time.Time

	// READ-ONLY; Describes whether the operation ran out of time before it completed all its intended actions
	MaintenanceWindowExceeded *bool

	// READ-ONLY; The number of all available patches but not going to be installed because it didn't match a classification or
	// inclusion list entry.
	NotSelectedPatchCount *int32

	// READ-ONLY; The number of all available patches expected to be installed over the course of the patch installation operation.
	PendingPatchCount *int32

	// READ-ONLY; The UTC timestamp when the operation began.
	StartTime *time.Time

	// READ-ONLY; The overall success or failure status of the operation. It remains "InProgress" until the operation completes.
	// At that point it will become "Unknown", "Failed", "Succeeded", or
	// "CompletedWithWarnings."
	Status *PatchOperationStatus
}

func (l *LastPatchInstallationSummary) GetError() (rv *APIError) {
	if l != nil {
		return l.Error
	}
	return
}

func (l *LastPatchInstallationSummary) GetExcludedPatchCount() (rv int32) {
	if l != nil && l.ExcludedPatchCount != nil {
		return *l.ExcludedPatchCount
	}
	return
}

func (l *LastPatchInstallationSummary) GetFailedPatchCount() (rv int32) {
	if l != nil && l.FailedPatchCount != nil {
		return *l.FailedPatchCount
	}
	return
}

func (l *LastPatchInstallationSummary) GetInstallationActivityID() (rv string) {
	if l != nil && l.InstallationActivityID != nil {
		return *l.InstallationActivityID
	}
	return
}

func (l *LastPatchInstallationSummary) GetInstalledPatchCount() (rv int32) {
	if l != nil && l.InstalledPatchCount != nil {
		return *l.InstalledPatchCount
	}
	return
}

func (l *LastPatchInstallationSummary) GetLastModifiedTime() (rv *time.Time) {
	if l != nil {
		return l.LastModifiedTime
	}
	return
}

func (l *LastPatchInstallationSummary) GetMaintenanceWindowExceeded() (rv bool) {
	if l != nil && l.MaintenanceWindowExceeded != nil {
		return *l.MaintenanceWindowExceeded
	}
	return
}

func (l *LastPatchInstallationSummary) GetNotSelectedPatchCount() (rv int32) {
	if l != nil && l.NotSelectedPatchCount != nil {
		return *l.NotSelectedPatchCount
	}
	return
}

func (l *LastPatchInstallationSummary) GetPendingPatchCount() (rv int32) {
	if l != nil && l.PendingPatchCount != nil {
		return *l.PendingPatchCount
	}
	return
}

func (l *LastPatchInstallationSummary) GetStartTime() (rv *time.Time) {
	if l != nil {
		return l.StartTime
	}
	return
}

func (l *LastPatchInstallationSummary) GetStatus() (rv *PatchOperationStatus) {
	if l != nil {
		return l.Status
	}
	return
}

// LinuxConfiguration - Specifies the Linux operating system settings on the virtual machine.
// For a list of supported Linux distributions, see Linux on Azure-Endorsed Distributions [https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros].
type LinuxConfiguration struct {
	// Specifies whether password authentication should be disabled.
	DisablePasswordAuthentication *bool

	// [Preview Feature] Specifies settings related to VM Guest Patching on Linux.
	PatchSettings *LinuxPatchSettings

	// Indicates whether virtual machine agent should be provisioned on the virtual machine.
	// When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM
	// Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent *bool

	// Specifies the ssh key configuration for a Linux OS.
	SSH *SSHConfiguration
}

func (l *LinuxConfiguration) GetDisablePasswordAuthentication() (rv bool) {
	if l != nil && l.DisablePasswordAuthentication != nil {
		return *l.DisablePasswordAuthentication
	}
	return
}

func (l *LinuxConfiguration) GetPatchSettings() (rv *LinuxPatchSettings) {
	if l != nil {
		return l.PatchSettings
	}
	return
}

func (l *LinuxConfiguration) GetProvisionVMAgent() (rv bool) {
	if l != nil && l.ProvisionVMAgent != nil {
		return *l.ProvisionVMAgent
	}
	return
}

func (l *LinuxConfiguration) GetSSH() (rv *SSHConfiguration) {
	if l != nil {
		return l.SSH
	}
	return
}

// LinuxParameters - Input for InstallPatches on a Linux VM, as directly received by the API
type LinuxParameters struct {
	// The update classifications to select when installing patches for Linux.
	ClassificationsToInclude []VMGuestPatchClassificationLinux

	// This is used as a maintenance run identifier for Auto VM Guest Patching in Linux.
	MaintenanceRunID *string

	// packages to exclude in the patch operation. Format: packageName_packageVersion
	PackageNameMasksToExclude []string

	// packages to include in the patch operation. Format: packageName_packageVersion
	PackageNameMasksToInclude []string
}

func (l *LinuxParameters) GetClassificationsToInclude() (rv []VMGuestPatchClassificationLinux) {
	if l != nil {
		return l.ClassificationsToInclude
	}
	return
}

func (l *LinuxParameters) GetMaintenanceRunID() (rv string) {
	if l != nil && l.MaintenanceRunID != nil {
		return *l.MaintenanceRunID
	}
	return
}

func (l *LinuxParameters) GetPackageNameMasksToExclude() (rv []string) {
	if l != nil {
		return l.PackageNameMasksToExclude
	}
	return
}

func (l *LinuxParameters) GetPackageNameMasksToInclude() (rv []string) {
	if l != nil {
		return l.PackageNameMasksToInclude
	}
	return
}

// LinuxPatchSettings - Specifies settings related to VM Guest Patching on Linux.
type LinuxPatchSettings struct {
	// Specifies the mode of VM Guest Patch Assessment for the IaaS virtual machine.
	// Possible values are:
	// ImageDefault - You control the timing of patch assessments on a virtual machine.
	// AutomaticByPlatform - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
	AssessmentMode *LinuxPatchAssessmentMode

	// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale
	// set with OrchestrationMode as Flexible.
	// Possible values are:
	// ImageDefault - The virtual machine's default patching configuration is used.
	// AutomaticByPlatform - The virtual machine will be automatically updated by the platform. The property provisionVMAgent
	// must be true
	PatchMode *LinuxVMGuestPatchMode
}

func (l *LinuxPatchSettings) GetAssessmentMode() (rv *LinuxPatchAssessmentMode) {
	if l != nil {
		return l.AssessmentMode
	}
	return
}

func (l *LinuxPatchSettings) GetPatchMode() (rv *LinuxVMGuestPatchMode) {
	if l != nil {
		return l.PatchMode
	}
	return
}

// ListUsagesResult - The List Usages operation response.
type ListUsagesResult struct {
	// REQUIRED; The list of compute resource usages.
	Value []Usage

	// The URI to fetch the next page of compute resource usage information. Call ListNext() with this to fetch the next page
	// of compute resource usage information.
	NextLink *string
}

func (l *ListUsagesResult) GetValue() (rv []Usage) {
	if l != nil {
		return l.Value
	}
	return
}

func (l *ListUsagesResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

// LoadBalancerConfiguration - Describes the load balancer configuration.
type LoadBalancerConfiguration struct {
	// REQUIRED; The name of the Load balancer
	Name *string

	// REQUIRED; Properties of the load balancer configuration.
	Properties *LoadBalancerConfigurationProperties

	// Resource Id
	ID *string
}

func (l *LoadBalancerConfiguration) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LoadBalancerConfiguration) GetProperties() (rv *LoadBalancerConfigurationProperties) {
	if l != nil {
		return l.Properties
	}
	return
}

func (l *LoadBalancerConfiguration) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

type LoadBalancerConfigurationProperties struct {
	// REQUIRED; Specifies the frontend IP to be used for the load balancer. Only IPv4 frontend IP address is supported. Each
	// load balancer configuration must have exactly one frontend IP configuration.
	FrontendIPConfigurations []LoadBalancerFrontendIPConfiguration
}

func (l *LoadBalancerConfigurationProperties) GetFrontendIPConfigurations() (rv []LoadBalancerFrontendIPConfiguration) {
	if l != nil {
		return l.FrontendIPConfigurations
	}
	return
}

type LoadBalancerFrontendIPConfiguration struct {
	// REQUIRED; The name of the resource that is unique within the set of frontend IP configurations used by the load balancer.
	// This name can be used to access the resource.
	Name *string

	// REQUIRED; Properties of load balancer frontend ip configuration.
	Properties *LoadBalancerFrontendIPConfigurationProperties
}

func (l *LoadBalancerFrontendIPConfiguration) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LoadBalancerFrontendIPConfiguration) GetProperties() (rv *LoadBalancerFrontendIPConfigurationProperties) {
	if l != nil {
		return l.Properties
	}
	return
}

// LoadBalancerFrontendIPConfigurationProperties - Describes a cloud service IP Configuration
type LoadBalancerFrontendIPConfigurationProperties struct {
	// The virtual network private IP address of the IP configuration.
	PrivateIPAddress *string

	// The reference to the public ip address resource.
	PublicIPAddress *SubResource

	// The reference to the virtual network subnet resource.
	Subnet *SubResource
}

func (l *LoadBalancerFrontendIPConfigurationProperties) GetPrivateIPAddress() (rv string) {
	if l != nil && l.PrivateIPAddress != nil {
		return *l.PrivateIPAddress
	}
	return
}

func (l *LoadBalancerFrontendIPConfigurationProperties) GetPublicIPAddress() (rv *SubResource) {
	if l != nil {
		return l.PublicIPAddress
	}
	return
}

func (l *LoadBalancerFrontendIPConfigurationProperties) GetSubnet() (rv *SubResource) {
	if l != nil {
		return l.Subnet
	}
	return
}

// LogAnalyticsOperationResult - LogAnalytics operation status response
type LogAnalyticsOperationResult struct {
	// READ-ONLY; LogAnalyticsOutput
	Properties *LogAnalyticsOutput
}

func (l *LogAnalyticsOperationResult) GetProperties() (rv *LogAnalyticsOutput) {
	if l != nil {
		return l.Properties
	}
	return
}

// LogAnalyticsOutput - LogAnalytics output properties
type LogAnalyticsOutput struct {
	// READ-ONLY; Output file Uri path to blob container.
	Output *string
}

func (l *LogAnalyticsOutput) GetOutput() (rv string) {
	if l != nil && l.Output != nil {
		return *l.Output
	}
	return
}

// MaintenanceRedeployStatus - Maintenance Operation Status.
type MaintenanceRedeployStatus struct {
	// True, if customer is allowed to perform Maintenance.
	IsCustomerInitiatedMaintenanceAllowed *bool

	// Message returned for the last Maintenance Operation.
	LastOperationMessage *string

	// The Last Maintenance Operation Result Code.
	LastOperationResultCode *MaintenanceOperationResultCodeTypes

	// End Time for the Maintenance Window.
	MaintenanceWindowEndTime *time.Time

	// Start Time for the Maintenance Window.
	MaintenanceWindowStartTime *time.Time

	// End Time for the Pre Maintenance Window.
	PreMaintenanceWindowEndTime *time.Time

	// Start Time for the Pre Maintenance Window.
	PreMaintenanceWindowStartTime *time.Time
}

func (m *MaintenanceRedeployStatus) GetIsCustomerInitiatedMaintenanceAllowed() (rv bool) {
	if m != nil && m.IsCustomerInitiatedMaintenanceAllowed != nil {
		return *m.IsCustomerInitiatedMaintenanceAllowed
	}
	return
}

func (m *MaintenanceRedeployStatus) GetLastOperationMessage() (rv string) {
	if m != nil && m.LastOperationMessage != nil {
		return *m.LastOperationMessage
	}
	return
}

func (m *MaintenanceRedeployStatus) GetLastOperationResultCode() (rv *MaintenanceOperationResultCodeTypes) {
	if m != nil {
		return m.LastOperationResultCode
	}
	return
}

func (m *MaintenanceRedeployStatus) GetMaintenanceWindowEndTime() (rv *time.Time) {
	if m != nil {
		return m.MaintenanceWindowEndTime
	}
	return
}

func (m *MaintenanceRedeployStatus) GetMaintenanceWindowStartTime() (rv *time.Time) {
	if m != nil {
		return m.MaintenanceWindowStartTime
	}
	return
}

func (m *MaintenanceRedeployStatus) GetPreMaintenanceWindowEndTime() (rv *time.Time) {
	if m != nil {
		return m.PreMaintenanceWindowEndTime
	}
	return
}

func (m *MaintenanceRedeployStatus) GetPreMaintenanceWindowStartTime() (rv *time.Time) {
	if m != nil {
		return m.PreMaintenanceWindowStartTime
	}
	return
}

// ManagedDiskParameters - The parameters of a managed disk.
type ManagedDiskParameters struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet *DiskEncryptionSetParameters

	// Resource Id
	ID *string

	// Specifies the security profile for the managed disk.
	SecurityProfile *VMDiskSecurityProfile

	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot
	// be used with OS Disk.
	StorageAccountType *StorageAccountTypes
}

func (m *ManagedDiskParameters) GetDiskEncryptionSet() (rv *DiskEncryptionSetParameters) {
	if m != nil {
		return m.DiskEncryptionSet
	}
	return
}

func (m *ManagedDiskParameters) GetID() (rv string) {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return
}

func (m *ManagedDiskParameters) GetSecurityProfile() (rv *VMDiskSecurityProfile) {
	if m != nil {
		return m.SecurityProfile
	}
	return
}

func (m *ManagedDiskParameters) GetStorageAccountType() (rv *StorageAccountTypes) {
	if m != nil {
		return m.StorageAccountType
	}
	return
}

// NetworkInterfaceReference - Describes a network interface reference.
type NetworkInterfaceReference struct {
	// Resource Id
	ID *string

	// Describes a network interface reference properties.
	Properties *NetworkInterfaceReferenceProperties
}

func (n *NetworkInterfaceReference) GetID() (rv string) {
	if n != nil && n.ID != nil {
		return *n.ID
	}
	return
}

func (n *NetworkInterfaceReference) GetProperties() (rv *NetworkInterfaceReferenceProperties) {
	if n != nil {
		return n.Properties
	}
	return
}

// NetworkInterfaceReferenceProperties - Describes a network interface reference properties.
type NetworkInterfaceReferenceProperties struct {
	// Specify what happens to the network interface when the VM is deleted
	DeleteOption *DeleteOptions

	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool
}

func (n *NetworkInterfaceReferenceProperties) GetDeleteOption() (rv *DeleteOptions) {
	if n != nil {
		return n.DeleteOption
	}
	return
}

func (n *NetworkInterfaceReferenceProperties) GetPrimary() (rv bool) {
	if n != nil && n.Primary != nil {
		return *n.Primary
	}
	return
}

// NetworkProfile - Specifies the network interfaces or the networking configuration of the virtual machine.
type NetworkProfile struct {
	// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations
	NetworkAPIVersion *NetworkAPIVersion

	// Specifies the networking configurations that will be used to create the virtual machine networking resources.
	NetworkInterfaceConfigurations []VirtualMachineNetworkInterfaceConfiguration

	// Specifies the list of resource Ids for the network interfaces associated with the virtual machine.
	NetworkInterfaces []NetworkInterfaceReference
}

func (n *NetworkProfile) GetNetworkAPIVersion() (rv *NetworkAPIVersion) {
	if n != nil {
		return n.NetworkAPIVersion
	}
	return
}

func (n *NetworkProfile) GetNetworkInterfaceConfigurations() (rv []VirtualMachineNetworkInterfaceConfiguration) {
	if n != nil {
		return n.NetworkInterfaceConfigurations
	}
	return
}

func (n *NetworkProfile) GetNetworkInterfaces() (rv []NetworkInterfaceReference) {
	if n != nil {
		return n.NetworkInterfaces
	}
	return
}

// OSDisk - Specifies information about the operating system disk used by the virtual machine.
// For more information about disks, see About disks and VHDs for Azure virtual machines [https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview].
type OSDisk struct {
	// REQUIRED; Specifies how the virtual machine should be created.
	// Possible values are:
	// Attach \u2013 This value is used when you are using a specialized disk to create the virtual machine.
	// FromImage \u2013 This value is used when you are using an image to create the virtual machine. If you are using a platform
	// image, you also use the imageReference element described above. If you are
	// using a marketplace image, you also use the plan element previously described.
	CreateOption *DiskCreateOptionTypes

	// Specifies the caching requirements.
	// Possible values are:
	// None
	// ReadOnly
	// ReadWrite
	// Default: None for Standard storage. ReadOnly for Premium storage.
	Caching *CachingTypes

	// Specifies whether OS Disk should be deleted or detached upon VM deletion.
	// Possible values:
	// Delete If this value is used, the OS disk is deleted when VM is deleted.
	// Detach If this value is used, the os disk is retained after VM is deleted.
	// The default value is set to detach. For an ephemeral OS Disk, the default value is set to Delete. User cannot change the
	// delete option for ephemeral OS Disk.
	DeleteOption *DiskDeleteOptionTypes

	// Specifies the ephemeral Disk Settings for the operating system disk used by the virtual machine.
	DiffDiskSettings *DiffDiskSettings

	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a
	// virtual machine image.
	// This value cannot be larger than 1023 GB
	DiskSizeGB *int32

	// Specifies the encryption settings for the OS Disk.
	// Minimum api-version: 2015-06-15
	EncryptionSettings *DiskEncryptionSettings

	// The source user image virtual hard disk. The virtual hard disk will be copied before being attached to the virtual machine.
	// If SourceImage is provided, the destination virtual hard drive must not
	// exist.
	Image *VirtualHardDisk

	// The managed disk parameters.
	ManagedDisk *ManagedDiskParameters

	// The disk name.
	Name *string

	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or
	// a specialized VHD.
	// Possible values are:
	// Windows
	// Linux
	OSType *OperatingSystemTypes

	// The virtual hard disk.
	Vhd *VirtualHardDisk

	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool
}

func (o *OSDisk) GetCreateOption() (rv *DiskCreateOptionTypes) {
	if o != nil {
		return o.CreateOption
	}
	return
}

func (o *OSDisk) GetCaching() (rv *CachingTypes) {
	if o != nil {
		return o.Caching
	}
	return
}

func (o *OSDisk) GetDeleteOption() (rv *DiskDeleteOptionTypes) {
	if o != nil {
		return o.DeleteOption
	}
	return
}

func (o *OSDisk) GetDiffDiskSettings() (rv *DiffDiskSettings) {
	if o != nil {
		return o.DiffDiskSettings
	}
	return
}

func (o *OSDisk) GetDiskSizeGB() (rv int32) {
	if o != nil && o.DiskSizeGB != nil {
		return *o.DiskSizeGB
	}
	return
}

func (o *OSDisk) GetEncryptionSettings() (rv *DiskEncryptionSettings) {
	if o != nil {
		return o.EncryptionSettings
	}
	return
}

func (o *OSDisk) GetImage() (rv *VirtualHardDisk) {
	if o != nil {
		return o.Image
	}
	return
}

func (o *OSDisk) GetManagedDisk() (rv *ManagedDiskParameters) {
	if o != nil {
		return o.ManagedDisk
	}
	return
}

func (o *OSDisk) GetName() (rv string) {
	if o != nil && o.Name != nil {
		return *o.Name
	}
	return
}

func (o *OSDisk) GetOSType() (rv *OperatingSystemTypes) {
	if o != nil {
		return o.OSType
	}
	return
}

func (o *OSDisk) GetVhd() (rv *VirtualHardDisk) {
	if o != nil {
		return o.Vhd
	}
	return
}

func (o *OSDisk) GetWriteAcceleratorEnabled() (rv bool) {
	if o != nil && o.WriteAcceleratorEnabled != nil {
		return *o.WriteAcceleratorEnabled
	}
	return
}

// OSDiskImage - Contains the os disk image information.
type OSDiskImage struct {
	// REQUIRED; The operating system of the osDiskImage.
	OperatingSystem *OperatingSystemTypes
}

func (o *OSDiskImage) GetOperatingSystem() (rv *OperatingSystemTypes) {
	if o != nil {
		return o.OperatingSystem
	}
	return
}

// OSDiskImageEncryption - Contains encryption settings for an OS disk image.
type OSDiskImageEncryption struct {
	// A relative URI containing the resource ID of the disk encryption set.
	DiskEncryptionSetID *string

	// This property specifies the security profile of an OS disk image.
	SecurityProfile *OSDiskImageSecurityProfile
}

func (o *OSDiskImageEncryption) GetDiskEncryptionSetID() (rv string) {
	if o != nil && o.DiskEncryptionSetID != nil {
		return *o.DiskEncryptionSetID
	}
	return
}

func (o *OSDiskImageEncryption) GetSecurityProfile() (rv *OSDiskImageSecurityProfile) {
	if o != nil {
		return o.SecurityProfile
	}
	return
}

// OSDiskImageSecurityProfile - Contains security profile for an OS disk image.
type OSDiskImageSecurityProfile struct {
	// confidential VM encryption types
	ConfidentialVMEncryptionType *ConfidentialVMEncryptionType

	// secure VM disk encryption set id
	SecureVMDiskEncryptionSetID *string
}

func (o *OSDiskImageSecurityProfile) GetConfidentialVMEncryptionType() (rv *ConfidentialVMEncryptionType) {
	if o != nil {
		return o.ConfidentialVMEncryptionType
	}
	return
}

func (o *OSDiskImageSecurityProfile) GetSecureVMDiskEncryptionSetID() (rv string) {
	if o != nil && o.SecureVMDiskEncryptionSetID != nil {
		return *o.SecureVMDiskEncryptionSetID
	}
	return
}

// OSFamily - Describes a cloud service OS family.
type OSFamily struct {
	// OS family properties.
	Properties *OSFamilyProperties

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource location.
	Location *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (o *OSFamily) GetProperties() (rv *OSFamilyProperties) {
	if o != nil {
		return o.Properties
	}
	return
}

func (o *OSFamily) GetID() (rv string) {
	if o != nil && o.ID != nil {
		return *o.ID
	}
	return
}

func (o *OSFamily) GetLocation() (rv string) {
	if o != nil && o.Location != nil {
		return *o.Location
	}
	return
}

func (o *OSFamily) GetName() (rv string) {
	if o != nil && o.Name != nil {
		return *o.Name
	}
	return
}

func (o *OSFamily) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

type OSFamilyListResult struct {
	// REQUIRED
	Value    []OSFamily
	NextLink *string
}

func (o *OSFamilyListResult) GetValue() (rv []OSFamily) {
	if o != nil {
		return o.Value
	}
	return
}

func (o *OSFamilyListResult) GetNextLink() (rv string) {
	if o != nil && o.NextLink != nil {
		return *o.NextLink
	}
	return
}

// OSFamilyProperties - OS family properties.
type OSFamilyProperties struct {
	// READ-ONLY; The OS family label.
	Label *string

	// READ-ONLY; The OS family name.
	Name *string

	// READ-ONLY; List of OS versions belonging to this family.
	Versions []OSVersionPropertiesBase
}

func (o *OSFamilyProperties) GetLabel() (rv string) {
	if o != nil && o.Label != nil {
		return *o.Label
	}
	return
}

func (o *OSFamilyProperties) GetName() (rv string) {
	if o != nil && o.Name != nil {
		return *o.Name
	}
	return
}

func (o *OSFamilyProperties) GetVersions() (rv []OSVersionPropertiesBase) {
	if o != nil {
		return o.Versions
	}
	return
}

// OSProfile - Specifies the operating system settings for the virtual machine. Some of the settings cannot be changed once
// VM is provisioned.
type OSProfile struct {
	// Specifies the password of the administrator account.
	// Minimum-length (Windows): 8 characters
	// Minimum-length (Linux): 6 characters
	// Max-length (Windows): 123 characters
	// Max-length (Linux): 72 characters
	// Complexity requirements: 3 out of 4 conditions below need to be fulfilled
	// Has lower characters
	// Has upper characters
	// Has a digit
	// Has a special character (Regex match [\W_])
	// Disallowed values: "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1",
	// "Password22", "iloveyou!"
	// For resetting the password, see How to reset the Remote Desktop service or its login password in a Windows VM [https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp]
	// For resetting root password, see Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension
	// [https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection]
	AdminPassword *string

	// Specifies the name of the administrator account.
	// This property cannot be updated after the VM is created.
	// Windows-only restriction: Cannot end in "."
	// Disallowed values: "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123",
	// "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest",
	// "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5".
	// Minimum-length (Linux): 1 character
	// Max-length (Linux): 64 characters
	// Max-length (Windows): 20 characters.
	AdminUsername *string

	// Specifies whether extension operations should be allowed on the virtual machine.
	// This may only be set to False when no extensions are present on the virtual machine.
	AllowExtensionOperations *bool

	// Specifies the host OS name of the virtual machine.
	// This name cannot be updated after the VM is created.
	// Max-length (Windows): 15 characters
	// Max-length (Linux): 64 characters.
	// For naming conventions and restrictions see Azure infrastructure services implementation guidelines [https://docs.microsoft.com/azure/azure-resource-manager/management/resource-name-rules].
	ComputerName *string

	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved
	// as a file on the Virtual Machine. The maximum length of the binary array is
	// 65535 bytes.
	// Note: Do not pass any secrets or passwords in customData property
	// This property cannot be updated after the VM is created.
	// customData is passed to the VM to be saved as a file, for more information see Custom Data on Azure VMs [https://azure.microsoft.com/blog/custom-data-and-cloud-init-on-windows-azure/]
	// For using cloud-init for your Linux VM, see Using cloud-init to customize a Linux VM during creation [https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init]
	CustomData *string

	// Specifies the Linux operating system settings on the virtual machine.
	// For a list of supported Linux distributions, see Linux on Azure-Endorsed Distributions [https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros].
	LinuxConfiguration *LinuxConfiguration

	// Optional property which must either be set to True or omitted.
	RequireGuestProvisionSignal *bool

	// Specifies set of certificates that should be installed onto the virtual machine. To install certificates on a virtual machine
	// it is recommended to use the Azure Key Vault virtual machine extension for
	// Linux [https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux] or the Azure Key Vault virtual machine
	// extension for Windows
	// [https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows].
	Secrets []VaultSecretGroup

	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration *WindowsConfiguration
}

func (o *OSProfile) GetAdminPassword() (rv string) {
	if o != nil && o.AdminPassword != nil {
		return *o.AdminPassword
	}
	return
}

func (o *OSProfile) GetAdminUsername() (rv string) {
	if o != nil && o.AdminUsername != nil {
		return *o.AdminUsername
	}
	return
}

func (o *OSProfile) GetAllowExtensionOperations() (rv bool) {
	if o != nil && o.AllowExtensionOperations != nil {
		return *o.AllowExtensionOperations
	}
	return
}

func (o *OSProfile) GetComputerName() (rv string) {
	if o != nil && o.ComputerName != nil {
		return *o.ComputerName
	}
	return
}

func (o *OSProfile) GetCustomData() (rv string) {
	if o != nil && o.CustomData != nil {
		return *o.CustomData
	}
	return
}

func (o *OSProfile) GetLinuxConfiguration() (rv *LinuxConfiguration) {
	if o != nil {
		return o.LinuxConfiguration
	}
	return
}

func (o *OSProfile) GetRequireGuestProvisionSignal() (rv bool) {
	if o != nil && o.RequireGuestProvisionSignal != nil {
		return *o.RequireGuestProvisionSignal
	}
	return
}

func (o *OSProfile) GetSecrets() (rv []VaultSecretGroup) {
	if o != nil {
		return o.Secrets
	}
	return
}

func (o *OSProfile) GetWindowsConfiguration() (rv *WindowsConfiguration) {
	if o != nil {
		return o.WindowsConfiguration
	}
	return
}

// OSVersion - Describes a cloud service OS version.
type OSVersion struct {
	// OS version properties.
	Properties *OSVersionProperties

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource location.
	Location *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (o *OSVersion) GetProperties() (rv *OSVersionProperties) {
	if o != nil {
		return o.Properties
	}
	return
}

func (o *OSVersion) GetID() (rv string) {
	if o != nil && o.ID != nil {
		return *o.ID
	}
	return
}

func (o *OSVersion) GetLocation() (rv string) {
	if o != nil && o.Location != nil {
		return *o.Location
	}
	return
}

func (o *OSVersion) GetName() (rv string) {
	if o != nil && o.Name != nil {
		return *o.Name
	}
	return
}

func (o *OSVersion) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

type OSVersionListResult struct {
	// REQUIRED
	Value    []OSVersion
	NextLink *string
}

func (o *OSVersionListResult) GetValue() (rv []OSVersion) {
	if o != nil {
		return o.Value
	}
	return
}

func (o *OSVersionListResult) GetNextLink() (rv string) {
	if o != nil && o.NextLink != nil {
		return *o.NextLink
	}
	return
}

// OSVersionProperties - OS version properties.
type OSVersionProperties struct {
	// READ-ONLY; The family of this OS version.
	Family *string

	// READ-ONLY; The family label of this OS version.
	FamilyLabel *string

	// READ-ONLY; Specifies whether this OS version is active.
	IsActive *bool

	// READ-ONLY; Specifies whether this is the default OS version for its family.
	IsDefault *bool

	// READ-ONLY; The OS version label.
	Label *string

	// READ-ONLY; The OS version.
	Version *string
}

func (o *OSVersionProperties) GetFamily() (rv string) {
	if o != nil && o.Family != nil {
		return *o.Family
	}
	return
}

func (o *OSVersionProperties) GetFamilyLabel() (rv string) {
	if o != nil && o.FamilyLabel != nil {
		return *o.FamilyLabel
	}
	return
}

func (o *OSVersionProperties) GetIsActive() (rv bool) {
	if o != nil && o.IsActive != nil {
		return *o.IsActive
	}
	return
}

func (o *OSVersionProperties) GetIsDefault() (rv bool) {
	if o != nil && o.IsDefault != nil {
		return *o.IsDefault
	}
	return
}

func (o *OSVersionProperties) GetLabel() (rv string) {
	if o != nil && o.Label != nil {
		return *o.Label
	}
	return
}

func (o *OSVersionProperties) GetVersion() (rv string) {
	if o != nil && o.Version != nil {
		return *o.Version
	}
	return
}

// OSVersionPropertiesBase - Configuration view of an OS version.
type OSVersionPropertiesBase struct {
	// READ-ONLY; Specifies whether this OS version is active.
	IsActive *bool

	// READ-ONLY; Specifies whether this is the default OS version for its family.
	IsDefault *bool

	// READ-ONLY; The OS version label.
	Label *string

	// READ-ONLY; The OS version.
	Version *string
}

func (o *OSVersionPropertiesBase) GetIsActive() (rv bool) {
	if o != nil && o.IsActive != nil {
		return *o.IsActive
	}
	return
}

func (o *OSVersionPropertiesBase) GetIsDefault() (rv bool) {
	if o != nil && o.IsDefault != nil {
		return *o.IsDefault
	}
	return
}

func (o *OSVersionPropertiesBase) GetLabel() (rv string) {
	if o != nil && o.Label != nil {
		return *o.Label
	}
	return
}

func (o *OSVersionPropertiesBase) GetVersion() (rv string) {
	if o != nil && o.Version != nil {
		return *o.Version
	}
	return
}

// OperationListResult - The List Compute Operation operation response.
type OperationListResult struct {
	// READ-ONLY; The list of compute operations
	Value []OperationValue
}

func (o *OperationListResult) GetValue() (rv []OperationValue) {
	if o != nil {
		return o.Value
	}
	return
}

// OperationValue - Describes the properties of a Compute Operation value.
type OperationValue struct {
	// Describes the properties of a Compute Operation Value Display.
	Display *OperationValueDisplay

	// READ-ONLY; The name of the compute operation.
	Name *string

	// READ-ONLY; The origin of the compute operation.
	Origin *string
}

func (o *OperationValue) GetDisplay() (rv *OperationValueDisplay) {
	if o != nil {
		return o.Display
	}
	return
}

func (o *OperationValue) GetName() (rv string) {
	if o != nil && o.Name != nil {
		return *o.Name
	}
	return
}

func (o *OperationValue) GetOrigin() (rv string) {
	if o != nil && o.Origin != nil {
		return *o.Origin
	}
	return
}

// OperationValueDisplay - Describes the properties of a Compute Operation Value Display.
type OperationValueDisplay struct {
	// READ-ONLY; The description of the operation.
	Description *string

	// READ-ONLY; The display name of the compute operation.
	Operation *string

	// READ-ONLY; The resource provider for the operation.
	Provider *string

	// READ-ONLY; The display name of the resource the operation applies to.
	Resource *string
}

func (o *OperationValueDisplay) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *OperationValueDisplay) GetOperation() (rv string) {
	if o != nil && o.Operation != nil {
		return *o.Operation
	}
	return
}

func (o *OperationValueDisplay) GetProvider() (rv string) {
	if o != nil && o.Provider != nil {
		return *o.Provider
	}
	return
}

func (o *OperationValueDisplay) GetResource() (rv string) {
	if o != nil && o.Resource != nil {
		return *o.Resource
	}
	return
}

// OrchestrationServiceStateInput - The input for OrchestrationServiceState
type OrchestrationServiceStateInput struct {
	// REQUIRED; The action to be performed.
	Action *OrchestrationServiceStateAction

	// REQUIRED; The name of the service.
	ServiceName *OrchestrationServiceNames
}

func (o *OrchestrationServiceStateInput) GetAction() (rv *OrchestrationServiceStateAction) {
	if o != nil {
		return o.Action
	}
	return
}

func (o *OrchestrationServiceStateInput) GetServiceName() (rv *OrchestrationServiceNames) {
	if o != nil {
		return o.ServiceName
	}
	return
}

// OrchestrationServiceSummary - Summary for an orchestration service of a virtual machine scale set.
type OrchestrationServiceSummary struct {
	// READ-ONLY; The name of the service.
	ServiceName *OrchestrationServiceNames

	// READ-ONLY; The current state of the service.
	ServiceState *OrchestrationServiceState
}

func (o *OrchestrationServiceSummary) GetServiceName() (rv *OrchestrationServiceNames) {
	if o != nil {
		return o.ServiceName
	}
	return
}

func (o *OrchestrationServiceSummary) GetServiceState() (rv *OrchestrationServiceState) {
	if o != nil {
		return o.ServiceState
	}
	return
}

// PatchInstallationDetail - Information about a specific patch that was encountered during an installation action.
type PatchInstallationDetail struct {
	// READ-ONLY; The classification(s) of the patch as provided by the patch publisher.
	Classifications []string

	// READ-ONLY; The state of the patch after the installation operation completed.
	InstallationState *PatchInstallationState

	// READ-ONLY; The KBID of the patch. Only applies to Windows patches.
	KbID *string

	// READ-ONLY; The friendly name of the patch.
	Name *string

	// READ-ONLY; A unique identifier for the patch.
	PatchID *string

	// READ-ONLY; The version string of the package. It may conform to Semantic Versioning. Only applies to Linux.
	Version *string
}

func (p *PatchInstallationDetail) GetClassifications() (rv []string) {
	if p != nil {
		return p.Classifications
	}
	return
}

func (p *PatchInstallationDetail) GetInstallationState() (rv *PatchInstallationState) {
	if p != nil {
		return p.InstallationState
	}
	return
}

func (p *PatchInstallationDetail) GetKbID() (rv string) {
	if p != nil && p.KbID != nil {
		return *p.KbID
	}
	return
}

func (p *PatchInstallationDetail) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PatchInstallationDetail) GetPatchID() (rv string) {
	if p != nil && p.PatchID != nil {
		return *p.PatchID
	}
	return
}

func (p *PatchInstallationDetail) GetVersion() (rv string) {
	if p != nil && p.Version != nil {
		return *p.Version
	}
	return
}

// PatchSettings - Specifies settings related to VM Guest Patching on Windows.
type PatchSettings struct {
	// Specifies the mode of VM Guest patch assessment for the IaaS virtual machine.
	// Possible values are:
	// ImageDefault - You control the timing of patch assessments on a virtual machine.
	// AutomaticByPlatform - The platform will trigger periodic patch assessments. The property provisionVMAgent must be true.
	AssessmentMode *WindowsPatchAssessmentMode

	// Enables customers to patch their Azure VMs without requiring a reboot. For enableHotpatching, the 'provisionVMAgent' must
	// be set to true and 'patchMode' must be set to 'AutomaticByPlatform'.
	EnableHotpatching *bool

	// Specifies the mode of VM Guest Patching to IaaS virtual machine or virtual machines associated to virtual machine scale
	// set with OrchestrationMode as Flexible.
	// Possible values are:
	// Manual - You control the application of patches to a virtual machine. You do this by applying patches manually inside the
	// VM. In this mode, automatic updates are disabled; the property
	// WindowsConfiguration.enableAutomaticUpdates must be false
	// AutomaticByOS - The virtual machine will automatically be updated by the OS. The property WindowsConfiguration.enableAutomaticUpdates
	// must be true.
	// AutomaticByPlatform - the virtual machine will automatically updated by the platform. The properties provisionVMAgent and
	// WindowsConfiguration.enableAutomaticUpdates must be true
	PatchMode *WindowsVMGuestPatchMode
}

func (p *PatchSettings) GetAssessmentMode() (rv *WindowsPatchAssessmentMode) {
	if p != nil {
		return p.AssessmentMode
	}
	return
}

func (p *PatchSettings) GetEnableHotpatching() (rv bool) {
	if p != nil && p.EnableHotpatching != nil {
		return *p.EnableHotpatching
	}
	return
}

func (p *PatchSettings) GetPatchMode() (rv *WindowsVMGuestPatchMode) {
	if p != nil {
		return p.PatchMode
	}
	return
}

// Plan - Specifies information about the marketplace image used to create the virtual machine. This element is only used
// for marketplace images. Before you can use a marketplace image from an API, you must
// enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click
// Want to deploy programmatically, Get Started ->. Enter any required
// information and then click Save.
type Plan struct {
	// The plan ID.
	Name *string

	// Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference element.
	Product *string

	// The promotion code.
	PromotionCode *string

	// The publisher ID.
	Publisher *string
}

func (p *Plan) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *Plan) GetProduct() (rv string) {
	if p != nil && p.Product != nil {
		return *p.Product
	}
	return
}

func (p *Plan) GetPromotionCode() (rv string) {
	if p != nil && p.PromotionCode != nil {
		return *p.PromotionCode
	}
	return
}

func (p *Plan) GetPublisher() (rv string) {
	if p != nil && p.Publisher != nil {
		return *p.Publisher
	}
	return
}

// PrivateEndpoint - The Private Endpoint resource.
type PrivateEndpoint struct {
	// READ-ONLY; The ARM identifier for Private Endpoint
	ID *string
}

func (p *PrivateEndpoint) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

// PrivateEndpointConnection - The Private Endpoint Connection resource.
type PrivateEndpointConnection struct {
	// Resource properties.
	Properties *PrivateEndpointConnectionProperties

	// READ-ONLY; private endpoint connection Id
	ID *string

	// READ-ONLY; private endpoint connection name
	Name *string

	// READ-ONLY; private endpoint connection type
	Type *string
}

func (p *PrivateEndpointConnection) GetProperties() (rv *PrivateEndpointConnectionProperties) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PrivateEndpointConnection) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PrivateEndpointConnection) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PrivateEndpointConnection) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PrivateEndpointConnectionListResult - A list of private link resources
type PrivateEndpointConnectionListResult struct {
	// The uri to fetch the next page of snapshots. Call ListNext() with this to fetch the next page of snapshots.
	NextLink *string

	// Array of private endpoint connections
	Value []PrivateEndpointConnection
}

func (p *PrivateEndpointConnectionListResult) GetNextLink() (rv string) {
	if p != nil && p.NextLink != nil {
		return *p.NextLink
	}
	return
}

func (p *PrivateEndpointConnectionListResult) GetValue() (rv []PrivateEndpointConnection) {
	if p != nil {
		return p.Value
	}
	return
}

// PrivateEndpointConnectionProperties - Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionProperties struct {
	// REQUIRED; A collection of information about the state of the connection between DiskAccess and Virtual Network.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState

	// READ-ONLY; The resource of private end point.
	PrivateEndpoint *PrivateEndpoint

	// READ-ONLY; The provisioning state of the private endpoint connection resource.
	ProvisioningState *PrivateEndpointConnectionProvisioningState
}

func (p *PrivateEndpointConnectionProperties) GetPrivateLinkServiceConnectionState() (rv *PrivateLinkServiceConnectionState) {
	if p != nil {
		return p.PrivateLinkServiceConnectionState
	}
	return
}

func (p *PrivateEndpointConnectionProperties) GetPrivateEndpoint() (rv *PrivateEndpoint) {
	if p != nil {
		return p.PrivateEndpoint
	}
	return
}

func (p *PrivateEndpointConnectionProperties) GetProvisioningState() (rv *PrivateEndpointConnectionProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

// PrivateLinkResource - A private link resource
type PrivateLinkResource struct {
	// Resource properties.
	Properties *PrivateLinkResourceProperties

	// READ-ONLY; private link resource Id
	ID *string

	// READ-ONLY; private link resource name
	Name *string

	// READ-ONLY; private link resource type
	Type *string
}

func (p *PrivateLinkResource) GetProperties() (rv *PrivateLinkResourceProperties) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PrivateLinkResource) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PrivateLinkResource) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PrivateLinkResource) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PrivateLinkResourceListResult - A list of private link resources
type PrivateLinkResourceListResult struct {
	// Array of private link resources
	Value []PrivateLinkResource
}

func (p *PrivateLinkResourceListResult) GetValue() (rv []PrivateLinkResource) {
	if p != nil {
		return p.Value
	}
	return
}

// PrivateLinkResourceProperties - Properties of a private link resource.
type PrivateLinkResourceProperties struct {
	// The private link resource DNS zone name.
	RequiredZoneNames []string

	// READ-ONLY; The private link resource group id.
	GroupID *string

	// READ-ONLY; The private link resource required member names.
	RequiredMembers []string
}

func (p *PrivateLinkResourceProperties) GetRequiredZoneNames() (rv []string) {
	if p != nil {
		return p.RequiredZoneNames
	}
	return
}

func (p *PrivateLinkResourceProperties) GetGroupID() (rv string) {
	if p != nil && p.GroupID != nil {
		return *p.GroupID
	}
	return
}

func (p *PrivateLinkResourceProperties) GetRequiredMembers() (rv []string) {
	if p != nil {
		return p.RequiredMembers
	}
	return
}

// PrivateLinkServiceConnectionState - A collection of information about the state of the connection between service consumer
// and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string

	// The reason for approval/rejection of the connection.
	Description *string

	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *PrivateEndpointServiceConnectionStatus
}

func (p *PrivateLinkServiceConnectionState) GetActionsRequired() (rv string) {
	if p != nil && p.ActionsRequired != nil {
		return *p.ActionsRequired
	}
	return
}

func (p *PrivateLinkServiceConnectionState) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *PrivateLinkServiceConnectionState) GetStatus() (rv *PrivateEndpointServiceConnectionStatus) {
	if p != nil {
		return p.Status
	}
	return
}

// PropertyUpdatesInProgress - Properties of the disk for which update is pending.
type PropertyUpdatesInProgress struct {
	// The target performance tier of the disk if a tier change operation is in progress.
	TargetTier *string
}

func (p *PropertyUpdatesInProgress) GetTargetTier() (rv string) {
	if p != nil && p.TargetTier != nil {
		return *p.TargetTier
	}
	return
}

// ProximityPlacementGroup - Specifies information about the proximity placement group.
type ProximityPlacementGroup struct {
	// REQUIRED; Resource location
	Location *string

	// Describes the properties of a Proximity Placement Group.
	Properties *ProximityPlacementGroupProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (p *ProximityPlacementGroup) GetLocation() (rv string) {
	if p != nil && p.Location != nil {
		return *p.Location
	}
	return
}

func (p *ProximityPlacementGroup) GetProperties() (rv *ProximityPlacementGroupProperties) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *ProximityPlacementGroup) GetTags() (rv map[string]*string) {
	if p != nil {
		return p.Tags
	}
	return
}

func (p *ProximityPlacementGroup) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *ProximityPlacementGroup) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *ProximityPlacementGroup) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// ProximityPlacementGroupListResult - The List Proximity Placement Group operation response.
type ProximityPlacementGroupListResult struct {
	// REQUIRED; The list of proximity placement groups
	Value []ProximityPlacementGroup

	// The URI to fetch the next page of proximity placement groups.
	NextLink *string
}

func (p *ProximityPlacementGroupListResult) GetValue() (rv []ProximityPlacementGroup) {
	if p != nil {
		return p.Value
	}
	return
}

func (p *ProximityPlacementGroupListResult) GetNextLink() (rv string) {
	if p != nil && p.NextLink != nil {
		return *p.NextLink
	}
	return
}

// ProximityPlacementGroupProperties - Describes the properties of a Proximity Placement Group.
type ProximityPlacementGroupProperties struct {
	// Describes colocation status of the Proximity Placement Group.
	ColocationStatus *InstanceViewStatus

	// Specifies the type of the proximity placement group.
	// Possible values are:
	// Standard : Co-locate resources within an Azure region or Availability Zone.
	// Ultra : For future use.
	ProximityPlacementGroupType *ProximityPlacementGroupType

	// READ-ONLY; A list of references to all availability sets in the proximity placement group.
	AvailabilitySets []SubResourceWithColocationStatus

	// READ-ONLY; A list of references to all virtual machine scale sets in the proximity placement group.
	VirtualMachineScaleSets []SubResourceWithColocationStatus

	// READ-ONLY; A list of references to all virtual machines in the proximity placement group.
	VirtualMachines []SubResourceWithColocationStatus
}

func (p *ProximityPlacementGroupProperties) GetColocationStatus() (rv *InstanceViewStatus) {
	if p != nil {
		return p.ColocationStatus
	}
	return
}

func (p *ProximityPlacementGroupProperties) GetProximityPlacementGroupType() (rv *ProximityPlacementGroupType) {
	if p != nil {
		return p.ProximityPlacementGroupType
	}
	return
}

func (p *ProximityPlacementGroupProperties) GetAvailabilitySets() (rv []SubResourceWithColocationStatus) {
	if p != nil {
		return p.AvailabilitySets
	}
	return
}

func (p *ProximityPlacementGroupProperties) GetVirtualMachineScaleSets() (rv []SubResourceWithColocationStatus) {
	if p != nil {
		return p.VirtualMachineScaleSets
	}
	return
}

func (p *ProximityPlacementGroupProperties) GetVirtualMachines() (rv []SubResourceWithColocationStatus) {
	if p != nil {
		return p.VirtualMachines
	}
	return
}

// ProximityPlacementGroupUpdate - Specifies information about the proximity placement group.
type ProximityPlacementGroupUpdate struct {
	// Resource tags
	Tags map[string]*string
}

func (p *ProximityPlacementGroupUpdate) GetTags() (rv map[string]*string) {
	if p != nil {
		return p.Tags
	}
	return
}

// PublicIPAddressSKU - Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
type PublicIPAddressSKU struct {
	// Specify public IP sku name
	Name *PublicIPAddressSKUName

	// Specify public IP sku tier
	Tier *PublicIPAddressSKUTier
}

func (p *PublicIPAddressSKU) GetName() (rv *PublicIPAddressSKUName) {
	if p != nil {
		return p.Name
	}
	return
}

func (p *PublicIPAddressSKU) GetTier() (rv *PublicIPAddressSKUTier) {
	if p != nil {
		return p.Tier
	}
	return
}

// PurchasePlan - Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
type PurchasePlan struct {
	// REQUIRED; The plan ID.
	Name *string

	// REQUIRED; Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference
	// element.
	Product *string

	// REQUIRED; The publisher ID.
	Publisher *string
}

func (p *PurchasePlan) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PurchasePlan) GetProduct() (rv string) {
	if p != nil && p.Product != nil {
		return *p.Product
	}
	return
}

func (p *PurchasePlan) GetPublisher() (rv string) {
	if p != nil && p.Publisher != nil {
		return *p.Publisher
	}
	return
}

// PurchasePlanAutoGenerated - Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
type PurchasePlanAutoGenerated struct {
	// REQUIRED; The plan ID.
	Name *string

	// REQUIRED; Specifies the product of the image from the marketplace. This is the same value as Offer under the imageReference
	// element.
	Product *string

	// REQUIRED; The publisher ID.
	Publisher *string

	// The Offer Promotion Code.
	PromotionCode *string
}

func (p *PurchasePlanAutoGenerated) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PurchasePlanAutoGenerated) GetProduct() (rv string) {
	if p != nil && p.Product != nil {
		return *p.Product
	}
	return
}

func (p *PurchasePlanAutoGenerated) GetPublisher() (rv string) {
	if p != nil && p.Publisher != nil {
		return *p.Publisher
	}
	return
}

func (p *PurchasePlanAutoGenerated) GetPromotionCode() (rv string) {
	if p != nil && p.PromotionCode != nil {
		return *p.PromotionCode
	}
	return
}

// RecommendedMachineConfiguration - The properties describe the recommended machine configuration for this Image Definition.
// These properties are updatable.
type RecommendedMachineConfiguration struct {
	// Describes the resource range.
	Memory *ResourceRange

	// Describes the resource range.
	VCPUs *ResourceRange
}

func (r *RecommendedMachineConfiguration) GetMemory() (rv *ResourceRange) {
	if r != nil {
		return r.Memory
	}
	return
}

func (r *RecommendedMachineConfiguration) GetVCPUs() (rv *ResourceRange) {
	if r != nil {
		return r.VCPUs
	}
	return
}

// RecoveryWalkResponse - Response after calling a manual recovery walk
type RecoveryWalkResponse struct {
	// READ-ONLY; The next update domain that needs to be walked. Null means walk spanning all update domains has been completed
	NextPlatformUpdateDomain *int32

	// READ-ONLY; Whether the recovery walk was performed
	WalkPerformed *bool
}

func (r *RecoveryWalkResponse) GetNextPlatformUpdateDomain() (rv int32) {
	if r != nil && r.NextPlatformUpdateDomain != nil {
		return *r.NextPlatformUpdateDomain
	}
	return
}

func (r *RecoveryWalkResponse) GetWalkPerformed() (rv bool) {
	if r != nil && r.WalkPerformed != nil {
		return *r.WalkPerformed
	}
	return
}

// RegionalReplicationStatus - This is the regional replication status.
type RegionalReplicationStatus struct {
	// READ-ONLY; The details of the replication status.
	Details *string

	// READ-ONLY; It indicates progress of the replication job.
	Progress *int32

	// READ-ONLY; The region to which the gallery image version is being replicated to.
	Region *string

	// READ-ONLY; This is the regional replication state.
	State *ReplicationState
}

func (r *RegionalReplicationStatus) GetDetails() (rv string) {
	if r != nil && r.Details != nil {
		return *r.Details
	}
	return
}

func (r *RegionalReplicationStatus) GetProgress() (rv int32) {
	if r != nil && r.Progress != nil {
		return *r.Progress
	}
	return
}

func (r *RegionalReplicationStatus) GetRegion() (rv string) {
	if r != nil && r.Region != nil {
		return *r.Region
	}
	return
}

func (r *RegionalReplicationStatus) GetState() (rv *ReplicationState) {
	if r != nil {
		return r.State
	}
	return
}

// RegionalSharingStatus - Gallery regional sharing status
type RegionalSharingStatus struct {
	// Details of gallery regional sharing failure.
	Details *string

	// Region name
	Region *string

	// READ-ONLY; Gallery sharing state in current region
	State *SharingState
}

func (r *RegionalSharingStatus) GetDetails() (rv string) {
	if r != nil && r.Details != nil {
		return *r.Details
	}
	return
}

func (r *RegionalSharingStatus) GetRegion() (rv string) {
	if r != nil && r.Region != nil {
		return *r.Region
	}
	return
}

func (r *RegionalSharingStatus) GetState() (rv *SharingState) {
	if r != nil {
		return r.State
	}
	return
}

// ReplicationStatus - This is the replication status of the gallery image version.
type ReplicationStatus struct {
	// READ-ONLY; This is the aggregated replication status based on all the regional replication status flags.
	AggregatedState *AggregatedReplicationState

	// READ-ONLY; This is a summary of replication status for each region.
	Summary []RegionalReplicationStatus
}

func (r *ReplicationStatus) GetAggregatedState() (rv *AggregatedReplicationState) {
	if r != nil {
		return r.AggregatedState
	}
	return
}

func (r *ReplicationStatus) GetSummary() (rv []RegionalReplicationStatus) {
	if r != nil {
		return r.Summary
	}
	return
}

// RequestRateByIntervalInput - Api request input for LogAnalytics getRequestRateByInterval Api.
type RequestRateByIntervalInput struct {
	// REQUIRED; SAS Uri of the logging blob container to which LogAnalytics Api writes output logs to.
	BlobContainerSasURI *string

	// REQUIRED; From time of the query
	FromTime *time.Time

	// REQUIRED; Interval value in minutes used to create LogAnalytics call rate logs.
	IntervalLength *IntervalInMins

	// REQUIRED; To time of the query
	ToTime *time.Time

	// Group query result by Client Application ID.
	GroupByClientApplicationID *bool

	// Group query result by Operation Name.
	GroupByOperationName *bool

	// Group query result by Resource Name.
	GroupByResourceName *bool

	// Group query result by Throttle Policy applied.
	GroupByThrottlePolicy *bool

	// Group query result by User Agent.
	GroupByUserAgent *bool
}

func (r *RequestRateByIntervalInput) GetBlobContainerSasURI() (rv string) {
	if r != nil && r.BlobContainerSasURI != nil {
		return *r.BlobContainerSasURI
	}
	return
}

func (r *RequestRateByIntervalInput) GetFromTime() (rv *time.Time) {
	if r != nil {
		return r.FromTime
	}
	return
}

func (r *RequestRateByIntervalInput) GetIntervalLength() (rv *IntervalInMins) {
	if r != nil {
		return r.IntervalLength
	}
	return
}

func (r *RequestRateByIntervalInput) GetToTime() (rv *time.Time) {
	if r != nil {
		return r.ToTime
	}
	return
}

func (r *RequestRateByIntervalInput) GetGroupByClientApplicationID() (rv bool) {
	if r != nil && r.GroupByClientApplicationID != nil {
		return *r.GroupByClientApplicationID
	}
	return
}

func (r *RequestRateByIntervalInput) GetGroupByOperationName() (rv bool) {
	if r != nil && r.GroupByOperationName != nil {
		return *r.GroupByOperationName
	}
	return
}

func (r *RequestRateByIntervalInput) GetGroupByResourceName() (rv bool) {
	if r != nil && r.GroupByResourceName != nil {
		return *r.GroupByResourceName
	}
	return
}

func (r *RequestRateByIntervalInput) GetGroupByThrottlePolicy() (rv bool) {
	if r != nil && r.GroupByThrottlePolicy != nil {
		return *r.GroupByThrottlePolicy
	}
	return
}

func (r *RequestRateByIntervalInput) GetGroupByUserAgent() (rv bool) {
	if r != nil && r.GroupByUserAgent != nil {
		return *r.GroupByUserAgent
	}
	return
}

// ResourceInstanceViewStatus - Instance view status.
type ResourceInstanceViewStatus struct {
	// The level code.
	Level *StatusLevelTypes

	// READ-ONLY; The status code.
	Code *string

	// READ-ONLY; The short localizable label for the status.
	DisplayStatus *string

	// READ-ONLY; The detailed status message, including for alerts and error messages.
	Message *string

	// READ-ONLY; The time of the status.
	Time *time.Time
}

func (r *ResourceInstanceViewStatus) GetLevel() (rv *StatusLevelTypes) {
	if r != nil {
		return r.Level
	}
	return
}

func (r *ResourceInstanceViewStatus) GetCode() (rv string) {
	if r != nil && r.Code != nil {
		return *r.Code
	}
	return
}

func (r *ResourceInstanceViewStatus) GetDisplayStatus() (rv string) {
	if r != nil && r.DisplayStatus != nil {
		return *r.DisplayStatus
	}
	return
}

func (r *ResourceInstanceViewStatus) GetMessage() (rv string) {
	if r != nil && r.Message != nil {
		return *r.Message
	}
	return
}

func (r *ResourceInstanceViewStatus) GetTime() (rv *time.Time) {
	if r != nil {
		return r.Time
	}
	return
}

// ResourceRange - Describes the resource range.
type ResourceRange struct {
	// The maximum number of the resource.
	Max *int32

	// The minimum number of the resource.
	Min *int32
}

func (r *ResourceRange) GetMax() (rv int32) {
	if r != nil && r.Max != nil {
		return *r.Max
	}
	return
}

func (r *ResourceRange) GetMin() (rv int32) {
	if r != nil && r.Min != nil {
		return *r.Min
	}
	return
}

// ResourceSKU - Describes an available Compute SKU.
type ResourceSKU struct {
	// READ-ONLY; The api versions that support this SKU.
	APIVersions []string

	// READ-ONLY; A name value pair to describe the capability.
	Capabilities []ResourceSKUCapabilities

	// READ-ONLY; Specifies the number of virtual machines in the scale set.
	Capacity *ResourceSKUCapacity

	// READ-ONLY; Metadata for retrieving price info.
	Costs []ResourceSKUCosts

	// READ-ONLY; The Family of this particular SKU.
	Family *string

	// READ-ONLY; The Kind of resources that are supported in this SKU.
	Kind *string

	// READ-ONLY; A list of locations and availability zones in those locations where the SKU is available.
	LocationInfo []ResourceSKULocationInfo

	// READ-ONLY; The set of locations that the SKU is available.
	Locations []string

	// READ-ONLY; The name of SKU.
	Name *string

	// READ-ONLY; The type of resource the SKU applies to.
	ResourceType *string

	// READ-ONLY; The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
	Restrictions []ResourceSKURestrictions

	// READ-ONLY; The Size of the SKU.
	Size *string

	// READ-ONLY; Specifies the tier of virtual machines in a scale set.
	// Possible Values:
	// Standard
	// Basic
	Tier *string
}

func (r *ResourceSKU) GetAPIVersions() (rv []string) {
	if r != nil {
		return r.APIVersions
	}
	return
}

func (r *ResourceSKU) GetCapabilities() (rv []ResourceSKUCapabilities) {
	if r != nil {
		return r.Capabilities
	}
	return
}

func (r *ResourceSKU) GetCapacity() (rv *ResourceSKUCapacity) {
	if r != nil {
		return r.Capacity
	}
	return
}

func (r *ResourceSKU) GetCosts() (rv []ResourceSKUCosts) {
	if r != nil {
		return r.Costs
	}
	return
}

func (r *ResourceSKU) GetFamily() (rv string) {
	if r != nil && r.Family != nil {
		return *r.Family
	}
	return
}

func (r *ResourceSKU) GetKind() (rv string) {
	if r != nil && r.Kind != nil {
		return *r.Kind
	}
	return
}

func (r *ResourceSKU) GetLocationInfo() (rv []ResourceSKULocationInfo) {
	if r != nil {
		return r.LocationInfo
	}
	return
}

func (r *ResourceSKU) GetLocations() (rv []string) {
	if r != nil {
		return r.Locations
	}
	return
}

func (r *ResourceSKU) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *ResourceSKU) GetResourceType() (rv string) {
	if r != nil && r.ResourceType != nil {
		return *r.ResourceType
	}
	return
}

func (r *ResourceSKU) GetRestrictions() (rv []ResourceSKURestrictions) {
	if r != nil {
		return r.Restrictions
	}
	return
}

func (r *ResourceSKU) GetSize() (rv string) {
	if r != nil && r.Size != nil {
		return *r.Size
	}
	return
}

func (r *ResourceSKU) GetTier() (rv string) {
	if r != nil && r.Tier != nil {
		return *r.Tier
	}
	return
}

// ResourceSKUCapabilities - Describes The SKU capabilities object.
type ResourceSKUCapabilities struct {
	// READ-ONLY; An invariant to describe the feature.
	Name *string

	// READ-ONLY; An invariant if the feature is measured by quantity.
	Value *string
}

func (r *ResourceSKUCapabilities) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *ResourceSKUCapabilities) GetValue() (rv string) {
	if r != nil && r.Value != nil {
		return *r.Value
	}
	return
}

// ResourceSKUCapacity - Describes scaling information of a SKU.
type ResourceSKUCapacity struct {
	// READ-ONLY; The default capacity.
	Default *int64

	// READ-ONLY; The maximum capacity that can be set.
	Maximum *int64

	// READ-ONLY; The minimum capacity.
	Minimum *int64

	// READ-ONLY; The scale type applicable to the sku.
	ScaleType *ResourceSKUCapacityScaleType
}

func (r *ResourceSKUCapacity) GetDefault() (rv int64) {
	if r != nil && r.Default != nil {
		return *r.Default
	}
	return
}

func (r *ResourceSKUCapacity) GetMaximum() (rv int64) {
	if r != nil && r.Maximum != nil {
		return *r.Maximum
	}
	return
}

func (r *ResourceSKUCapacity) GetMinimum() (rv int64) {
	if r != nil && r.Minimum != nil {
		return *r.Minimum
	}
	return
}

func (r *ResourceSKUCapacity) GetScaleType() (rv *ResourceSKUCapacityScaleType) {
	if r != nil {
		return r.ScaleType
	}
	return
}

// ResourceSKUCosts - Describes metadata for retrieving price info.
type ResourceSKUCosts struct {
	// READ-ONLY; An invariant to show the extended unit.
	ExtendedUnit *string

	// READ-ONLY; Used for querying price from commerce.
	MeterID *string

	// READ-ONLY; The multiplier is needed to extend the base metered cost.
	Quantity *int64
}

func (r *ResourceSKUCosts) GetExtendedUnit() (rv string) {
	if r != nil && r.ExtendedUnit != nil {
		return *r.ExtendedUnit
	}
	return
}

func (r *ResourceSKUCosts) GetMeterID() (rv string) {
	if r != nil && r.MeterID != nil {
		return *r.MeterID
	}
	return
}

func (r *ResourceSKUCosts) GetQuantity() (rv int64) {
	if r != nil && r.Quantity != nil {
		return *r.Quantity
	}
	return
}

// ResourceSKULocationInfo - Describes an available Compute SKU Location Information.
type ResourceSKULocationInfo struct {
	// READ-ONLY; The names of extended locations.
	ExtendedLocations []string

	// READ-ONLY; Location of the SKU
	Location *string

	// READ-ONLY; The type of the extended location.
	Type *ExtendedLocationType

	// READ-ONLY; Details of capabilities available to a SKU in specific zones.
	ZoneDetails []ResourceSKUZoneDetails

	// READ-ONLY; List of availability zones where the SKU is supported.
	Zones []string
}

func (r *ResourceSKULocationInfo) GetExtendedLocations() (rv []string) {
	if r != nil {
		return r.ExtendedLocations
	}
	return
}

func (r *ResourceSKULocationInfo) GetLocation() (rv string) {
	if r != nil && r.Location != nil {
		return *r.Location
	}
	return
}

func (r *ResourceSKULocationInfo) GetType() (rv *ExtendedLocationType) {
	if r != nil {
		return r.Type
	}
	return
}

func (r *ResourceSKULocationInfo) GetZoneDetails() (rv []ResourceSKUZoneDetails) {
	if r != nil {
		return r.ZoneDetails
	}
	return
}

func (r *ResourceSKULocationInfo) GetZones() (rv []string) {
	if r != nil {
		return r.Zones
	}
	return
}

// ResourceSKURestrictionInfo - Describes an available Compute SKU Restriction Information.
type ResourceSKURestrictionInfo struct {
	// READ-ONLY; Locations where the SKU is restricted
	Locations []string

	// READ-ONLY; List of availability zones where the SKU is restricted.
	Zones []string
}

func (r *ResourceSKURestrictionInfo) GetLocations() (rv []string) {
	if r != nil {
		return r.Locations
	}
	return
}

func (r *ResourceSKURestrictionInfo) GetZones() (rv []string) {
	if r != nil {
		return r.Zones
	}
	return
}

// ResourceSKURestrictions - Describes scaling information of a SKU.
type ResourceSKURestrictions struct {
	// READ-ONLY; The reason for restriction.
	ReasonCode *ResourceSKURestrictionsReasonCode

	// READ-ONLY; The information about the restriction where the SKU cannot be used.
	RestrictionInfo *ResourceSKURestrictionInfo

	// READ-ONLY; The type of restrictions.
	Type *ResourceSKURestrictionsType

	// READ-ONLY; The value of restrictions. If the restriction type is set to location. This would be different locations where
	// the SKU is restricted.
	Values []string
}

func (r *ResourceSKURestrictions) GetReasonCode() (rv *ResourceSKURestrictionsReasonCode) {
	if r != nil {
		return r.ReasonCode
	}
	return
}

func (r *ResourceSKURestrictions) GetRestrictionInfo() (rv *ResourceSKURestrictionInfo) {
	if r != nil {
		return r.RestrictionInfo
	}
	return
}

func (r *ResourceSKURestrictions) GetType() (rv *ResourceSKURestrictionsType) {
	if r != nil {
		return r.Type
	}
	return
}

func (r *ResourceSKURestrictions) GetValues() (rv []string) {
	if r != nil {
		return r.Values
	}
	return
}

// ResourceSKUZoneDetails - Describes The zonal capabilities of a SKU.
type ResourceSKUZoneDetails struct {
	// READ-ONLY; A list of capabilities that are available for the SKU in the specified list of zones.
	Capabilities []ResourceSKUCapabilities

	// READ-ONLY; The set of zones that the SKU is available in with the specified capabilities.
	Name []string
}

func (r *ResourceSKUZoneDetails) GetCapabilities() (rv []ResourceSKUCapabilities) {
	if r != nil {
		return r.Capabilities
	}
	return
}

func (r *ResourceSKUZoneDetails) GetName() (rv []string) {
	if r != nil {
		return r.Name
	}
	return
}

// ResourceSKUsResult - The List Resource Skus operation response.
type ResourceSKUsResult struct {
	// REQUIRED; The list of skus available for the subscription.
	Value []ResourceSKU

	// The URI to fetch the next page of Resource Skus. Call ListNext() with this URI to fetch the next page of Resource Skus
	NextLink *string
}

func (r *ResourceSKUsResult) GetValue() (rv []ResourceSKU) {
	if r != nil {
		return r.Value
	}
	return
}

func (r *ResourceSKUsResult) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

// ResourceURIList - The List resources which are encrypted with the disk encryption set.
type ResourceURIList struct {
	// REQUIRED; A list of IDs or Owner IDs of resources which are encrypted with the disk encryption set.
	Value []string

	// The uri to fetch the next page of encrypted resources. Call ListNext() with this to fetch the next page of encrypted resources.
	NextLink *string
}

func (r *ResourceURIList) GetValue() (rv []string) {
	if r != nil {
		return r.Value
	}
	return
}

func (r *ResourceURIList) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

// RestorePoint - Restore Point details.
type RestorePoint struct {
	// The restore point properties.
	Properties *RestorePointProperties

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (r *RestorePoint) GetProperties() (rv *RestorePointProperties) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *RestorePoint) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *RestorePoint) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RestorePoint) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// RestorePointCollection - Create or update Restore Point collection parameters.
type RestorePointCollection struct {
	// REQUIRED; Resource location
	Location *string

	// The restore point collection properties.
	Properties *RestorePointCollectionProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (r *RestorePointCollection) GetLocation() (rv string) {
	if r != nil && r.Location != nil {
		return *r.Location
	}
	return
}

func (r *RestorePointCollection) GetProperties() (rv *RestorePointCollectionProperties) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *RestorePointCollection) GetTags() (rv map[string]*string) {
	if r != nil {
		return r.Tags
	}
	return
}

func (r *RestorePointCollection) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *RestorePointCollection) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RestorePointCollection) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// RestorePointCollectionListResult - The List restore point collection operation response.
type RestorePointCollectionListResult struct {
	// The uri to fetch the next page of RestorePointCollections. Call ListNext() with this to fetch the next page of RestorePointCollections
	NextLink *string

	// Gets the list of restore point collections.
	Value []RestorePointCollection
}

func (r *RestorePointCollectionListResult) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

func (r *RestorePointCollectionListResult) GetValue() (rv []RestorePointCollection) {
	if r != nil {
		return r.Value
	}
	return
}

// RestorePointCollectionProperties - The restore point collection properties.
type RestorePointCollectionProperties struct {
	// The properties of the source resource that this restore point collection is created from.
	Source *RestorePointCollectionSourceProperties

	// READ-ONLY; The provisioning state of the restore point collection.
	ProvisioningState *string

	// READ-ONLY; The unique id of the restore point collection.
	RestorePointCollectionID *string

	// READ-ONLY; A list containing all restore points created under this restore point collection.
	RestorePoints []RestorePoint
}

func (r *RestorePointCollectionProperties) GetSource() (rv *RestorePointCollectionSourceProperties) {
	if r != nil {
		return r.Source
	}
	return
}

func (r *RestorePointCollectionProperties) GetProvisioningState() (rv string) {
	if r != nil && r.ProvisioningState != nil {
		return *r.ProvisioningState
	}
	return
}

func (r *RestorePointCollectionProperties) GetRestorePointCollectionID() (rv string) {
	if r != nil && r.RestorePointCollectionID != nil {
		return *r.RestorePointCollectionID
	}
	return
}

func (r *RestorePointCollectionProperties) GetRestorePoints() (rv []RestorePoint) {
	if r != nil {
		return r.RestorePoints
	}
	return
}

// RestorePointCollectionSourceProperties - The properties of the source resource that this restore point collection is created
// from.
type RestorePointCollectionSourceProperties struct {
	// Resource Id of the source resource used to create this restore point collection
	ID *string

	// READ-ONLY; Location of the source resource used to create this restore point collection.
	Location *string
}

func (r *RestorePointCollectionSourceProperties) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *RestorePointCollectionSourceProperties) GetLocation() (rv string) {
	if r != nil && r.Location != nil {
		return *r.Location
	}
	return
}

// RestorePointCollectionUpdate - Update Restore Point collection parameters.
type RestorePointCollectionUpdate struct {
	// The restore point collection properties.
	Properties *RestorePointCollectionProperties

	// Resource tags
	Tags map[string]*string
}

func (r *RestorePointCollectionUpdate) GetProperties() (rv *RestorePointCollectionProperties) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *RestorePointCollectionUpdate) GetTags() (rv map[string]*string) {
	if r != nil {
		return r.Tags
	}
	return
}

// RestorePointInstanceView - The instance view of a restore point.
type RestorePointInstanceView struct {
	// The disk restore points information.
	DiskRestorePoints []DiskRestorePointInstanceView

	// The resource status information.
	Statuses []InstanceViewStatus
}

func (r *RestorePointInstanceView) GetDiskRestorePoints() (rv []DiskRestorePointInstanceView) {
	if r != nil {
		return r.DiskRestorePoints
	}
	return
}

func (r *RestorePointInstanceView) GetStatuses() (rv []InstanceViewStatus) {
	if r != nil {
		return r.Statuses
	}
	return
}

// RestorePointProperties - The restore point properties.
type RestorePointProperties struct {
	// List of disk resource ids that the customer wishes to exclude from the restore point. If no disks are specified, all disks
	// will be included.
	ExcludeDisks []APIEntityReference

	// Resource Id of the source restore point from which a copy needs to be created.
	SourceRestorePoint *APIEntityReference

	// Gets the creation time of the restore point.
	TimeCreated *time.Time

	// READ-ONLY; Gets the consistency mode for the restore point. Please refer to https://aka.ms/RestorePoints for more details.
	ConsistencyMode *ConsistencyModeTypes

	// READ-ONLY; The restore point instance view.
	InstanceView *RestorePointInstanceView

	// READ-ONLY; Gets the provisioning state of the restore point.
	ProvisioningState *string

	// READ-ONLY; Gets the details of the VM captured at the time of the restore point creation.
	SourceMetadata *RestorePointSourceMetadata
}

func (r *RestorePointProperties) GetExcludeDisks() (rv []APIEntityReference) {
	if r != nil {
		return r.ExcludeDisks
	}
	return
}

func (r *RestorePointProperties) GetSourceRestorePoint() (rv *APIEntityReference) {
	if r != nil {
		return r.SourceRestorePoint
	}
	return
}

func (r *RestorePointProperties) GetTimeCreated() (rv *time.Time) {
	if r != nil {
		return r.TimeCreated
	}
	return
}

func (r *RestorePointProperties) GetConsistencyMode() (rv *ConsistencyModeTypes) {
	if r != nil {
		return r.ConsistencyMode
	}
	return
}

func (r *RestorePointProperties) GetInstanceView() (rv *RestorePointInstanceView) {
	if r != nil {
		return r.InstanceView
	}
	return
}

func (r *RestorePointProperties) GetProvisioningState() (rv string) {
	if r != nil && r.ProvisioningState != nil {
		return *r.ProvisioningState
	}
	return
}

func (r *RestorePointProperties) GetSourceMetadata() (rv *RestorePointSourceMetadata) {
	if r != nil {
		return r.SourceMetadata
	}
	return
}

// RestorePointSourceMetadata - Describes the properties of the Virtual Machine for which the restore point was created. The
// properties provided are a subset and the snapshot of the overall Virtual Machine properties captured at the
// time of the restore point creation.
type RestorePointSourceMetadata struct {
	// Gets the diagnostics profile.
	DiagnosticsProfile *DiagnosticsProfile

	// Gets the hardware profile.
	HardwareProfile *HardwareProfile

	// Gets the license type, which is for bring your own license scenario.
	LicenseType *string

	// Location of the VM from which the restore point was created.
	Location *string

	// Gets the OS profile.
	OSProfile *OSProfile

	// Gets the security profile.
	SecurityProfile *SecurityProfile

	// Gets the storage profile.
	StorageProfile *RestorePointSourceVMStorageProfile

	// Gets the virtual machine unique id.
	VMID *string
}

func (r *RestorePointSourceMetadata) GetDiagnosticsProfile() (rv *DiagnosticsProfile) {
	if r != nil {
		return r.DiagnosticsProfile
	}
	return
}

func (r *RestorePointSourceMetadata) GetHardwareProfile() (rv *HardwareProfile) {
	if r != nil {
		return r.HardwareProfile
	}
	return
}

func (r *RestorePointSourceMetadata) GetLicenseType() (rv string) {
	if r != nil && r.LicenseType != nil {
		return *r.LicenseType
	}
	return
}

func (r *RestorePointSourceMetadata) GetLocation() (rv string) {
	if r != nil && r.Location != nil {
		return *r.Location
	}
	return
}

func (r *RestorePointSourceMetadata) GetOSProfile() (rv *OSProfile) {
	if r != nil {
		return r.OSProfile
	}
	return
}

func (r *RestorePointSourceMetadata) GetSecurityProfile() (rv *SecurityProfile) {
	if r != nil {
		return r.SecurityProfile
	}
	return
}

func (r *RestorePointSourceMetadata) GetStorageProfile() (rv *RestorePointSourceVMStorageProfile) {
	if r != nil {
		return r.StorageProfile
	}
	return
}

func (r *RestorePointSourceMetadata) GetVMID() (rv string) {
	if r != nil && r.VMID != nil {
		return *r.VMID
	}
	return
}

// RestorePointSourceVMDataDisk - Describes a data disk.
type RestorePointSourceVMDataDisk struct {
	// Gets the caching type.
	Caching *CachingTypes

	// Gets the disk restore point Id.
	DiskRestorePoint *APIEntityReference

	// Gets the initial disk size in GB for blank data disks, and the new desired size for existing OS and Data disks.
	DiskSizeGB *int32

	// Gets the logical unit number.
	Lun *int32

	// Gets the managed disk details
	ManagedDisk *ManagedDiskParameters

	// Gets the disk name.
	Name *string
}

func (r *RestorePointSourceVMDataDisk) GetCaching() (rv *CachingTypes) {
	if r != nil {
		return r.Caching
	}
	return
}

func (r *RestorePointSourceVMDataDisk) GetDiskRestorePoint() (rv *APIEntityReference) {
	if r != nil {
		return r.DiskRestorePoint
	}
	return
}

func (r *RestorePointSourceVMDataDisk) GetDiskSizeGB() (rv int32) {
	if r != nil && r.DiskSizeGB != nil {
		return *r.DiskSizeGB
	}
	return
}

func (r *RestorePointSourceVMDataDisk) GetLun() (rv int32) {
	if r != nil && r.Lun != nil {
		return *r.Lun
	}
	return
}

func (r *RestorePointSourceVMDataDisk) GetManagedDisk() (rv *ManagedDiskParameters) {
	if r != nil {
		return r.ManagedDisk
	}
	return
}

func (r *RestorePointSourceVMDataDisk) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

// RestorePointSourceVMOSDisk - Describes an Operating System disk.
type RestorePointSourceVMOSDisk struct {
	// Gets the caching type.
	Caching *CachingTypes

	// Gets the disk restore point Id.
	DiskRestorePoint *APIEntityReference

	// Gets the disk size in GB.
	DiskSizeGB *int32

	// Gets the disk encryption settings.
	EncryptionSettings *DiskEncryptionSettings

	// Gets the managed disk details
	ManagedDisk *ManagedDiskParameters

	// Gets the disk name.
	Name *string

	// Gets the Operating System type.
	OSType *OperatingSystemType
}

func (r *RestorePointSourceVMOSDisk) GetCaching() (rv *CachingTypes) {
	if r != nil {
		return r.Caching
	}
	return
}

func (r *RestorePointSourceVMOSDisk) GetDiskRestorePoint() (rv *APIEntityReference) {
	if r != nil {
		return r.DiskRestorePoint
	}
	return
}

func (r *RestorePointSourceVMOSDisk) GetDiskSizeGB() (rv int32) {
	if r != nil && r.DiskSizeGB != nil {
		return *r.DiskSizeGB
	}
	return
}

func (r *RestorePointSourceVMOSDisk) GetEncryptionSettings() (rv *DiskEncryptionSettings) {
	if r != nil {
		return r.EncryptionSettings
	}
	return
}

func (r *RestorePointSourceVMOSDisk) GetManagedDisk() (rv *ManagedDiskParameters) {
	if r != nil {
		return r.ManagedDisk
	}
	return
}

func (r *RestorePointSourceVMOSDisk) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RestorePointSourceVMOSDisk) GetOSType() (rv *OperatingSystemType) {
	if r != nil {
		return r.OSType
	}
	return
}

// RestorePointSourceVMStorageProfile - Describes the storage profile.
type RestorePointSourceVMStorageProfile struct {
	// Gets the data disks of the VM captured at the time of the restore point creation.
	DataDisks []RestorePointSourceVMDataDisk

	// Gets the OS disk of the VM captured at the time of the restore point creation.
	OSDisk *RestorePointSourceVMOSDisk
}

func (r *RestorePointSourceVMStorageProfile) GetDataDisks() (rv []RestorePointSourceVMDataDisk) {
	if r != nil {
		return r.DataDisks
	}
	return
}

func (r *RestorePointSourceVMStorageProfile) GetOSDisk() (rv *RestorePointSourceVMOSDisk) {
	if r != nil {
		return r.OSDisk
	}
	return
}

// RetrieveBootDiagnosticsDataResult - The SAS URIs of the console screenshot and serial log blobs.
type RetrieveBootDiagnosticsDataResult struct {
	// READ-ONLY; The console screenshot blob URI
	ConsoleScreenshotBlobURI *string

	// READ-ONLY; The serial console log blob URI.
	SerialConsoleLogBlobURI *string
}

func (r *RetrieveBootDiagnosticsDataResult) GetConsoleScreenshotBlobURI() (rv string) {
	if r != nil && r.ConsoleScreenshotBlobURI != nil {
		return *r.ConsoleScreenshotBlobURI
	}
	return
}

func (r *RetrieveBootDiagnosticsDataResult) GetSerialConsoleLogBlobURI() (rv string) {
	if r != nil && r.SerialConsoleLogBlobURI != nil {
		return *r.SerialConsoleLogBlobURI
	}
	return
}

type RoleInstance struct {
	Properties *RoleInstanceProperties
	SKU        *InstanceSKU

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource Location.
	Location *string

	// READ-ONLY; Resource Name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource Type.
	Type *string
}

func (r *RoleInstance) GetProperties() (rv *RoleInstanceProperties) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *RoleInstance) GetSKU() (rv *InstanceSKU) {
	if r != nil {
		return r.SKU
	}
	return
}

func (r *RoleInstance) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *RoleInstance) GetLocation() (rv string) {
	if r != nil && r.Location != nil {
		return *r.Location
	}
	return
}

func (r *RoleInstance) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RoleInstance) GetTags() (rv map[string]*string) {
	if r != nil {
		return r.Tags
	}
	return
}

func (r *RoleInstance) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

type RoleInstanceListResult struct {
	// REQUIRED
	Value    []RoleInstance
	NextLink *string
}

func (r *RoleInstanceListResult) GetValue() (rv []RoleInstance) {
	if r != nil {
		return r.Value
	}
	return
}

func (r *RoleInstanceListResult) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

// RoleInstanceNetworkProfile - Describes the network profile for the role instance.
type RoleInstanceNetworkProfile struct {
	// READ-ONLY; Specifies the list of resource Ids for the network interfaces associated with the role instance.
	NetworkInterfaces []SubResource
}

func (r *RoleInstanceNetworkProfile) GetNetworkInterfaces() (rv []SubResource) {
	if r != nil {
		return r.NetworkInterfaces
	}
	return
}

type RoleInstanceProperties struct {
	// The instance view of the role instance.
	InstanceView *RoleInstanceView

	// Describes the network profile for the role instance.
	NetworkProfile *RoleInstanceNetworkProfile
}

func (r *RoleInstanceProperties) GetInstanceView() (rv *RoleInstanceView) {
	if r != nil {
		return r.InstanceView
	}
	return
}

func (r *RoleInstanceProperties) GetNetworkProfile() (rv *RoleInstanceNetworkProfile) {
	if r != nil {
		return r.NetworkProfile
	}
	return
}

// RoleInstanceView - The instance view of the role instance.
type RoleInstanceView struct {
	// READ-ONLY; The Fault Domain.
	PlatformFaultDomain *int32

	// READ-ONLY; The Update Domain.
	PlatformUpdateDomain *int32

	// READ-ONLY; Specifies a unique identifier generated internally for the cloud service associated with this role instance.
	// NOTE: If you are using Azure Diagnostics extension, this property can be used as 'DeploymentId' for querying details.
	PrivateID *string

	// READ-ONLY
	Statuses []ResourceInstanceViewStatus
}

func (r *RoleInstanceView) GetPlatformFaultDomain() (rv int32) {
	if r != nil && r.PlatformFaultDomain != nil {
		return *r.PlatformFaultDomain
	}
	return
}

func (r *RoleInstanceView) GetPlatformUpdateDomain() (rv int32) {
	if r != nil && r.PlatformUpdateDomain != nil {
		return *r.PlatformUpdateDomain
	}
	return
}

func (r *RoleInstanceView) GetPrivateID() (rv string) {
	if r != nil && r.PrivateID != nil {
		return *r.PrivateID
	}
	return
}

func (r *RoleInstanceView) GetStatuses() (rv []ResourceInstanceViewStatus) {
	if r != nil {
		return r.Statuses
	}
	return
}

// RoleInstances - Specifies a list of role instances from the cloud service.
type RoleInstances struct {
	// REQUIRED; List of cloud service role instance names. Value of '*' will signify all role instances of the cloud service.
	RoleInstances []string
}

func (r *RoleInstances) GetRoleInstances() (rv []string) {
	if r != nil {
		return r.RoleInstances
	}
	return
}

// RollbackStatusInfo - Information about rollback on failed VM instances after a OS Upgrade operation.
type RollbackStatusInfo struct {
	// READ-ONLY; The number of instances which failed to rollback.
	FailedRolledbackInstanceCount *int32

	// READ-ONLY; Error details if OS rollback failed.
	RollbackError *APIError

	// READ-ONLY; The number of instances which have been successfully rolled back.
	SuccessfullyRolledbackInstanceCount *int32
}

func (r *RollbackStatusInfo) GetFailedRolledbackInstanceCount() (rv int32) {
	if r != nil && r.FailedRolledbackInstanceCount != nil {
		return *r.FailedRolledbackInstanceCount
	}
	return
}

func (r *RollbackStatusInfo) GetRollbackError() (rv *APIError) {
	if r != nil {
		return r.RollbackError
	}
	return
}

func (r *RollbackStatusInfo) GetSuccessfullyRolledbackInstanceCount() (rv int32) {
	if r != nil && r.SuccessfullyRolledbackInstanceCount != nil {
		return *r.SuccessfullyRolledbackInstanceCount
	}
	return
}

// RollingUpgradePolicy - The configuration parameters used while performing a rolling upgrade.
type RollingUpgradePolicy struct {
	// Allow VMSS to ignore AZ boundaries when constructing upgrade batches. Take into consideration the Update Domain and maxBatchInstancePercent
	// to determine the batch size.
	EnableCrossZoneUpgrade *bool

	// The maximum percent of total virtual machine instances that will be upgraded simultaneously by the rolling upgrade in one
	// batch. As this is a maximum, unhealthy instances in previous or future batches
	// can cause the percentage of instances in a batch to decrease to ensure higher reliability. The default value for this parameter
	// is 20%.
	MaxBatchInstancePercent *int32

	// The maximum percentage of the total virtual machine instances in the scale set that can be simultaneously unhealthy, either
	// as a result of being upgraded, or by being found in an unhealthy state by
	// the virtual machine health checks before the rolling upgrade aborts. This constraint will be checked prior to starting
	// any batch. The default value for this parameter is 20%.
	MaxUnhealthyInstancePercent *int32

	// The maximum percentage of upgraded virtual machine instances that can be found to be in an unhealthy state. This check
	// will happen after each batch is upgraded. If this percentage is ever exceeded,
	// the rolling update aborts. The default value for this parameter is 20%.
	MaxUnhealthyUpgradedInstancePercent *int32

	// The wait time between completing the update for all virtual machines in one batch and starting the next batch. The time
	// duration should be specified in ISO 8601 format. The default value is 0 seconds
	// (PT0S).
	PauseTimeBetweenBatches *string

	// Upgrade all unhealthy instances in a scale set before any healthy instances.
	PrioritizeUnhealthyInstances *bool
}

func (r *RollingUpgradePolicy) GetEnableCrossZoneUpgrade() (rv bool) {
	if r != nil && r.EnableCrossZoneUpgrade != nil {
		return *r.EnableCrossZoneUpgrade
	}
	return
}

func (r *RollingUpgradePolicy) GetMaxBatchInstancePercent() (rv int32) {
	if r != nil && r.MaxBatchInstancePercent != nil {
		return *r.MaxBatchInstancePercent
	}
	return
}

func (r *RollingUpgradePolicy) GetMaxUnhealthyInstancePercent() (rv int32) {
	if r != nil && r.MaxUnhealthyInstancePercent != nil {
		return *r.MaxUnhealthyInstancePercent
	}
	return
}

func (r *RollingUpgradePolicy) GetMaxUnhealthyUpgradedInstancePercent() (rv int32) {
	if r != nil && r.MaxUnhealthyUpgradedInstancePercent != nil {
		return *r.MaxUnhealthyUpgradedInstancePercent
	}
	return
}

func (r *RollingUpgradePolicy) GetPauseTimeBetweenBatches() (rv string) {
	if r != nil && r.PauseTimeBetweenBatches != nil {
		return *r.PauseTimeBetweenBatches
	}
	return
}

func (r *RollingUpgradePolicy) GetPrioritizeUnhealthyInstances() (rv bool) {
	if r != nil && r.PrioritizeUnhealthyInstances != nil {
		return *r.PrioritizeUnhealthyInstances
	}
	return
}

// RollingUpgradeProgressInfo - Information about the number of virtual machine instances in each upgrade state.
type RollingUpgradeProgressInfo struct {
	// READ-ONLY; The number of instances that have failed to be upgraded successfully.
	FailedInstanceCount *int32

	// READ-ONLY; The number of instances that are currently being upgraded.
	InProgressInstanceCount *int32

	// READ-ONLY; The number of instances that have not yet begun to be upgraded.
	PendingInstanceCount *int32

	// READ-ONLY; The number of instances that have been successfully upgraded.
	SuccessfulInstanceCount *int32
}

func (r *RollingUpgradeProgressInfo) GetFailedInstanceCount() (rv int32) {
	if r != nil && r.FailedInstanceCount != nil {
		return *r.FailedInstanceCount
	}
	return
}

func (r *RollingUpgradeProgressInfo) GetInProgressInstanceCount() (rv int32) {
	if r != nil && r.InProgressInstanceCount != nil {
		return *r.InProgressInstanceCount
	}
	return
}

func (r *RollingUpgradeProgressInfo) GetPendingInstanceCount() (rv int32) {
	if r != nil && r.PendingInstanceCount != nil {
		return *r.PendingInstanceCount
	}
	return
}

func (r *RollingUpgradeProgressInfo) GetSuccessfulInstanceCount() (rv int32) {
	if r != nil && r.SuccessfulInstanceCount != nil {
		return *r.SuccessfulInstanceCount
	}
	return
}

// RollingUpgradeRunningStatus - Information about the current running state of the overall upgrade.
type RollingUpgradeRunningStatus struct {
	// READ-ONLY; Code indicating the current status of the upgrade.
	Code *RollingUpgradeStatusCode

	// READ-ONLY; The last action performed on the rolling upgrade.
	LastAction *RollingUpgradeActionType

	// READ-ONLY; Last action time of the upgrade.
	LastActionTime *time.Time

	// READ-ONLY; Start time of the upgrade.
	StartTime *time.Time
}

func (r *RollingUpgradeRunningStatus) GetCode() (rv *RollingUpgradeStatusCode) {
	if r != nil {
		return r.Code
	}
	return
}

func (r *RollingUpgradeRunningStatus) GetLastAction() (rv *RollingUpgradeActionType) {
	if r != nil {
		return r.LastAction
	}
	return
}

func (r *RollingUpgradeRunningStatus) GetLastActionTime() (rv *time.Time) {
	if r != nil {
		return r.LastActionTime
	}
	return
}

func (r *RollingUpgradeRunningStatus) GetStartTime() (rv *time.Time) {
	if r != nil {
		return r.StartTime
	}
	return
}

// RollingUpgradeStatusInfo - The status of the latest virtual machine scale set rolling upgrade.
type RollingUpgradeStatusInfo struct {
	// REQUIRED; Resource location
	Location *string

	// The status of the latest virtual machine scale set rolling upgrade.
	Properties *RollingUpgradeStatusInfoProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (r *RollingUpgradeStatusInfo) GetLocation() (rv string) {
	if r != nil && r.Location != nil {
		return *r.Location
	}
	return
}

func (r *RollingUpgradeStatusInfo) GetProperties() (rv *RollingUpgradeStatusInfoProperties) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *RollingUpgradeStatusInfo) GetTags() (rv map[string]*string) {
	if r != nil {
		return r.Tags
	}
	return
}

func (r *RollingUpgradeStatusInfo) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *RollingUpgradeStatusInfo) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RollingUpgradeStatusInfo) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// RollingUpgradeStatusInfoProperties - The status of the latest virtual machine scale set rolling upgrade.
type RollingUpgradeStatusInfoProperties struct {
	// READ-ONLY; Error details for this upgrade, if there are any.
	Error *APIError

	// READ-ONLY; The rolling upgrade policies applied for this upgrade.
	Policy *RollingUpgradePolicy

	// READ-ONLY; Information about the number of virtual machine instances in each upgrade state.
	Progress *RollingUpgradeProgressInfo

	// READ-ONLY; Information about the current running state of the overall upgrade.
	RunningStatus *RollingUpgradeRunningStatus
}

func (r *RollingUpgradeStatusInfoProperties) GetError() (rv *APIError) {
	if r != nil {
		return r.Error
	}
	return
}

func (r *RollingUpgradeStatusInfoProperties) GetPolicy() (rv *RollingUpgradePolicy) {
	if r != nil {
		return r.Policy
	}
	return
}

func (r *RollingUpgradeStatusInfoProperties) GetProgress() (rv *RollingUpgradeProgressInfo) {
	if r != nil {
		return r.Progress
	}
	return
}

func (r *RollingUpgradeStatusInfoProperties) GetRunningStatus() (rv *RollingUpgradeRunningStatus) {
	if r != nil {
		return r.RunningStatus
	}
	return
}

// RunCommandDocument - Describes the properties of a Run Command.
type RunCommandDocument struct {
	// REQUIRED; The VM run command description.
	Description *string

	// REQUIRED; The VM run command id.
	ID *string

	// REQUIRED; The VM run command label.
	Label *string

	// REQUIRED; The Operating System type.
	OSType *OperatingSystemTypes

	// REQUIRED; The VM run command schema.
	Schema *string

	// REQUIRED; The script to be executed.
	Script []string

	// The parameters used by the script.
	Parameters []RunCommandParameterDefinition
}

func (r *RunCommandDocument) GetDescription() (rv string) {
	if r != nil && r.Description != nil {
		return *r.Description
	}
	return
}

func (r *RunCommandDocument) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *RunCommandDocument) GetLabel() (rv string) {
	if r != nil && r.Label != nil {
		return *r.Label
	}
	return
}

func (r *RunCommandDocument) GetOSType() (rv *OperatingSystemTypes) {
	if r != nil {
		return r.OSType
	}
	return
}

func (r *RunCommandDocument) GetSchema() (rv string) {
	if r != nil && r.Schema != nil {
		return *r.Schema
	}
	return
}

func (r *RunCommandDocument) GetScript() (rv []string) {
	if r != nil {
		return r.Script
	}
	return
}

func (r *RunCommandDocument) GetParameters() (rv []RunCommandParameterDefinition) {
	if r != nil {
		return r.Parameters
	}
	return
}

// RunCommandDocumentBase - Describes the properties of a Run Command metadata.
type RunCommandDocumentBase struct {
	// REQUIRED; The VM run command description.
	Description *string

	// REQUIRED; The VM run command id.
	ID *string

	// REQUIRED; The VM run command label.
	Label *string

	// REQUIRED; The Operating System type.
	OSType *OperatingSystemTypes

	// REQUIRED; The VM run command schema.
	Schema *string
}

func (r *RunCommandDocumentBase) GetDescription() (rv string) {
	if r != nil && r.Description != nil {
		return *r.Description
	}
	return
}

func (r *RunCommandDocumentBase) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *RunCommandDocumentBase) GetLabel() (rv string) {
	if r != nil && r.Label != nil {
		return *r.Label
	}
	return
}

func (r *RunCommandDocumentBase) GetOSType() (rv *OperatingSystemTypes) {
	if r != nil {
		return r.OSType
	}
	return
}

func (r *RunCommandDocumentBase) GetSchema() (rv string) {
	if r != nil && r.Schema != nil {
		return *r.Schema
	}
	return
}

// RunCommandInput - Capture Virtual Machine parameters.
type RunCommandInput struct {
	// REQUIRED; The run command id.
	CommandID *string

	// The run command parameters.
	Parameters []RunCommandInputParameter

	// Optional. The script to be executed. When this value is given, the given script will override the default script of the
	// command.
	Script []string
}

func (r *RunCommandInput) GetCommandID() (rv string) {
	if r != nil && r.CommandID != nil {
		return *r.CommandID
	}
	return
}

func (r *RunCommandInput) GetParameters() (rv []RunCommandInputParameter) {
	if r != nil {
		return r.Parameters
	}
	return
}

func (r *RunCommandInput) GetScript() (rv []string) {
	if r != nil {
		return r.Script
	}
	return
}

// RunCommandInputParameter - Describes the properties of a run command parameter.
type RunCommandInputParameter struct {
	// REQUIRED; The run command parameter name.
	Name *string

	// REQUIRED; The run command parameter value.
	Value *string
}

func (r *RunCommandInputParameter) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RunCommandInputParameter) GetValue() (rv string) {
	if r != nil && r.Value != nil {
		return *r.Value
	}
	return
}

// RunCommandListResult - The List Virtual Machine operation response.
type RunCommandListResult struct {
	// REQUIRED; The list of virtual machine run commands.
	Value []RunCommandDocumentBase

	// The uri to fetch the next page of run commands. Call ListNext() with this to fetch the next page of run commands.
	NextLink *string
}

func (r *RunCommandListResult) GetValue() (rv []RunCommandDocumentBase) {
	if r != nil {
		return r.Value
	}
	return
}

func (r *RunCommandListResult) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

// RunCommandParameterDefinition - Describes the properties of a run command parameter.
type RunCommandParameterDefinition struct {
	// REQUIRED; The run command parameter name.
	Name *string

	// REQUIRED; The run command parameter type.
	Type *string

	// The run command parameter default value.
	DefaultValue *string

	// The run command parameter required.
	Required *bool
}

func (r *RunCommandParameterDefinition) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RunCommandParameterDefinition) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

func (r *RunCommandParameterDefinition) GetDefaultValue() (rv string) {
	if r != nil && r.DefaultValue != nil {
		return *r.DefaultValue
	}
	return
}

func (r *RunCommandParameterDefinition) GetRequired() (rv bool) {
	if r != nil && r.Required != nil {
		return *r.Required
	}
	return
}

type RunCommandResult struct {
	// Run command operation response.
	Value []InstanceViewStatus
}

func (r *RunCommandResult) GetValue() (rv []InstanceViewStatus) {
	if r != nil {
		return r.Value
	}
	return
}

// SKU - Describes a virtual machine scale set sku. NOTE: If the new VM SKU is not supported on the hardware the scale set
// is currently on, you need to deallocate the VMs in the scale set before you modify the
// SKU name.
type SKU struct {
	// Specifies the number of virtual machines in the scale set.
	Capacity *int64

	// The sku name.
	Name *string

	// Specifies the tier of virtual machines in a scale set.
	// Possible Values:
	// Standard
	// Basic
	Tier *string
}

func (s *SKU) GetCapacity() (rv int64) {
	if s != nil && s.Capacity != nil {
		return *s.Capacity
	}
	return
}

func (s *SKU) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SKU) GetTier() (rv string) {
	if s != nil && s.Tier != nil {
		return *s.Tier
	}
	return
}

// SSHConfiguration - SSH configuration for Linux based VMs running on Azure
type SSHConfiguration struct {
	// The list of SSH public keys used to authenticate with linux based VMs.
	PublicKeys []SSHPublicKey
}

func (s *SSHConfiguration) GetPublicKeys() (rv []SSHPublicKey) {
	if s != nil {
		return s.PublicKeys
	}
	return
}

// SSHPublicKey - Contains information about SSH certificate public key and the path on the Linux VM where the public key
// is placed.
type SSHPublicKey struct {
	// SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa
	// format.
	// For creating ssh keys, see Create SSH keys on Linux and Mac for Linux VMs in Azure [https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed].
	KeyData *string

	// Specifies the full path on the created VM where ssh public key is stored. If the file already exists, the specified key
	// is appended to the file. Example: /home/user/.ssh/authorized_keys
	Path *string
}

func (s *SSHPublicKey) GetKeyData() (rv string) {
	if s != nil && s.KeyData != nil {
		return *s.KeyData
	}
	return
}

func (s *SSHPublicKey) GetPath() (rv string) {
	if s != nil && s.Path != nil {
		return *s.Path
	}
	return
}

// SSHPublicKeyGenerateKeyPairResult - Response from generation of an SSH key pair.
type SSHPublicKeyGenerateKeyPairResult struct {
	// REQUIRED; The ARM resource id in the form of /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/sshPublicKeys/{SshPublicKeyName}
	ID *string

	// REQUIRED; Private key portion of the key pair used to authenticate to a virtual machine through ssh. The private key is
	// returned in RFC3447 format and should be treated as a secret.
	PrivateKey *string

	// REQUIRED; Public key portion of the key pair used to authenticate to a virtual machine through ssh. The public key is in
	// ssh-rsa format.
	PublicKey *string
}

func (s *SSHPublicKeyGenerateKeyPairResult) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SSHPublicKeyGenerateKeyPairResult) GetPrivateKey() (rv string) {
	if s != nil && s.PrivateKey != nil {
		return *s.PrivateKey
	}
	return
}

func (s *SSHPublicKeyGenerateKeyPairResult) GetPublicKey() (rv string) {
	if s != nil && s.PublicKey != nil {
		return *s.PublicKey
	}
	return
}

// SSHPublicKeyResource - Specifies information about the SSH public key.
type SSHPublicKeyResource struct {
	// REQUIRED; Resource location
	Location *string

	// Properties of the SSH public key.
	Properties *SSHPublicKeyResourceProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (s *SSHPublicKeyResource) GetLocation() (rv string) {
	if s != nil && s.Location != nil {
		return *s.Location
	}
	return
}

func (s *SSHPublicKeyResource) GetProperties() (rv *SSHPublicKeyResourceProperties) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SSHPublicKeyResource) GetTags() (rv map[string]*string) {
	if s != nil {
		return s.Tags
	}
	return
}

func (s *SSHPublicKeyResource) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SSHPublicKeyResource) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SSHPublicKeyResource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// SSHPublicKeyResourceProperties - Properties of the SSH public key.
type SSHPublicKeyResourceProperties struct {
	// SSH public key used to authenticate to a virtual machine through ssh. If this property is not initially provided when the
	// resource is created, the publicKey property will be populated when
	// generateKeyPair is called. If the public key is provided upon resource creation, the provided public key needs to be at
	// least 2048-bit and in ssh-rsa format.
	PublicKey *string
}

func (s *SSHPublicKeyResourceProperties) GetPublicKey() (rv string) {
	if s != nil && s.PublicKey != nil {
		return *s.PublicKey
	}
	return
}

// SSHPublicKeyUpdateResource - Specifies information about the SSH public key.
type SSHPublicKeyUpdateResource struct {
	// Properties of the SSH public key.
	Properties *SSHPublicKeyResourceProperties

	// Resource tags
	Tags map[string]*string
}

func (s *SSHPublicKeyUpdateResource) GetProperties() (rv *SSHPublicKeyResourceProperties) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SSHPublicKeyUpdateResource) GetTags() (rv map[string]*string) {
	if s != nil {
		return s.Tags
	}
	return
}

// SSHPublicKeysGroupListResult - The list SSH public keys operation response.
type SSHPublicKeysGroupListResult struct {
	// REQUIRED; The list of SSH public keys
	Value []SSHPublicKeyResource

	// The URI to fetch the next page of SSH public keys. Call ListNext() with this URI to fetch the next page of SSH public keys.
	NextLink *string
}

func (s *SSHPublicKeysGroupListResult) GetValue() (rv []SSHPublicKeyResource) {
	if s != nil {
		return s.Value
	}
	return
}

func (s *SSHPublicKeysGroupListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

// ScaleInPolicy - Describes a scale-in policy for a virtual machine scale set.
type ScaleInPolicy struct {
	// This property allows you to specify if virtual machines chosen for removal have to be force deleted when a virtual machine
	// scale set is being scaled-in.(Feature in Preview)
	ForceDeletion *bool

	// The rules to be followed when scaling-in a virtual machine scale set.
	// Possible values are:
	// Default When a virtual machine scale set is scaled in, the scale set will first be balanced across zones if it is a zonal
	// scale set. Then, it will be balanced across Fault Domains as far as possible.
	// Within each Fault Domain, the virtual machines chosen for removal will be the newest ones that are not protected from scale-in.
	// OldestVM When a virtual machine scale set is being scaled-in, the oldest virtual machines that are not protected from scale-in
	// will be chosen for removal. For zonal virtual machine scale sets, the
	// scale set will first be balanced across zones. Within each zone, the oldest virtual machines that are not protected will
	// be chosen for removal.
	// NewestVM When a virtual machine scale set is being scaled-in, the newest virtual machines that are not protected from scale-in
	// will be chosen for removal. For zonal virtual machine scale sets, the
	// scale set will first be balanced across zones. Within each zone, the newest virtual machines that are not protected will
	// be chosen for removal.
	Rules []VirtualMachineScaleSetScaleInRules
}

func (s *ScaleInPolicy) GetForceDeletion() (rv bool) {
	if s != nil && s.ForceDeletion != nil {
		return *s.ForceDeletion
	}
	return
}

func (s *ScaleInPolicy) GetRules() (rv []VirtualMachineScaleSetScaleInRules) {
	if s != nil {
		return s.Rules
	}
	return
}

type ScheduledEventsProfile struct {
	// Specifies Terminate Scheduled Event related configurations.
	TerminateNotificationProfile *TerminateNotificationProfile
}

func (s *ScheduledEventsProfile) GetTerminateNotificationProfile() (rv *TerminateNotificationProfile) {
	if s != nil {
		return s.TerminateNotificationProfile
	}
	return
}

// SecurityProfile - Specifies the Security profile settings for the virtual machine or virtual machine scale set.
type SecurityProfile struct {
	// This property can be used by user in the request to enable or disable the Host Encryption for the virtual machine or virtual
	// machine scale set. This will enable the encryption for all the disks
	// including Resource/Temp disk at host itself.
	// Default: The Encryption at host will be disabled unless this property is set to true for the resource.
	EncryptionAtHost *bool

	// Specifies the SecurityType of the virtual machine. It has to be set to any specified value to enable UefiSettings.
	// Default: UefiSettings will not be enabled unless this property is set.
	SecurityType *SecurityTypes

	// Specifies the security settings like secure boot and vTPM used while creating the virtual machine.
	// Minimum api-version: 2020-12-01
	UefiSettings *UefiSettings
}

func (s *SecurityProfile) GetEncryptionAtHost() (rv bool) {
	if s != nil && s.EncryptionAtHost != nil {
		return *s.EncryptionAtHost
	}
	return
}

func (s *SecurityProfile) GetSecurityType() (rv *SecurityTypes) {
	if s != nil {
		return s.SecurityType
	}
	return
}

func (s *SecurityProfile) GetUefiSettings() (rv *UefiSettings) {
	if s != nil {
		return s.UefiSettings
	}
	return
}

type ShareInfoElement struct {
	// READ-ONLY; A relative URI containing the ID of the VM that has the disk attached.
	VMURI *string
}

func (s *ShareInfoElement) GetVMURI() (rv string) {
	if s != nil && s.VMURI != nil {
		return *s.VMURI
	}
	return
}

// SharedGallery - Specifies information about the Shared Gallery that you want to create or update.
type SharedGallery struct {
	// The identifier information of shared gallery.
	Identifier *SharedGalleryIdentifier

	// READ-ONLY; Resource location
	Location *string

	// READ-ONLY; Resource name
	Name *string
}

func (s *SharedGallery) GetIdentifier() (rv *SharedGalleryIdentifier) {
	if s != nil {
		return s.Identifier
	}
	return
}

func (s *SharedGallery) GetLocation() (rv string) {
	if s != nil && s.Location != nil {
		return *s.Location
	}
	return
}

func (s *SharedGallery) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

// SharedGalleryIdentifier - The identifier information of shared gallery.
type SharedGalleryIdentifier struct {
	// The unique id of this shared gallery.
	UniqueID *string
}

func (s *SharedGalleryIdentifier) GetUniqueID() (rv string) {
	if s != nil && s.UniqueID != nil {
		return *s.UniqueID
	}
	return
}

// SharedGalleryImage - Specifies information about the gallery image definition that you want to create or update.
type SharedGalleryImage struct {
	// The identifier information of shared gallery.
	Identifier *SharedGalleryIdentifier

	// Describes the properties of a gallery image definition.
	Properties *SharedGalleryImageProperties

	// READ-ONLY; Resource location
	Location *string

	// READ-ONLY; Resource name
	Name *string
}

func (s *SharedGalleryImage) GetIdentifier() (rv *SharedGalleryIdentifier) {
	if s != nil {
		return s.Identifier
	}
	return
}

func (s *SharedGalleryImage) GetProperties() (rv *SharedGalleryImageProperties) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SharedGalleryImage) GetLocation() (rv string) {
	if s != nil && s.Location != nil {
		return *s.Location
	}
	return
}

func (s *SharedGalleryImage) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

// SharedGalleryImageList - The List Shared Gallery Images operation response.
type SharedGalleryImageList struct {
	// REQUIRED; A list of shared gallery images.
	Value []SharedGalleryImage

	// The uri to fetch the next page of shared gallery images. Call ListNext() with this to fetch the next page of shared gallery
	// images.
	NextLink *string
}

func (s *SharedGalleryImageList) GetValue() (rv []SharedGalleryImage) {
	if s != nil {
		return s.Value
	}
	return
}

func (s *SharedGalleryImageList) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

// SharedGalleryImageProperties - Describes the properties of a gallery image definition.
type SharedGalleryImageProperties struct {
	// REQUIRED; This is the gallery image definition identifier.
	Identifier *GalleryImageIdentifier

	// REQUIRED; This property allows the user to specify whether the virtual machines created under this image are 'Generalized'
	// or 'Specialized'.
	OSState *OperatingSystemStateTypes

	// REQUIRED; This property allows you to specify the type of the OS that is included in the disk when creating a VM from a
	// managed image.
	// Possible values are:
	// Windows
	// Linux
	OSType *OperatingSystemTypes

	// Describes the disallowed disk types.
	Disallowed *Disallowed

	// The end of life date of the gallery image definition. This property can be used for decommissioning purposes. This property
	// is updatable.
	EndOfLifeDate *time.Time

	// A list of gallery image features.
	Features []GalleryImageFeature

	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *HyperVGeneration

	// Describes the gallery image definition purchase plan. This is used by marketplace images.
	PurchasePlan *ImagePurchasePlan

	// The properties describe the recommended machine configuration for this Image Definition. These properties are updatable.
	Recommended *RecommendedMachineConfiguration
}

func (s *SharedGalleryImageProperties) GetIdentifier() (rv *GalleryImageIdentifier) {
	if s != nil {
		return s.Identifier
	}
	return
}

func (s *SharedGalleryImageProperties) GetOSState() (rv *OperatingSystemStateTypes) {
	if s != nil {
		return s.OSState
	}
	return
}

func (s *SharedGalleryImageProperties) GetOSType() (rv *OperatingSystemTypes) {
	if s != nil {
		return s.OSType
	}
	return
}

func (s *SharedGalleryImageProperties) GetDisallowed() (rv *Disallowed) {
	if s != nil {
		return s.Disallowed
	}
	return
}

func (s *SharedGalleryImageProperties) GetEndOfLifeDate() (rv *time.Time) {
	if s != nil {
		return s.EndOfLifeDate
	}
	return
}

func (s *SharedGalleryImageProperties) GetFeatures() (rv []GalleryImageFeature) {
	if s != nil {
		return s.Features
	}
	return
}

func (s *SharedGalleryImageProperties) GetHyperVGeneration() (rv *HyperVGeneration) {
	if s != nil {
		return s.HyperVGeneration
	}
	return
}

func (s *SharedGalleryImageProperties) GetPurchasePlan() (rv *ImagePurchasePlan) {
	if s != nil {
		return s.PurchasePlan
	}
	return
}

func (s *SharedGalleryImageProperties) GetRecommended() (rv *RecommendedMachineConfiguration) {
	if s != nil {
		return s.Recommended
	}
	return
}

// SharedGalleryImageVersion - Specifies information about the gallery image version that you want to create or update.
type SharedGalleryImageVersion struct {
	// The identifier information of shared gallery.
	Identifier *SharedGalleryIdentifier

	// Describes the properties of a gallery image version.
	Properties *SharedGalleryImageVersionProperties

	// READ-ONLY; Resource location
	Location *string

	// READ-ONLY; Resource name
	Name *string
}

func (s *SharedGalleryImageVersion) GetIdentifier() (rv *SharedGalleryIdentifier) {
	if s != nil {
		return s.Identifier
	}
	return
}

func (s *SharedGalleryImageVersion) GetProperties() (rv *SharedGalleryImageVersionProperties) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SharedGalleryImageVersion) GetLocation() (rv string) {
	if s != nil && s.Location != nil {
		return *s.Location
	}
	return
}

func (s *SharedGalleryImageVersion) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

// SharedGalleryImageVersionList - The List Shared Gallery Image versions operation response.
type SharedGalleryImageVersionList struct {
	// REQUIRED; A list of shared gallery images versions.
	Value []SharedGalleryImageVersion

	// The uri to fetch the next page of shared gallery image versions. Call ListNext() with this to fetch the next page of shared
	// gallery image versions.
	NextLink *string
}

func (s *SharedGalleryImageVersionList) GetValue() (rv []SharedGalleryImageVersion) {
	if s != nil {
		return s.Value
	}
	return
}

func (s *SharedGalleryImageVersionList) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

// SharedGalleryImageVersionProperties - Describes the properties of a gallery image version.
type SharedGalleryImageVersionProperties struct {
	// The end of life date of the gallery image version Definition. This property can be used for decommissioning purposes. This
	// property is updatable.
	EndOfLifeDate *time.Time

	// The published date of the gallery image version Definition. This property can be used for decommissioning purposes. This
	// property is updatable.
	PublishedDate *time.Time
}

func (s *SharedGalleryImageVersionProperties) GetEndOfLifeDate() (rv *time.Time) {
	if s != nil {
		return s.EndOfLifeDate
	}
	return
}

func (s *SharedGalleryImageVersionProperties) GetPublishedDate() (rv *time.Time) {
	if s != nil {
		return s.PublishedDate
	}
	return
}

// SharedGalleryList - The List Shared Galleries operation response.
type SharedGalleryList struct {
	// REQUIRED; A list of shared galleries.
	Value []SharedGallery

	// The uri to fetch the next page of shared galleries. Call ListNext() with this to fetch the next page of shared galleries.
	NextLink *string
}

func (s *SharedGalleryList) GetValue() (rv []SharedGallery) {
	if s != nil {
		return s.Value
	}
	return
}

func (s *SharedGalleryList) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

// SharingProfile - Profile for gallery sharing to subscription or tenant
type SharingProfile struct {
	// Information of community gallery if current gallery is shared to community.
	CommunityGalleryInfo *CommunityGalleryInfo

	// This property allows you to specify the permission of sharing gallery.
	// Possible values are:
	// Private
	// Groups
	Permissions *GallerySharingPermissionTypes

	// READ-ONLY; A list of sharing profile groups.
	Groups []SharingProfileGroup
}

func (s *SharingProfile) GetCommunityGalleryInfo() (rv *CommunityGalleryInfo) {
	if s != nil {
		return s.CommunityGalleryInfo
	}
	return
}

func (s *SharingProfile) GetPermissions() (rv *GallerySharingPermissionTypes) {
	if s != nil {
		return s.Permissions
	}
	return
}

func (s *SharingProfile) GetGroups() (rv []SharingProfileGroup) {
	if s != nil {
		return s.Groups
	}
	return
}

// SharingProfileGroup - Group of the gallery sharing profile
type SharingProfileGroup struct {
	// A list of subscription/tenant ids the gallery is aimed to be shared to.
	IDs []string

	// This property allows you to specify the type of sharing group.
	// Possible values are:
	// Subscriptions
	// AADTenants
	// Community
	Type *SharingProfileGroupTypes
}

func (s *SharingProfileGroup) GetIDs() (rv []string) {
	if s != nil {
		return s.IDs
	}
	return
}

func (s *SharingProfileGroup) GetType() (rv *SharingProfileGroupTypes) {
	if s != nil {
		return s.Type
	}
	return
}

// SharingStatus - Sharing status of current gallery.
type SharingStatus struct {
	// Summary of all regional sharing status.
	Summary []RegionalSharingStatus

	// READ-ONLY; Aggregated sharing state of current gallery.
	AggregatedState *SharingState
}

func (s *SharingStatus) GetSummary() (rv []RegionalSharingStatus) {
	if s != nil {
		return s.Summary
	}
	return
}

func (s *SharingStatus) GetAggregatedState() (rv *SharingState) {
	if s != nil {
		return s.AggregatedState
	}
	return
}

// SharingUpdate - Specifies information about the gallery sharing profile update.
type SharingUpdate struct {
	// REQUIRED; This property allows you to specify the operation type of gallery sharing update.
	// Possible values are:
	// Add
	// Remove
	// Reset
	OperationType *SharingUpdateOperationTypes

	// A list of sharing profile groups.
	Groups []SharingProfileGroup
}

func (s *SharingUpdate) GetOperationType() (rv *SharingUpdateOperationTypes) {
	if s != nil {
		return s.OperationType
	}
	return
}

func (s *SharingUpdate) GetGroups() (rv []SharingProfileGroup) {
	if s != nil {
		return s.Groups
	}
	return
}

// Snapshot resource.
type Snapshot struct {
	// REQUIRED; Resource location
	Location *string

	// The extended location where the snapshot will be created. Extended location cannot be changed.
	ExtendedLocation *ExtendedLocation

	// Snapshot resource properties.
	Properties *SnapshotProperties

	// The snapshots sku name. Can be StandardLRS, PremiumLRS, or Standard_ZRS. This is an optional parameter for incremental
	// snapshot and the default behavior is the SKU will be set to the same sku as the
	// previous snapshot
	SKU *SnapshotSKU

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Unused. Always Null.
	ManagedBy *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (s *Snapshot) GetLocation() (rv string) {
	if s != nil && s.Location != nil {
		return *s.Location
	}
	return
}

func (s *Snapshot) GetExtendedLocation() (rv *ExtendedLocation) {
	if s != nil {
		return s.ExtendedLocation
	}
	return
}

func (s *Snapshot) GetProperties() (rv *SnapshotProperties) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *Snapshot) GetSKU() (rv *SnapshotSKU) {
	if s != nil {
		return s.SKU
	}
	return
}

func (s *Snapshot) GetTags() (rv map[string]*string) {
	if s != nil {
		return s.Tags
	}
	return
}

func (s *Snapshot) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *Snapshot) GetManagedBy() (rv string) {
	if s != nil && s.ManagedBy != nil {
		return *s.ManagedBy
	}
	return
}

func (s *Snapshot) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *Snapshot) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// SnapshotList - The List Snapshots operation response.
type SnapshotList struct {
	// REQUIRED; A list of snapshots.
	Value []Snapshot

	// The uri to fetch the next page of snapshots. Call ListNext() with this to fetch the next page of snapshots.
	NextLink *string
}

func (s *SnapshotList) GetValue() (rv []Snapshot) {
	if s != nil {
		return s.Value
	}
	return
}

func (s *SnapshotList) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

// SnapshotProperties - Snapshot resource properties.
type SnapshotProperties struct {
	// REQUIRED; Disk source information. CreationData information cannot be changed after the disk has been created.
	CreationData *CreationData

	// Percentage complete for the background copy when a resource is created via the CopyStart operation.
	CompletionPercent *float32

	// Additional authentication requirements when exporting or uploading to a disk or snapshot.
	DataAccessAuthMode *DataAccessAuthMode

	// ARM id of the DiskAccess resource for using private endpoints on disks.
	DiskAccessID *string

	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this
	// field is present for updates or creation with other options, it indicates a
	// resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB *int32

	// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *Encryption

	// Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollection

	// The hypervisor generation of the Virtual Machine. Applicable to OS disks only.
	HyperVGeneration *HyperVGeneration

	// Whether a snapshot is incremental. Incremental snapshots on the same disk occupy less space than full snapshots and can
	// be diffed.
	Incremental *bool

	// Policy for accessing the disk via network.
	NetworkAccessPolicy *NetworkAccessPolicy

	// The Operating System type.
	OSType *OperatingSystemTypes

	// Policy for controlling export on the disk.
	PublicNetworkAccess *PublicNetworkAccess

	// Purchase plan information for the image from which the source disk for the snapshot was originally created.
	PurchasePlan *PurchasePlanAutoGenerated

	// Contains the security related information for the resource.
	SecurityProfile *DiskSecurityProfile

	// List of supported capabilities for the image from which the source disk from the snapshot was originally created.
	SupportedCapabilities *SupportedCapabilities

	// Indicates the OS on a snapshot supports hibernation.
	SupportsHibernation *bool

	// READ-ONLY; The size of the disk in bytes. This field is read only.
	DiskSizeBytes *int64

	// READ-ONLY; The state of the snapshot.
	DiskState *DiskState

	// READ-ONLY; The disk provisioning state.
	ProvisioningState *string

	// READ-ONLY; The time when the snapshot was created.
	TimeCreated *time.Time

	// READ-ONLY; Unique Guid identifying the resource.
	UniqueID *string
}

func (s *SnapshotProperties) GetCreationData() (rv *CreationData) {
	if s != nil {
		return s.CreationData
	}
	return
}

func (s *SnapshotProperties) GetCompletionPercent() (rv float32) {
	if s != nil && s.CompletionPercent != nil {
		return *s.CompletionPercent
	}
	return
}

func (s *SnapshotProperties) GetDataAccessAuthMode() (rv *DataAccessAuthMode) {
	if s != nil {
		return s.DataAccessAuthMode
	}
	return
}

func (s *SnapshotProperties) GetDiskAccessID() (rv string) {
	if s != nil && s.DiskAccessID != nil {
		return *s.DiskAccessID
	}
	return
}

func (s *SnapshotProperties) GetDiskSizeGB() (rv int32) {
	if s != nil && s.DiskSizeGB != nil {
		return *s.DiskSizeGB
	}
	return
}

func (s *SnapshotProperties) GetEncryption() (rv *Encryption) {
	if s != nil {
		return s.Encryption
	}
	return
}

func (s *SnapshotProperties) GetEncryptionSettingsCollection() (rv *EncryptionSettingsCollection) {
	if s != nil {
		return s.EncryptionSettingsCollection
	}
	return
}

func (s *SnapshotProperties) GetHyperVGeneration() (rv *HyperVGeneration) {
	if s != nil {
		return s.HyperVGeneration
	}
	return
}

func (s *SnapshotProperties) GetIncremental() (rv bool) {
	if s != nil && s.Incremental != nil {
		return *s.Incremental
	}
	return
}

func (s *SnapshotProperties) GetNetworkAccessPolicy() (rv *NetworkAccessPolicy) {
	if s != nil {
		return s.NetworkAccessPolicy
	}
	return
}

func (s *SnapshotProperties) GetOSType() (rv *OperatingSystemTypes) {
	if s != nil {
		return s.OSType
	}
	return
}

func (s *SnapshotProperties) GetPublicNetworkAccess() (rv *PublicNetworkAccess) {
	if s != nil {
		return s.PublicNetworkAccess
	}
	return
}

func (s *SnapshotProperties) GetPurchasePlan() (rv *PurchasePlanAutoGenerated) {
	if s != nil {
		return s.PurchasePlan
	}
	return
}

func (s *SnapshotProperties) GetSecurityProfile() (rv *DiskSecurityProfile) {
	if s != nil {
		return s.SecurityProfile
	}
	return
}

func (s *SnapshotProperties) GetSupportedCapabilities() (rv *SupportedCapabilities) {
	if s != nil {
		return s.SupportedCapabilities
	}
	return
}

func (s *SnapshotProperties) GetSupportsHibernation() (rv bool) {
	if s != nil && s.SupportsHibernation != nil {
		return *s.SupportsHibernation
	}
	return
}

func (s *SnapshotProperties) GetDiskSizeBytes() (rv int64) {
	if s != nil && s.DiskSizeBytes != nil {
		return *s.DiskSizeBytes
	}
	return
}

func (s *SnapshotProperties) GetDiskState() (rv *DiskState) {
	if s != nil {
		return s.DiskState
	}
	return
}

func (s *SnapshotProperties) GetProvisioningState() (rv string) {
	if s != nil && s.ProvisioningState != nil {
		return *s.ProvisioningState
	}
	return
}

func (s *SnapshotProperties) GetTimeCreated() (rv *time.Time) {
	if s != nil {
		return s.TimeCreated
	}
	return
}

func (s *SnapshotProperties) GetUniqueID() (rv string) {
	if s != nil && s.UniqueID != nil {
		return *s.UniqueID
	}
	return
}

// SnapshotSKU - The snapshots sku name. Can be StandardLRS, PremiumLRS, or Standard_ZRS. This is an optional parameter for
// incremental snapshot and the default behavior is the SKU will be set to the same sku as the
// previous snapshot
type SnapshotSKU struct {
	// The sku name.
	Name *SnapshotStorageAccountTypes

	// READ-ONLY; The sku tier.
	Tier *string
}

func (s *SnapshotSKU) GetName() (rv *SnapshotStorageAccountTypes) {
	if s != nil {
		return s.Name
	}
	return
}

func (s *SnapshotSKU) GetTier() (rv string) {
	if s != nil && s.Tier != nil {
		return *s.Tier
	}
	return
}

// SnapshotUpdate - Snapshot update resource.
type SnapshotUpdate struct {
	// Snapshot resource update properties.
	Properties *SnapshotUpdateProperties

	// The snapshots sku name. Can be StandardLRS, PremiumLRS, or Standard_ZRS. This is an optional parameter for incremental
	// snapshot and the default behavior is the SKU will be set to the same sku as the
	// previous snapshot
	SKU *SnapshotSKU

	// Resource tags
	Tags map[string]*string
}

func (s *SnapshotUpdate) GetProperties() (rv *SnapshotUpdateProperties) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SnapshotUpdate) GetSKU() (rv *SnapshotSKU) {
	if s != nil {
		return s.SKU
	}
	return
}

func (s *SnapshotUpdate) GetTags() (rv map[string]*string) {
	if s != nil {
		return s.Tags
	}
	return
}

// SnapshotUpdateProperties - Snapshot resource update properties.
type SnapshotUpdateProperties struct {
	// Additional authentication requirements when exporting or uploading to a disk or snapshot.
	DataAccessAuthMode *DataAccessAuthMode

	// ARM id of the DiskAccess resource for using private endpoints on disks.
	DiskAccessID *string

	// If creationData.createOption is Empty, this field is mandatory and it indicates the size of the disk to create. If this
	// field is present for updates or creation with other options, it indicates a
	// resize. Resizes are only allowed if the disk is not attached to a running VM, and can only increase the disk's size.
	DiskSizeGB *int32

	// Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys.
	Encryption *Encryption

	// Encryption settings collection used be Azure Disk Encryption, can contain multiple encryption settings per disk or snapshot.
	EncryptionSettingsCollection *EncryptionSettingsCollection

	// Policy for accessing the disk via network.
	NetworkAccessPolicy *NetworkAccessPolicy

	// the Operating System type.
	OSType *OperatingSystemTypes

	// Policy for controlling export on the disk.
	PublicNetworkAccess *PublicNetworkAccess

	// List of supported capabilities for the image from which the OS disk was created.
	SupportedCapabilities *SupportedCapabilities

	// Indicates the OS on a snapshot supports hibernation.
	SupportsHibernation *bool
}

func (s *SnapshotUpdateProperties) GetDataAccessAuthMode() (rv *DataAccessAuthMode) {
	if s != nil {
		return s.DataAccessAuthMode
	}
	return
}

func (s *SnapshotUpdateProperties) GetDiskAccessID() (rv string) {
	if s != nil && s.DiskAccessID != nil {
		return *s.DiskAccessID
	}
	return
}

func (s *SnapshotUpdateProperties) GetDiskSizeGB() (rv int32) {
	if s != nil && s.DiskSizeGB != nil {
		return *s.DiskSizeGB
	}
	return
}

func (s *SnapshotUpdateProperties) GetEncryption() (rv *Encryption) {
	if s != nil {
		return s.Encryption
	}
	return
}

func (s *SnapshotUpdateProperties) GetEncryptionSettingsCollection() (rv *EncryptionSettingsCollection) {
	if s != nil {
		return s.EncryptionSettingsCollection
	}
	return
}

func (s *SnapshotUpdateProperties) GetNetworkAccessPolicy() (rv *NetworkAccessPolicy) {
	if s != nil {
		return s.NetworkAccessPolicy
	}
	return
}

func (s *SnapshotUpdateProperties) GetOSType() (rv *OperatingSystemTypes) {
	if s != nil {
		return s.OSType
	}
	return
}

func (s *SnapshotUpdateProperties) GetPublicNetworkAccess() (rv *PublicNetworkAccess) {
	if s != nil {
		return s.PublicNetworkAccess
	}
	return
}

func (s *SnapshotUpdateProperties) GetSupportedCapabilities() (rv *SupportedCapabilities) {
	if s != nil {
		return s.SupportedCapabilities
	}
	return
}

func (s *SnapshotUpdateProperties) GetSupportsHibernation() (rv bool) {
	if s != nil && s.SupportsHibernation != nil {
		return *s.SupportsHibernation
	}
	return
}

// SoftDeletePolicy - Contains information about the soft deletion policy of the gallery.
type SoftDeletePolicy struct {
	// Enables soft-deletion for resources in this gallery, allowing them to be recovered within retention time.
	IsSoftDeleteEnabled *bool
}

func (s *SoftDeletePolicy) GetIsSoftDeleteEnabled() (rv bool) {
	if s != nil && s.IsSoftDeleteEnabled != nil {
		return *s.IsSoftDeleteEnabled
	}
	return
}

// SourceVault - The vault id is an Azure Resource Manager Resource id in the form /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}
type SourceVault struct {
	// Resource Id
	ID *string
}

func (s *SourceVault) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

// SpotRestorePolicy - Specifies the Spot-Try-Restore properties for the virtual machine scale set.
// With this property customer can enable or disable automatic restore of the evicted Spot VMSS VM instances opportunistically
// based on capacity availability and pricing constraint.
type SpotRestorePolicy struct {
	// Enables the Spot-Try-Restore feature where evicted VMSS SPOT instances will be tried to be restored opportunistically based
	// on capacity availability and pricing constraints
	Enabled *bool

	// Timeout value expressed as an ISO 8601 time duration after which the platform will not try to restore the VMSS SPOT instances
	RestoreTimeout *string
}

func (s *SpotRestorePolicy) GetEnabled() (rv bool) {
	if s != nil && s.Enabled != nil {
		return *s.Enabled
	}
	return
}

func (s *SpotRestorePolicy) GetRestoreTimeout() (rv string) {
	if s != nil && s.RestoreTimeout != nil {
		return *s.RestoreTimeout
	}
	return
}

type StatusCodeCount struct {
	// READ-ONLY; The instance view status code
	Code *string

	// READ-ONLY; Number of instances having this status code
	Count *int32
}

func (s *StatusCodeCount) GetCode() (rv string) {
	if s != nil && s.Code != nil {
		return *s.Code
	}
	return
}

func (s *StatusCodeCount) GetCount() (rv int32) {
	if s != nil && s.Count != nil {
		return *s.Count
	}
	return
}

// StorageProfile - Specifies the storage settings for the virtual machine disks.
type StorageProfile struct {
	// Specifies the parameters that are used to add a data disk to a virtual machine.
	// For more information about disks, see About disks and VHDs for Azure virtual machines [https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview].
	DataDisks []DataDisk

	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or
	// virtual machine images. This element is required when you want to use a platform
	// image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference *ImageReference

	// Specifies information about the operating system disk used by the virtual machine.
	// For more information about disks, see About disks and VHDs for Azure virtual machines [https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview].
	OSDisk *OSDisk
}

func (s *StorageProfile) GetDataDisks() (rv []DataDisk) {
	if s != nil {
		return s.DataDisks
	}
	return
}

func (s *StorageProfile) GetImageReference() (rv *ImageReference) {
	if s != nil {
		return s.ImageReference
	}
	return
}

func (s *StorageProfile) GetOSDisk() (rv *OSDisk) {
	if s != nil {
		return s.OSDisk
	}
	return
}

type SubResource struct {
	// Resource Id
	ID *string
}

func (s *SubResource) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

type SubResourceReadOnly struct {
	// READ-ONLY; Resource Id
	ID *string
}

func (s *SubResourceReadOnly) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

type SubResourceWithColocationStatus struct {
	// Describes colocation status of a resource in the Proximity Placement Group.
	ColocationStatus *InstanceViewStatus

	// Resource Id
	ID *string
}

func (s *SubResourceWithColocationStatus) GetColocationStatus() (rv *InstanceViewStatus) {
	if s != nil {
		return s.ColocationStatus
	}
	return
}

func (s *SubResourceWithColocationStatus) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

// SupportedCapabilities - List of supported capabilities persisted on the disk resource for VM use.
type SupportedCapabilities struct {
	// True if the image from which the OS disk is created supports accelerated networking.
	AcceleratedNetwork *bool

	// CPU architecture supported by an OS disk.
	Architecture *Architecture
}

func (s *SupportedCapabilities) GetAcceleratedNetwork() (rv bool) {
	if s != nil && s.AcceleratedNetwork != nil {
		return *s.AcceleratedNetwork
	}
	return
}

func (s *SupportedCapabilities) GetArchitecture() (rv *Architecture) {
	if s != nil {
		return s.Architecture
	}
	return
}

// TargetRegion - Describes the target region information.
type TargetRegion struct {
	// REQUIRED; The name of the region.
	Name *string

	// Optional. Allows users to provide customer managed keys for encrypting the OS and data disks in the gallery artifact.
	Encryption *EncryptionImages

	// The number of replicas of the Image Version to be created per region. This property is updatable.
	RegionalReplicaCount *int32

	// Specifies the storage account type to be used to store the image. This property is not updatable.
	StorageAccountType *StorageAccountType
}

func (t *TargetRegion) GetName() (rv string) {
	if t != nil && t.Name != nil {
		return *t.Name
	}
	return
}

func (t *TargetRegion) GetEncryption() (rv *EncryptionImages) {
	if t != nil {
		return t.Encryption
	}
	return
}

func (t *TargetRegion) GetRegionalReplicaCount() (rv int32) {
	if t != nil && t.RegionalReplicaCount != nil {
		return *t.RegionalReplicaCount
	}
	return
}

func (t *TargetRegion) GetStorageAccountType() (rv *StorageAccountType) {
	if t != nil {
		return t.StorageAccountType
	}
	return
}

type TerminateNotificationProfile struct {
	// Specifies whether the Terminate Scheduled event is enabled or disabled.
	Enable *bool

	// Configurable length of time a Virtual Machine being deleted will have to potentially approve the Terminate Scheduled Event
	// before the event is auto approved (timed out). The configuration must be
	// specified in ISO 8601 format, the default value is 5 minutes (PT5M)
	NotBeforeTimeout *string
}

func (t *TerminateNotificationProfile) GetEnable() (rv bool) {
	if t != nil && t.Enable != nil {
		return *t.Enable
	}
	return
}

func (t *TerminateNotificationProfile) GetNotBeforeTimeout() (rv string) {
	if t != nil && t.NotBeforeTimeout != nil {
		return *t.NotBeforeTimeout
	}
	return
}

// ThrottledRequestsInput - Api request input for LogAnalytics getThrottledRequests Api.
type ThrottledRequestsInput struct {
	// REQUIRED; SAS Uri of the logging blob container to which LogAnalytics Api writes output logs to.
	BlobContainerSasURI *string

	// REQUIRED; From time of the query
	FromTime *time.Time

	// REQUIRED; To time of the query
	ToTime *time.Time

	// Group query result by Client Application ID.
	GroupByClientApplicationID *bool

	// Group query result by Operation Name.
	GroupByOperationName *bool

	// Group query result by Resource Name.
	GroupByResourceName *bool

	// Group query result by Throttle Policy applied.
	GroupByThrottlePolicy *bool

	// Group query result by User Agent.
	GroupByUserAgent *bool
}

func (t *ThrottledRequestsInput) GetBlobContainerSasURI() (rv string) {
	if t != nil && t.BlobContainerSasURI != nil {
		return *t.BlobContainerSasURI
	}
	return
}

func (t *ThrottledRequestsInput) GetFromTime() (rv *time.Time) {
	if t != nil {
		return t.FromTime
	}
	return
}

func (t *ThrottledRequestsInput) GetToTime() (rv *time.Time) {
	if t != nil {
		return t.ToTime
	}
	return
}

func (t *ThrottledRequestsInput) GetGroupByClientApplicationID() (rv bool) {
	if t != nil && t.GroupByClientApplicationID != nil {
		return *t.GroupByClientApplicationID
	}
	return
}

func (t *ThrottledRequestsInput) GetGroupByOperationName() (rv bool) {
	if t != nil && t.GroupByOperationName != nil {
		return *t.GroupByOperationName
	}
	return
}

func (t *ThrottledRequestsInput) GetGroupByResourceName() (rv bool) {
	if t != nil && t.GroupByResourceName != nil {
		return *t.GroupByResourceName
	}
	return
}

func (t *ThrottledRequestsInput) GetGroupByThrottlePolicy() (rv bool) {
	if t != nil && t.GroupByThrottlePolicy != nil {
		return *t.GroupByThrottlePolicy
	}
	return
}

func (t *ThrottledRequestsInput) GetGroupByUserAgent() (rv bool) {
	if t != nil && t.GroupByUserAgent != nil {
		return *t.GroupByUserAgent
	}
	return
}

// UefiSettings - Specifies the security settings like secure boot and vTPM used while creating the virtual machine.
// Minimum api-version: 2020-12-01
type UefiSettings struct {
	// Specifies whether secure boot should be enabled on the virtual machine.
	// Minimum api-version: 2020-12-01
	SecureBootEnabled *bool

	// Specifies whether vTPM should be enabled on the virtual machine.
	// Minimum api-version: 2020-12-01
	VTpmEnabled *bool
}

func (u *UefiSettings) GetSecureBootEnabled() (rv bool) {
	if u != nil && u.SecureBootEnabled != nil {
		return *u.SecureBootEnabled
	}
	return
}

func (u *UefiSettings) GetVTpmEnabled() (rv bool) {
	if u != nil && u.VTpmEnabled != nil {
		return *u.VTpmEnabled
	}
	return
}

// UpdateDomain - Defines an update domain for the cloud service.
type UpdateDomain struct {
	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource Name
	Name *string
}

func (u *UpdateDomain) GetID() (rv string) {
	if u != nil && u.ID != nil {
		return *u.ID
	}
	return
}

func (u *UpdateDomain) GetName() (rv string) {
	if u != nil && u.Name != nil {
		return *u.Name
	}
	return
}

type UpdateDomainListResult struct {
	// REQUIRED
	Value    []UpdateDomain
	NextLink *string
}

func (u *UpdateDomainListResult) GetValue() (rv []UpdateDomain) {
	if u != nil {
		return u.Value
	}
	return
}

func (u *UpdateDomainListResult) GetNextLink() (rv string) {
	if u != nil && u.NextLink != nil {
		return *u.NextLink
	}
	return
}

// UpgradeOperationHistoricalStatusInfo - Virtual Machine Scale Set OS Upgrade History operation response.
type UpgradeOperationHistoricalStatusInfo struct {
	// READ-ONLY; Resource location
	Location *string

	// READ-ONLY; Information about the properties of the upgrade operation.
	Properties *UpgradeOperationHistoricalStatusInfoProperties

	// READ-ONLY; Resource type
	Type *string
}

func (u *UpgradeOperationHistoricalStatusInfo) GetLocation() (rv string) {
	if u != nil && u.Location != nil {
		return *u.Location
	}
	return
}

func (u *UpgradeOperationHistoricalStatusInfo) GetProperties() (rv *UpgradeOperationHistoricalStatusInfoProperties) {
	if u != nil {
		return u.Properties
	}
	return
}

func (u *UpgradeOperationHistoricalStatusInfo) GetType() (rv string) {
	if u != nil && u.Type != nil {
		return *u.Type
	}
	return
}

// UpgradeOperationHistoricalStatusInfoProperties - Describes each OS upgrade on the Virtual Machine Scale Set.
type UpgradeOperationHistoricalStatusInfoProperties struct {
	// READ-ONLY; Error Details for this upgrade if there are any.
	Error *APIError

	// READ-ONLY; Counts of the VMs in each state.
	Progress *RollingUpgradeProgressInfo

	// READ-ONLY; Information about OS rollback if performed
	RollbackInfo *RollbackStatusInfo

	// READ-ONLY; Information about the overall status of the upgrade operation.
	RunningStatus *UpgradeOperationHistoryStatus

	// READ-ONLY; Invoker of the Upgrade Operation
	StartedBy *UpgradeOperationInvoker

	// READ-ONLY; Image Reference details
	TargetImageReference *ImageReference
}

func (u *UpgradeOperationHistoricalStatusInfoProperties) GetError() (rv *APIError) {
	if u != nil {
		return u.Error
	}
	return
}

func (u *UpgradeOperationHistoricalStatusInfoProperties) GetProgress() (rv *RollingUpgradeProgressInfo) {
	if u != nil {
		return u.Progress
	}
	return
}

func (u *UpgradeOperationHistoricalStatusInfoProperties) GetRollbackInfo() (rv *RollbackStatusInfo) {
	if u != nil {
		return u.RollbackInfo
	}
	return
}

func (u *UpgradeOperationHistoricalStatusInfoProperties) GetRunningStatus() (rv *UpgradeOperationHistoryStatus) {
	if u != nil {
		return u.RunningStatus
	}
	return
}

func (u *UpgradeOperationHistoricalStatusInfoProperties) GetStartedBy() (rv *UpgradeOperationInvoker) {
	if u != nil {
		return u.StartedBy
	}
	return
}

func (u *UpgradeOperationHistoricalStatusInfoProperties) GetTargetImageReference() (rv *ImageReference) {
	if u != nil {
		return u.TargetImageReference
	}
	return
}

// UpgradeOperationHistoryStatus - Information about the current running state of the overall upgrade.
type UpgradeOperationHistoryStatus struct {
	// READ-ONLY; Code indicating the current status of the upgrade.
	Code *UpgradeState

	// READ-ONLY; End time of the upgrade.
	EndTime *time.Time

	// READ-ONLY; Start time of the upgrade.
	StartTime *time.Time
}

func (u *UpgradeOperationHistoryStatus) GetCode() (rv *UpgradeState) {
	if u != nil {
		return u.Code
	}
	return
}

func (u *UpgradeOperationHistoryStatus) GetEndTime() (rv *time.Time) {
	if u != nil {
		return u.EndTime
	}
	return
}

func (u *UpgradeOperationHistoryStatus) GetStartTime() (rv *time.Time) {
	if u != nil {
		return u.StartTime
	}
	return
}

// UpgradePolicy - Describes an upgrade policy - automatic, manual, or rolling.
type UpgradePolicy struct {
	// Configuration parameters used for performing automatic OS Upgrade.
	AutomaticOSUpgradePolicy *AutomaticOSUpgradePolicy

	// Specifies the mode of an upgrade to virtual machines in the scale set.
	// Possible values are:
	// Manual - You control the application of updates to virtual machines in the scale set. You do this by using the manualUpgrade
	// action.
	// Automatic - All virtual machines in the scale set are automatically updated at the same time.
	Mode *UpgradeMode

	// The configuration parameters used while performing a rolling upgrade.
	RollingUpgradePolicy *RollingUpgradePolicy
}

func (u *UpgradePolicy) GetAutomaticOSUpgradePolicy() (rv *AutomaticOSUpgradePolicy) {
	if u != nil {
		return u.AutomaticOSUpgradePolicy
	}
	return
}

func (u *UpgradePolicy) GetMode() (rv *UpgradeMode) {
	if u != nil {
		return u.Mode
	}
	return
}

func (u *UpgradePolicy) GetRollingUpgradePolicy() (rv *RollingUpgradePolicy) {
	if u != nil {
		return u.RollingUpgradePolicy
	}
	return
}

// Usage - Describes Compute Resource Usage.
type Usage struct {
	// REQUIRED; The current usage of the resource.
	CurrentValue *int32

	// REQUIRED; The maximum permitted usage of the resource.
	Limit *int64

	// REQUIRED; The name of the type of usage.
	Name *UsageName

	// REQUIRED; An enum describing the unit of usage measurement.
	Unit *string
}

func (u *Usage) GetCurrentValue() (rv int32) {
	if u != nil && u.CurrentValue != nil {
		return *u.CurrentValue
	}
	return
}

func (u *Usage) GetLimit() (rv int64) {
	if u != nil && u.Limit != nil {
		return *u.Limit
	}
	return
}

func (u *Usage) GetName() (rv *UsageName) {
	if u != nil {
		return u.Name
	}
	return
}

func (u *Usage) GetUnit() (rv *string) {
	if u != nil {
		return u.Unit
	}
	return
}

// UsageName - The Usage Names.
type UsageName struct {
	// The localized name of the resource.
	LocalizedValue *string

	// The name of the resource.
	Value *string
}

func (u *UsageName) GetLocalizedValue() (rv string) {
	if u != nil && u.LocalizedValue != nil {
		return *u.LocalizedValue
	}
	return
}

func (u *UsageName) GetValue() (rv string) {
	if u != nil && u.Value != nil {
		return *u.Value
	}
	return
}

type UserArtifactManage struct {
	// REQUIRED; Required. The path and arguments to install the gallery application. This is limited to 4096 characters.
	Install *string

	// REQUIRED; Required. The path and arguments to remove the gallery application. This is limited to 4096 characters.
	Remove *string

	// Optional. The path and arguments to update the gallery application. If not present, then update operation will invoke remove
	// command on the previous version and install command on the current version
	// of the gallery application. This is limited to 4096 characters.
	Update *string
}

func (u *UserArtifactManage) GetInstall() (rv string) {
	if u != nil && u.Install != nil {
		return *u.Install
	}
	return
}

func (u *UserArtifactManage) GetRemove() (rv string) {
	if u != nil && u.Remove != nil {
		return *u.Remove
	}
	return
}

func (u *UserArtifactManage) GetUpdate() (rv string) {
	if u != nil && u.Update != nil {
		return *u.Update
	}
	return
}

// UserArtifactSource - The source image from which the Image Version is going to be created.
type UserArtifactSource struct {
	// REQUIRED; Required. The mediaLink of the artifact, must be a readable storage page blob.
	MediaLink *string

	// Optional. The defaultConfigurationLink of the artifact, must be a readable storage page blob.
	DefaultConfigurationLink *string
}

func (u *UserArtifactSource) GetMediaLink() (rv string) {
	if u != nil && u.MediaLink != nil {
		return *u.MediaLink
	}
	return
}

func (u *UserArtifactSource) GetDefaultConfigurationLink() (rv string) {
	if u != nil && u.DefaultConfigurationLink != nil {
		return *u.DefaultConfigurationLink
	}
	return
}

type UserAssignedIdentitiesValue struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string
}

func (u *UserAssignedIdentitiesValue) GetClientID() (rv string) {
	if u != nil && u.ClientID != nil {
		return *u.ClientID
	}
	return
}

func (u *UserAssignedIdentitiesValue) GetPrincipalID() (rv string) {
	if u != nil && u.PrincipalID != nil {
		return *u.PrincipalID
	}
	return
}

// VMDiskSecurityProfile - Specifies the security profile settings for the managed disk.
// NOTE: It can only be set for Confidential VMs
type VMDiskSecurityProfile struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk that is used for Customer Managed Key
	// encrypted ConfidentialVM OS Disk and VMGuest blob.
	DiskEncryptionSet *DiskEncryptionSetParameters

	// Specifies the EncryptionType of the managed disk.
	// It is set to DiskWithVMGuestState for encryption of the managed disk along with VMGuestState blob, and VMGuestStateOnly
	// for encryption of just the VMGuestState blob.
	// NOTE: It can be set for only Confidential VMs.
	SecurityEncryptionType *SecurityEncryptionTypes
}

func (v *VMDiskSecurityProfile) GetDiskEncryptionSet() (rv *DiskEncryptionSetParameters) {
	if v != nil {
		return v.DiskEncryptionSet
	}
	return
}

func (v *VMDiskSecurityProfile) GetSecurityEncryptionType() (rv *SecurityEncryptionTypes) {
	if v != nil {
		return v.SecurityEncryptionType
	}
	return
}

// VMGalleryApplication - Specifies the required information to reference a compute gallery application version
type VMGalleryApplication struct {
	// REQUIRED; Specifies the GalleryApplicationVersion resource id on the form of
	// /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/applications/{application}/versions/{version}
	PackageReferenceID *string

	// Optional, Specifies the uri to an azure blob that will replace the default configuration for the package if provided
	ConfigurationReference *string

	// Optional, Specifies the order in which the packages have to be installed
	Order *int32

	// Optional, Specifies a passthrough value for more generic context.
	Tags *string
}

func (v *VMGalleryApplication) GetPackageReferenceID() (rv string) {
	if v != nil && v.PackageReferenceID != nil {
		return *v.PackageReferenceID
	}
	return
}

func (v *VMGalleryApplication) GetConfigurationReference() (rv string) {
	if v != nil && v.ConfigurationReference != nil {
		return *v.ConfigurationReference
	}
	return
}

func (v *VMGalleryApplication) GetOrder() (rv int32) {
	if v != nil && v.Order != nil {
		return *v.Order
	}
	return
}

func (v *VMGalleryApplication) GetTags() (rv string) {
	if v != nil && v.Tags != nil {
		return *v.Tags
	}
	return
}

type VMScaleSetConvertToSinglePlacementGroupInput struct {
	// Id of the placement group in which you want future virtual machine instances to be placed. To query placement group Id,
	// please use Virtual Machine Scale Set VMs - Get API. If not provided, the
	// platform will choose one with maximum number of virtual machine instances.
	ActivePlacementGroupID *string
}

func (v *VMScaleSetConvertToSinglePlacementGroupInput) GetActivePlacementGroupID() (rv string) {
	if v != nil && v.ActivePlacementGroupID != nil {
		return *v.ActivePlacementGroupID
	}
	return
}

// VMSizeProperties - Specifies VM Size Property settings on the virtual machine.
type VMSizeProperties struct {
	// Specifies the number of vCPUs available for the VM.
	// When this property is not specified in the request body the default behavior is to set it to the value of vCPUs available
	// for that VM size exposed in api response of List all available virtual machine
	// sizes in a region [https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list] .
	VCPUsAvailable *int32

	// Specifies the vCPU to physical core ratio.
	// When this property is not specified in the request body the default behavior is set to the value of vCPUsPerCore for the
	// VM Size exposed in api response of List all available virtual machine sizes in
	// a region [https://docs.microsoft.com/en-us/rest/api/compute/resource-skus/list]
	// Setting this property to 1 also means that hyper-threading is disabled.
	VCPUsPerCore *int32
}

func (v *VMSizeProperties) GetVCPUsAvailable() (rv int32) {
	if v != nil && v.VCPUsAvailable != nil {
		return *v.VCPUsAvailable
	}
	return
}

func (v *VMSizeProperties) GetVCPUsPerCore() (rv int32) {
	if v != nil && v.VCPUsPerCore != nil {
		return *v.VCPUsPerCore
	}
	return
}

// VaultCertificate - Describes a single certificate reference in a Key Vault, and where the certificate should reside on
// the VM.
type VaultCertificate struct {
	// For Windows VMs, specifies the certificate store on the Virtual Machine to which the certificate should be added. The specified
	// certificate store is implicitly in the LocalMachine account.
	// For Linux VMs, the certificate file is placed under the /var/lib/waagent directory, with the file name <UppercaseThumbprint>.crt
	// for the X509 certificate file and <UppercaseThumbprint>.prv for private
	// key. Both of these files are .pem formatted.
	CertificateStore *string

	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault,
	// see Add a key or secret to the key vault
	// [https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add]. In this case, your certificate needs to be It
	// is the Base64 encoding of the following JSON Object which is encoded in UTF-8:
	// {
	// "data":"",
	// "dataType":"pfx",
	// "password":""
	// }
	// To install certificates on a virtual machine it is recommended to use the Azure Key Vault virtual machine extension for
	// Linux
	// [https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux] or the Azure Key Vault virtual machine extension
	// for Windows
	// [https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows].
	CertificateURL *string
}

func (v *VaultCertificate) GetCertificateStore() (rv string) {
	if v != nil && v.CertificateStore != nil {
		return *v.CertificateStore
	}
	return
}

func (v *VaultCertificate) GetCertificateURL() (rv string) {
	if v != nil && v.CertificateURL != nil {
		return *v.CertificateURL
	}
	return
}

// VaultSecretGroup - Describes a set of certificates which are all in the same Key Vault.
type VaultSecretGroup struct {
	// The relative URL of the Key Vault containing all of the certificates in VaultCertificates.
	SourceVault *SubResource

	// The list of key vault references in SourceVault which contain certificates.
	VaultCertificates []VaultCertificate
}

func (v *VaultSecretGroup) GetSourceVault() (rv *SubResource) {
	if v != nil {
		return v.SourceVault
	}
	return
}

func (v *VaultSecretGroup) GetVaultCertificates() (rv []VaultCertificate) {
	if v != nil {
		return v.VaultCertificates
	}
	return
}

// VirtualHardDisk - Describes the uri of a disk.
type VirtualHardDisk struct {
	// Specifies the virtual hard disk's uri.
	URI *string
}

func (v *VirtualHardDisk) GetURI() (rv string) {
	if v != nil && v.URI != nil {
		return *v.URI
	}
	return
}

// VirtualMachine - Describes a Virtual Machine.
type VirtualMachine struct {
	// REQUIRED; Resource location
	Location *string

	// The extended location of the Virtual Machine.
	ExtendedLocation *ExtendedLocation

	// The identity of the virtual machine, if configured.
	Identity *VirtualMachineIdentity

	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace
	// images. Before you can use a marketplace image from an API, you must
	// enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click
	// Want to deploy programmatically, Get Started ->. Enter any required
	// information and then click Save.
	Plan *Plan

	// Describes the properties of a Virtual Machine.
	Properties *VirtualMachineProperties

	// Resource tags
	Tags map[string]*string

	// The virtual machine zones.
	Zones []string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; The virtual machine child extension resources.
	Resources []VirtualMachineExtension

	// READ-ONLY; Resource type
	Type *string
}

func (v *VirtualMachine) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualMachine) GetExtendedLocation() (rv *ExtendedLocation) {
	if v != nil {
		return v.ExtendedLocation
	}
	return
}

func (v *VirtualMachine) GetIdentity() (rv *VirtualMachineIdentity) {
	if v != nil {
		return v.Identity
	}
	return
}

func (v *VirtualMachine) GetPlan() (rv *Plan) {
	if v != nil {
		return v.Plan
	}
	return
}

func (v *VirtualMachine) GetProperties() (rv *VirtualMachineProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachine) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualMachine) GetZones() (rv []string) {
	if v != nil {
		return v.Zones
	}
	return
}

func (v *VirtualMachine) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachine) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachine) GetResources() (rv []VirtualMachineExtension) {
	if v != nil {
		return v.Resources
	}
	return
}

func (v *VirtualMachine) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualMachineAgentInstanceView - The instance view of the VM Agent running on the virtual machine.
type VirtualMachineAgentInstanceView struct {
	// The virtual machine extension handler instance view.
	ExtensionHandlers []VirtualMachineExtensionHandlerInstanceView

	// The resource status information.
	Statuses []InstanceViewStatus

	// The VM Agent full version.
	VMAgentVersion *string
}

func (v *VirtualMachineAgentInstanceView) GetExtensionHandlers() (rv []VirtualMachineExtensionHandlerInstanceView) {
	if v != nil {
		return v.ExtensionHandlers
	}
	return
}

func (v *VirtualMachineAgentInstanceView) GetStatuses() (rv []InstanceViewStatus) {
	if v != nil {
		return v.Statuses
	}
	return
}

func (v *VirtualMachineAgentInstanceView) GetVMAgentVersion() (rv string) {
	if v != nil && v.VMAgentVersion != nil {
		return *v.VMAgentVersion
	}
	return
}

// VirtualMachineAssessPatchesResult - Describes the properties of an AssessPatches result.
type VirtualMachineAssessPatchesResult struct {
	// READ-ONLY; The activity ID of the operation that produced this result. It is used to correlate across CRP and extension
	// logs.
	AssessmentActivityID *string

	// READ-ONLY; The list of patches that have been detected as available for installation.
	AvailablePatches []VirtualMachineSoftwarePatchProperties

	// READ-ONLY; The number of critical or security patches that have been detected as available and not yet installed.
	CriticalAndSecurityPatchCount *int32

	// READ-ONLY; The errors that were encountered during execution of the operation. The details array contains the list of them.
	Error *APIError

	// READ-ONLY; The number of all available patches excluding critical and security.
	OtherPatchCount *int32

	// READ-ONLY; The overall reboot status of the VM. It will be true when partially installed patches require a reboot to complete
	// installation but the reboot has not yet occurred.
	RebootPending *bool

	// READ-ONLY; The UTC timestamp when the operation began.
	StartDateTime *time.Time

	// READ-ONLY; The overall success or failure status of the operation. It remains "InProgress" until the operation completes.
	// At that point it will become "Unknown", "Failed", "Succeeded", or
	// "CompletedWithWarnings."
	Status *PatchOperationStatus
}

func (v *VirtualMachineAssessPatchesResult) GetAssessmentActivityID() (rv string) {
	if v != nil && v.AssessmentActivityID != nil {
		return *v.AssessmentActivityID
	}
	return
}

func (v *VirtualMachineAssessPatchesResult) GetAvailablePatches() (rv []VirtualMachineSoftwarePatchProperties) {
	if v != nil {
		return v.AvailablePatches
	}
	return
}

func (v *VirtualMachineAssessPatchesResult) GetCriticalAndSecurityPatchCount() (rv int32) {
	if v != nil && v.CriticalAndSecurityPatchCount != nil {
		return *v.CriticalAndSecurityPatchCount
	}
	return
}

func (v *VirtualMachineAssessPatchesResult) GetError() (rv *APIError) {
	if v != nil {
		return v.Error
	}
	return
}

func (v *VirtualMachineAssessPatchesResult) GetOtherPatchCount() (rv int32) {
	if v != nil && v.OtherPatchCount != nil {
		return *v.OtherPatchCount
	}
	return
}

func (v *VirtualMachineAssessPatchesResult) GetRebootPending() (rv bool) {
	if v != nil && v.RebootPending != nil {
		return *v.RebootPending
	}
	return
}

func (v *VirtualMachineAssessPatchesResult) GetStartDateTime() (rv *time.Time) {
	if v != nil {
		return v.StartDateTime
	}
	return
}

func (v *VirtualMachineAssessPatchesResult) GetStatus() (rv *PatchOperationStatus) {
	if v != nil {
		return v.Status
	}
	return
}

// VirtualMachineCaptureParameters - Capture Virtual Machine parameters.
type VirtualMachineCaptureParameters struct {
	// REQUIRED; The destination container name.
	DestinationContainerName *string

	// REQUIRED; Specifies whether to overwrite the destination virtual hard disk, in case of conflict.
	OverwriteVhds *bool

	// REQUIRED; The captured virtual hard disk's name prefix.
	VhdPrefix *string
}

func (v *VirtualMachineCaptureParameters) GetDestinationContainerName() (rv string) {
	if v != nil && v.DestinationContainerName != nil {
		return *v.DestinationContainerName
	}
	return
}

func (v *VirtualMachineCaptureParameters) GetOverwriteVhds() (rv bool) {
	if v != nil && v.OverwriteVhds != nil {
		return *v.OverwriteVhds
	}
	return
}

func (v *VirtualMachineCaptureParameters) GetVhdPrefix() (rv string) {
	if v != nil && v.VhdPrefix != nil {
		return *v.VhdPrefix
	}
	return
}

// VirtualMachineCaptureResult - Output of virtual machine capture operation.
type VirtualMachineCaptureResult struct {
	// Resource Id
	ID *string

	// READ-ONLY; the version of the content
	ContentVersion *string

	// READ-ONLY; parameters of the captured virtual machine
	Parameters any

	// READ-ONLY; a list of resource items of the captured virtual machine
	Resources []any

	// READ-ONLY; the schema of the captured virtual machine
	Schema *string
}

func (v *VirtualMachineCaptureResult) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineCaptureResult) GetContentVersion() (rv string) {
	if v != nil && v.ContentVersion != nil {
		return *v.ContentVersion
	}
	return
}

func (v *VirtualMachineCaptureResult) GetParameters() (rv any) {
	if v != nil {
		return v.Parameters
	}
	return
}

func (v *VirtualMachineCaptureResult) GetResources() (rv []any) {
	if v != nil {
		return v.Resources
	}
	return
}

func (v *VirtualMachineCaptureResult) GetSchema() (rv string) {
	if v != nil && v.Schema != nil {
		return *v.Schema
	}
	return
}

// VirtualMachineExtension - Describes a Virtual Machine Extension.
type VirtualMachineExtension struct {
	// REQUIRED; Resource location
	Location *string

	// Describes the properties of a Virtual Machine Extension.
	Properties *VirtualMachineExtensionProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (v *VirtualMachineExtension) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualMachineExtension) GetProperties() (rv *VirtualMachineExtensionProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineExtension) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualMachineExtension) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineExtension) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineExtension) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualMachineExtensionHandlerInstanceView - The instance view of a virtual machine extension handler.
type VirtualMachineExtensionHandlerInstanceView struct {
	// The extension handler status.
	Status *InstanceViewStatus

	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string

	// Specifies the version of the script handler.
	TypeHandlerVersion *string
}

func (v *VirtualMachineExtensionHandlerInstanceView) GetStatus() (rv *InstanceViewStatus) {
	if v != nil {
		return v.Status
	}
	return
}

func (v *VirtualMachineExtensionHandlerInstanceView) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

func (v *VirtualMachineExtensionHandlerInstanceView) GetTypeHandlerVersion() (rv string) {
	if v != nil && v.TypeHandlerVersion != nil {
		return *v.TypeHandlerVersion
	}
	return
}

// VirtualMachineExtensionImage - Describes a Virtual Machine Extension Image.
type VirtualMachineExtensionImage struct {
	// REQUIRED; Resource location
	Location *string

	// Describes the properties of a Virtual Machine Extension Image.
	Properties *VirtualMachineExtensionImageProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (v *VirtualMachineExtensionImage) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualMachineExtensionImage) GetProperties() (rv *VirtualMachineExtensionImageProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineExtensionImage) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualMachineExtensionImage) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineExtensionImage) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineExtensionImage) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualMachineExtensionImageProperties - Describes the properties of a Virtual Machine Extension Image.
type VirtualMachineExtensionImageProperties struct {
	// REQUIRED; The type of role (IaaS or PaaS) this extension supports.
	ComputeRole *string

	// REQUIRED; The schema defined by publisher, where extension consumers should provide settings in a matching schema.
	HandlerSchema *string

	// REQUIRED; The operating system this extension supports.
	OperatingSystem *string

	// Whether the handler can support multiple extensions.
	SupportsMultipleExtensions *bool

	// Whether the extension can be used on xRP VMScaleSets. By default existing extensions are usable on scalesets, but there
	// might be cases where a publisher wants to explicitly indicate the extension is
	// only enabled for CRP VMs but not VMSS.
	VMScaleSetEnabled *bool
}

func (v *VirtualMachineExtensionImageProperties) GetComputeRole() (rv string) {
	if v != nil && v.ComputeRole != nil {
		return *v.ComputeRole
	}
	return
}

func (v *VirtualMachineExtensionImageProperties) GetHandlerSchema() (rv string) {
	if v != nil && v.HandlerSchema != nil {
		return *v.HandlerSchema
	}
	return
}

func (v *VirtualMachineExtensionImageProperties) GetOperatingSystem() (rv string) {
	if v != nil && v.OperatingSystem != nil {
		return *v.OperatingSystem
	}
	return
}

func (v *VirtualMachineExtensionImageProperties) GetSupportsMultipleExtensions() (rv bool) {
	if v != nil && v.SupportsMultipleExtensions != nil {
		return *v.SupportsMultipleExtensions
	}
	return
}

func (v *VirtualMachineExtensionImageProperties) GetVMScaleSetEnabled() (rv bool) {
	if v != nil && v.VMScaleSetEnabled != nil {
		return *v.VMScaleSetEnabled
	}
	return
}

// VirtualMachineExtensionInstanceView - The instance view of a virtual machine extension.
type VirtualMachineExtensionInstanceView struct {
	// The virtual machine extension name.
	Name *string

	// The resource status information.
	Statuses []InstanceViewStatus

	// The resource status information.
	Substatuses []InstanceViewStatus

	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string

	// Specifies the version of the script handler.
	TypeHandlerVersion *string
}

func (v *VirtualMachineExtensionInstanceView) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineExtensionInstanceView) GetStatuses() (rv []InstanceViewStatus) {
	if v != nil {
		return v.Statuses
	}
	return
}

func (v *VirtualMachineExtensionInstanceView) GetSubstatuses() (rv []InstanceViewStatus) {
	if v != nil {
		return v.Substatuses
	}
	return
}

func (v *VirtualMachineExtensionInstanceView) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

func (v *VirtualMachineExtensionInstanceView) GetTypeHandlerVersion() (rv string) {
	if v != nil && v.TypeHandlerVersion != nil {
		return *v.TypeHandlerVersion
	}
	return
}

// VirtualMachineExtensionProperties - Describes the properties of a Virtual Machine Extension.
type VirtualMachineExtensionProperties struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed,
	// however, the extension will not upgrade minor versions unless redeployed, even
	// with this property set to true.
	AutoUpgradeMinorVersion *bool

	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension
	// available.
	EnableAutomaticUpgrade *bool

	// How the extension handler should be forced to update even if the extension configuration has not changed.
	ForceUpdateTag *string

	// The virtual machine extension instance view.
	InstanceView *VirtualMachineExtensionInstanceView

	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings any

	// The extensions protected settings that are passed by reference, and consumed from key vault
	ProtectedSettingsFromKeyVault any

	// The name of the extension handler publisher.
	Publisher *string

	// Json formatted public settings for the extension.
	Settings any

	// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting
	// to the VM will not be suppressed regardless of this value). The default is false.
	SuppressFailures *bool

	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string

	// Specifies the version of the script handler.
	TypeHandlerVersion *string

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string
}

func (v *VirtualMachineExtensionProperties) GetAutoUpgradeMinorVersion() (rv bool) {
	if v != nil && v.AutoUpgradeMinorVersion != nil {
		return *v.AutoUpgradeMinorVersion
	}
	return
}

func (v *VirtualMachineExtensionProperties) GetEnableAutomaticUpgrade() (rv bool) {
	if v != nil && v.EnableAutomaticUpgrade != nil {
		return *v.EnableAutomaticUpgrade
	}
	return
}

func (v *VirtualMachineExtensionProperties) GetForceUpdateTag() (rv string) {
	if v != nil && v.ForceUpdateTag != nil {
		return *v.ForceUpdateTag
	}
	return
}

func (v *VirtualMachineExtensionProperties) GetInstanceView() (rv *VirtualMachineExtensionInstanceView) {
	if v != nil {
		return v.InstanceView
	}
	return
}

func (v *VirtualMachineExtensionProperties) GetProtectedSettings() (rv any) {
	if v != nil {
		return v.ProtectedSettings
	}
	return
}

func (v *VirtualMachineExtensionProperties) GetProtectedSettingsFromKeyVault() (rv any) {
	if v != nil {
		return v.ProtectedSettingsFromKeyVault
	}
	return
}

func (v *VirtualMachineExtensionProperties) GetPublisher() (rv string) {
	if v != nil && v.Publisher != nil {
		return *v.Publisher
	}
	return
}

func (v *VirtualMachineExtensionProperties) GetSettings() (rv any) {
	if v != nil {
		return v.Settings
	}
	return
}

func (v *VirtualMachineExtensionProperties) GetSuppressFailures() (rv bool) {
	if v != nil && v.SuppressFailures != nil {
		return *v.SuppressFailures
	}
	return
}

func (v *VirtualMachineExtensionProperties) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

func (v *VirtualMachineExtensionProperties) GetTypeHandlerVersion() (rv string) {
	if v != nil && v.TypeHandlerVersion != nil {
		return *v.TypeHandlerVersion
	}
	return
}

func (v *VirtualMachineExtensionProperties) GetProvisioningState() (rv string) {
	if v != nil && v.ProvisioningState != nil {
		return *v.ProvisioningState
	}
	return
}

// VirtualMachineExtensionUpdate - Describes a Virtual Machine Extension.
type VirtualMachineExtensionUpdate struct {
	// Describes the properties of a Virtual Machine Extension.
	Properties *VirtualMachineExtensionUpdateProperties

	// Resource tags
	Tags map[string]*string
}

func (v *VirtualMachineExtensionUpdate) GetProperties() (rv *VirtualMachineExtensionUpdateProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineExtensionUpdate) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

// VirtualMachineExtensionUpdateProperties - Describes the properties of a Virtual Machine Extension.
type VirtualMachineExtensionUpdateProperties struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed,
	// however, the extension will not upgrade minor versions unless redeployed, even
	// with this property set to true.
	AutoUpgradeMinorVersion *bool

	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension
	// available.
	EnableAutomaticUpgrade *bool

	// How the extension handler should be forced to update even if the extension configuration has not changed.
	ForceUpdateTag *string

	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings any

	// The extensions protected settings that are passed by reference, and consumed from key vault
	ProtectedSettingsFromKeyVault any

	// The name of the extension handler publisher.
	Publisher *string

	// Json formatted public settings for the extension.
	Settings any

	// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting
	// to the VM will not be suppressed regardless of this value). The default is false.
	SuppressFailures *bool

	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string

	// Specifies the version of the script handler.
	TypeHandlerVersion *string
}

func (v *VirtualMachineExtensionUpdateProperties) GetAutoUpgradeMinorVersion() (rv bool) {
	if v != nil && v.AutoUpgradeMinorVersion != nil {
		return *v.AutoUpgradeMinorVersion
	}
	return
}

func (v *VirtualMachineExtensionUpdateProperties) GetEnableAutomaticUpgrade() (rv bool) {
	if v != nil && v.EnableAutomaticUpgrade != nil {
		return *v.EnableAutomaticUpgrade
	}
	return
}

func (v *VirtualMachineExtensionUpdateProperties) GetForceUpdateTag() (rv string) {
	if v != nil && v.ForceUpdateTag != nil {
		return *v.ForceUpdateTag
	}
	return
}

func (v *VirtualMachineExtensionUpdateProperties) GetProtectedSettings() (rv any) {
	if v != nil {
		return v.ProtectedSettings
	}
	return
}

func (v *VirtualMachineExtensionUpdateProperties) GetProtectedSettingsFromKeyVault() (rv any) {
	if v != nil {
		return v.ProtectedSettingsFromKeyVault
	}
	return
}

func (v *VirtualMachineExtensionUpdateProperties) GetPublisher() (rv string) {
	if v != nil && v.Publisher != nil {
		return *v.Publisher
	}
	return
}

func (v *VirtualMachineExtensionUpdateProperties) GetSettings() (rv any) {
	if v != nil {
		return v.Settings
	}
	return
}

func (v *VirtualMachineExtensionUpdateProperties) GetSuppressFailures() (rv bool) {
	if v != nil && v.SuppressFailures != nil {
		return *v.SuppressFailures
	}
	return
}

func (v *VirtualMachineExtensionUpdateProperties) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

func (v *VirtualMachineExtensionUpdateProperties) GetTypeHandlerVersion() (rv string) {
	if v != nil && v.TypeHandlerVersion != nil {
		return *v.TypeHandlerVersion
	}
	return
}

// VirtualMachineExtensionsListResult - The List Extension operation response
type VirtualMachineExtensionsListResult struct {
	// The list of extensions
	Value []VirtualMachineExtension
}

func (v *VirtualMachineExtensionsListResult) GetValue() (rv []VirtualMachineExtension) {
	if v != nil {
		return v.Value
	}
	return
}

// VirtualMachineHealthStatus - The health status of the VM.
type VirtualMachineHealthStatus struct {
	// READ-ONLY; The health status information for the VM.
	Status *InstanceViewStatus
}

func (v *VirtualMachineHealthStatus) GetStatus() (rv *InstanceViewStatus) {
	if v != nil {
		return v.Status
	}
	return
}

// VirtualMachineIPTag - Contains the IP tag associated with the public IP address.
type VirtualMachineIPTag struct {
	// IP tag type. Example: FirstPartyUsage.
	IPTagType *string

	// IP tag associated with the public IP. Example: SQL, Storage etc.
	Tag *string
}

func (v *VirtualMachineIPTag) GetIPTagType() (rv string) {
	if v != nil && v.IPTagType != nil {
		return *v.IPTagType
	}
	return
}

func (v *VirtualMachineIPTag) GetTag() (rv string) {
	if v != nil && v.Tag != nil {
		return *v.Tag
	}
	return
}

// VirtualMachineIdentity - Identity for the virtual machine.
type VirtualMachineIdentity struct {
	// The type of identity used for the virtual machine. The type 'SystemAssigned, UserAssigned' includes both an implicitly
	// created identity and a set of user assigned identities. The type 'None' will
	// remove any identities from the virtual machine.
	Type *ResourceIdentityType

	// The list of user identities associated with the Virtual Machine. The user identity dictionary key references will be ARM
	// resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]*UserAssignedIdentitiesValue

	// READ-ONLY; The principal id of virtual machine identity. This property will only be provided for a system assigned identity.
	PrincipalID *string

	// READ-ONLY; The tenant id associated with the virtual machine. This property will only be provided for a system assigned
	// identity.
	TenantID *string
}

func (v *VirtualMachineIdentity) GetType() (rv *ResourceIdentityType) {
	if v != nil {
		return v.Type
	}
	return
}

func (v *VirtualMachineIdentity) GetUserAssignedIdentities() (rv map[string]*UserAssignedIdentitiesValue) {
	if v != nil {
		return v.UserAssignedIdentities
	}
	return
}

func (v *VirtualMachineIdentity) GetPrincipalID() (rv string) {
	if v != nil && v.PrincipalID != nil {
		return *v.PrincipalID
	}
	return
}

func (v *VirtualMachineIdentity) GetTenantID() (rv string) {
	if v != nil && v.TenantID != nil {
		return *v.TenantID
	}
	return
}

// VirtualMachineImage - Describes a Virtual Machine Image.
type VirtualMachineImage struct {
	// REQUIRED; The supported Azure location of the resource.
	Location *string

	// REQUIRED; The name of the resource.
	Name *string

	// The extended location of the Virtual Machine.
	ExtendedLocation *ExtendedLocation

	// Resource Id
	ID *string

	// Describes the properties of a Virtual Machine Image.
	Properties *VirtualMachineImageProperties

	// Specifies the tags that are assigned to the virtual machine. For more information about using tags, see Using tags to organize
	// your Azure resources
	// [https://docs.microsoft.com/azure/azure-resource-manager/resource-group-using-tags.md].
	Tags map[string]*string
}

func (v *VirtualMachineImage) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualMachineImage) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineImage) GetExtendedLocation() (rv *ExtendedLocation) {
	if v != nil {
		return v.ExtendedLocation
	}
	return
}

func (v *VirtualMachineImage) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineImage) GetProperties() (rv *VirtualMachineImageProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineImage) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

// VirtualMachineImageFeature - Specifies additional capabilities supported by the image
type VirtualMachineImageFeature struct {
	// The name of the feature.
	Name *string

	// The corresponding value for the feature.
	Value *string
}

func (v *VirtualMachineImageFeature) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineImageFeature) GetValue() (rv string) {
	if v != nil && v.Value != nil {
		return *v.Value
	}
	return
}

// VirtualMachineImageProperties - Describes the properties of a Virtual Machine Image.
type VirtualMachineImageProperties struct {
	// Specifies the Architecture Type
	Architecture *ArchitectureTypes

	// Describes automatic OS upgrade properties on the image.
	AutomaticOSUpgradeProperties *AutomaticOSUpgradeProperties
	DataDiskImages               []DataDiskImage

	// Specifies disallowed configuration for the VirtualMachine created from the image
	Disallowed *DisallowedConfiguration
	Features   []VirtualMachineImageFeature

	// Specifies the HyperVGeneration Type
	HyperVGeneration *HyperVGenerationTypes

	// Contains the os disk image information.
	OSDiskImage *OSDiskImage

	// Used for establishing the purchase context of any 3rd Party artifact through MarketPlace.
	Plan *PurchasePlan
}

func (v *VirtualMachineImageProperties) GetArchitecture() (rv *ArchitectureTypes) {
	if v != nil {
		return v.Architecture
	}
	return
}

func (v *VirtualMachineImageProperties) GetAutomaticOSUpgradeProperties() (rv *AutomaticOSUpgradeProperties) {
	if v != nil {
		return v.AutomaticOSUpgradeProperties
	}
	return
}

func (v *VirtualMachineImageProperties) GetDataDiskImages() (rv []DataDiskImage) {
	if v != nil {
		return v.DataDiskImages
	}
	return
}

func (v *VirtualMachineImageProperties) GetDisallowed() (rv *DisallowedConfiguration) {
	if v != nil {
		return v.Disallowed
	}
	return
}

func (v *VirtualMachineImageProperties) GetFeatures() (rv []VirtualMachineImageFeature) {
	if v != nil {
		return v.Features
	}
	return
}

func (v *VirtualMachineImageProperties) GetHyperVGeneration() (rv *HyperVGenerationTypes) {
	if v != nil {
		return v.HyperVGeneration
	}
	return
}

func (v *VirtualMachineImageProperties) GetOSDiskImage() (rv *OSDiskImage) {
	if v != nil {
		return v.OSDiskImage
	}
	return
}

func (v *VirtualMachineImageProperties) GetPlan() (rv *PurchasePlan) {
	if v != nil {
		return v.Plan
	}
	return
}

// VirtualMachineImageResource - Virtual machine image resource information.
type VirtualMachineImageResource struct {
	// REQUIRED; The supported Azure location of the resource.
	Location *string

	// REQUIRED; The name of the resource.
	Name *string

	// The extended location of the Virtual Machine.
	ExtendedLocation *ExtendedLocation

	// Resource Id
	ID *string

	// Specifies the tags that are assigned to the virtual machine. For more information about using tags, see Using tags to organize
	// your Azure resources
	// [https://docs.microsoft.com/azure/azure-resource-manager/resource-group-using-tags.md].
	Tags map[string]*string
}

func (v *VirtualMachineImageResource) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualMachineImageResource) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineImageResource) GetExtendedLocation() (rv *ExtendedLocation) {
	if v != nil {
		return v.ExtendedLocation
	}
	return
}

func (v *VirtualMachineImageResource) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineImageResource) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

// VirtualMachineInstallPatchesParameters - Input for InstallPatches as directly received by the API
type VirtualMachineInstallPatchesParameters struct {
	// REQUIRED; Defines when it is acceptable to reboot a VM during a software update operation.
	RebootSetting *VMGuestPatchRebootSetting

	// Input for InstallPatches on a Linux VM, as directly received by the API
	LinuxParameters *LinuxParameters

	// Specifies the maximum amount of time that the operation will run. It must be an ISO 8601-compliant duration string such
	// as PT4H (4 hours)
	MaximumDuration *string

	// Input for InstallPatches on a Windows VM, as directly received by the API
	WindowsParameters *WindowsParameters
}

func (v *VirtualMachineInstallPatchesParameters) GetRebootSetting() (rv *VMGuestPatchRebootSetting) {
	if v != nil {
		return v.RebootSetting
	}
	return
}

func (v *VirtualMachineInstallPatchesParameters) GetLinuxParameters() (rv *LinuxParameters) {
	if v != nil {
		return v.LinuxParameters
	}
	return
}

func (v *VirtualMachineInstallPatchesParameters) GetMaximumDuration() (rv string) {
	if v != nil && v.MaximumDuration != nil {
		return *v.MaximumDuration
	}
	return
}

func (v *VirtualMachineInstallPatchesParameters) GetWindowsParameters() (rv *WindowsParameters) {
	if v != nil {
		return v.WindowsParameters
	}
	return
}

// VirtualMachineInstallPatchesResult - The result summary of an installation operation.
type VirtualMachineInstallPatchesResult struct {
	// READ-ONLY; The errors that were encountered during execution of the operation. The details array contains the list of them.
	Error *APIError

	// READ-ONLY; The number of patches that were not installed due to the user blocking their installation.
	ExcludedPatchCount *int32

	// READ-ONLY; The number of patches that could not be installed due to some issue. See errors for details.
	FailedPatchCount *int32

	// READ-ONLY; The activity ID of the operation that produced this result. It is used to correlate across CRP and extension
	// logs.
	InstallationActivityID *string

	// READ-ONLY; The number of patches successfully installed.
	InstalledPatchCount *int32

	// READ-ONLY; Whether the operation ran out of time before it completed all its intended actions.
	MaintenanceWindowExceeded *bool

	// READ-ONLY; The number of patches that were detected as available for install, but did not meet the operation's criteria.
	NotSelectedPatchCount *int32

	// READ-ONLY; The patches that were installed during the operation.
	Patches []PatchInstallationDetail

	// READ-ONLY; The number of patches that were identified as meeting the installation criteria, but were not able to be installed.
	// Typically this happens when maintenanceWindowExceeded == true.
	PendingPatchCount *int32

	// READ-ONLY; The reboot state of the VM following completion of the operation.
	RebootStatus *VMGuestPatchRebootStatus

	// READ-ONLY; The UTC timestamp when the operation began.
	StartDateTime *time.Time

	// READ-ONLY; The overall success or failure status of the operation. It remains "InProgress" until the operation completes.
	// At that point it will become "Failed", "Succeeded", "Unknown" or "CompletedWithWarnings."
	Status *PatchOperationStatus
}

func (v *VirtualMachineInstallPatchesResult) GetError() (rv *APIError) {
	if v != nil {
		return v.Error
	}
	return
}

func (v *VirtualMachineInstallPatchesResult) GetExcludedPatchCount() (rv int32) {
	if v != nil && v.ExcludedPatchCount != nil {
		return *v.ExcludedPatchCount
	}
	return
}

func (v *VirtualMachineInstallPatchesResult) GetFailedPatchCount() (rv int32) {
	if v != nil && v.FailedPatchCount != nil {
		return *v.FailedPatchCount
	}
	return
}

func (v *VirtualMachineInstallPatchesResult) GetInstallationActivityID() (rv string) {
	if v != nil && v.InstallationActivityID != nil {
		return *v.InstallationActivityID
	}
	return
}

func (v *VirtualMachineInstallPatchesResult) GetInstalledPatchCount() (rv int32) {
	if v != nil && v.InstalledPatchCount != nil {
		return *v.InstalledPatchCount
	}
	return
}

func (v *VirtualMachineInstallPatchesResult) GetMaintenanceWindowExceeded() (rv bool) {
	if v != nil && v.MaintenanceWindowExceeded != nil {
		return *v.MaintenanceWindowExceeded
	}
	return
}

func (v *VirtualMachineInstallPatchesResult) GetNotSelectedPatchCount() (rv int32) {
	if v != nil && v.NotSelectedPatchCount != nil {
		return *v.NotSelectedPatchCount
	}
	return
}

func (v *VirtualMachineInstallPatchesResult) GetPatches() (rv []PatchInstallationDetail) {
	if v != nil {
		return v.Patches
	}
	return
}

func (v *VirtualMachineInstallPatchesResult) GetPendingPatchCount() (rv int32) {
	if v != nil && v.PendingPatchCount != nil {
		return *v.PendingPatchCount
	}
	return
}

func (v *VirtualMachineInstallPatchesResult) GetRebootStatus() (rv *VMGuestPatchRebootStatus) {
	if v != nil {
		return v.RebootStatus
	}
	return
}

func (v *VirtualMachineInstallPatchesResult) GetStartDateTime() (rv *time.Time) {
	if v != nil {
		return v.StartDateTime
	}
	return
}

func (v *VirtualMachineInstallPatchesResult) GetStatus() (rv *PatchOperationStatus) {
	if v != nil {
		return v.Status
	}
	return
}

// VirtualMachineInstanceView - The instance view of a virtual machine.
type VirtualMachineInstanceView struct {
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status.
	// You can easily view the output of your console log.
	// Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnosticsInstanceView

	// The computer name assigned to the virtual machine.
	ComputerName *string

	// The virtual machine disk information.
	Disks []DiskInstanceView

	// The extensions information.
	Extensions []VirtualMachineExtensionInstanceView

	// Specifies the HyperVGeneration Type associated with a resource
	HyperVGeneration *HyperVGenerationType

	// The Maintenance Operation status on the virtual machine.
	MaintenanceRedeployStatus *MaintenanceRedeployStatus

	// The Operating System running on the virtual machine.
	OSName *string

	// The version of Operating System running on the virtual machine.
	OSVersion *string

	// [Preview Feature] The status of virtual machine patch operations.
	PatchStatus *VirtualMachinePatchStatus

	// Specifies the fault domain of the virtual machine.
	PlatformFaultDomain *int32

	// Specifies the update domain of the virtual machine.
	PlatformUpdateDomain *int32

	// The Remote desktop certificate thumbprint.
	RdpThumbPrint *string

	// The resource status information.
	Statuses []InstanceViewStatus

	// The VM Agent running on the virtual machine.
	VMAgent *VirtualMachineAgentInstanceView

	// READ-ONLY; Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when
	// the virtual machine is associated with a dedicated host group that has automatic
	// placement enabled.
	// Minimum api-version: 2020-06-01.
	AssignedHost *string

	// READ-ONLY; The health status for the VM.
	VMHealth *VirtualMachineHealthStatus
}

func (v *VirtualMachineInstanceView) GetBootDiagnostics() (rv *BootDiagnosticsInstanceView) {
	if v != nil {
		return v.BootDiagnostics
	}
	return
}

func (v *VirtualMachineInstanceView) GetComputerName() (rv string) {
	if v != nil && v.ComputerName != nil {
		return *v.ComputerName
	}
	return
}

func (v *VirtualMachineInstanceView) GetDisks() (rv []DiskInstanceView) {
	if v != nil {
		return v.Disks
	}
	return
}

func (v *VirtualMachineInstanceView) GetExtensions() (rv []VirtualMachineExtensionInstanceView) {
	if v != nil {
		return v.Extensions
	}
	return
}

func (v *VirtualMachineInstanceView) GetHyperVGeneration() (rv *HyperVGenerationType) {
	if v != nil {
		return v.HyperVGeneration
	}
	return
}

func (v *VirtualMachineInstanceView) GetMaintenanceRedeployStatus() (rv *MaintenanceRedeployStatus) {
	if v != nil {
		return v.MaintenanceRedeployStatus
	}
	return
}

func (v *VirtualMachineInstanceView) GetOSName() (rv string) {
	if v != nil && v.OSName != nil {
		return *v.OSName
	}
	return
}

func (v *VirtualMachineInstanceView) GetOSVersion() (rv string) {
	if v != nil && v.OSVersion != nil {
		return *v.OSVersion
	}
	return
}

func (v *VirtualMachineInstanceView) GetPatchStatus() (rv *VirtualMachinePatchStatus) {
	if v != nil {
		return v.PatchStatus
	}
	return
}

func (v *VirtualMachineInstanceView) GetPlatformFaultDomain() (rv int32) {
	if v != nil && v.PlatformFaultDomain != nil {
		return *v.PlatformFaultDomain
	}
	return
}

func (v *VirtualMachineInstanceView) GetPlatformUpdateDomain() (rv int32) {
	if v != nil && v.PlatformUpdateDomain != nil {
		return *v.PlatformUpdateDomain
	}
	return
}

func (v *VirtualMachineInstanceView) GetRdpThumbPrint() (rv string) {
	if v != nil && v.RdpThumbPrint != nil {
		return *v.RdpThumbPrint
	}
	return
}

func (v *VirtualMachineInstanceView) GetStatuses() (rv []InstanceViewStatus) {
	if v != nil {
		return v.Statuses
	}
	return
}

func (v *VirtualMachineInstanceView) GetVMAgent() (rv *VirtualMachineAgentInstanceView) {
	if v != nil {
		return v.VMAgent
	}
	return
}

func (v *VirtualMachineInstanceView) GetAssignedHost() (rv string) {
	if v != nil && v.AssignedHost != nil {
		return *v.AssignedHost
	}
	return
}

func (v *VirtualMachineInstanceView) GetVMHealth() (rv *VirtualMachineHealthStatus) {
	if v != nil {
		return v.VMHealth
	}
	return
}

// VirtualMachineListResult - The List Virtual Machine operation response.
type VirtualMachineListResult struct {
	// REQUIRED; The list of virtual machines.
	Value []VirtualMachine

	// The URI to fetch the next page of VMs. Call ListNext() with this URI to fetch the next page of Virtual Machines.
	NextLink *string
}

func (v *VirtualMachineListResult) GetValue() (rv []VirtualMachine) {
	if v != nil {
		return v.Value
	}
	return
}

func (v *VirtualMachineListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

// VirtualMachineNetworkInterfaceConfiguration - Describes a virtual machine network interface configurations.
type VirtualMachineNetworkInterfaceConfiguration struct {
	// REQUIRED; The network interface configuration name.
	Name *string

	// Describes a virtual machine network profile's IP configuration.
	Properties *VirtualMachineNetworkInterfaceConfigurationProperties
}

func (v *VirtualMachineNetworkInterfaceConfiguration) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineNetworkInterfaceConfiguration) GetProperties() (rv *VirtualMachineNetworkInterfaceConfigurationProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

// VirtualMachineNetworkInterfaceConfigurationProperties - Describes a virtual machine network profile's IP configuration.
type VirtualMachineNetworkInterfaceConfigurationProperties struct {
	// REQUIRED; Specifies the IP configurations of the network interface.
	IPConfigurations []VirtualMachineNetworkInterfaceIPConfiguration

	// The dns settings to be applied on the network interfaces.
	DNSSettings *VirtualMachineNetworkInterfaceDNSSettingsConfiguration

	// Specify what happens to the network interface when the VM is deleted
	DeleteOption      *DeleteOptions
	DscpConfiguration *SubResource

	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking *bool

	// Specifies whether the network interface is FPGA networking-enabled.
	EnableFpga *bool

	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding *bool

	// The network security group.
	NetworkSecurityGroup *SubResource

	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool
}

func (v *VirtualMachineNetworkInterfaceConfigurationProperties) GetIPConfigurations() (rv []VirtualMachineNetworkInterfaceIPConfiguration) {
	if v != nil {
		return v.IPConfigurations
	}
	return
}

func (v *VirtualMachineNetworkInterfaceConfigurationProperties) GetDNSSettings() (rv *VirtualMachineNetworkInterfaceDNSSettingsConfiguration) {
	if v != nil {
		return v.DNSSettings
	}
	return
}

func (v *VirtualMachineNetworkInterfaceConfigurationProperties) GetDeleteOption() (rv *DeleteOptions) {
	if v != nil {
		return v.DeleteOption
	}
	return
}

func (v *VirtualMachineNetworkInterfaceConfigurationProperties) GetDscpConfiguration() (rv *SubResource) {
	if v != nil {
		return v.DscpConfiguration
	}
	return
}

func (v *VirtualMachineNetworkInterfaceConfigurationProperties) GetEnableAcceleratedNetworking() (rv bool) {
	if v != nil && v.EnableAcceleratedNetworking != nil {
		return *v.EnableAcceleratedNetworking
	}
	return
}

func (v *VirtualMachineNetworkInterfaceConfigurationProperties) GetEnableFpga() (rv bool) {
	if v != nil && v.EnableFpga != nil {
		return *v.EnableFpga
	}
	return
}

func (v *VirtualMachineNetworkInterfaceConfigurationProperties) GetEnableIPForwarding() (rv bool) {
	if v != nil && v.EnableIPForwarding != nil {
		return *v.EnableIPForwarding
	}
	return
}

func (v *VirtualMachineNetworkInterfaceConfigurationProperties) GetNetworkSecurityGroup() (rv *SubResource) {
	if v != nil {
		return v.NetworkSecurityGroup
	}
	return
}

func (v *VirtualMachineNetworkInterfaceConfigurationProperties) GetPrimary() (rv bool) {
	if v != nil && v.Primary != nil {
		return *v.Primary
	}
	return
}

// VirtualMachineNetworkInterfaceDNSSettingsConfiguration - Describes a virtual machines network configuration's DNS settings.
type VirtualMachineNetworkInterfaceDNSSettingsConfiguration struct {
	// List of DNS servers IP addresses
	DNSServers []string
}

func (v *VirtualMachineNetworkInterfaceDNSSettingsConfiguration) GetDNSServers() (rv []string) {
	if v != nil {
		return v.DNSServers
	}
	return
}

// VirtualMachineNetworkInterfaceIPConfiguration - Describes a virtual machine network profile's IP configuration.
type VirtualMachineNetworkInterfaceIPConfiguration struct {
	// REQUIRED; The IP configuration name.
	Name *string

	// Describes a virtual machine network interface IP configuration properties.
	Properties *VirtualMachineNetworkInterfaceIPConfigurationProperties
}

func (v *VirtualMachineNetworkInterfaceIPConfiguration) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineNetworkInterfaceIPConfiguration) GetProperties() (rv *VirtualMachineNetworkInterfaceIPConfigurationProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

// VirtualMachineNetworkInterfaceIPConfigurationProperties - Describes a virtual machine network interface IP configuration
// properties.
type VirtualMachineNetworkInterfaceIPConfigurationProperties struct {
	// Specifies an array of references to backend address pools of application gateways. A virtual machine can reference backend
	// address pools of multiple application gateways. Multiple virtual machines
	// cannot use the same application gateway.
	ApplicationGatewayBackendAddressPools []SubResource

	// Specifies an array of references to application security group.
	ApplicationSecurityGroups []SubResource

	// Specifies an array of references to backend address pools of load balancers. A virtual machine can reference backend address
	// pools of one public and one internal load balancer. [Multiple virtual
	// machines cannot use the same basic sku load balancer].
	LoadBalancerBackendAddressPools []SubResource

	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool

	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default
	// is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion *IPVersions

	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration *VirtualMachinePublicIPAddressConfiguration

	// Specifies the identifier of the subnet.
	Subnet *SubResource
}

func (v *VirtualMachineNetworkInterfaceIPConfigurationProperties) GetApplicationGatewayBackendAddressPools() (rv []SubResource) {
	if v != nil {
		return v.ApplicationGatewayBackendAddressPools
	}
	return
}

func (v *VirtualMachineNetworkInterfaceIPConfigurationProperties) GetApplicationSecurityGroups() (rv []SubResource) {
	if v != nil {
		return v.ApplicationSecurityGroups
	}
	return
}

func (v *VirtualMachineNetworkInterfaceIPConfigurationProperties) GetLoadBalancerBackendAddressPools() (rv []SubResource) {
	if v != nil {
		return v.LoadBalancerBackendAddressPools
	}
	return
}

func (v *VirtualMachineNetworkInterfaceIPConfigurationProperties) GetPrimary() (rv bool) {
	if v != nil && v.Primary != nil {
		return *v.Primary
	}
	return
}

func (v *VirtualMachineNetworkInterfaceIPConfigurationProperties) GetPrivateIPAddressVersion() (rv *IPVersions) {
	if v != nil {
		return v.PrivateIPAddressVersion
	}
	return
}

func (v *VirtualMachineNetworkInterfaceIPConfigurationProperties) GetPublicIPAddressConfiguration() (rv *VirtualMachinePublicIPAddressConfiguration) {
	if v != nil {
		return v.PublicIPAddressConfiguration
	}
	return
}

func (v *VirtualMachineNetworkInterfaceIPConfigurationProperties) GetSubnet() (rv *SubResource) {
	if v != nil {
		return v.Subnet
	}
	return
}

// VirtualMachinePatchStatus - The status of virtual machine patch operations.
type VirtualMachinePatchStatus struct {
	// The available patch summary of the latest assessment operation for the virtual machine.
	AvailablePatchSummary *AvailablePatchSummary

	// The installation summary of the latest installation operation for the virtual machine.
	LastPatchInstallationSummary *LastPatchInstallationSummary

	// READ-ONLY; The enablement status of the specified patchMode
	ConfigurationStatuses []InstanceViewStatus
}

func (v *VirtualMachinePatchStatus) GetAvailablePatchSummary() (rv *AvailablePatchSummary) {
	if v != nil {
		return v.AvailablePatchSummary
	}
	return
}

func (v *VirtualMachinePatchStatus) GetLastPatchInstallationSummary() (rv *LastPatchInstallationSummary) {
	if v != nil {
		return v.LastPatchInstallationSummary
	}
	return
}

func (v *VirtualMachinePatchStatus) GetConfigurationStatuses() (rv []InstanceViewStatus) {
	if v != nil {
		return v.ConfigurationStatuses
	}
	return
}

// VirtualMachineProperties - Describes the properties of a Virtual Machine.
type VirtualMachineProperties struct {
	// Specifies additional capabilities enabled or disabled on the virtual machine.
	AdditionalCapabilities *AdditionalCapabilities

	// Specifies the gallery applications that should be made available to the VM/VMSS
	ApplicationProfile *ApplicationProfile

	// Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified
	// in the same availability set are allocated to different nodes to maximize
	// availability. For more information about availability sets, see Availability sets overview [https://docs.microsoft.com/azure/virtual-machines/availability-set-overview].
	// For more information on Azure planned maintenance, see Maintenance and updates for Virtual Machines in Azure [https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates]
	// Currently, a VM can only be added to availability set at creation time. The availability set to which the VM is being added
	// should be under the same resource group as the availability set resource. An
	// existing VM cannot be added to an availability set.
	// This property cannot exist along with a non-null properties.virtualMachineScaleSet reference.
	AvailabilitySet *SubResource

	// Specifies the billing related details of a Azure Spot virtual machine.
	// Minimum api-version: 2019-03-01.
	BillingProfile *BillingProfile

	// Specifies information about the capacity reservation that is used to allocate virtual machine.
	// Minimum api-version: 2021-04-01.
	CapacityReservation *CapacityReservationProfile

	// Specifies the boot diagnostic settings state.
	// Minimum api-version: 2015-06-15.
	DiagnosticsProfile *DiagnosticsProfile

	// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set.
	// For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01.
	// For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
	EvictionPolicy *VirtualMachineEvictionPolicyTypes

	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes
	// (inclusive) and should be specified in ISO 8601 format. The default value is 90
	// minutes (PT1H30M).
	// Minimum api-version: 2020-06-01
	ExtensionsTimeBudget *string

	// Specifies the hardware settings for the virtual machine.
	HardwareProfile *HardwareProfile

	// Specifies information about the dedicated host that the virtual machine resides in.
	// Minimum api-version: 2018-10-01.
	Host *SubResource

	// Specifies information about the dedicated host group that the virtual machine resides in.
	// Minimum api-version: 2020-06-01.
	// NOTE: User cannot specify both host and hostGroup properties.
	HostGroup *SubResource

	// Specifies that the image or disk that is being used was licensed on-premises.
	// Possible values for Windows Server operating system are:
	// WindowsClient
	// WindowsServer
	// Possible values for Linux Server operating system are:
	// RHELBYOS (for RHEL)
	// SLESBYOS (for SUSE)
	// For more information, see Azure Hybrid Use Benefit for Windows Server [https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing]
	// Azure Hybrid Use Benefit for Linux Server [https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux]
	// Minimum api-version: 2015-06-15
	LicenseType *string

	// Specifies the network interfaces of the virtual machine.
	NetworkProfile *NetworkProfile

	// Specifies the operating system settings used while creating the virtual machine. Some of the settings cannot be changed
	// once VM is provisioned.
	OSProfile *OSProfile

	// Specifies the scale set logical fault domain into which the Virtual Machine will be created. By default, the Virtual Machine
	// will by automatically assigned to a fault domain that best maintains
	// balance across available fault domains.
	// This is applicable only if the 'virtualMachineScaleSet' property of this Virtual Machine is set.The Virtual Machine Scale
	// Set that is referenced, must have 'platformFaultDomainCount' > 1.This property
	// cannot be updated once the Virtual Machine is created.Fault domain assignment can be viewed in the Virtual Machine Instance
	// View.
	// Minimum api‐version: 2020‐12‐01
	PlatformFaultDomain *int32

	// Specifies the priority for the virtual machine.
	// Minimum api-version: 2019-03-01
	Priority *VirtualMachinePriorityTypes

	// Specifies information about the proximity placement group that the virtual machine should be assigned to.
	// Minimum api-version: 2018-04-01.
	ProximityPlacementGroup *SubResource

	// Specifies Scheduled Event related configurations.
	ScheduledEventsProfile *ScheduledEventsProfile

	// Specifies the Security related profile settings for the virtual machine.
	SecurityProfile *SecurityProfile

	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *StorageProfile

	// UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here.
	// Minimum api-version: 2021-03-01
	UserData *string

	// Specifies information about the virtual machine scale set that the virtual machine should be assigned to. Virtual machines
	// specified in the same virtual machine scale set are allocated to different
	// nodes to maximize availability. Currently, a VM can only be added to virtual machine scale set at creation time. An existing
	// VM cannot be added to a virtual machine scale set.
	// This property cannot exist along with a non-null properties.availabilitySet reference.
	// Minimum api‐version: 2019‐03‐01
	VirtualMachineScaleSet *SubResource

	// READ-ONLY; The virtual machine instance view.
	InstanceView *VirtualMachineInstanceView

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string

	// READ-ONLY; Specifies the time at which the Virtual Machine resource was created.
	// Minimum api-version: 2021-11-01.
	TimeCreated *time.Time

	// READ-ONLY; Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS
	// and can be read using platform BIOS commands.
	VMID *string
}

func (v *VirtualMachineProperties) GetAdditionalCapabilities() (rv *AdditionalCapabilities) {
	if v != nil {
		return v.AdditionalCapabilities
	}
	return
}

func (v *VirtualMachineProperties) GetApplicationProfile() (rv *ApplicationProfile) {
	if v != nil {
		return v.ApplicationProfile
	}
	return
}

func (v *VirtualMachineProperties) GetAvailabilitySet() (rv *SubResource) {
	if v != nil {
		return v.AvailabilitySet
	}
	return
}

func (v *VirtualMachineProperties) GetBillingProfile() (rv *BillingProfile) {
	if v != nil {
		return v.BillingProfile
	}
	return
}

func (v *VirtualMachineProperties) GetCapacityReservation() (rv *CapacityReservationProfile) {
	if v != nil {
		return v.CapacityReservation
	}
	return
}

func (v *VirtualMachineProperties) GetDiagnosticsProfile() (rv *DiagnosticsProfile) {
	if v != nil {
		return v.DiagnosticsProfile
	}
	return
}

func (v *VirtualMachineProperties) GetEvictionPolicy() (rv *VirtualMachineEvictionPolicyTypes) {
	if v != nil {
		return v.EvictionPolicy
	}
	return
}

func (v *VirtualMachineProperties) GetExtensionsTimeBudget() (rv string) {
	if v != nil && v.ExtensionsTimeBudget != nil {
		return *v.ExtensionsTimeBudget
	}
	return
}

func (v *VirtualMachineProperties) GetHardwareProfile() (rv *HardwareProfile) {
	if v != nil {
		return v.HardwareProfile
	}
	return
}

func (v *VirtualMachineProperties) GetHost() (rv *SubResource) {
	if v != nil {
		return v.Host
	}
	return
}

func (v *VirtualMachineProperties) GetHostGroup() (rv *SubResource) {
	if v != nil {
		return v.HostGroup
	}
	return
}

func (v *VirtualMachineProperties) GetLicenseType() (rv string) {
	if v != nil && v.LicenseType != nil {
		return *v.LicenseType
	}
	return
}

func (v *VirtualMachineProperties) GetNetworkProfile() (rv *NetworkProfile) {
	if v != nil {
		return v.NetworkProfile
	}
	return
}

func (v *VirtualMachineProperties) GetOSProfile() (rv *OSProfile) {
	if v != nil {
		return v.OSProfile
	}
	return
}

func (v *VirtualMachineProperties) GetPlatformFaultDomain() (rv int32) {
	if v != nil && v.PlatformFaultDomain != nil {
		return *v.PlatformFaultDomain
	}
	return
}

func (v *VirtualMachineProperties) GetPriority() (rv *VirtualMachinePriorityTypes) {
	if v != nil {
		return v.Priority
	}
	return
}

func (v *VirtualMachineProperties) GetProximityPlacementGroup() (rv *SubResource) {
	if v != nil {
		return v.ProximityPlacementGroup
	}
	return
}

func (v *VirtualMachineProperties) GetScheduledEventsProfile() (rv *ScheduledEventsProfile) {
	if v != nil {
		return v.ScheduledEventsProfile
	}
	return
}

func (v *VirtualMachineProperties) GetSecurityProfile() (rv *SecurityProfile) {
	if v != nil {
		return v.SecurityProfile
	}
	return
}

func (v *VirtualMachineProperties) GetStorageProfile() (rv *StorageProfile) {
	if v != nil {
		return v.StorageProfile
	}
	return
}

func (v *VirtualMachineProperties) GetUserData() (rv string) {
	if v != nil && v.UserData != nil {
		return *v.UserData
	}
	return
}

func (v *VirtualMachineProperties) GetVirtualMachineScaleSet() (rv *SubResource) {
	if v != nil {
		return v.VirtualMachineScaleSet
	}
	return
}

func (v *VirtualMachineProperties) GetInstanceView() (rv *VirtualMachineInstanceView) {
	if v != nil {
		return v.InstanceView
	}
	return
}

func (v *VirtualMachineProperties) GetProvisioningState() (rv string) {
	if v != nil && v.ProvisioningState != nil {
		return *v.ProvisioningState
	}
	return
}

func (v *VirtualMachineProperties) GetTimeCreated() (rv *time.Time) {
	if v != nil {
		return v.TimeCreated
	}
	return
}

func (v *VirtualMachineProperties) GetVMID() (rv string) {
	if v != nil && v.VMID != nil {
		return *v.VMID
	}
	return
}

// VirtualMachinePublicIPAddressConfiguration - Describes a virtual machines IP Configuration's PublicIPAddress configuration
type VirtualMachinePublicIPAddressConfiguration struct {
	// REQUIRED; The publicIP address configuration name.
	Name *string

	// Describes a virtual machines IP Configuration's PublicIPAddress configuration
	Properties *VirtualMachinePublicIPAddressConfigurationProperties

	// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
	SKU *PublicIPAddressSKU
}

func (v *VirtualMachinePublicIPAddressConfiguration) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachinePublicIPAddressConfiguration) GetProperties() (rv *VirtualMachinePublicIPAddressConfigurationProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachinePublicIPAddressConfiguration) GetSKU() (rv *PublicIPAddressSKU) {
	if v != nil {
		return v.SKU
	}
	return
}

// VirtualMachinePublicIPAddressConfigurationProperties - Describes a virtual machines IP Configuration's PublicIPAddress
// configuration
type VirtualMachinePublicIPAddressConfigurationProperties struct {
	// The dns settings to be applied on the publicIP addresses .
	DNSSettings *VirtualMachinePublicIPAddressDNSSettingsConfiguration

	// Specify what happens to the public IP address when the VM is deleted
	DeleteOption *DeleteOptions

	// The list of IP tags associated with the public IP address.
	IPTags []VirtualMachineIPTag

	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int32

	// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default
	// is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PublicIPAddressVersion *IPVersions

	// Specify the public IP allocation type
	PublicIPAllocationMethod *PublicIPAllocationMethod

	// The PublicIPPrefix from which to allocate publicIP addresses.
	PublicIPPrefix *SubResource
}

func (v *VirtualMachinePublicIPAddressConfigurationProperties) GetDNSSettings() (rv *VirtualMachinePublicIPAddressDNSSettingsConfiguration) {
	if v != nil {
		return v.DNSSettings
	}
	return
}

func (v *VirtualMachinePublicIPAddressConfigurationProperties) GetDeleteOption() (rv *DeleteOptions) {
	if v != nil {
		return v.DeleteOption
	}
	return
}

func (v *VirtualMachinePublicIPAddressConfigurationProperties) GetIPTags() (rv []VirtualMachineIPTag) {
	if v != nil {
		return v.IPTags
	}
	return
}

func (v *VirtualMachinePublicIPAddressConfigurationProperties) GetIdleTimeoutInMinutes() (rv int32) {
	if v != nil && v.IdleTimeoutInMinutes != nil {
		return *v.IdleTimeoutInMinutes
	}
	return
}

func (v *VirtualMachinePublicIPAddressConfigurationProperties) GetPublicIPAddressVersion() (rv *IPVersions) {
	if v != nil {
		return v.PublicIPAddressVersion
	}
	return
}

func (v *VirtualMachinePublicIPAddressConfigurationProperties) GetPublicIPAllocationMethod() (rv *PublicIPAllocationMethod) {
	if v != nil {
		return v.PublicIPAllocationMethod
	}
	return
}

func (v *VirtualMachinePublicIPAddressConfigurationProperties) GetPublicIPPrefix() (rv *SubResource) {
	if v != nil {
		return v.PublicIPPrefix
	}
	return
}

// VirtualMachinePublicIPAddressDNSSettingsConfiguration - Describes a virtual machines network configuration's DNS settings.
type VirtualMachinePublicIPAddressDNSSettingsConfiguration struct {
	// REQUIRED; The Domain name label prefix of the PublicIPAddress resources that will be created. The generated name label
	// is the concatenation of the domain name label and vm network profile unique ID.
	DomainNameLabel *string
}

func (v *VirtualMachinePublicIPAddressDNSSettingsConfiguration) GetDomainNameLabel() (rv string) {
	if v != nil && v.DomainNameLabel != nil {
		return *v.DomainNameLabel
	}
	return
}

// VirtualMachineReimageParameters - Parameters for Reimaging Virtual Machine. NOTE: Virtual Machine OS disk will always be
// reimaged
type VirtualMachineReimageParameters struct {
	// Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage parameter is only supported
	// for VM/VMSS with Ephemeral OS disk.
	TempDisk *bool
}

func (v *VirtualMachineReimageParameters) GetTempDisk() (rv bool) {
	if v != nil && v.TempDisk != nil {
		return *v.TempDisk
	}
	return
}

// VirtualMachineRunCommand - Describes a Virtual Machine run command.
type VirtualMachineRunCommand struct {
	// REQUIRED; Resource location
	Location *string

	// Describes the properties of a Virtual Machine run command.
	Properties *VirtualMachineRunCommandProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (v *VirtualMachineRunCommand) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualMachineRunCommand) GetProperties() (rv *VirtualMachineRunCommandProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineRunCommand) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualMachineRunCommand) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineRunCommand) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineRunCommand) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualMachineRunCommandInstanceView - The instance view of a virtual machine run command.
type VirtualMachineRunCommandInstanceView struct {
	// Script end time.
	EndTime *time.Time

	// Script error stream.
	Error *string

	// Communicate script configuration errors or execution messages.
	ExecutionMessage *string

	// Script execution status.
	ExecutionState *ExecutionState

	// Exit code returned from script execution.
	ExitCode *int32

	// Script output stream.
	Output *string

	// Script start time.
	StartTime *time.Time

	// The resource status information.
	Statuses []InstanceViewStatus
}

func (v *VirtualMachineRunCommandInstanceView) GetEndTime() (rv *time.Time) {
	if v != nil {
		return v.EndTime
	}
	return
}

func (v *VirtualMachineRunCommandInstanceView) GetError() (rv string) {
	if v != nil && v.Error != nil {
		return *v.Error
	}
	return
}

func (v *VirtualMachineRunCommandInstanceView) GetExecutionMessage() (rv string) {
	if v != nil && v.ExecutionMessage != nil {
		return *v.ExecutionMessage
	}
	return
}

func (v *VirtualMachineRunCommandInstanceView) GetExecutionState() (rv *ExecutionState) {
	if v != nil {
		return v.ExecutionState
	}
	return
}

func (v *VirtualMachineRunCommandInstanceView) GetExitCode() (rv int32) {
	if v != nil && v.ExitCode != nil {
		return *v.ExitCode
	}
	return
}

func (v *VirtualMachineRunCommandInstanceView) GetOutput() (rv string) {
	if v != nil && v.Output != nil {
		return *v.Output
	}
	return
}

func (v *VirtualMachineRunCommandInstanceView) GetStartTime() (rv *time.Time) {
	if v != nil {
		return v.StartTime
	}
	return
}

func (v *VirtualMachineRunCommandInstanceView) GetStatuses() (rv []InstanceViewStatus) {
	if v != nil {
		return v.Statuses
	}
	return
}

// VirtualMachineRunCommandProperties - Describes the properties of a Virtual Machine run command.
type VirtualMachineRunCommandProperties struct {
	// Optional. If set to true, provisioning will complete as soon as the script starts and will not wait for script to complete.
	AsyncExecution *bool

	// Specifies the Azure storage blob where script error stream will be uploaded.
	ErrorBlobURI *string

	// Specifies the Azure storage blob where script output stream will be uploaded.
	OutputBlobURI *string

	// The parameters used by the script.
	Parameters []RunCommandInputParameter

	// The parameters used by the script.
	ProtectedParameters []RunCommandInputParameter

	// Specifies the user account password on the VM when executing the run command.
	RunAsPassword *string

	// Specifies the user account on the VM when executing the run command.
	RunAsUser *string

	// The source of the run command script.
	Source *VirtualMachineRunCommandScriptSource

	// The timeout in seconds to execute the run command.
	TimeoutInSeconds *int32

	// READ-ONLY; The virtual machine run command instance view.
	InstanceView *VirtualMachineRunCommandInstanceView

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string
}

func (v *VirtualMachineRunCommandProperties) GetAsyncExecution() (rv bool) {
	if v != nil && v.AsyncExecution != nil {
		return *v.AsyncExecution
	}
	return
}

func (v *VirtualMachineRunCommandProperties) GetErrorBlobURI() (rv string) {
	if v != nil && v.ErrorBlobURI != nil {
		return *v.ErrorBlobURI
	}
	return
}

func (v *VirtualMachineRunCommandProperties) GetOutputBlobURI() (rv string) {
	if v != nil && v.OutputBlobURI != nil {
		return *v.OutputBlobURI
	}
	return
}

func (v *VirtualMachineRunCommandProperties) GetParameters() (rv []RunCommandInputParameter) {
	if v != nil {
		return v.Parameters
	}
	return
}

func (v *VirtualMachineRunCommandProperties) GetProtectedParameters() (rv []RunCommandInputParameter) {
	if v != nil {
		return v.ProtectedParameters
	}
	return
}

func (v *VirtualMachineRunCommandProperties) GetRunAsPassword() (rv string) {
	if v != nil && v.RunAsPassword != nil {
		return *v.RunAsPassword
	}
	return
}

func (v *VirtualMachineRunCommandProperties) GetRunAsUser() (rv string) {
	if v != nil && v.RunAsUser != nil {
		return *v.RunAsUser
	}
	return
}

func (v *VirtualMachineRunCommandProperties) GetSource() (rv *VirtualMachineRunCommandScriptSource) {
	if v != nil {
		return v.Source
	}
	return
}

func (v *VirtualMachineRunCommandProperties) GetTimeoutInSeconds() (rv int32) {
	if v != nil && v.TimeoutInSeconds != nil {
		return *v.TimeoutInSeconds
	}
	return
}

func (v *VirtualMachineRunCommandProperties) GetInstanceView() (rv *VirtualMachineRunCommandInstanceView) {
	if v != nil {
		return v.InstanceView
	}
	return
}

func (v *VirtualMachineRunCommandProperties) GetProvisioningState() (rv string) {
	if v != nil && v.ProvisioningState != nil {
		return *v.ProvisioningState
	}
	return
}

// VirtualMachineRunCommandScriptSource - Describes the script sources for run command.
type VirtualMachineRunCommandScriptSource struct {
	// Specifies a commandId of predefined built-in script.
	CommandID *string

	// Specifies the script content to be executed on the VM.
	Script *string

	// Specifies the script download location.
	ScriptURI *string
}

func (v *VirtualMachineRunCommandScriptSource) GetCommandID() (rv string) {
	if v != nil && v.CommandID != nil {
		return *v.CommandID
	}
	return
}

func (v *VirtualMachineRunCommandScriptSource) GetScript() (rv string) {
	if v != nil && v.Script != nil {
		return *v.Script
	}
	return
}

func (v *VirtualMachineRunCommandScriptSource) GetScriptURI() (rv string) {
	if v != nil && v.ScriptURI != nil {
		return *v.ScriptURI
	}
	return
}

// VirtualMachineRunCommandUpdate - Describes a Virtual Machine run command.
type VirtualMachineRunCommandUpdate struct {
	// Describes the properties of a Virtual Machine run command.
	Properties *VirtualMachineRunCommandProperties

	// Resource tags
	Tags map[string]*string
}

func (v *VirtualMachineRunCommandUpdate) GetProperties() (rv *VirtualMachineRunCommandProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineRunCommandUpdate) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

// VirtualMachineRunCommandsListResult - The List run command operation response
type VirtualMachineRunCommandsListResult struct {
	// REQUIRED; The list of run commands
	Value []VirtualMachineRunCommand

	// The uri to fetch the next page of run commands.
	NextLink *string
}

func (v *VirtualMachineRunCommandsListResult) GetValue() (rv []VirtualMachineRunCommand) {
	if v != nil {
		return v.Value
	}
	return
}

func (v *VirtualMachineRunCommandsListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

// VirtualMachineScaleSet - Describes a Virtual Machine Scale Set.
type VirtualMachineScaleSet struct {
	// REQUIRED; Resource location
	Location *string

	// The extended location of the Virtual Machine Scale Set.
	ExtendedLocation *ExtendedLocation

	// The identity of the virtual machine scale set, if configured.
	Identity *VirtualMachineScaleSetIdentity

	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace
	// images. Before you can use a marketplace image from an API, you must
	// enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click
	// Want to deploy programmatically, Get Started ->. Enter any required
	// information and then click Save.
	Plan *Plan

	// Describes the properties of a Virtual Machine Scale Set.
	Properties *VirtualMachineScaleSetProperties

	// The virtual machine scale set sku.
	SKU *SKU

	// Resource tags
	Tags map[string]*string

	// The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set
	Zones []string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (v *VirtualMachineScaleSet) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualMachineScaleSet) GetExtendedLocation() (rv *ExtendedLocation) {
	if v != nil {
		return v.ExtendedLocation
	}
	return
}

func (v *VirtualMachineScaleSet) GetIdentity() (rv *VirtualMachineScaleSetIdentity) {
	if v != nil {
		return v.Identity
	}
	return
}

func (v *VirtualMachineScaleSet) GetPlan() (rv *Plan) {
	if v != nil {
		return v.Plan
	}
	return
}

func (v *VirtualMachineScaleSet) GetProperties() (rv *VirtualMachineScaleSetProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineScaleSet) GetSKU() (rv *SKU) {
	if v != nil {
		return v.SKU
	}
	return
}

func (v *VirtualMachineScaleSet) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualMachineScaleSet) GetZones() (rv []string) {
	if v != nil {
		return v.Zones
	}
	return
}

func (v *VirtualMachineScaleSet) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineScaleSet) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSet) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualMachineScaleSetDataDisk - Describes a virtual machine scale set data disk.
type VirtualMachineScaleSetDataDisk struct {
	// REQUIRED; The create option.
	CreateOption *DiskCreateOptionTypes

	// REQUIRED; Specifies the logical unit number of the data disk. This value is used to identify data disks within the VM and
	// therefore must be unique for each data disk attached to a VM.
	Lun *int32

	// Specifies the caching requirements.
	// Possible values are:
	// None
	// ReadOnly
	// ReadWrite
	// Default: None for Standard storage. ReadOnly for Premium storage
	Caching *CachingTypes

	// Specifies the Read-Write IOPS for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS. If not
	// specified, a default value would be assigned based on diskSizeGB.
	DiskIOPSReadWrite *int64

	// Specifies the bandwidth in MB per second for the managed disk. Should be used only when StorageAccountType is UltraSSD_LRS.
	// If not specified, a default value would be assigned based on diskSizeGB.
	DiskMBpsReadWrite *int64

	// Specifies the size of an empty data disk in gigabytes. This element can be used to overwrite the size of the disk in a
	// virtual machine image.
	// This value cannot be larger than 1023 GB
	DiskSizeGB *int32

	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParameters

	// The disk name.
	Name *string

	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool
}

func (v *VirtualMachineScaleSetDataDisk) GetCreateOption() (rv *DiskCreateOptionTypes) {
	if v != nil {
		return v.CreateOption
	}
	return
}

func (v *VirtualMachineScaleSetDataDisk) GetLun() (rv int32) {
	if v != nil && v.Lun != nil {
		return *v.Lun
	}
	return
}

func (v *VirtualMachineScaleSetDataDisk) GetCaching() (rv *CachingTypes) {
	if v != nil {
		return v.Caching
	}
	return
}

func (v *VirtualMachineScaleSetDataDisk) GetDiskIOPSReadWrite() (rv int64) {
	if v != nil && v.DiskIOPSReadWrite != nil {
		return *v.DiskIOPSReadWrite
	}
	return
}

func (v *VirtualMachineScaleSetDataDisk) GetDiskMBpsReadWrite() (rv int64) {
	if v != nil && v.DiskMBpsReadWrite != nil {
		return *v.DiskMBpsReadWrite
	}
	return
}

func (v *VirtualMachineScaleSetDataDisk) GetDiskSizeGB() (rv int32) {
	if v != nil && v.DiskSizeGB != nil {
		return *v.DiskSizeGB
	}
	return
}

func (v *VirtualMachineScaleSetDataDisk) GetManagedDisk() (rv *VirtualMachineScaleSetManagedDiskParameters) {
	if v != nil {
		return v.ManagedDisk
	}
	return
}

func (v *VirtualMachineScaleSetDataDisk) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetDataDisk) GetWriteAcceleratorEnabled() (rv bool) {
	if v != nil && v.WriteAcceleratorEnabled != nil {
		return *v.WriteAcceleratorEnabled
	}
	return
}

// VirtualMachineScaleSetExtension - Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtension struct {
	// The name of the extension.
	Name *string

	// Describes the properties of a Virtual Machine Scale Set Extension.
	Properties *VirtualMachineScaleSetExtensionProperties

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; Resource type
	Type *string
}

func (v *VirtualMachineScaleSetExtension) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetExtension) GetProperties() (rv *VirtualMachineScaleSetExtensionProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineScaleSetExtension) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineScaleSetExtension) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualMachineScaleSetExtensionListResult - The List VM scale set extension operation response.
type VirtualMachineScaleSetExtensionListResult struct {
	// REQUIRED; The list of VM scale set extensions.
	Value []VirtualMachineScaleSetExtension

	// The uri to fetch the next page of VM scale set extensions. Call ListNext() with this to fetch the next page of VM scale
	// set extensions.
	NextLink *string
}

func (v *VirtualMachineScaleSetExtensionListResult) GetValue() (rv []VirtualMachineScaleSetExtension) {
	if v != nil {
		return v.Value
	}
	return
}

func (v *VirtualMachineScaleSetExtensionListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

// VirtualMachineScaleSetExtensionProfile - Describes a virtual machine scale set extension profile.
type VirtualMachineScaleSetExtensionProfile struct {
	// The virtual machine scale set child extension resources.
	Extensions []VirtualMachineScaleSetExtension

	// Specifies the time alloted for all extensions to start. The time duration should be between 15 minutes and 120 minutes
	// (inclusive) and should be specified in ISO 8601 format. The default value is 90
	// minutes (PT1H30M).
	// Minimum api-version: 2020-06-01
	ExtensionsTimeBudget *string
}

func (v *VirtualMachineScaleSetExtensionProfile) GetExtensions() (rv []VirtualMachineScaleSetExtension) {
	if v != nil {
		return v.Extensions
	}
	return
}

func (v *VirtualMachineScaleSetExtensionProfile) GetExtensionsTimeBudget() (rv string) {
	if v != nil && v.ExtensionsTimeBudget != nil {
		return *v.ExtensionsTimeBudget
	}
	return
}

// VirtualMachineScaleSetExtensionProperties - Describes the properties of a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionProperties struct {
	// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed,
	// however, the extension will not upgrade minor versions unless redeployed, even
	// with this property set to true.
	AutoUpgradeMinorVersion *bool

	// Indicates whether the extension should be automatically upgraded by the platform if there is a newer version of the extension
	// available.
	EnableAutomaticUpgrade *bool

	// If a value is provided and is different from the previous value, the extension handler will be forced to update even if
	// the extension configuration has not changed.
	ForceUpdateTag *string

	// The extension can contain either protectedSettings or protectedSettingsFromKeyVault or no protected settings at all.
	ProtectedSettings any

	// The extensions protected settings that are passed by reference, and consumed from key vault
	ProtectedSettingsFromKeyVault any

	// Collection of extension names after which this extension needs to be provisioned.
	ProvisionAfterExtensions []string

	// The name of the extension handler publisher.
	Publisher *string

	// Json formatted public settings for the extension.
	Settings any

	// Indicates whether failures stemming from the extension will be suppressed (Operational failures such as not connecting
	// to the VM will not be suppressed regardless of this value). The default is false.
	SuppressFailures *bool

	// Specifies the type of the extension; an example is "CustomScriptExtension".
	Type *string

	// Specifies the version of the script handler.
	TypeHandlerVersion *string

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string
}

func (v *VirtualMachineScaleSetExtensionProperties) GetAutoUpgradeMinorVersion() (rv bool) {
	if v != nil && v.AutoUpgradeMinorVersion != nil {
		return *v.AutoUpgradeMinorVersion
	}
	return
}

func (v *VirtualMachineScaleSetExtensionProperties) GetEnableAutomaticUpgrade() (rv bool) {
	if v != nil && v.EnableAutomaticUpgrade != nil {
		return *v.EnableAutomaticUpgrade
	}
	return
}

func (v *VirtualMachineScaleSetExtensionProperties) GetForceUpdateTag() (rv string) {
	if v != nil && v.ForceUpdateTag != nil {
		return *v.ForceUpdateTag
	}
	return
}

func (v *VirtualMachineScaleSetExtensionProperties) GetProtectedSettings() (rv any) {
	if v != nil {
		return v.ProtectedSettings
	}
	return
}

func (v *VirtualMachineScaleSetExtensionProperties) GetProtectedSettingsFromKeyVault() (rv any) {
	if v != nil {
		return v.ProtectedSettingsFromKeyVault
	}
	return
}

func (v *VirtualMachineScaleSetExtensionProperties) GetProvisionAfterExtensions() (rv []string) {
	if v != nil {
		return v.ProvisionAfterExtensions
	}
	return
}

func (v *VirtualMachineScaleSetExtensionProperties) GetPublisher() (rv string) {
	if v != nil && v.Publisher != nil {
		return *v.Publisher
	}
	return
}

func (v *VirtualMachineScaleSetExtensionProperties) GetSettings() (rv any) {
	if v != nil {
		return v.Settings
	}
	return
}

func (v *VirtualMachineScaleSetExtensionProperties) GetSuppressFailures() (rv bool) {
	if v != nil && v.SuppressFailures != nil {
		return *v.SuppressFailures
	}
	return
}

func (v *VirtualMachineScaleSetExtensionProperties) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

func (v *VirtualMachineScaleSetExtensionProperties) GetTypeHandlerVersion() (rv string) {
	if v != nil && v.TypeHandlerVersion != nil {
		return *v.TypeHandlerVersion
	}
	return
}

func (v *VirtualMachineScaleSetExtensionProperties) GetProvisioningState() (rv string) {
	if v != nil && v.ProvisioningState != nil {
		return *v.ProvisioningState
	}
	return
}

// VirtualMachineScaleSetExtensionUpdate - Describes a Virtual Machine Scale Set Extension.
type VirtualMachineScaleSetExtensionUpdate struct {
	// Describes the properties of a Virtual Machine Scale Set Extension.
	Properties *VirtualMachineScaleSetExtensionProperties

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; The name of the extension.
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (v *VirtualMachineScaleSetExtensionUpdate) GetProperties() (rv *VirtualMachineScaleSetExtensionProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineScaleSetExtensionUpdate) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineScaleSetExtensionUpdate) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetExtensionUpdate) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualMachineScaleSetHardwareProfile - Specifies the hardware settings for the virtual machine scale set.
type VirtualMachineScaleSetHardwareProfile struct {
	// Specifies the properties for customizing the size of the virtual machine. Minimum api-version: 2021-11-01.
	// Please follow the instructions in VM Customization [https://aka.ms/vmcustomization] for more details.
	VMSizeProperties *VMSizeProperties
}

func (v *VirtualMachineScaleSetHardwareProfile) GetVMSizeProperties() (rv *VMSizeProperties) {
	if v != nil {
		return v.VMSizeProperties
	}
	return
}

// VirtualMachineScaleSetIPConfiguration - Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetIPConfiguration struct {
	// REQUIRED; The IP configuration name.
	Name *string

	// Resource Id
	ID *string

	// Describes a virtual machine scale set network profile's IP configuration properties.
	Properties *VirtualMachineScaleSetIPConfigurationProperties
}

func (v *VirtualMachineScaleSetIPConfiguration) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetIPConfiguration) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineScaleSetIPConfiguration) GetProperties() (rv *VirtualMachineScaleSetIPConfigurationProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

// VirtualMachineScaleSetIPConfigurationProperties - Describes a virtual machine scale set network profile's IP configuration
// properties.
type VirtualMachineScaleSetIPConfigurationProperties struct {
	// Specifies an array of references to backend address pools of application gateways. A scale set can reference backend address
	// pools of multiple application gateways. Multiple scale sets cannot use the
	// same application gateway.
	ApplicationGatewayBackendAddressPools []SubResource

	// Specifies an array of references to application security group.
	ApplicationSecurityGroups []SubResource

	// Specifies an array of references to backend address pools of load balancers. A scale set can reference backend address
	// pools of one public and one internal load balancer. Multiple scale sets cannot
	// use the same basic sku load balancer.
	LoadBalancerBackendAddressPools []SubResource

	// Specifies an array of references to inbound Nat pools of the load balancers. A scale set can reference inbound nat pools
	// of one public and one internal load balancer. Multiple scale sets cannot use
	// the same basic sku load balancer.
	LoadBalancerInboundNatPools []SubResource

	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool

	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default
	// is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion *IPVersion

	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration *VirtualMachineScaleSetPublicIPAddressConfiguration

	// Specifies the identifier of the subnet.
	Subnet *APIEntityReference
}

func (v *VirtualMachineScaleSetIPConfigurationProperties) GetApplicationGatewayBackendAddressPools() (rv []SubResource) {
	if v != nil {
		return v.ApplicationGatewayBackendAddressPools
	}
	return
}

func (v *VirtualMachineScaleSetIPConfigurationProperties) GetApplicationSecurityGroups() (rv []SubResource) {
	if v != nil {
		return v.ApplicationSecurityGroups
	}
	return
}

func (v *VirtualMachineScaleSetIPConfigurationProperties) GetLoadBalancerBackendAddressPools() (rv []SubResource) {
	if v != nil {
		return v.LoadBalancerBackendAddressPools
	}
	return
}

func (v *VirtualMachineScaleSetIPConfigurationProperties) GetLoadBalancerInboundNatPools() (rv []SubResource) {
	if v != nil {
		return v.LoadBalancerInboundNatPools
	}
	return
}

func (v *VirtualMachineScaleSetIPConfigurationProperties) GetPrimary() (rv bool) {
	if v != nil && v.Primary != nil {
		return *v.Primary
	}
	return
}

func (v *VirtualMachineScaleSetIPConfigurationProperties) GetPrivateIPAddressVersion() (rv *IPVersion) {
	if v != nil {
		return v.PrivateIPAddressVersion
	}
	return
}

func (v *VirtualMachineScaleSetIPConfigurationProperties) GetPublicIPAddressConfiguration() (rv *VirtualMachineScaleSetPublicIPAddressConfiguration) {
	if v != nil {
		return v.PublicIPAddressConfiguration
	}
	return
}

func (v *VirtualMachineScaleSetIPConfigurationProperties) GetSubnet() (rv *APIEntityReference) {
	if v != nil {
		return v.Subnet
	}
	return
}

// VirtualMachineScaleSetIPTag - Contains the IP tag associated with the public IP address.
type VirtualMachineScaleSetIPTag struct {
	// IP tag type. Example: FirstPartyUsage.
	IPTagType *string

	// IP tag associated with the public IP. Example: SQL, Storage etc.
	Tag *string
}

func (v *VirtualMachineScaleSetIPTag) GetIPTagType() (rv string) {
	if v != nil && v.IPTagType != nil {
		return *v.IPTagType
	}
	return
}

func (v *VirtualMachineScaleSetIPTag) GetTag() (rv string) {
	if v != nil && v.Tag != nil {
		return *v.Tag
	}
	return
}

// VirtualMachineScaleSetIdentity - Identity for the virtual machine scale set.
type VirtualMachineScaleSetIdentity struct {
	// The type of identity used for the virtual machine scale set. The type 'SystemAssigned, UserAssigned' includes both an implicitly
	// created identity and a set of user assigned identities. The type 'None'
	// will remove any identities from the virtual machine scale set.
	Type *ResourceIdentityType

	// The list of user identities associated with the virtual machine scale set. The user identity dictionary key references
	// will be ARM resource ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]*VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue

	// READ-ONLY; The principal id of virtual machine scale set identity. This property will only be provided for a system assigned
	// identity.
	PrincipalID *string

	// READ-ONLY; The tenant id associated with the virtual machine scale set. This property will only be provided for a system
	// assigned identity.
	TenantID *string
}

func (v *VirtualMachineScaleSetIdentity) GetType() (rv *ResourceIdentityType) {
	if v != nil {
		return v.Type
	}
	return
}

func (v *VirtualMachineScaleSetIdentity) GetUserAssignedIdentities() (rv map[string]*VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue) {
	if v != nil {
		return v.UserAssignedIdentities
	}
	return
}

func (v *VirtualMachineScaleSetIdentity) GetPrincipalID() (rv string) {
	if v != nil && v.PrincipalID != nil {
		return *v.PrincipalID
	}
	return
}

func (v *VirtualMachineScaleSetIdentity) GetTenantID() (rv string) {
	if v != nil && v.TenantID != nil {
		return *v.TenantID
	}
	return
}

type VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string
}

func (v *VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue) GetClientID() (rv string) {
	if v != nil && v.ClientID != nil {
		return *v.ClientID
	}
	return
}

func (v *VirtualMachineScaleSetIdentityUserAssignedIdentitiesValue) GetPrincipalID() (rv string) {
	if v != nil && v.PrincipalID != nil {
		return *v.PrincipalID
	}
	return
}

// VirtualMachineScaleSetInstanceView - The instance view of a virtual machine scale set.
type VirtualMachineScaleSetInstanceView struct {
	// The resource status information.
	Statuses []InstanceViewStatus

	// READ-ONLY; The extensions information.
	Extensions []VirtualMachineScaleSetVMExtensionsSummary

	// READ-ONLY; The orchestration services information.
	OrchestrationServices []OrchestrationServiceSummary

	// READ-ONLY; The instance view status summary for the virtual machine scale set.
	VirtualMachine *VirtualMachineScaleSetInstanceViewStatusesSummary
}

func (v *VirtualMachineScaleSetInstanceView) GetStatuses() (rv []InstanceViewStatus) {
	if v != nil {
		return v.Statuses
	}
	return
}

func (v *VirtualMachineScaleSetInstanceView) GetExtensions() (rv []VirtualMachineScaleSetVMExtensionsSummary) {
	if v != nil {
		return v.Extensions
	}
	return
}

func (v *VirtualMachineScaleSetInstanceView) GetOrchestrationServices() (rv []OrchestrationServiceSummary) {
	if v != nil {
		return v.OrchestrationServices
	}
	return
}

func (v *VirtualMachineScaleSetInstanceView) GetVirtualMachine() (rv *VirtualMachineScaleSetInstanceViewStatusesSummary) {
	if v != nil {
		return v.VirtualMachine
	}
	return
}

// VirtualMachineScaleSetInstanceViewStatusesSummary - Instance view statuses summary for virtual machines of a virtual machine
// scale set.
type VirtualMachineScaleSetInstanceViewStatusesSummary struct {
	// READ-ONLY; The extensions information.
	StatusesSummary []VirtualMachineStatusCodeCount
}

func (v *VirtualMachineScaleSetInstanceViewStatusesSummary) GetStatusesSummary() (rv []VirtualMachineStatusCodeCount) {
	if v != nil {
		return v.StatusesSummary
	}
	return
}

// VirtualMachineScaleSetListOSUpgradeHistory - List of Virtual Machine Scale Set OS Upgrade History operation response.
type VirtualMachineScaleSetListOSUpgradeHistory struct {
	// REQUIRED; The list of OS upgrades performed on the virtual machine scale set.
	Value []UpgradeOperationHistoricalStatusInfo

	// The uri to fetch the next page of OS Upgrade History. Call ListNext() with this to fetch the next page of history of upgrades.
	NextLink *string
}

func (v *VirtualMachineScaleSetListOSUpgradeHistory) GetValue() (rv []UpgradeOperationHistoricalStatusInfo) {
	if v != nil {
		return v.Value
	}
	return
}

func (v *VirtualMachineScaleSetListOSUpgradeHistory) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

// VirtualMachineScaleSetListResult - The List Virtual Machine operation response.
type VirtualMachineScaleSetListResult struct {
	// REQUIRED; The list of virtual machine scale sets.
	Value []VirtualMachineScaleSet

	// The uri to fetch the next page of Virtual Machine Scale Sets. Call ListNext() with this to fetch the next page of VMSS.
	NextLink *string
}

func (v *VirtualMachineScaleSetListResult) GetValue() (rv []VirtualMachineScaleSet) {
	if v != nil {
		return v.Value
	}
	return
}

func (v *VirtualMachineScaleSetListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

// VirtualMachineScaleSetListSKUsResult - The Virtual Machine Scale Set List Skus operation response.
type VirtualMachineScaleSetListSKUsResult struct {
	// REQUIRED; The list of skus available for the virtual machine scale set.
	Value []VirtualMachineScaleSetSKU

	// The uri to fetch the next page of Virtual Machine Scale Set Skus. Call ListNext() with this to fetch the next page of VMSS
	// Skus.
	NextLink *string
}

func (v *VirtualMachineScaleSetListSKUsResult) GetValue() (rv []VirtualMachineScaleSetSKU) {
	if v != nil {
		return v.Value
	}
	return
}

func (v *VirtualMachineScaleSetListSKUsResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

// VirtualMachineScaleSetListWithLinkResult - The List Virtual Machine operation response.
type VirtualMachineScaleSetListWithLinkResult struct {
	// REQUIRED; The list of virtual machine scale sets.
	Value []VirtualMachineScaleSet

	// The uri to fetch the next page of Virtual Machine Scale Sets. Call ListNext() with this to fetch the next page of Virtual
	// Machine Scale Sets.
	NextLink *string
}

func (v *VirtualMachineScaleSetListWithLinkResult) GetValue() (rv []VirtualMachineScaleSet) {
	if v != nil {
		return v.Value
	}
	return
}

func (v *VirtualMachineScaleSetListWithLinkResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

// VirtualMachineScaleSetManagedDiskParameters - Describes the parameters of a ScaleSet managed disk.
type VirtualMachineScaleSetManagedDiskParameters struct {
	// Specifies the customer managed disk encryption set resource id for the managed disk.
	DiskEncryptionSet *DiskEncryptionSetParameters

	// Specifies the security profile for the managed disk.
	SecurityProfile *VMDiskSecurityProfile

	// Specifies the storage account type for the managed disk. NOTE: UltraSSD_LRS can only be used with data disks, it cannot
	// be used with OS Disk.
	StorageAccountType *StorageAccountTypes
}

func (v *VirtualMachineScaleSetManagedDiskParameters) GetDiskEncryptionSet() (rv *DiskEncryptionSetParameters) {
	if v != nil {
		return v.DiskEncryptionSet
	}
	return
}

func (v *VirtualMachineScaleSetManagedDiskParameters) GetSecurityProfile() (rv *VMDiskSecurityProfile) {
	if v != nil {
		return v.SecurityProfile
	}
	return
}

func (v *VirtualMachineScaleSetManagedDiskParameters) GetStorageAccountType() (rv *StorageAccountTypes) {
	if v != nil {
		return v.StorageAccountType
	}
	return
}

// VirtualMachineScaleSetNetworkConfiguration - Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetNetworkConfiguration struct {
	// REQUIRED; The network configuration name.
	Name *string

	// Resource Id
	ID *string

	// Describes a virtual machine scale set network profile's IP configuration.
	Properties *VirtualMachineScaleSetNetworkConfigurationProperties
}

func (v *VirtualMachineScaleSetNetworkConfiguration) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetNetworkConfiguration) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineScaleSetNetworkConfiguration) GetProperties() (rv *VirtualMachineScaleSetNetworkConfigurationProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

// VirtualMachineScaleSetNetworkConfigurationDNSSettings - Describes a virtual machines scale sets network configuration's
// DNS settings.
type VirtualMachineScaleSetNetworkConfigurationDNSSettings struct {
	// List of DNS servers IP addresses
	DNSServers []string
}

func (v *VirtualMachineScaleSetNetworkConfigurationDNSSettings) GetDNSServers() (rv []string) {
	if v != nil {
		return v.DNSServers
	}
	return
}

// VirtualMachineScaleSetNetworkConfigurationProperties - Describes a virtual machine scale set network profile's IP configuration.
type VirtualMachineScaleSetNetworkConfigurationProperties struct {
	// REQUIRED; Specifies the IP configurations of the network interface.
	IPConfigurations []VirtualMachineScaleSetIPConfiguration

	// The dns settings to be applied on the network interfaces.
	DNSSettings *VirtualMachineScaleSetNetworkConfigurationDNSSettings

	// Specify what happens to the network interface when the VM is deleted
	DeleteOption *DeleteOptions

	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking *bool

	// Specifies whether the network interface is FPGA networking-enabled.
	EnableFpga *bool

	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding *bool

	// The network security group.
	NetworkSecurityGroup *SubResource

	// Specifies the primary network interface in case the virtual machine has more than 1 network interface.
	Primary *bool
}

func (v *VirtualMachineScaleSetNetworkConfigurationProperties) GetIPConfigurations() (rv []VirtualMachineScaleSetIPConfiguration) {
	if v != nil {
		return v.IPConfigurations
	}
	return
}

func (v *VirtualMachineScaleSetNetworkConfigurationProperties) GetDNSSettings() (rv *VirtualMachineScaleSetNetworkConfigurationDNSSettings) {
	if v != nil {
		return v.DNSSettings
	}
	return
}

func (v *VirtualMachineScaleSetNetworkConfigurationProperties) GetDeleteOption() (rv *DeleteOptions) {
	if v != nil {
		return v.DeleteOption
	}
	return
}

func (v *VirtualMachineScaleSetNetworkConfigurationProperties) GetEnableAcceleratedNetworking() (rv bool) {
	if v != nil && v.EnableAcceleratedNetworking != nil {
		return *v.EnableAcceleratedNetworking
	}
	return
}

func (v *VirtualMachineScaleSetNetworkConfigurationProperties) GetEnableFpga() (rv bool) {
	if v != nil && v.EnableFpga != nil {
		return *v.EnableFpga
	}
	return
}

func (v *VirtualMachineScaleSetNetworkConfigurationProperties) GetEnableIPForwarding() (rv bool) {
	if v != nil && v.EnableIPForwarding != nil {
		return *v.EnableIPForwarding
	}
	return
}

func (v *VirtualMachineScaleSetNetworkConfigurationProperties) GetNetworkSecurityGroup() (rv *SubResource) {
	if v != nil {
		return v.NetworkSecurityGroup
	}
	return
}

func (v *VirtualMachineScaleSetNetworkConfigurationProperties) GetPrimary() (rv bool) {
	if v != nil && v.Primary != nil {
		return *v.Primary
	}
	return
}

// VirtualMachineScaleSetNetworkProfile - Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetNetworkProfile struct {
	// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The
	// reference will be in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
	HealthProbe *APIEntityReference

	// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations
	// for Virtual Machine Scale Set with orchestration mode 'Flexible'
	NetworkAPIVersion *NetworkAPIVersion

	// The list of network configurations.
	NetworkInterfaceConfigurations []VirtualMachineScaleSetNetworkConfiguration
}

func (v *VirtualMachineScaleSetNetworkProfile) GetHealthProbe() (rv *APIEntityReference) {
	if v != nil {
		return v.HealthProbe
	}
	return
}

func (v *VirtualMachineScaleSetNetworkProfile) GetNetworkAPIVersion() (rv *NetworkAPIVersion) {
	if v != nil {
		return v.NetworkAPIVersion
	}
	return
}

func (v *VirtualMachineScaleSetNetworkProfile) GetNetworkInterfaceConfigurations() (rv []VirtualMachineScaleSetNetworkConfiguration) {
	if v != nil {
		return v.NetworkInterfaceConfigurations
	}
	return
}

// VirtualMachineScaleSetOSDisk - Describes a virtual machine scale set operating system disk.
type VirtualMachineScaleSetOSDisk struct {
	// REQUIRED; Specifies how the virtual machines in the scale set should be created.
	// The only allowed value is: FromImage \u2013 This value is used when you are using an image to create the virtual machine.
	// If you are using a platform image, you also use the imageReference element
	// described above. If you are using a marketplace image, you also use the plan element previously described.
	CreateOption *DiskCreateOptionTypes

	// Specifies the caching requirements.
	// Possible values are:
	// None
	// ReadOnly
	// ReadWrite
	// Default: None for Standard storage. ReadOnly for Premium storage
	Caching *CachingTypes

	// Specifies the ephemeral disk Settings for the operating system disk used by the virtual machine scale set.
	DiffDiskSettings *DiffDiskSettings

	// Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk
	// in a virtual machine image.
	// This value cannot be larger than 1023 GB
	DiskSizeGB *int32

	// Specifies information about the unmanaged user image to base the scale set on.
	Image *VirtualHardDisk

	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParameters

	// The disk name.
	Name *string

	// This property allows you to specify the type of the OS that is included in the disk if creating a VM from user-image or
	// a specialized VHD.
	// Possible values are:
	// Windows
	// Linux
	OSType *OperatingSystemTypes

	// Specifies the container urls that are used to store operating system disks for the scale set.
	VhdContainers []string

	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool
}

func (v *VirtualMachineScaleSetOSDisk) GetCreateOption() (rv *DiskCreateOptionTypes) {
	if v != nil {
		return v.CreateOption
	}
	return
}

func (v *VirtualMachineScaleSetOSDisk) GetCaching() (rv *CachingTypes) {
	if v != nil {
		return v.Caching
	}
	return
}

func (v *VirtualMachineScaleSetOSDisk) GetDiffDiskSettings() (rv *DiffDiskSettings) {
	if v != nil {
		return v.DiffDiskSettings
	}
	return
}

func (v *VirtualMachineScaleSetOSDisk) GetDiskSizeGB() (rv int32) {
	if v != nil && v.DiskSizeGB != nil {
		return *v.DiskSizeGB
	}
	return
}

func (v *VirtualMachineScaleSetOSDisk) GetImage() (rv *VirtualHardDisk) {
	if v != nil {
		return v.Image
	}
	return
}

func (v *VirtualMachineScaleSetOSDisk) GetManagedDisk() (rv *VirtualMachineScaleSetManagedDiskParameters) {
	if v != nil {
		return v.ManagedDisk
	}
	return
}

func (v *VirtualMachineScaleSetOSDisk) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetOSDisk) GetOSType() (rv *OperatingSystemTypes) {
	if v != nil {
		return v.OSType
	}
	return
}

func (v *VirtualMachineScaleSetOSDisk) GetVhdContainers() (rv []string) {
	if v != nil {
		return v.VhdContainers
	}
	return
}

func (v *VirtualMachineScaleSetOSDisk) GetWriteAcceleratorEnabled() (rv bool) {
	if v != nil && v.WriteAcceleratorEnabled != nil {
		return *v.WriteAcceleratorEnabled
	}
	return
}

// VirtualMachineScaleSetOSProfile - Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetOSProfile struct {
	// Specifies the password of the administrator account.
	// Minimum-length (Windows): 8 characters
	// Minimum-length (Linux): 6 characters
	// Max-length (Windows): 123 characters
	// Max-length (Linux): 72 characters
	// Complexity requirements: 3 out of 4 conditions below need to be fulfilled
	// Has lower characters
	// Has upper characters
	// Has a digit
	// Has a special character (Regex match [\W_])
	// Disallowed values: "abc@123", "P@$$w0rd", "P@ssw0rd", "P@ssword123", "Pa$$word", "pass@word1", "Password!", "Password1",
	// "Password22", "iloveyou!"
	// For resetting the password, see How to reset the Remote Desktop service or its login password in a Windows VM [https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp]
	// For resetting root password, see Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension
	// [https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection]
	AdminPassword *string

	// Specifies the name of the administrator account.
	// Windows-only restriction: Cannot end in "."
	// Disallowed values: "administrator", "admin", "user", "user1", "test", "user2", "test1", "user3", "admin1", "1", "123",
	// "a", "actuser", "adm", "admin2", "aspnet", "backup", "console", "david", "guest",
	// "john", "owner", "root", "server", "sql", "support", "support_388945a0", "sys", "test2", "test3", "user4", "user5".
	// Minimum-length (Linux): 1 character
	// Max-length (Linux): 64 characters
	// Max-length (Windows): 20 characters
	AdminUsername *string

	// Specifies whether extension operations should be allowed on the virtual machine scale set.
	// This may only be set to False when no extensions are present on the virtual machine scale set.
	AllowExtensionOperations *bool

	// Specifies the computer name prefix for all of the virtual machines in the scale set. Computer name prefixes must be 1 to
	// 15 characters long.
	ComputerNamePrefix *string

	// Specifies a base-64 encoded string of custom data. The base-64 encoded string is decoded to a binary array that is saved
	// as a file on the Virtual Machine. The maximum length of the binary array is
	// 65535 bytes.
	// For using cloud-init for your VM, see Using cloud-init to customize a Linux VM during creation [https://docs.microsoft.com/azure/virtual-machines/linux/using-cloud-init]
	CustomData *string

	// Specifies the Linux operating system settings on the virtual machine.
	// For a list of supported Linux distributions, see Linux on Azure-Endorsed Distributions [https://docs.microsoft.com/azure/virtual-machines/linux/endorsed-distros].
	LinuxConfiguration *LinuxConfiguration

	// Specifies set of certificates that should be installed onto the virtual machines in the scale set. To install certificates
	// on a virtual machine it is recommended to use the Azure Key Vault virtual
	// machine extension for Linux [https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux] or the Azure
	// Key Vault virtual machine extension for Windows
	// [https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows].
	Secrets []VaultSecretGroup

	// Specifies Windows operating system settings on the virtual machine.
	WindowsConfiguration *WindowsConfiguration
}

func (v *VirtualMachineScaleSetOSProfile) GetAdminPassword() (rv string) {
	if v != nil && v.AdminPassword != nil {
		return *v.AdminPassword
	}
	return
}

func (v *VirtualMachineScaleSetOSProfile) GetAdminUsername() (rv string) {
	if v != nil && v.AdminUsername != nil {
		return *v.AdminUsername
	}
	return
}

func (v *VirtualMachineScaleSetOSProfile) GetAllowExtensionOperations() (rv bool) {
	if v != nil && v.AllowExtensionOperations != nil {
		return *v.AllowExtensionOperations
	}
	return
}

func (v *VirtualMachineScaleSetOSProfile) GetComputerNamePrefix() (rv string) {
	if v != nil && v.ComputerNamePrefix != nil {
		return *v.ComputerNamePrefix
	}
	return
}

func (v *VirtualMachineScaleSetOSProfile) GetCustomData() (rv string) {
	if v != nil && v.CustomData != nil {
		return *v.CustomData
	}
	return
}

func (v *VirtualMachineScaleSetOSProfile) GetLinuxConfiguration() (rv *LinuxConfiguration) {
	if v != nil {
		return v.LinuxConfiguration
	}
	return
}

func (v *VirtualMachineScaleSetOSProfile) GetSecrets() (rv []VaultSecretGroup) {
	if v != nil {
		return v.Secrets
	}
	return
}

func (v *VirtualMachineScaleSetOSProfile) GetWindowsConfiguration() (rv *WindowsConfiguration) {
	if v != nil {
		return v.WindowsConfiguration
	}
	return
}

// VirtualMachineScaleSetProperties - Describes the properties of a Virtual Machine Scale Set.
type VirtualMachineScaleSetProperties struct {
	// Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance:
	// whether the Virtual Machines have the capability to support attaching
	// managed data disks with UltraSSD_LRS storage account type.
	AdditionalCapabilities *AdditionalCapabilities

	// Policy for automatic repairs.
	AutomaticRepairsPolicy *AutomaticRepairsPolicy

	// When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This
	// property will hence ensure that the extensions do not run on the extra
	// overprovisioned VMs.
	DoNotRunExtensionsOnOverprovisionedVMs *bool

	// Specifies information about the dedicated host group that the virtual machine scale set resides in.
	// Minimum api-version: 2020-06-01.
	HostGroup *SubResource

	// Specifies the orchestration mode for the virtual machine scale set.
	OrchestrationMode *OrchestrationMode

	// Specifies whether the Virtual Machine Scale Set should be overprovisioned.
	Overprovision *bool

	// Fault Domain count for each placement group.
	PlatformFaultDomainCount *int32

	// Specifies information about the proximity placement group that the virtual machine scale set should be assigned to.
	// Minimum api-version: 2018-04-01.
	ProximityPlacementGroup *SubResource

	// Specifies the policies applied when scaling in Virtual Machines in the Virtual Machine Scale Set.
	ScaleInPolicy *ScaleInPolicy

	// When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup
	// is true, it may be modified to false. However, if singlePlacementGroup
	// is false, it may not be modified to true.
	SinglePlacementGroup *bool

	// Specifies the Spot Restore properties for the virtual machine scale set.
	SpotRestorePolicy *SpotRestorePolicy

	// The upgrade policy.
	UpgradePolicy *UpgradePolicy

	// The virtual machine profile.
	VirtualMachineProfile *VirtualMachineScaleSetVMProfile

	// Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage. zoneBalance property
	// can only be set if the zones property of the scale set contains more than
	// one zone. If there are no zones or only one zone specified, then zoneBalance property should not be set.
	ZoneBalance *bool

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string

	// READ-ONLY; Specifies the time at which the Virtual Machine Scale Set resource was created.
	// Minimum api-version: 2021-11-01.
	TimeCreated *time.Time

	// READ-ONLY; Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
	UniqueID *string
}

func (v *VirtualMachineScaleSetProperties) GetAdditionalCapabilities() (rv *AdditionalCapabilities) {
	if v != nil {
		return v.AdditionalCapabilities
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetAutomaticRepairsPolicy() (rv *AutomaticRepairsPolicy) {
	if v != nil {
		return v.AutomaticRepairsPolicy
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetDoNotRunExtensionsOnOverprovisionedVMs() (rv bool) {
	if v != nil && v.DoNotRunExtensionsOnOverprovisionedVMs != nil {
		return *v.DoNotRunExtensionsOnOverprovisionedVMs
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetHostGroup() (rv *SubResource) {
	if v != nil {
		return v.HostGroup
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetOrchestrationMode() (rv *OrchestrationMode) {
	if v != nil {
		return v.OrchestrationMode
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetOverprovision() (rv bool) {
	if v != nil && v.Overprovision != nil {
		return *v.Overprovision
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetPlatformFaultDomainCount() (rv int32) {
	if v != nil && v.PlatformFaultDomainCount != nil {
		return *v.PlatformFaultDomainCount
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetProximityPlacementGroup() (rv *SubResource) {
	if v != nil {
		return v.ProximityPlacementGroup
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetScaleInPolicy() (rv *ScaleInPolicy) {
	if v != nil {
		return v.ScaleInPolicy
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetSinglePlacementGroup() (rv bool) {
	if v != nil && v.SinglePlacementGroup != nil {
		return *v.SinglePlacementGroup
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetSpotRestorePolicy() (rv *SpotRestorePolicy) {
	if v != nil {
		return v.SpotRestorePolicy
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetUpgradePolicy() (rv *UpgradePolicy) {
	if v != nil {
		return v.UpgradePolicy
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetVirtualMachineProfile() (rv *VirtualMachineScaleSetVMProfile) {
	if v != nil {
		return v.VirtualMachineProfile
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetZoneBalance() (rv bool) {
	if v != nil && v.ZoneBalance != nil {
		return *v.ZoneBalance
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetProvisioningState() (rv string) {
	if v != nil && v.ProvisioningState != nil {
		return *v.ProvisioningState
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetTimeCreated() (rv *time.Time) {
	if v != nil {
		return v.TimeCreated
	}
	return
}

func (v *VirtualMachineScaleSetProperties) GetUniqueID() (rv string) {
	if v != nil && v.UniqueID != nil {
		return *v.UniqueID
	}
	return
}

// VirtualMachineScaleSetPublicIPAddressConfiguration - Describes a virtual machines scale set IP Configuration's PublicIPAddress
// configuration
type VirtualMachineScaleSetPublicIPAddressConfiguration struct {
	// REQUIRED; The publicIP address configuration name.
	Name *string

	// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
	Properties *VirtualMachineScaleSetPublicIPAddressConfigurationProperties

	// Describes the public IP Sku. It can only be set with OrchestrationMode as Flexible.
	SKU *PublicIPAddressSKU
}

func (v *VirtualMachineScaleSetPublicIPAddressConfiguration) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetPublicIPAddressConfiguration) GetProperties() (rv *VirtualMachineScaleSetPublicIPAddressConfigurationProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineScaleSetPublicIPAddressConfiguration) GetSKU() (rv *PublicIPAddressSKU) {
	if v != nil {
		return v.SKU
	}
	return
}

// VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings - Describes a virtual machines scale sets network configuration's
// DNS settings.
type VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings struct {
	// REQUIRED; The Domain name label.The concatenation of the domain name label and vm index will be the domain name labels
	// of the PublicIPAddress resources that will be created
	DomainNameLabel *string
}

func (v *VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings) GetDomainNameLabel() (rv string) {
	if v != nil && v.DomainNameLabel != nil {
		return *v.DomainNameLabel
	}
	return
}

// VirtualMachineScaleSetPublicIPAddressConfigurationProperties - Describes a virtual machines scale set IP Configuration's
// PublicIPAddress configuration
type VirtualMachineScaleSetPublicIPAddressConfigurationProperties struct {
	// The dns settings to be applied on the publicIP addresses .
	DNSSettings *VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings

	// Specify what happens to the public IP when the VM is deleted
	DeleteOption *DeleteOptions

	// The list of IP tags associated with the public IP address.
	IPTags []VirtualMachineScaleSetIPTag

	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int32

	// Available from Api-Version 2019-07-01 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default
	// is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PublicIPAddressVersion *IPVersion

	// The PublicIPPrefix from which to allocate publicIP addresses.
	PublicIPPrefix *SubResource
}

func (v *VirtualMachineScaleSetPublicIPAddressConfigurationProperties) GetDNSSettings() (rv *VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings) {
	if v != nil {
		return v.DNSSettings
	}
	return
}

func (v *VirtualMachineScaleSetPublicIPAddressConfigurationProperties) GetDeleteOption() (rv *DeleteOptions) {
	if v != nil {
		return v.DeleteOption
	}
	return
}

func (v *VirtualMachineScaleSetPublicIPAddressConfigurationProperties) GetIPTags() (rv []VirtualMachineScaleSetIPTag) {
	if v != nil {
		return v.IPTags
	}
	return
}

func (v *VirtualMachineScaleSetPublicIPAddressConfigurationProperties) GetIdleTimeoutInMinutes() (rv int32) {
	if v != nil && v.IdleTimeoutInMinutes != nil {
		return *v.IdleTimeoutInMinutes
	}
	return
}

func (v *VirtualMachineScaleSetPublicIPAddressConfigurationProperties) GetPublicIPAddressVersion() (rv *IPVersion) {
	if v != nil {
		return v.PublicIPAddressVersion
	}
	return
}

func (v *VirtualMachineScaleSetPublicIPAddressConfigurationProperties) GetPublicIPPrefix() (rv *SubResource) {
	if v != nil {
		return v.PublicIPPrefix
	}
	return
}

// VirtualMachineScaleSetReimageParameters - Describes a Virtual Machine Scale Set VM Reimage Parameters.
type VirtualMachineScaleSetReimageParameters struct {
	// The virtual machine scale set instance ids. Omitting the virtual machine scale set instance ids will result in the operation
	// being performed on all virtual machines in the virtual machine scale set.
	InstanceIDs []string

	// Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage parameter is only supported
	// for VM/VMSS with Ephemeral OS disk.
	TempDisk *bool
}

func (v *VirtualMachineScaleSetReimageParameters) GetInstanceIDs() (rv []string) {
	if v != nil {
		return v.InstanceIDs
	}
	return
}

func (v *VirtualMachineScaleSetReimageParameters) GetTempDisk() (rv bool) {
	if v != nil && v.TempDisk != nil {
		return *v.TempDisk
	}
	return
}

// VirtualMachineScaleSetSKU - Describes an available virtual machine scale set sku.
type VirtualMachineScaleSetSKU struct {
	// READ-ONLY; Specifies the number of virtual machines in the scale set.
	Capacity *VirtualMachineScaleSetSKUCapacity

	// READ-ONLY; The type of resource the sku applies to.
	ResourceType *string

	// READ-ONLY; The Sku.
	SKU *SKU
}

func (v *VirtualMachineScaleSetSKU) GetCapacity() (rv *VirtualMachineScaleSetSKUCapacity) {
	if v != nil {
		return v.Capacity
	}
	return
}

func (v *VirtualMachineScaleSetSKU) GetResourceType() (rv string) {
	if v != nil && v.ResourceType != nil {
		return *v.ResourceType
	}
	return
}

func (v *VirtualMachineScaleSetSKU) GetSKU() (rv *SKU) {
	if v != nil {
		return v.SKU
	}
	return
}

// VirtualMachineScaleSetSKUCapacity - Describes scaling information of a sku.
type VirtualMachineScaleSetSKUCapacity struct {
	// READ-ONLY; The default capacity.
	DefaultCapacity *int64

	// READ-ONLY; The maximum capacity that can be set.
	Maximum *int64

	// READ-ONLY; The minimum capacity.
	Minimum *int64

	// READ-ONLY; The scale type applicable to the sku.
	ScaleType *VirtualMachineScaleSetSKUScaleType
}

func (v *VirtualMachineScaleSetSKUCapacity) GetDefaultCapacity() (rv int64) {
	if v != nil && v.DefaultCapacity != nil {
		return *v.DefaultCapacity
	}
	return
}

func (v *VirtualMachineScaleSetSKUCapacity) GetMaximum() (rv int64) {
	if v != nil && v.Maximum != nil {
		return *v.Maximum
	}
	return
}

func (v *VirtualMachineScaleSetSKUCapacity) GetMinimum() (rv int64) {
	if v != nil && v.Minimum != nil {
		return *v.Minimum
	}
	return
}

func (v *VirtualMachineScaleSetSKUCapacity) GetScaleType() (rv *VirtualMachineScaleSetSKUScaleType) {
	if v != nil {
		return v.ScaleType
	}
	return
}

// VirtualMachineScaleSetStorageProfile - Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetStorageProfile struct {
	// Specifies the parameters that are used to add data disks to the virtual machines in the scale set.
	// For more information about disks, see About disks and VHDs for Azure virtual machines [https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview].
	DataDisks []VirtualMachineScaleSetDataDisk

	// Specifies information about the image to use. You can specify information about platform images, marketplace images, or
	// virtual machine images. This element is required when you want to use a platform
	// image, marketplace image, or virtual machine image, but is not used in other creation operations.
	ImageReference *ImageReference

	// Specifies information about the operating system disk used by the virtual machines in the scale set.
	// For more information about disks, see About disks and VHDs for Azure virtual machines [https://docs.microsoft.com/azure/virtual-machines/managed-disks-overview].
	OSDisk *VirtualMachineScaleSetOSDisk
}

func (v *VirtualMachineScaleSetStorageProfile) GetDataDisks() (rv []VirtualMachineScaleSetDataDisk) {
	if v != nil {
		return v.DataDisks
	}
	return
}

func (v *VirtualMachineScaleSetStorageProfile) GetImageReference() (rv *ImageReference) {
	if v != nil {
		return v.ImageReference
	}
	return
}

func (v *VirtualMachineScaleSetStorageProfile) GetOSDisk() (rv *VirtualMachineScaleSetOSDisk) {
	if v != nil {
		return v.OSDisk
	}
	return
}

// VirtualMachineScaleSetUpdate - Describes a Virtual Machine Scale Set.
type VirtualMachineScaleSetUpdate struct {
	// The identity of the virtual machine scale set, if configured.
	Identity *VirtualMachineScaleSetIdentity

	// The purchase plan when deploying a virtual machine scale set from VM Marketplace images.
	Plan *Plan

	// Describes the properties of a Virtual Machine Scale Set.
	Properties *VirtualMachineScaleSetUpdateProperties

	// The virtual machine scale set sku.
	SKU *SKU

	// Resource tags
	Tags map[string]*string
}

func (v *VirtualMachineScaleSetUpdate) GetIdentity() (rv *VirtualMachineScaleSetIdentity) {
	if v != nil {
		return v.Identity
	}
	return
}

func (v *VirtualMachineScaleSetUpdate) GetPlan() (rv *Plan) {
	if v != nil {
		return v.Plan
	}
	return
}

func (v *VirtualMachineScaleSetUpdate) GetProperties() (rv *VirtualMachineScaleSetUpdateProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineScaleSetUpdate) GetSKU() (rv *SKU) {
	if v != nil {
		return v.SKU
	}
	return
}

func (v *VirtualMachineScaleSetUpdate) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

// VirtualMachineScaleSetUpdateIPConfiguration - Describes a virtual machine scale set network profile's IP configuration.
// NOTE: The subnet of a scale set may be modified as long as the original subnet and the new subnet are in the same virtual
// network
type VirtualMachineScaleSetUpdateIPConfiguration struct {
	// Resource Id
	ID *string

	// The IP configuration name.
	Name *string

	// Describes a virtual machine scale set network profile's IP configuration properties.
	Properties *VirtualMachineScaleSetUpdateIPConfigurationProperties
}

func (v *VirtualMachineScaleSetUpdateIPConfiguration) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineScaleSetUpdateIPConfiguration) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetUpdateIPConfiguration) GetProperties() (rv *VirtualMachineScaleSetUpdateIPConfigurationProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

// VirtualMachineScaleSetUpdateIPConfigurationProperties - Describes a virtual machine scale set network profile's IP configuration
// properties.
type VirtualMachineScaleSetUpdateIPConfigurationProperties struct {
	// The application gateway backend address pools.
	ApplicationGatewayBackendAddressPools []SubResource

	// Specifies an array of references to application security group.
	ApplicationSecurityGroups []SubResource

	// The load balancer backend address pools.
	LoadBalancerBackendAddressPools []SubResource

	// The load balancer inbound nat pools.
	LoadBalancerInboundNatPools []SubResource

	// Specifies the primary IP Configuration in case the network interface has more than one IP Configuration.
	Primary *bool

	// Available from Api-Version 2017-03-30 onwards, it represents whether the specific ipconfiguration is IPv4 or IPv6. Default
	// is taken as IPv4. Possible values are: 'IPv4' and 'IPv6'.
	PrivateIPAddressVersion *IPVersion

	// The publicIPAddressConfiguration.
	PublicIPAddressConfiguration *VirtualMachineScaleSetUpdatePublicIPAddressConfiguration

	// The subnet.
	Subnet *APIEntityReference
}

func (v *VirtualMachineScaleSetUpdateIPConfigurationProperties) GetApplicationGatewayBackendAddressPools() (rv []SubResource) {
	if v != nil {
		return v.ApplicationGatewayBackendAddressPools
	}
	return
}

func (v *VirtualMachineScaleSetUpdateIPConfigurationProperties) GetApplicationSecurityGroups() (rv []SubResource) {
	if v != nil {
		return v.ApplicationSecurityGroups
	}
	return
}

func (v *VirtualMachineScaleSetUpdateIPConfigurationProperties) GetLoadBalancerBackendAddressPools() (rv []SubResource) {
	if v != nil {
		return v.LoadBalancerBackendAddressPools
	}
	return
}

func (v *VirtualMachineScaleSetUpdateIPConfigurationProperties) GetLoadBalancerInboundNatPools() (rv []SubResource) {
	if v != nil {
		return v.LoadBalancerInboundNatPools
	}
	return
}

func (v *VirtualMachineScaleSetUpdateIPConfigurationProperties) GetPrimary() (rv bool) {
	if v != nil && v.Primary != nil {
		return *v.Primary
	}
	return
}

func (v *VirtualMachineScaleSetUpdateIPConfigurationProperties) GetPrivateIPAddressVersion() (rv *IPVersion) {
	if v != nil {
		return v.PrivateIPAddressVersion
	}
	return
}

func (v *VirtualMachineScaleSetUpdateIPConfigurationProperties) GetPublicIPAddressConfiguration() (rv *VirtualMachineScaleSetUpdatePublicIPAddressConfiguration) {
	if v != nil {
		return v.PublicIPAddressConfiguration
	}
	return
}

func (v *VirtualMachineScaleSetUpdateIPConfigurationProperties) GetSubnet() (rv *APIEntityReference) {
	if v != nil {
		return v.Subnet
	}
	return
}

// VirtualMachineScaleSetUpdateNetworkConfiguration - Describes a virtual machine scale set network profile's network configurations.
type VirtualMachineScaleSetUpdateNetworkConfiguration struct {
	// Resource Id
	ID *string

	// The network configuration name.
	Name *string

	// Describes a virtual machine scale set updatable network profile's IP configuration.Use this object for updating network
	// profile's IP Configuration.
	Properties *VirtualMachineScaleSetUpdateNetworkConfigurationProperties
}

func (v *VirtualMachineScaleSetUpdateNetworkConfiguration) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineScaleSetUpdateNetworkConfiguration) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetUpdateNetworkConfiguration) GetProperties() (rv *VirtualMachineScaleSetUpdateNetworkConfigurationProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

// VirtualMachineScaleSetUpdateNetworkConfigurationProperties - Describes a virtual machine scale set updatable network profile's
// IP configuration.Use this object for updating network profile's IP Configuration.
type VirtualMachineScaleSetUpdateNetworkConfigurationProperties struct {
	// The dns settings to be applied on the network interfaces.
	DNSSettings *VirtualMachineScaleSetNetworkConfigurationDNSSettings

	// Specify what happens to the network interface when the VM is deleted
	DeleteOption *DeleteOptions

	// Specifies whether the network interface is accelerated networking-enabled.
	EnableAcceleratedNetworking *bool

	// Specifies whether the network interface is FPGA networking-enabled.
	EnableFpga *bool

	// Whether IP forwarding enabled on this NIC.
	EnableIPForwarding *bool

	// The virtual machine scale set IP Configuration.
	IPConfigurations []VirtualMachineScaleSetUpdateIPConfiguration

	// The network security group.
	NetworkSecurityGroup *SubResource

	// Whether this is a primary NIC on a virtual machine.
	Primary *bool
}

func (v *VirtualMachineScaleSetUpdateNetworkConfigurationProperties) GetDNSSettings() (rv *VirtualMachineScaleSetNetworkConfigurationDNSSettings) {
	if v != nil {
		return v.DNSSettings
	}
	return
}

func (v *VirtualMachineScaleSetUpdateNetworkConfigurationProperties) GetDeleteOption() (rv *DeleteOptions) {
	if v != nil {
		return v.DeleteOption
	}
	return
}

func (v *VirtualMachineScaleSetUpdateNetworkConfigurationProperties) GetEnableAcceleratedNetworking() (rv bool) {
	if v != nil && v.EnableAcceleratedNetworking != nil {
		return *v.EnableAcceleratedNetworking
	}
	return
}

func (v *VirtualMachineScaleSetUpdateNetworkConfigurationProperties) GetEnableFpga() (rv bool) {
	if v != nil && v.EnableFpga != nil {
		return *v.EnableFpga
	}
	return
}

func (v *VirtualMachineScaleSetUpdateNetworkConfigurationProperties) GetEnableIPForwarding() (rv bool) {
	if v != nil && v.EnableIPForwarding != nil {
		return *v.EnableIPForwarding
	}
	return
}

func (v *VirtualMachineScaleSetUpdateNetworkConfigurationProperties) GetIPConfigurations() (rv []VirtualMachineScaleSetUpdateIPConfiguration) {
	if v != nil {
		return v.IPConfigurations
	}
	return
}

func (v *VirtualMachineScaleSetUpdateNetworkConfigurationProperties) GetNetworkSecurityGroup() (rv *SubResource) {
	if v != nil {
		return v.NetworkSecurityGroup
	}
	return
}

func (v *VirtualMachineScaleSetUpdateNetworkConfigurationProperties) GetPrimary() (rv bool) {
	if v != nil && v.Primary != nil {
		return *v.Primary
	}
	return
}

// VirtualMachineScaleSetUpdateNetworkProfile - Describes a virtual machine scale set network profile.
type VirtualMachineScaleSetUpdateNetworkProfile struct {
	// A reference to a load balancer probe used to determine the health of an instance in the virtual machine scale set. The
	// reference will be in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/loadBalancers/{loadBalancerName}/probes/{probeName}'.
	HealthProbe *APIEntityReference

	// specifies the Microsoft.Network API version used when creating networking resources in the Network Interface Configurations
	// for Virtual Machine Scale Set with orchestration mode 'Flexible'
	NetworkAPIVersion *NetworkAPIVersion

	// The list of network configurations.
	NetworkInterfaceConfigurations []VirtualMachineScaleSetUpdateNetworkConfiguration
}

func (v *VirtualMachineScaleSetUpdateNetworkProfile) GetHealthProbe() (rv *APIEntityReference) {
	if v != nil {
		return v.HealthProbe
	}
	return
}

func (v *VirtualMachineScaleSetUpdateNetworkProfile) GetNetworkAPIVersion() (rv *NetworkAPIVersion) {
	if v != nil {
		return v.NetworkAPIVersion
	}
	return
}

func (v *VirtualMachineScaleSetUpdateNetworkProfile) GetNetworkInterfaceConfigurations() (rv []VirtualMachineScaleSetUpdateNetworkConfiguration) {
	if v != nil {
		return v.NetworkInterfaceConfigurations
	}
	return
}

// VirtualMachineScaleSetUpdateOSDisk - Describes virtual machine scale set operating system disk Update Object. This should
// be used for Updating VMSS OS Disk.
type VirtualMachineScaleSetUpdateOSDisk struct {
	// The caching type.
	Caching *CachingTypes

	// Specifies the size of the operating system disk in gigabytes. This element can be used to overwrite the size of the disk
	// in a virtual machine image.
	// This value cannot be larger than 1023 GB
	DiskSizeGB *int32

	// The Source User Image VirtualHardDisk. This VirtualHardDisk will be copied before using it to attach to the Virtual Machine.
	// If SourceImage is provided, the destination VirtualHardDisk should not
	// exist.
	Image *VirtualHardDisk

	// The managed disk parameters.
	ManagedDisk *VirtualMachineScaleSetManagedDiskParameters

	// The list of virtual hard disk container uris.
	VhdContainers []string

	// Specifies whether writeAccelerator should be enabled or disabled on the disk.
	WriteAcceleratorEnabled *bool
}

func (v *VirtualMachineScaleSetUpdateOSDisk) GetCaching() (rv *CachingTypes) {
	if v != nil {
		return v.Caching
	}
	return
}

func (v *VirtualMachineScaleSetUpdateOSDisk) GetDiskSizeGB() (rv int32) {
	if v != nil && v.DiskSizeGB != nil {
		return *v.DiskSizeGB
	}
	return
}

func (v *VirtualMachineScaleSetUpdateOSDisk) GetImage() (rv *VirtualHardDisk) {
	if v != nil {
		return v.Image
	}
	return
}

func (v *VirtualMachineScaleSetUpdateOSDisk) GetManagedDisk() (rv *VirtualMachineScaleSetManagedDiskParameters) {
	if v != nil {
		return v.ManagedDisk
	}
	return
}

func (v *VirtualMachineScaleSetUpdateOSDisk) GetVhdContainers() (rv []string) {
	if v != nil {
		return v.VhdContainers
	}
	return
}

func (v *VirtualMachineScaleSetUpdateOSDisk) GetWriteAcceleratorEnabled() (rv bool) {
	if v != nil && v.WriteAcceleratorEnabled != nil {
		return *v.WriteAcceleratorEnabled
	}
	return
}

// VirtualMachineScaleSetUpdateOSProfile - Describes a virtual machine scale set OS profile.
type VirtualMachineScaleSetUpdateOSProfile struct {
	// A base-64 encoded string of custom data.
	CustomData *string

	// The Linux Configuration of the OS profile.
	LinuxConfiguration *LinuxConfiguration

	// The List of certificates for addition to the VM.
	Secrets []VaultSecretGroup

	// The Windows Configuration of the OS profile.
	WindowsConfiguration *WindowsConfiguration
}

func (v *VirtualMachineScaleSetUpdateOSProfile) GetCustomData() (rv string) {
	if v != nil && v.CustomData != nil {
		return *v.CustomData
	}
	return
}

func (v *VirtualMachineScaleSetUpdateOSProfile) GetLinuxConfiguration() (rv *LinuxConfiguration) {
	if v != nil {
		return v.LinuxConfiguration
	}
	return
}

func (v *VirtualMachineScaleSetUpdateOSProfile) GetSecrets() (rv []VaultSecretGroup) {
	if v != nil {
		return v.Secrets
	}
	return
}

func (v *VirtualMachineScaleSetUpdateOSProfile) GetWindowsConfiguration() (rv *WindowsConfiguration) {
	if v != nil {
		return v.WindowsConfiguration
	}
	return
}

// VirtualMachineScaleSetUpdateProperties - Describes the properties of a Virtual Machine Scale Set.
type VirtualMachineScaleSetUpdateProperties struct {
	// Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance:
	// whether the Virtual Machines have the capability to support attaching
	// managed data disks with UltraSSD_LRS storage account type.
	AdditionalCapabilities *AdditionalCapabilities

	// Policy for automatic repairs.
	AutomaticRepairsPolicy *AutomaticRepairsPolicy

	// When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This
	// property will hence ensure that the extensions do not run on the extra
	// overprovisioned VMs.
	DoNotRunExtensionsOnOverprovisionedVMs *bool

	// Specifies whether the Virtual Machine Scale Set should be overprovisioned.
	Overprovision *bool

	// Specifies information about the proximity placement group that the virtual machine scale set should be assigned to.
	// Minimum api-version: 2018-04-01.
	ProximityPlacementGroup *SubResource

	// Specifies the policies applied when scaling in Virtual Machines in the Virtual Machine Scale Set.
	ScaleInPolicy *ScaleInPolicy

	// When true this limits the scale set to a single placement group, of max size 100 virtual machines. NOTE: If singlePlacementGroup
	// is true, it may be modified to false. However, if singlePlacementGroup
	// is false, it may not be modified to true.
	SinglePlacementGroup *bool

	// The upgrade policy.
	UpgradePolicy *UpgradePolicy

	// The virtual machine profile.
	VirtualMachineProfile *VirtualMachineScaleSetUpdateVMProfile
}

func (v *VirtualMachineScaleSetUpdateProperties) GetAdditionalCapabilities() (rv *AdditionalCapabilities) {
	if v != nil {
		return v.AdditionalCapabilities
	}
	return
}

func (v *VirtualMachineScaleSetUpdateProperties) GetAutomaticRepairsPolicy() (rv *AutomaticRepairsPolicy) {
	if v != nil {
		return v.AutomaticRepairsPolicy
	}
	return
}

func (v *VirtualMachineScaleSetUpdateProperties) GetDoNotRunExtensionsOnOverprovisionedVMs() (rv bool) {
	if v != nil && v.DoNotRunExtensionsOnOverprovisionedVMs != nil {
		return *v.DoNotRunExtensionsOnOverprovisionedVMs
	}
	return
}

func (v *VirtualMachineScaleSetUpdateProperties) GetOverprovision() (rv bool) {
	if v != nil && v.Overprovision != nil {
		return *v.Overprovision
	}
	return
}

func (v *VirtualMachineScaleSetUpdateProperties) GetProximityPlacementGroup() (rv *SubResource) {
	if v != nil {
		return v.ProximityPlacementGroup
	}
	return
}

func (v *VirtualMachineScaleSetUpdateProperties) GetScaleInPolicy() (rv *ScaleInPolicy) {
	if v != nil {
		return v.ScaleInPolicy
	}
	return
}

func (v *VirtualMachineScaleSetUpdateProperties) GetSinglePlacementGroup() (rv bool) {
	if v != nil && v.SinglePlacementGroup != nil {
		return *v.SinglePlacementGroup
	}
	return
}

func (v *VirtualMachineScaleSetUpdateProperties) GetUpgradePolicy() (rv *UpgradePolicy) {
	if v != nil {
		return v.UpgradePolicy
	}
	return
}

func (v *VirtualMachineScaleSetUpdateProperties) GetVirtualMachineProfile() (rv *VirtualMachineScaleSetUpdateVMProfile) {
	if v != nil {
		return v.VirtualMachineProfile
	}
	return
}

// VirtualMachineScaleSetUpdatePublicIPAddressConfiguration - Describes a virtual machines scale set IP Configuration's PublicIPAddress
// configuration
type VirtualMachineScaleSetUpdatePublicIPAddressConfiguration struct {
	// The publicIP address configuration name.
	Name *string

	// Describes a virtual machines scale set IP Configuration's PublicIPAddress configuration
	Properties *VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties
}

func (v *VirtualMachineScaleSetUpdatePublicIPAddressConfiguration) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetUpdatePublicIPAddressConfiguration) GetProperties() (rv *VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

// VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties - Describes a virtual machines scale set IP Configuration's
// PublicIPAddress configuration
type VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties struct {
	// The dns settings to be applied on the publicIP addresses .
	DNSSettings *VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings

	// Specify what happens to the public IP when the VM is deleted
	DeleteOption *DeleteOptions

	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int32

	// The PublicIPPrefix from which to allocate publicIP addresses.
	PublicIPPrefix *SubResource
}

func (v *VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties) GetDNSSettings() (rv *VirtualMachineScaleSetPublicIPAddressConfigurationDNSSettings) {
	if v != nil {
		return v.DNSSettings
	}
	return
}

func (v *VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties) GetDeleteOption() (rv *DeleteOptions) {
	if v != nil {
		return v.DeleteOption
	}
	return
}

func (v *VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties) GetIdleTimeoutInMinutes() (rv int32) {
	if v != nil && v.IdleTimeoutInMinutes != nil {
		return *v.IdleTimeoutInMinutes
	}
	return
}

func (v *VirtualMachineScaleSetUpdatePublicIPAddressConfigurationProperties) GetPublicIPPrefix() (rv *SubResource) {
	if v != nil {
		return v.PublicIPPrefix
	}
	return
}

// VirtualMachineScaleSetUpdateStorageProfile - Describes a virtual machine scale set storage profile.
type VirtualMachineScaleSetUpdateStorageProfile struct {
	// The data disks.
	DataDisks []VirtualMachineScaleSetDataDisk

	// The image reference.
	ImageReference *ImageReference

	// The OS disk.
	OSDisk *VirtualMachineScaleSetUpdateOSDisk
}

func (v *VirtualMachineScaleSetUpdateStorageProfile) GetDataDisks() (rv []VirtualMachineScaleSetDataDisk) {
	if v != nil {
		return v.DataDisks
	}
	return
}

func (v *VirtualMachineScaleSetUpdateStorageProfile) GetImageReference() (rv *ImageReference) {
	if v != nil {
		return v.ImageReference
	}
	return
}

func (v *VirtualMachineScaleSetUpdateStorageProfile) GetOSDisk() (rv *VirtualMachineScaleSetUpdateOSDisk) {
	if v != nil {
		return v.OSDisk
	}
	return
}

// VirtualMachineScaleSetUpdateVMProfile - Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetUpdateVMProfile struct {
	// Specifies the billing related details of a Azure Spot VMSS.
	// Minimum api-version: 2019-03-01.
	BillingProfile *BillingProfile

	// The virtual machine scale set diagnostics profile.
	DiagnosticsProfile *DiagnosticsProfile

	// The virtual machine scale set extension profile.
	ExtensionProfile *VirtualMachineScaleSetExtensionProfile

	// The license type, which is for bring your own license scenario.
	LicenseType *string

	// The virtual machine scale set network profile.
	NetworkProfile *VirtualMachineScaleSetUpdateNetworkProfile

	// The virtual machine scale set OS profile.
	OSProfile *VirtualMachineScaleSetUpdateOSProfile

	// Specifies Scheduled Event related configurations.
	ScheduledEventsProfile *ScheduledEventsProfile

	// The virtual machine scale set Security profile
	SecurityProfile *SecurityProfile

	// The virtual machine scale set storage profile.
	StorageProfile *VirtualMachineScaleSetUpdateStorageProfile

	// UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here.
	// Minimum api-version: 2021-03-01
	UserData *string
}

func (v *VirtualMachineScaleSetUpdateVMProfile) GetBillingProfile() (rv *BillingProfile) {
	if v != nil {
		return v.BillingProfile
	}
	return
}

func (v *VirtualMachineScaleSetUpdateVMProfile) GetDiagnosticsProfile() (rv *DiagnosticsProfile) {
	if v != nil {
		return v.DiagnosticsProfile
	}
	return
}

func (v *VirtualMachineScaleSetUpdateVMProfile) GetExtensionProfile() (rv *VirtualMachineScaleSetExtensionProfile) {
	if v != nil {
		return v.ExtensionProfile
	}
	return
}

func (v *VirtualMachineScaleSetUpdateVMProfile) GetLicenseType() (rv string) {
	if v != nil && v.LicenseType != nil {
		return *v.LicenseType
	}
	return
}

func (v *VirtualMachineScaleSetUpdateVMProfile) GetNetworkProfile() (rv *VirtualMachineScaleSetUpdateNetworkProfile) {
	if v != nil {
		return v.NetworkProfile
	}
	return
}

func (v *VirtualMachineScaleSetUpdateVMProfile) GetOSProfile() (rv *VirtualMachineScaleSetUpdateOSProfile) {
	if v != nil {
		return v.OSProfile
	}
	return
}

func (v *VirtualMachineScaleSetUpdateVMProfile) GetScheduledEventsProfile() (rv *ScheduledEventsProfile) {
	if v != nil {
		return v.ScheduledEventsProfile
	}
	return
}

func (v *VirtualMachineScaleSetUpdateVMProfile) GetSecurityProfile() (rv *SecurityProfile) {
	if v != nil {
		return v.SecurityProfile
	}
	return
}

func (v *VirtualMachineScaleSetUpdateVMProfile) GetStorageProfile() (rv *VirtualMachineScaleSetUpdateStorageProfile) {
	if v != nil {
		return v.StorageProfile
	}
	return
}

func (v *VirtualMachineScaleSetUpdateVMProfile) GetUserData() (rv string) {
	if v != nil && v.UserData != nil {
		return *v.UserData
	}
	return
}

// VirtualMachineScaleSetVM - Describes a virtual machine scale set virtual machine.
type VirtualMachineScaleSetVM struct {
	// REQUIRED; Resource location
	Location *string

	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace
	// images. Before you can use a marketplace image from an API, you must
	// enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click
	// Want to deploy programmatically, Get Started ->. Enter any required
	// information and then click Save.
	Plan *Plan

	// Describes the properties of a virtual machine scale set virtual machine.
	Properties *VirtualMachineScaleSetVMProperties

	// Resource tags
	Tags map[string]*string

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; The virtual machine instance ID.
	InstanceID *string

	// READ-ONLY; Resource name
	Name *string

	// READ-ONLY; The virtual machine child extension resources.
	Resources []VirtualMachineExtension

	// READ-ONLY; The virtual machine SKU.
	SKU *SKU

	// READ-ONLY; Resource type
	Type *string

	// READ-ONLY; The virtual machine zones.
	Zones []string
}

func (v *VirtualMachineScaleSetVM) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualMachineScaleSetVM) GetPlan() (rv *Plan) {
	if v != nil {
		return v.Plan
	}
	return
}

func (v *VirtualMachineScaleSetVM) GetProperties() (rv *VirtualMachineScaleSetVMProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineScaleSetVM) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualMachineScaleSetVM) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineScaleSetVM) GetInstanceID() (rv string) {
	if v != nil && v.InstanceID != nil {
		return *v.InstanceID
	}
	return
}

func (v *VirtualMachineScaleSetVM) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetVM) GetResources() (rv []VirtualMachineExtension) {
	if v != nil {
		return v.Resources
	}
	return
}

func (v *VirtualMachineScaleSetVM) GetSKU() (rv *SKU) {
	if v != nil {
		return v.SKU
	}
	return
}

func (v *VirtualMachineScaleSetVM) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

func (v *VirtualMachineScaleSetVM) GetZones() (rv []string) {
	if v != nil {
		return v.Zones
	}
	return
}

// VirtualMachineScaleSetVMExtension - Describes a VMSS VM Extension.
type VirtualMachineScaleSetVMExtension struct {
	// Describes the properties of a Virtual Machine Extension.
	Properties *VirtualMachineExtensionProperties

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; The name of the extension.
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (v *VirtualMachineScaleSetVMExtension) GetProperties() (rv *VirtualMachineExtensionProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineScaleSetVMExtension) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineScaleSetVMExtension) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetVMExtension) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualMachineScaleSetVMExtensionUpdate - Describes a VMSS VM Extension.
type VirtualMachineScaleSetVMExtensionUpdate struct {
	// Describes the properties of a Virtual Machine Extension.
	Properties *VirtualMachineExtensionUpdateProperties

	// READ-ONLY; Resource Id
	ID *string

	// READ-ONLY; The name of the extension.
	Name *string

	// READ-ONLY; Resource type
	Type *string
}

func (v *VirtualMachineScaleSetVMExtensionUpdate) GetProperties() (rv *VirtualMachineExtensionUpdateProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineScaleSetVMExtensionUpdate) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualMachineScaleSetVMExtensionUpdate) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetVMExtensionUpdate) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualMachineScaleSetVMExtensionsListResult - The List VMSS VM Extension operation response
type VirtualMachineScaleSetVMExtensionsListResult struct {
	// The list of VMSS VM extensions
	Value []VirtualMachineScaleSetVMExtension
}

func (v *VirtualMachineScaleSetVMExtensionsListResult) GetValue() (rv []VirtualMachineScaleSetVMExtension) {
	if v != nil {
		return v.Value
	}
	return
}

// VirtualMachineScaleSetVMExtensionsSummary - Extensions summary for virtual machines of a virtual machine scale set.
type VirtualMachineScaleSetVMExtensionsSummary struct {
	// READ-ONLY; The extension name.
	Name *string

	// READ-ONLY; The extensions information.
	StatusesSummary []VirtualMachineStatusCodeCount
}

func (v *VirtualMachineScaleSetVMExtensionsSummary) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineScaleSetVMExtensionsSummary) GetStatusesSummary() (rv []VirtualMachineStatusCodeCount) {
	if v != nil {
		return v.StatusesSummary
	}
	return
}

// VirtualMachineScaleSetVMInstanceIDs - Specifies a list of virtual machine instance IDs from the VM scale set.
type VirtualMachineScaleSetVMInstanceIDs struct {
	// The virtual machine scale set instance ids. Omitting the virtual machine scale set instance ids will result in the operation
	// being performed on all virtual machines in the virtual machine scale set.
	InstanceIDs []string
}

func (v *VirtualMachineScaleSetVMInstanceIDs) GetInstanceIDs() (rv []string) {
	if v != nil {
		return v.InstanceIDs
	}
	return
}

// VirtualMachineScaleSetVMInstanceRequiredIDs - Specifies a list of virtual machine instance IDs from the VM scale set.
type VirtualMachineScaleSetVMInstanceRequiredIDs struct {
	// REQUIRED; The virtual machine scale set instance ids.
	InstanceIDs []string
}

func (v *VirtualMachineScaleSetVMInstanceRequiredIDs) GetInstanceIDs() (rv []string) {
	if v != nil {
		return v.InstanceIDs
	}
	return
}

// VirtualMachineScaleSetVMInstanceView - The instance view of a virtual machine scale set VM.
type VirtualMachineScaleSetVMInstanceView struct {
	// Boot Diagnostics is a debugging feature which allows you to view Console Output and Screenshot to diagnose VM status.
	// You can easily view the output of your console log.
	// Azure also enables you to see a screenshot of the VM from the hypervisor.
	BootDiagnostics *BootDiagnosticsInstanceView

	// The disks information.
	Disks []DiskInstanceView

	// The extensions information.
	Extensions []VirtualMachineExtensionInstanceView

	// The Maintenance Operation status on the virtual machine.
	MaintenanceRedeployStatus *MaintenanceRedeployStatus

	// The placement group in which the VM is running. If the VM is deallocated it will not have a placementGroupId.
	PlacementGroupID *string

	// The Fault Domain count.
	PlatformFaultDomain *int32

	// The Update Domain count.
	PlatformUpdateDomain *int32

	// The Remote desktop certificate thumbprint.
	RdpThumbPrint *string

	// The resource status information.
	Statuses []InstanceViewStatus

	// The VM Agent running on the virtual machine.
	VMAgent *VirtualMachineAgentInstanceView

	// READ-ONLY; Resource id of the dedicated host, on which the virtual machine is allocated through automatic placement, when
	// the virtual machine is associated with a dedicated host group that has automatic
	// placement enabled.
	// Minimum api-version: 2020-06-01.
	AssignedHost *string

	// READ-ONLY; The health status for the VM.
	VMHealth *VirtualMachineHealthStatus
}

func (v *VirtualMachineScaleSetVMInstanceView) GetBootDiagnostics() (rv *BootDiagnosticsInstanceView) {
	if v != nil {
		return v.BootDiagnostics
	}
	return
}

func (v *VirtualMachineScaleSetVMInstanceView) GetDisks() (rv []DiskInstanceView) {
	if v != nil {
		return v.Disks
	}
	return
}

func (v *VirtualMachineScaleSetVMInstanceView) GetExtensions() (rv []VirtualMachineExtensionInstanceView) {
	if v != nil {
		return v.Extensions
	}
	return
}

func (v *VirtualMachineScaleSetVMInstanceView) GetMaintenanceRedeployStatus() (rv *MaintenanceRedeployStatus) {
	if v != nil {
		return v.MaintenanceRedeployStatus
	}
	return
}

func (v *VirtualMachineScaleSetVMInstanceView) GetPlacementGroupID() (rv string) {
	if v != nil && v.PlacementGroupID != nil {
		return *v.PlacementGroupID
	}
	return
}

func (v *VirtualMachineScaleSetVMInstanceView) GetPlatformFaultDomain() (rv int32) {
	if v != nil && v.PlatformFaultDomain != nil {
		return *v.PlatformFaultDomain
	}
	return
}

func (v *VirtualMachineScaleSetVMInstanceView) GetPlatformUpdateDomain() (rv int32) {
	if v != nil && v.PlatformUpdateDomain != nil {
		return *v.PlatformUpdateDomain
	}
	return
}

func (v *VirtualMachineScaleSetVMInstanceView) GetRdpThumbPrint() (rv string) {
	if v != nil && v.RdpThumbPrint != nil {
		return *v.RdpThumbPrint
	}
	return
}

func (v *VirtualMachineScaleSetVMInstanceView) GetStatuses() (rv []InstanceViewStatus) {
	if v != nil {
		return v.Statuses
	}
	return
}

func (v *VirtualMachineScaleSetVMInstanceView) GetVMAgent() (rv *VirtualMachineAgentInstanceView) {
	if v != nil {
		return v.VMAgent
	}
	return
}

func (v *VirtualMachineScaleSetVMInstanceView) GetAssignedHost() (rv string) {
	if v != nil && v.AssignedHost != nil {
		return *v.AssignedHost
	}
	return
}

func (v *VirtualMachineScaleSetVMInstanceView) GetVMHealth() (rv *VirtualMachineHealthStatus) {
	if v != nil {
		return v.VMHealth
	}
	return
}

// VirtualMachineScaleSetVMListResult - The List Virtual Machine Scale Set VMs operation response.
type VirtualMachineScaleSetVMListResult struct {
	// REQUIRED; The list of virtual machine scale sets VMs.
	Value []VirtualMachineScaleSetVM

	// The uri to fetch the next page of Virtual Machine Scale Set VMs. Call ListNext() with this to fetch the next page of VMSS
	// VMs
	NextLink *string
}

func (v *VirtualMachineScaleSetVMListResult) GetValue() (rv []VirtualMachineScaleSetVM) {
	if v != nil {
		return v.Value
	}
	return
}

func (v *VirtualMachineScaleSetVMListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

// VirtualMachineScaleSetVMNetworkProfileConfiguration - Describes a virtual machine scale set VM network profile.
type VirtualMachineScaleSetVMNetworkProfileConfiguration struct {
	// The list of network configurations.
	NetworkInterfaceConfigurations []VirtualMachineScaleSetNetworkConfiguration
}

func (v *VirtualMachineScaleSetVMNetworkProfileConfiguration) GetNetworkInterfaceConfigurations() (rv []VirtualMachineScaleSetNetworkConfiguration) {
	if v != nil {
		return v.NetworkInterfaceConfigurations
	}
	return
}

// VirtualMachineScaleSetVMProfile - Describes a virtual machine scale set virtual machine profile.
type VirtualMachineScaleSetVMProfile struct {
	// Specifies the gallery applications that should be made available to the VM/VMSS
	ApplicationProfile *ApplicationProfile

	// Specifies the billing related details of a Azure Spot VMSS.
	// Minimum api-version: 2019-03-01.
	BillingProfile *BillingProfile

	// Specifies the capacity reservation related details of a scale set.
	// Minimum api-version: 2021-04-01.
	CapacityReservation *CapacityReservationProfile

	// Specifies the boot diagnostic settings state.
	// Minimum api-version: 2015-06-15.
	DiagnosticsProfile *DiagnosticsProfile

	// Specifies the eviction policy for the Azure Spot virtual machine and Azure Spot scale set.
	// For Azure Spot virtual machines, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2019-03-01.
	// For Azure Spot scale sets, both 'Deallocate' and 'Delete' are supported and the minimum api-version is 2017-10-30-preview.
	EvictionPolicy *VirtualMachineEvictionPolicyTypes

	// Specifies a collection of settings for extensions installed on virtual machines in the scale set.
	ExtensionProfile *VirtualMachineScaleSetExtensionProfile

	// Specifies the hardware profile related details of a scale set.
	// Minimum api-version: 2021-11-01.
	HardwareProfile *VirtualMachineScaleSetHardwareProfile

	// Specifies that the image or disk that is being used was licensed on-premises.
	// Possible values for Windows Server operating system are:
	// WindowsClient
	// WindowsServer
	// Possible values for Linux Server operating system are:
	// RHELBYOS (for RHEL)
	// SLESBYOS (for SUSE)
	// For more information, see Azure Hybrid Use Benefit for Windows Server [https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing]
	// Azure Hybrid Use Benefit for Linux Server [https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux]
	// Minimum api-version: 2015-06-15
	LicenseType *string

	// Specifies properties of the network interfaces of the virtual machines in the scale set.
	NetworkProfile *VirtualMachineScaleSetNetworkProfile

	// Specifies the operating system settings for the virtual machines in the scale set.
	OSProfile *VirtualMachineScaleSetOSProfile

	// Specifies the priority for the virtual machines in the scale set.
	// Minimum api-version: 2017-10-30-preview
	Priority *VirtualMachinePriorityTypes

	// Specifies Scheduled Event related configurations.
	ScheduledEventsProfile *ScheduledEventsProfile

	// Specifies the Security related profile settings for the virtual machines in the scale set.
	SecurityProfile *SecurityProfile

	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *VirtualMachineScaleSetStorageProfile

	// UserData for the virtual machines in the scale set, which must be base-64 encoded. Customer should not pass any secrets
	// in here.
	// Minimum api-version: 2021-03-01
	UserData *string
}

func (v *VirtualMachineScaleSetVMProfile) GetApplicationProfile() (rv *ApplicationProfile) {
	if v != nil {
		return v.ApplicationProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetBillingProfile() (rv *BillingProfile) {
	if v != nil {
		return v.BillingProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetCapacityReservation() (rv *CapacityReservationProfile) {
	if v != nil {
		return v.CapacityReservation
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetDiagnosticsProfile() (rv *DiagnosticsProfile) {
	if v != nil {
		return v.DiagnosticsProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetEvictionPolicy() (rv *VirtualMachineEvictionPolicyTypes) {
	if v != nil {
		return v.EvictionPolicy
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetExtensionProfile() (rv *VirtualMachineScaleSetExtensionProfile) {
	if v != nil {
		return v.ExtensionProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetHardwareProfile() (rv *VirtualMachineScaleSetHardwareProfile) {
	if v != nil {
		return v.HardwareProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetLicenseType() (rv string) {
	if v != nil && v.LicenseType != nil {
		return *v.LicenseType
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetNetworkProfile() (rv *VirtualMachineScaleSetNetworkProfile) {
	if v != nil {
		return v.NetworkProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetOSProfile() (rv *VirtualMachineScaleSetOSProfile) {
	if v != nil {
		return v.OSProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetPriority() (rv *VirtualMachinePriorityTypes) {
	if v != nil {
		return v.Priority
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetScheduledEventsProfile() (rv *ScheduledEventsProfile) {
	if v != nil {
		return v.ScheduledEventsProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetSecurityProfile() (rv *SecurityProfile) {
	if v != nil {
		return v.SecurityProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetStorageProfile() (rv *VirtualMachineScaleSetStorageProfile) {
	if v != nil {
		return v.StorageProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProfile) GetUserData() (rv string) {
	if v != nil && v.UserData != nil {
		return *v.UserData
	}
	return
}

// VirtualMachineScaleSetVMProperties - Describes the properties of a virtual machine scale set virtual machine.
type VirtualMachineScaleSetVMProperties struct {
	// Specifies additional capabilities enabled or disabled on the virtual machine in the scale set. For instance: whether the
	// virtual machine has the capability to support attaching managed data disks with
	// UltraSSD_LRS storage account type.
	AdditionalCapabilities *AdditionalCapabilities

	// Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified
	// in the same availability set are allocated to different nodes to maximize
	// availability. For more information about availability sets, see Availability sets overview [https://docs.microsoft.com/azure/virtual-machines/availability-set-overview].
	// For more information on Azure planned maintenance, see Maintenance and updates for Virtual Machines in Azure [https://docs.microsoft.com/azure/virtual-machines/maintenance-and-updates]
	// Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability
	// set.
	AvailabilitySet *SubResource

	// Specifies the boot diagnostic settings state.
	// Minimum api-version: 2015-06-15.
	DiagnosticsProfile *DiagnosticsProfile

	// Specifies the hardware settings for the virtual machine.
	HardwareProfile *HardwareProfile

	// Specifies that the image or disk that is being used was licensed on-premises.
	// Possible values for Windows Server operating system are:
	// WindowsClient
	// WindowsServer
	// Possible values for Linux Server operating system are:
	// RHELBYOS (for RHEL)
	// SLESBYOS (for SUSE)
	// For more information, see Azure Hybrid Use Benefit for Windows Server [https://docs.microsoft.com/azure/virtual-machines/windows/hybrid-use-benefit-licensing]
	// Azure Hybrid Use Benefit for Linux Server [https://docs.microsoft.com/azure/virtual-machines/linux/azure-hybrid-benefit-linux]
	// Minimum api-version: 2015-06-15
	LicenseType *string

	// Specifies the network interfaces of the virtual machine.
	NetworkProfile *NetworkProfile

	// Specifies the network profile configuration of the virtual machine.
	NetworkProfileConfiguration *VirtualMachineScaleSetVMNetworkProfileConfiguration

	// Specifies the operating system settings for the virtual machine.
	OSProfile *OSProfile

	// Specifies the protection policy of the virtual machine.
	ProtectionPolicy *VirtualMachineScaleSetVMProtectionPolicy

	// Specifies the Security related profile settings for the virtual machine.
	SecurityProfile *SecurityProfile

	// Specifies the storage settings for the virtual machine disks.
	StorageProfile *StorageProfile

	// UserData for the VM, which must be base-64 encoded. Customer should not pass any secrets in here.
	// Minimum api-version: 2021-03-01
	UserData *string

	// READ-ONLY; The virtual machine instance view.
	InstanceView *VirtualMachineScaleSetVMInstanceView

	// READ-ONLY; Specifies whether the latest model has been applied to the virtual machine.
	LatestModelApplied *bool

	// READ-ONLY; Specifies whether the model applied to the virtual machine is the model of the virtual machine scale set or
	// the customized model for the virtual machine.
	ModelDefinitionApplied *string

	// READ-ONLY; The provisioning state, which only appears in the response.
	ProvisioningState *string

	// READ-ONLY; Azure VM unique ID.
	VMID *string
}

func (v *VirtualMachineScaleSetVMProperties) GetAdditionalCapabilities() (rv *AdditionalCapabilities) {
	if v != nil {
		return v.AdditionalCapabilities
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetAvailabilitySet() (rv *SubResource) {
	if v != nil {
		return v.AvailabilitySet
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetDiagnosticsProfile() (rv *DiagnosticsProfile) {
	if v != nil {
		return v.DiagnosticsProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetHardwareProfile() (rv *HardwareProfile) {
	if v != nil {
		return v.HardwareProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetLicenseType() (rv string) {
	if v != nil && v.LicenseType != nil {
		return *v.LicenseType
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetNetworkProfile() (rv *NetworkProfile) {
	if v != nil {
		return v.NetworkProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetNetworkProfileConfiguration() (rv *VirtualMachineScaleSetVMNetworkProfileConfiguration) {
	if v != nil {
		return v.NetworkProfileConfiguration
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetOSProfile() (rv *OSProfile) {
	if v != nil {
		return v.OSProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetProtectionPolicy() (rv *VirtualMachineScaleSetVMProtectionPolicy) {
	if v != nil {
		return v.ProtectionPolicy
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetSecurityProfile() (rv *SecurityProfile) {
	if v != nil {
		return v.SecurityProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetStorageProfile() (rv *StorageProfile) {
	if v != nil {
		return v.StorageProfile
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetUserData() (rv string) {
	if v != nil && v.UserData != nil {
		return *v.UserData
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetInstanceView() (rv *VirtualMachineScaleSetVMInstanceView) {
	if v != nil {
		return v.InstanceView
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetLatestModelApplied() (rv bool) {
	if v != nil && v.LatestModelApplied != nil {
		return *v.LatestModelApplied
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetModelDefinitionApplied() (rv string) {
	if v != nil && v.ModelDefinitionApplied != nil {
		return *v.ModelDefinitionApplied
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetProvisioningState() (rv string) {
	if v != nil && v.ProvisioningState != nil {
		return *v.ProvisioningState
	}
	return
}

func (v *VirtualMachineScaleSetVMProperties) GetVMID() (rv string) {
	if v != nil && v.VMID != nil {
		return *v.VMID
	}
	return
}

// VirtualMachineScaleSetVMProtectionPolicy - The protection policy of a virtual machine scale set VM.
type VirtualMachineScaleSetVMProtectionPolicy struct {
	// Indicates that the virtual machine scale set VM shouldn't be considered for deletion during a scale-in operation.
	ProtectFromScaleIn *bool

	// Indicates that model updates or actions (including scale-in) initiated on the virtual machine scale set should not be applied
	// to the virtual machine scale set VM.
	ProtectFromScaleSetActions *bool
}

func (v *VirtualMachineScaleSetVMProtectionPolicy) GetProtectFromScaleIn() (rv bool) {
	if v != nil && v.ProtectFromScaleIn != nil {
		return *v.ProtectFromScaleIn
	}
	return
}

func (v *VirtualMachineScaleSetVMProtectionPolicy) GetProtectFromScaleSetActions() (rv bool) {
	if v != nil && v.ProtectFromScaleSetActions != nil {
		return *v.ProtectFromScaleSetActions
	}
	return
}

// VirtualMachineScaleSetVMReimageParameters - Describes a Virtual Machine Scale Set VM Reimage Parameters.
type VirtualMachineScaleSetVMReimageParameters struct {
	// Specifies whether to reimage temp disk. Default value: false. Note: This temp disk reimage parameter is only supported
	// for VM/VMSS with Ephemeral OS disk.
	TempDisk *bool
}

func (v *VirtualMachineScaleSetVMReimageParameters) GetTempDisk() (rv bool) {
	if v != nil && v.TempDisk != nil {
		return *v.TempDisk
	}
	return
}

// VirtualMachineSize - Describes the properties of a VM size.
type VirtualMachineSize struct {
	// The maximum number of data disks that can be attached to the virtual machine size.
	MaxDataDiskCount *int32

	// The amount of memory, in MB, supported by the virtual machine size.
	MemoryInMB *int32

	// The name of the virtual machine size.
	Name *string

	// The number of cores supported by the virtual machine size. For Constrained vCPU capable VM sizes, this number represents
	// the total vCPUs of quota that the VM uses. For accurate vCPU count, please
	// refer to https://docs.microsoft.com/azure/virtual-machines/constrained-vcpu or https://docs.microsoft.com/rest/api/compute/resourceskus/list
	NumberOfCores *int32

	// The OS disk size, in MB, allowed by the virtual machine size.
	OSDiskSizeInMB *int32

	// The resource disk size, in MB, allowed by the virtual machine size.
	ResourceDiskSizeInMB *int32
}

func (v *VirtualMachineSize) GetMaxDataDiskCount() (rv int32) {
	if v != nil && v.MaxDataDiskCount != nil {
		return *v.MaxDataDiskCount
	}
	return
}

func (v *VirtualMachineSize) GetMemoryInMB() (rv int32) {
	if v != nil && v.MemoryInMB != nil {
		return *v.MemoryInMB
	}
	return
}

func (v *VirtualMachineSize) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineSize) GetNumberOfCores() (rv int32) {
	if v != nil && v.NumberOfCores != nil {
		return *v.NumberOfCores
	}
	return
}

func (v *VirtualMachineSize) GetOSDiskSizeInMB() (rv int32) {
	if v != nil && v.OSDiskSizeInMB != nil {
		return *v.OSDiskSizeInMB
	}
	return
}

func (v *VirtualMachineSize) GetResourceDiskSizeInMB() (rv int32) {
	if v != nil && v.ResourceDiskSizeInMB != nil {
		return *v.ResourceDiskSizeInMB
	}
	return
}

// VirtualMachineSizeListResult - The List Virtual Machine operation response.
type VirtualMachineSizeListResult struct {
	// The list of virtual machine sizes.
	Value []VirtualMachineSize
}

func (v *VirtualMachineSizeListResult) GetValue() (rv []VirtualMachineSize) {
	if v != nil {
		return v.Value
	}
	return
}

// VirtualMachineSoftwarePatchProperties - Describes the properties of a Virtual Machine software patch.
type VirtualMachineSoftwarePatchProperties struct {
	// READ-ONLY; The activity ID of the operation that produced this result. It is used to correlate across CRP and extension
	// logs.
	ActivityID *string

	// READ-ONLY; Describes the availability of a given patch.
	AssessmentState *PatchAssessmentState

	// READ-ONLY; The classification(s) of the patch as provided by the patch publisher.
	Classifications []string

	// READ-ONLY; The KBID of the patch. Only applies to Windows patches.
	KbID *string

	// READ-ONLY; The UTC timestamp of the last update to this patch record.
	LastModifiedDateTime *time.Time

	// READ-ONLY; The friendly name of the patch.
	Name *string

	// READ-ONLY; A unique identifier for the patch.
	PatchID *string

	// READ-ONLY; The UTC timestamp when the repository published this patch.
	PublishedDate *time.Time

	// READ-ONLY; Describes the reboot requirements of the patch.
	RebootBehavior *VMGuestPatchRebootBehavior

	// READ-ONLY; The version number of the patch. This property applies only to Linux patches.
	Version *string
}

func (v *VirtualMachineSoftwarePatchProperties) GetActivityID() (rv string) {
	if v != nil && v.ActivityID != nil {
		return *v.ActivityID
	}
	return
}

func (v *VirtualMachineSoftwarePatchProperties) GetAssessmentState() (rv *PatchAssessmentState) {
	if v != nil {
		return v.AssessmentState
	}
	return
}

func (v *VirtualMachineSoftwarePatchProperties) GetClassifications() (rv []string) {
	if v != nil {
		return v.Classifications
	}
	return
}

func (v *VirtualMachineSoftwarePatchProperties) GetKbID() (rv string) {
	if v != nil && v.KbID != nil {
		return *v.KbID
	}
	return
}

func (v *VirtualMachineSoftwarePatchProperties) GetLastModifiedDateTime() (rv *time.Time) {
	if v != nil {
		return v.LastModifiedDateTime
	}
	return
}

func (v *VirtualMachineSoftwarePatchProperties) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualMachineSoftwarePatchProperties) GetPatchID() (rv string) {
	if v != nil && v.PatchID != nil {
		return *v.PatchID
	}
	return
}

func (v *VirtualMachineSoftwarePatchProperties) GetPublishedDate() (rv *time.Time) {
	if v != nil {
		return v.PublishedDate
	}
	return
}

func (v *VirtualMachineSoftwarePatchProperties) GetRebootBehavior() (rv *VMGuestPatchRebootBehavior) {
	if v != nil {
		return v.RebootBehavior
	}
	return
}

func (v *VirtualMachineSoftwarePatchProperties) GetVersion() (rv string) {
	if v != nil && v.Version != nil {
		return *v.Version
	}
	return
}

// VirtualMachineStatusCodeCount - The status code and count of the virtual machine scale set instance view status summary.
type VirtualMachineStatusCodeCount struct {
	// READ-ONLY; The instance view status code.
	Code *string

	// READ-ONLY; The number of instances having a particular status code.
	Count *int32
}

func (v *VirtualMachineStatusCodeCount) GetCode() (rv string) {
	if v != nil && v.Code != nil {
		return *v.Code
	}
	return
}

func (v *VirtualMachineStatusCodeCount) GetCount() (rv int32) {
	if v != nil && v.Count != nil {
		return *v.Count
	}
	return
}

// VirtualMachineUpdate - Describes a Virtual Machine Update.
type VirtualMachineUpdate struct {
	// The identity of the virtual machine, if configured.
	Identity *VirtualMachineIdentity

	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace
	// images. Before you can use a marketplace image from an API, you must
	// enable the image for programmatic use. In the Azure portal, find the marketplace image that you want to use and then click
	// Want to deploy programmatically, Get Started ->. Enter any required
	// information and then click Save.
	Plan *Plan

	// Describes the properties of a Virtual Machine.
	Properties *VirtualMachineProperties

	// Resource tags
	Tags map[string]*string

	// The virtual machine zones.
	Zones []string
}

func (v *VirtualMachineUpdate) GetIdentity() (rv *VirtualMachineIdentity) {
	if v != nil {
		return v.Identity
	}
	return
}

func (v *VirtualMachineUpdate) GetPlan() (rv *Plan) {
	if v != nil {
		return v.Plan
	}
	return
}

func (v *VirtualMachineUpdate) GetProperties() (rv *VirtualMachineProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualMachineUpdate) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualMachineUpdate) GetZones() (rv []string) {
	if v != nil {
		return v.Zones
	}
	return
}

// WinRMConfiguration - Describes Windows Remote Management configuration of the VM
type WinRMConfiguration struct {
	// The list of Windows Remote Management listeners
	Listeners []WinRMListener
}

func (w *WinRMConfiguration) GetListeners() (rv []WinRMListener) {
	if w != nil {
		return w.Listeners
	}
	return
}

// WinRMListener - Describes Protocol and thumbprint of Windows Remote Management listener
type WinRMListener struct {
	// This is the URL of a certificate that has been uploaded to Key Vault as a secret. For adding a secret to the Key Vault,
	// see Add a key or secret to the key vault
	// [https://docs.microsoft.com/azure/key-vault/key-vault-get-started/#add]. In this case, your certificate needs to be It
	// is the Base64 encoding of the following JSON Object which is encoded in UTF-8:
	// {
	// "data":"",
	// "dataType":"pfx",
	// "password":""
	// }
	// To install certificates on a virtual machine it is recommended to use the Azure Key Vault virtual machine extension for
	// Linux
	// [https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-linux] or the Azure Key Vault virtual machine extension
	// for Windows
	// [https://docs.microsoft.com/azure/virtual-machines/extensions/key-vault-windows].
	CertificateURL *string

	// Specifies the protocol of WinRM listener.
	// Possible values are:
	// http
	// https
	Protocol *ProtocolTypes
}

func (w *WinRMListener) GetCertificateURL() (rv string) {
	if w != nil && w.CertificateURL != nil {
		return *w.CertificateURL
	}
	return
}

func (w *WinRMListener) GetProtocol() (rv *ProtocolTypes) {
	if w != nil {
		return w.Protocol
	}
	return
}

// WindowsConfiguration - Specifies Windows operating system settings on the virtual machine.
type WindowsConfiguration struct {
	// Specifies additional base-64 encoded XML formatted information that can be included in the Unattend.xml file, which is
	// used by Windows Setup.
	AdditionalUnattendContent []AdditionalUnattendContent

	// Indicates whether Automatic Updates is enabled for the Windows virtual machine. Default value is true.
	// For virtual machine scale sets, this property can be updated and updates will take effect on OS reprovisioning.
	EnableAutomaticUpdates *bool

	// [Preview Feature] Specifies settings related to VM Guest Patching on Windows.
	PatchSettings *PatchSettings

	// Indicates whether virtual machine agent should be provisioned on the virtual machine.
	// When this property is not specified in the request body, default behavior is to set it to true. This will ensure that VM
	// Agent is installed on the VM so that extensions can be added to the VM later.
	ProvisionVMAgent *bool

	// Specifies the time zone of the virtual machine. e.g. "Pacific Standard Time".
	// Possible values can be TimeZoneInfo.Id [https://docs.microsoft.com/dotnet/api/system.timezoneinfo.id?#System_TimeZoneInfo_Id]
	// value from time zones returned by TimeZoneInfo.GetSystemTimeZones
	// [https://docs.microsoft.com/dotnet/api/system.timezoneinfo.getsystemtimezones].
	TimeZone *string

	// Specifies the Windows Remote Management listeners. This enables remote Windows PowerShell.
	WinRM *WinRMConfiguration
}

func (w *WindowsConfiguration) GetAdditionalUnattendContent() (rv []AdditionalUnattendContent) {
	if w != nil {
		return w.AdditionalUnattendContent
	}
	return
}

func (w *WindowsConfiguration) GetEnableAutomaticUpdates() (rv bool) {
	if w != nil && w.EnableAutomaticUpdates != nil {
		return *w.EnableAutomaticUpdates
	}
	return
}

func (w *WindowsConfiguration) GetPatchSettings() (rv *PatchSettings) {
	if w != nil {
		return w.PatchSettings
	}
	return
}

func (w *WindowsConfiguration) GetProvisionVMAgent() (rv bool) {
	if w != nil && w.ProvisionVMAgent != nil {
		return *w.ProvisionVMAgent
	}
	return
}

func (w *WindowsConfiguration) GetTimeZone() (rv string) {
	if w != nil && w.TimeZone != nil {
		return *w.TimeZone
	}
	return
}

func (w *WindowsConfiguration) GetWinRM() (rv *WinRMConfiguration) {
	if w != nil {
		return w.WinRM
	}
	return
}

// WindowsParameters - Input for InstallPatches on a Windows VM, as directly received by the API
type WindowsParameters struct {
	// The update classifications to select when installing patches for Windows.
	ClassificationsToInclude []VMGuestPatchClassificationWindows

	// Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true.
	ExcludeKbsRequiringReboot *bool

	// Kbs to exclude in the patch operation
	KbNumbersToExclude []string

	// Kbs to include in the patch operation
	KbNumbersToInclude []string

	// This is used to install patches that were published on or before this given max published date.
	MaxPatchPublishDate *time.Time
}

func (w *WindowsParameters) GetClassificationsToInclude() (rv []VMGuestPatchClassificationWindows) {
	if w != nil {
		return w.ClassificationsToInclude
	}
	return
}

func (w *WindowsParameters) GetExcludeKbsRequiringReboot() (rv bool) {
	if w != nil && w.ExcludeKbsRequiringReboot != nil {
		return *w.ExcludeKbsRequiringReboot
	}
	return
}

func (w *WindowsParameters) GetKbNumbersToExclude() (rv []string) {
	if w != nil {
		return w.KbNumbersToExclude
	}
	return
}

func (w *WindowsParameters) GetKbNumbersToInclude() (rv []string) {
	if w != nil {
		return w.KbNumbersToInclude
	}
	return
}

func (w *WindowsParameters) GetMaxPatchPublishDate() (rv *time.Time) {
	if w != nil {
		return w.MaxPatchPublishDate
	}
	return
}
