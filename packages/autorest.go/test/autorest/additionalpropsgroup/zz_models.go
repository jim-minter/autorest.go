//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package additionalpropsgroup

type CatAPTrue struct {
	// REQUIRED
	ID *int32

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
	Friendly             *bool
	Name                 *string

	// READ-ONLY
	Status *bool
}

func (c *CatAPTrue) GetID() (rv int32) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *CatAPTrue) GetAdditionalProperties() (rv map[string]any) {
	if c != nil {
		return c.AdditionalProperties
	}
	return
}

func (c *CatAPTrue) GetFriendly() (rv bool) {
	if c != nil && c.Friendly != nil {
		return *c.Friendly
	}
	return
}

func (c *CatAPTrue) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CatAPTrue) GetStatus() (rv bool) {
	if c != nil && c.Status != nil {
		return *c.Status
	}
	return
}

type PetAPInProperties struct {
	// REQUIRED
	ID *int32

	// Dictionary of
	AdditionalProperties map[string]*float32
	Name                 *string

	// READ-ONLY
	Status *bool
}

func (p *PetAPInProperties) GetID() (rv int32) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PetAPInProperties) GetAdditionalProperties() (rv map[string]*float32) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PetAPInProperties) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PetAPInProperties) GetStatus() (rv bool) {
	if p != nil && p.Status != nil {
		return *p.Status
	}
	return
}

type PetAPInPropertiesWithAPString struct {
	// REQUIRED
	ID *int32

	// REQUIRED
	ODataLocation *string

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]*string

	// Dictionary of
	AdditionalProperties1 map[string]*float32
	Name                  *string

	// READ-ONLY
	Status *bool
}

func (p *PetAPInPropertiesWithAPString) GetID() (rv int32) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PetAPInPropertiesWithAPString) GetODataLocation() (rv string) {
	if p != nil && p.ODataLocation != nil {
		return *p.ODataLocation
	}
	return
}

func (p *PetAPInPropertiesWithAPString) GetAdditionalProperties() (rv map[string]*string) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PetAPInPropertiesWithAPString) GetAdditionalProperties1() (rv map[string]*float32) {
	if p != nil {
		return p.AdditionalProperties1
	}
	return
}

func (p *PetAPInPropertiesWithAPString) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PetAPInPropertiesWithAPString) GetStatus() (rv bool) {
	if p != nil && p.Status != nil {
		return *p.Status
	}
	return
}

type PetAPObject struct {
	// REQUIRED
	ID *int32

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
	Name                 *string

	// READ-ONLY
	Status *bool
}

func (p *PetAPObject) GetID() (rv int32) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PetAPObject) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PetAPObject) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PetAPObject) GetStatus() (rv bool) {
	if p != nil && p.Status != nil {
		return *p.Status
	}
	return
}

type PetAPString struct {
	// REQUIRED
	ID *int32

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]*string
	Name                 *string

	// READ-ONLY
	Status *bool
}

func (p *PetAPString) GetID() (rv int32) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PetAPString) GetAdditionalProperties() (rv map[string]*string) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PetAPString) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PetAPString) GetStatus() (rv bool) {
	if p != nil && p.Status != nil {
		return *p.Status
	}
	return
}

type PetAPTrue struct {
	// REQUIRED
	ID *int32

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
	Name                 *string

	// READ-ONLY
	Status *bool
}

func (p *PetAPTrue) GetID() (rv int32) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PetAPTrue) GetAdditionalProperties() (rv map[string]any) {
	if p != nil {
		return p.AdditionalProperties
	}
	return
}

func (p *PetAPTrue) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PetAPTrue) GetStatus() (rv bool) {
	if p != nil && p.Status != nil {
		return *p.Status
	}
	return
}
