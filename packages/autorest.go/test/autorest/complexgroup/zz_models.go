//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package complexgroup

import "time"

type ArrayWrapper struct {
	Array []*string
}

func (a *ArrayWrapper) GetArray() (rv []*string) {
	if a != nil {
		return a.Array
	}
	return
}

type Basic struct {
	Color *CMYKColors

	// Basic Id
	ID *int32

	// Name property with a very long description that does not fit on a single line and a line break.
	Name *string
}

func (b *Basic) GetColor() (rv *CMYKColors) {
	if b != nil {
		return b.Color
	}
	return
}

func (b *Basic) GetID() (rv int32) {
	if b != nil && b.ID != nil {
		return *b.ID
	}
	return
}

func (b *Basic) GetName() (rv string) {
	if b != nil && b.Name != nil {
		return *b.Name
	}
	return
}

type BooleanWrapper struct {
	FieldFalse *bool
	FieldTrue  *bool
}

func (b *BooleanWrapper) GetFieldFalse() (rv bool) {
	if b != nil && b.FieldFalse != nil {
		return *b.FieldFalse
	}
	return
}

func (b *BooleanWrapper) GetFieldTrue() (rv bool) {
	if b != nil && b.FieldTrue != nil {
		return *b.FieldTrue
	}
	return
}

type ByteWrapper struct {
	Field []byte
}

func (b *ByteWrapper) GetField() (rv []byte) {
	if b != nil {
		return b.Field
	}
	return
}

type Cookiecuttershark struct {
	// REQUIRED
	Birthday *time.Time

	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length   *float32
	Age      *int32
	Siblings []FishClassification
	Species  *string
}

func (c *Cookiecuttershark) GetBirthday() (rv *time.Time) {
	if c != nil {
		return c.Birthday
	}
	return
}

func (c *Cookiecuttershark) GetFishtype() (rv string) {
	if c != nil && c.Fishtype != nil {
		return *c.Fishtype
	}
	return
}

func (c *Cookiecuttershark) GetLength() (rv float32) {
	if c != nil && c.Length != nil {
		return *c.Length
	}
	return
}

func (c *Cookiecuttershark) GetAge() (rv int32) {
	if c != nil && c.Age != nil {
		return *c.Age
	}
	return
}

func (c *Cookiecuttershark) GetSiblings() (rv []FishClassification) {
	if c != nil {
		return c.Siblings
	}
	return
}

func (c *Cookiecuttershark) GetSpecies() (rv string) {
	if c != nil && c.Species != nil {
		return *c.Species
	}
	return
}

// GetFish implements the FishClassification interface for type Cookiecuttershark.
func (c *Cookiecuttershark) GetFish() *Fish {
	return &Fish{
		Fishtype: c.Fishtype,
		Length:   c.Length,
		Siblings: c.Siblings,
		Species:  c.Species,
	}
}

// GetShark implements the SharkClassification interface for type Cookiecuttershark.
func (c *Cookiecuttershark) GetShark() *Shark {
	return &Shark{
		Age:      c.Age,
		Birthday: c.Birthday,
		Fishtype: c.Fishtype,
		Length:   c.Length,
		Siblings: c.Siblings,
		Species:  c.Species,
	}
}

type DateWrapper struct {
	Field *time.Time
	Leap  *time.Time
}

func (d *DateWrapper) GetField() (rv *time.Time) {
	if d != nil {
		return d.Field
	}
	return
}

func (d *DateWrapper) GetLeap() (rv *time.Time) {
	if d != nil {
		return d.Leap
	}
	return
}

type DatetimeWrapper struct {
	Field *time.Time
	Now   *time.Time
}

func (d *DatetimeWrapper) GetField() (rv *time.Time) {
	if d != nil {
		return d.Field
	}
	return
}

func (d *DatetimeWrapper) GetNow() (rv *time.Time) {
	if d != nil {
		return d.Now
	}
	return
}

type Datetimerfc1123Wrapper struct {
	Field *time.Time
	Now   *time.Time
}

func (d *Datetimerfc1123Wrapper) GetField() (rv *time.Time) {
	if d != nil {
		return d.Field
	}
	return
}

func (d *Datetimerfc1123Wrapper) GetNow() (rv *time.Time) {
	if d != nil {
		return d.Now
	}
	return
}

type DictionaryWrapper struct {
	// Dictionary of
	DefaultProgram map[string]*string
}

func (d *DictionaryWrapper) GetDefaultProgram() (rv map[string]*string) {
	if d != nil {
		return d.DefaultProgram
	}
	return
}

type Dog struct {
	Food *string
	ID   *int32
	Name *string
}

func (d *Dog) GetFood() (rv string) {
	if d != nil && d.Food != nil {
		return *d.Food
	}
	return
}

func (d *Dog) GetID() (rv int32) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *Dog) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

type DotFish struct {
	// REQUIRED
	FishType *string
	Species  *string
}

func (d *DotFish) GetFishType() (rv string) {
	if d != nil && d.FishType != nil {
		return *d.FishType
	}
	return
}

func (d *DotFish) GetSpecies() (rv string) {
	if d != nil && d.Species != nil {
		return *d.Species
	}
	return
}

// GetDotFish implements the DotFishClassification interface for type DotFish.
func (d *DotFish) GetDotFish() *DotFish { return d }

type DotFishMarket struct {
	Fishes       []DotFishClassification
	Salmons      []*DotSalmon
	SampleFish   DotFishClassification
	SampleSalmon *DotSalmon
}

func (d *DotFishMarket) GetFishes() (rv []DotFishClassification) {
	if d != nil {
		return d.Fishes
	}
	return
}

func (d *DotFishMarket) GetSalmons() (rv []*DotSalmon) {
	if d != nil {
		return d.Salmons
	}
	return
}

func (d *DotFishMarket) GetSampleFish() (rv DotFishClassification) {
	if d != nil {
		return d.SampleFish
	}
	return
}

func (d *DotFishMarket) GetSampleSalmon() (rv *DotSalmon) {
	if d != nil {
		return d.SampleSalmon
	}
	return
}

type DotSalmon struct {
	// REQUIRED
	FishType *string
	Iswild   *bool
	Location *string
	Species  *string
}

func (d *DotSalmon) GetFishType() (rv string) {
	if d != nil && d.FishType != nil {
		return *d.FishType
	}
	return
}

func (d *DotSalmon) GetIswild() (rv bool) {
	if d != nil && d.Iswild != nil {
		return *d.Iswild
	}
	return
}

func (d *DotSalmon) GetLocation() (rv string) {
	if d != nil && d.Location != nil {
		return *d.Location
	}
	return
}

func (d *DotSalmon) GetSpecies() (rv string) {
	if d != nil && d.Species != nil {
		return *d.Species
	}
	return
}

// GetDotFish implements the DotFishClassification interface for type DotSalmon.
func (d *DotSalmon) GetDotFish() *DotFish {
	return &DotFish{
		FishType: d.FishType,
		Species:  d.Species,
	}
}

type DoubleWrapper struct {
	Field1                                                                          *float64
	Field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose *float64
}

func (d *DoubleWrapper) GetField1() (rv float64) {
	if d != nil && d.Field1 != nil {
		return *d.Field1
	}
	return
}

func (d *DoubleWrapper) GetField56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose() (rv float64) {
	if d != nil && d.Field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose != nil {
		return *d.Field56ZerosAfterTheDotAndNegativeZeroBeforeDotAndThisIsALongFieldNameOnPurpose
	}
	return
}

type DurationWrapper struct {
	Field *string
}

func (d *DurationWrapper) GetField() (rv string) {
	if d != nil && d.Field != nil {
		return *d.Field
	}
	return
}

type Fish struct {
	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length   *float32
	Siblings []FishClassification
	Species  *string
}

func (f *Fish) GetFishtype() (rv string) {
	if f != nil && f.Fishtype != nil {
		return *f.Fishtype
	}
	return
}

func (f *Fish) GetLength() (rv float32) {
	if f != nil && f.Length != nil {
		return *f.Length
	}
	return
}

func (f *Fish) GetSiblings() (rv []FishClassification) {
	if f != nil {
		return f.Siblings
	}
	return
}

func (f *Fish) GetSpecies() (rv string) {
	if f != nil && f.Species != nil {
		return *f.Species
	}
	return
}

// GetFish implements the FishClassification interface for type Fish.
func (f *Fish) GetFish() *Fish { return f }

type FloatWrapper struct {
	Field1 *float32
	Field2 *float32
}

func (f *FloatWrapper) GetField1() (rv float32) {
	if f != nil && f.Field1 != nil {
		return *f.Field1
	}
	return
}

func (f *FloatWrapper) GetField2() (rv float32) {
	if f != nil && f.Field2 != nil {
		return *f.Field2
	}
	return
}

type Goblinshark struct {
	// REQUIRED
	Birthday *time.Time

	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length *float32
	Age    *int32

	// Colors possible
	Color    *GoblinSharkColor
	Jawsize  *int32
	Siblings []FishClassification
	Species  *string
}

func (g *Goblinshark) GetBirthday() (rv *time.Time) {
	if g != nil {
		return g.Birthday
	}
	return
}

func (g *Goblinshark) GetFishtype() (rv string) {
	if g != nil && g.Fishtype != nil {
		return *g.Fishtype
	}
	return
}

func (g *Goblinshark) GetLength() (rv float32) {
	if g != nil && g.Length != nil {
		return *g.Length
	}
	return
}

func (g *Goblinshark) GetAge() (rv int32) {
	if g != nil && g.Age != nil {
		return *g.Age
	}
	return
}

func (g *Goblinshark) GetColor() (rv *GoblinSharkColor) {
	if g != nil {
		return g.Color
	}
	return
}

func (g *Goblinshark) GetJawsize() (rv int32) {
	if g != nil && g.Jawsize != nil {
		return *g.Jawsize
	}
	return
}

func (g *Goblinshark) GetSiblings() (rv []FishClassification) {
	if g != nil {
		return g.Siblings
	}
	return
}

func (g *Goblinshark) GetSpecies() (rv string) {
	if g != nil && g.Species != nil {
		return *g.Species
	}
	return
}

// GetFish implements the FishClassification interface for type Goblinshark.
func (g *Goblinshark) GetFish() *Fish {
	return &Fish{
		Fishtype: g.Fishtype,
		Length:   g.Length,
		Siblings: g.Siblings,
		Species:  g.Species,
	}
}

// GetShark implements the SharkClassification interface for type Goblinshark.
func (g *Goblinshark) GetShark() *Shark {
	return &Shark{
		Age:      g.Age,
		Birthday: g.Birthday,
		Fishtype: g.Fishtype,
		Length:   g.Length,
		Siblings: g.Siblings,
		Species:  g.Species,
	}
}

type IntWrapper struct {
	Field1 *int32
	Field2 *int32
}

func (i *IntWrapper) GetField1() (rv int32) {
	if i != nil && i.Field1 != nil {
		return *i.Field1
	}
	return
}

func (i *IntWrapper) GetField2() (rv int32) {
	if i != nil && i.Field2 != nil {
		return *i.Field2
	}
	return
}

type LongWrapper struct {
	Field1 *int64
	Field2 *int64
}

func (l *LongWrapper) GetField1() (rv int64) {
	if l != nil && l.Field1 != nil {
		return *l.Field1
	}
	return
}

func (l *LongWrapper) GetField2() (rv int64) {
	if l != nil && l.Field2 != nil {
		return *l.Field2
	}
	return
}

type MyBaseHelperType struct {
	PropBH1 *string
}

func (m *MyBaseHelperType) GetPropBH1() (rv string) {
	if m != nil && m.PropBH1 != nil {
		return *m.PropBH1
	}
	return
}

type MyBaseType struct {
	// REQUIRED
	Kind   *MyKind
	Helper *MyBaseHelperType
	PropB1 *string
}

func (m *MyBaseType) GetKind() (rv *MyKind) {
	if m != nil {
		return m.Kind
	}
	return
}

func (m *MyBaseType) GetHelper() (rv *MyBaseHelperType) {
	if m != nil {
		return m.Helper
	}
	return
}

func (m *MyBaseType) GetPropB1() (rv string) {
	if m != nil && m.PropB1 != nil {
		return *m.PropB1
	}
	return
}

// GetMyBaseType implements the MyBaseTypeClassification interface for type MyBaseType.
func (m *MyBaseType) GetMyBaseType() *MyBaseType { return m }

type MyDerivedType struct {
	// REQUIRED
	Kind   *MyKind
	Helper *MyBaseHelperType
	PropB1 *string
	PropD1 *string
}

func (m *MyDerivedType) GetKind() (rv *MyKind) {
	if m != nil {
		return m.Kind
	}
	return
}

func (m *MyDerivedType) GetHelper() (rv *MyBaseHelperType) {
	if m != nil {
		return m.Helper
	}
	return
}

func (m *MyDerivedType) GetPropB1() (rv string) {
	if m != nil && m.PropB1 != nil {
		return *m.PropB1
	}
	return
}

func (m *MyDerivedType) GetPropD1() (rv string) {
	if m != nil && m.PropD1 != nil {
		return *m.PropD1
	}
	return
}

// GetMyBaseType implements the MyBaseTypeClassification interface for type MyDerivedType.
func (m *MyDerivedType) GetMyBaseType() *MyBaseType {
	return &MyBaseType{
		Helper: m.Helper,
		Kind:   m.Kind,
		PropB1: m.PropB1,
	}
}

type ReadonlyObj struct {
	Size *int32

	// READ-ONLY
	ID *string
}

func (r *ReadonlyObj) GetSize() (rv int32) {
	if r != nil && r.Size != nil {
		return *r.Size
	}
	return
}

func (r *ReadonlyObj) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

type Salmon struct {
	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length   *float32
	Iswild   *bool
	Location *string
	Siblings []FishClassification
	Species  *string
}

func (s *Salmon) GetFishtype() (rv string) {
	if s != nil && s.Fishtype != nil {
		return *s.Fishtype
	}
	return
}

func (s *Salmon) GetLength() (rv float32) {
	if s != nil && s.Length != nil {
		return *s.Length
	}
	return
}

func (s *Salmon) GetIswild() (rv bool) {
	if s != nil && s.Iswild != nil {
		return *s.Iswild
	}
	return
}

func (s *Salmon) GetLocation() (rv string) {
	if s != nil && s.Location != nil {
		return *s.Location
	}
	return
}

func (s *Salmon) GetSiblings() (rv []FishClassification) {
	if s != nil {
		return s.Siblings
	}
	return
}

func (s *Salmon) GetSpecies() (rv string) {
	if s != nil && s.Species != nil {
		return *s.Species
	}
	return
}

// GetFish implements the FishClassification interface for type Salmon.
func (s *Salmon) GetFish() *Fish {
	return &Fish{
		Fishtype: s.Fishtype,
		Length:   s.Length,
		Siblings: s.Siblings,
		Species:  s.Species,
	}
}

// GetSalmon implements the SalmonClassification interface for type Salmon.
func (s *Salmon) GetSalmon() *Salmon { return s }

type Sawshark struct {
	// REQUIRED
	Birthday *time.Time

	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length   *float32
	Age      *int32
	Picture  []byte
	Siblings []FishClassification
	Species  *string
}

func (s *Sawshark) GetBirthday() (rv *time.Time) {
	if s != nil {
		return s.Birthday
	}
	return
}

func (s *Sawshark) GetFishtype() (rv string) {
	if s != nil && s.Fishtype != nil {
		return *s.Fishtype
	}
	return
}

func (s *Sawshark) GetLength() (rv float32) {
	if s != nil && s.Length != nil {
		return *s.Length
	}
	return
}

func (s *Sawshark) GetAge() (rv int32) {
	if s != nil && s.Age != nil {
		return *s.Age
	}
	return
}

func (s *Sawshark) GetPicture() (rv []byte) {
	if s != nil {
		return s.Picture
	}
	return
}

func (s *Sawshark) GetSiblings() (rv []FishClassification) {
	if s != nil {
		return s.Siblings
	}
	return
}

func (s *Sawshark) GetSpecies() (rv string) {
	if s != nil && s.Species != nil {
		return *s.Species
	}
	return
}

// GetFish implements the FishClassification interface for type Sawshark.
func (s *Sawshark) GetFish() *Fish {
	return &Fish{
		Fishtype: s.Fishtype,
		Length:   s.Length,
		Siblings: s.Siblings,
		Species:  s.Species,
	}
}

// GetShark implements the SharkClassification interface for type Sawshark.
func (s *Sawshark) GetShark() *Shark {
	return &Shark{
		Age:      s.Age,
		Birthday: s.Birthday,
		Fishtype: s.Fishtype,
		Length:   s.Length,
		Siblings: s.Siblings,
		Species:  s.Species,
	}
}

type Shark struct {
	// REQUIRED
	Birthday *time.Time

	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length   *float32
	Age      *int32
	Siblings []FishClassification
	Species  *string
}

func (s *Shark) GetBirthday() (rv *time.Time) {
	if s != nil {
		return s.Birthday
	}
	return
}

func (s *Shark) GetFishtype() (rv string) {
	if s != nil && s.Fishtype != nil {
		return *s.Fishtype
	}
	return
}

func (s *Shark) GetLength() (rv float32) {
	if s != nil && s.Length != nil {
		return *s.Length
	}
	return
}

func (s *Shark) GetAge() (rv int32) {
	if s != nil && s.Age != nil {
		return *s.Age
	}
	return
}

func (s *Shark) GetSiblings() (rv []FishClassification) {
	if s != nil {
		return s.Siblings
	}
	return
}

func (s *Shark) GetSpecies() (rv string) {
	if s != nil && s.Species != nil {
		return *s.Species
	}
	return
}

// GetFish implements the FishClassification interface for type Shark.
func (s *Shark) GetFish() *Fish {
	return &Fish{
		Fishtype: s.Fishtype,
		Length:   s.Length,
		Siblings: s.Siblings,
		Species:  s.Species,
	}
}

// GetShark implements the SharkClassification interface for type Shark.
func (s *Shark) GetShark() *Shark { return s }

type Siamese struct {
	Breed *string
	Color *string
	Hates []*Dog
	ID    *int32
	Name  *string
}

func (s *Siamese) GetBreed() (rv string) {
	if s != nil && s.Breed != nil {
		return *s.Breed
	}
	return
}

func (s *Siamese) GetColor() (rv string) {
	if s != nil && s.Color != nil {
		return *s.Color
	}
	return
}

func (s *Siamese) GetHates() (rv []*Dog) {
	if s != nil {
		return s.Hates
	}
	return
}

func (s *Siamese) GetID() (rv int32) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *Siamese) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

type SmartSalmon struct {
	// REQUIRED
	Fishtype *string

	// REQUIRED
	Length *float32

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
	CollegeDegree        *string
	Iswild               *bool
	Location             *string
	Siblings             []FishClassification
	Species              *string
}

func (s *SmartSalmon) GetFishtype() (rv string) {
	if s != nil && s.Fishtype != nil {
		return *s.Fishtype
	}
	return
}

func (s *SmartSalmon) GetLength() (rv float32) {
	if s != nil && s.Length != nil {
		return *s.Length
	}
	return
}

func (s *SmartSalmon) GetAdditionalProperties() (rv map[string]any) {
	if s != nil {
		return s.AdditionalProperties
	}
	return
}

func (s *SmartSalmon) GetCollegeDegree() (rv string) {
	if s != nil && s.CollegeDegree != nil {
		return *s.CollegeDegree
	}
	return
}

func (s *SmartSalmon) GetIswild() (rv bool) {
	if s != nil && s.Iswild != nil {
		return *s.Iswild
	}
	return
}

func (s *SmartSalmon) GetLocation() (rv string) {
	if s != nil && s.Location != nil {
		return *s.Location
	}
	return
}

func (s *SmartSalmon) GetSiblings() (rv []FishClassification) {
	if s != nil {
		return s.Siblings
	}
	return
}

func (s *SmartSalmon) GetSpecies() (rv string) {
	if s != nil && s.Species != nil {
		return *s.Species
	}
	return
}

// GetFish implements the FishClassification interface for type SmartSalmon.
func (s *SmartSalmon) GetFish() *Fish {
	return &Fish{
		Fishtype: s.Fishtype,
		Length:   s.Length,
		Siblings: s.Siblings,
		Species:  s.Species,
	}
}

// GetSalmon implements the SalmonClassification interface for type SmartSalmon.
func (s *SmartSalmon) GetSalmon() *Salmon {
	return &Salmon{
		Fishtype: s.Fishtype,
		Iswild:   s.Iswild,
		Length:   s.Length,
		Location: s.Location,
		Siblings: s.Siblings,
		Species:  s.Species,
	}
}

type StringWrapper struct {
	Empty *string
	Field *string
	Null  *string
}

func (s *StringWrapper) GetEmpty() (rv string) {
	if s != nil && s.Empty != nil {
		return *s.Empty
	}
	return
}

func (s *StringWrapper) GetField() (rv string) {
	if s != nil && s.Field != nil {
		return *s.Field
	}
	return
}

func (s *StringWrapper) GetNull() (rv string) {
	if s != nil && s.Null != nil {
		return *s.Null
	}
	return
}
