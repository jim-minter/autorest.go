//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package validationgroup

// ChildProduct - The product documentation.
type ChildProduct struct {
	// CONSTANT; Constant string
	// Field has constant value "constant", any specified value is ignored.
	ConstProperty *string

	// Count
	Count *int32
}

func (c *ChildProduct) GetConstProperty() (rv *string) {
	if c != nil {
		return c.ConstProperty
	}
	return
}

func (c *ChildProduct) GetCount() (rv int32) {
	if c != nil && c.Count != nil {
		return *c.Count
	}
	return
}

// ConstantProduct - The product documentation.
type ConstantProduct struct {
	// CONSTANT; Constant string
	// Field has constant value "constant", any specified value is ignored.
	ConstProperty *string

	// CONSTANT; Constant string2
	// Field has constant value "constant2", any specified value is ignored.
	ConstProperty2 *string
}

func (c *ConstantProduct) GetConstProperty() (rv *string) {
	if c != nil {
		return c.ConstProperty
	}
	return
}

func (c *ConstantProduct) GetConstProperty2() (rv *string) {
	if c != nil {
		return c.ConstProperty2
	}
	return
}

// Product - The product documentation.
type Product struct {
	// REQUIRED; The product documentation.
	Child *ChildProduct

	// REQUIRED; The product documentation.
	ConstChild *ConstantProduct

	// CONSTANT; Constant int
	// Field has constant value 0, any specified value is ignored.
	ConstInt *int32

	// CONSTANT; Constant string
	// Field has constant value "constant", any specified value is ignored.
	ConstString *string

	// Non required int betwen 0 and 100 exclusive.
	Capacity *int32

	// Constant string as Enum
	ConstStringAsEnum *string

	// Non required array of unique items from 0 to 6 elements.
	DisplayNames []*string

	// Image URL representing the product.
	Image *string
}

func (p *Product) GetChild() (rv *ChildProduct) {
	if p != nil {
		return p.Child
	}
	return
}

func (p *Product) GetConstChild() (rv *ConstantProduct) {
	if p != nil {
		return p.ConstChild
	}
	return
}

func (p *Product) GetConstInt() (rv *int32) {
	if p != nil {
		return p.ConstInt
	}
	return
}

func (p *Product) GetConstString() (rv *string) {
	if p != nil {
		return p.ConstString
	}
	return
}

func (p *Product) GetCapacity() (rv int32) {
	if p != nil && p.Capacity != nil {
		return *p.Capacity
	}
	return
}

func (p *Product) GetConstStringAsEnum() (rv *string) {
	if p != nil {
		return p.ConstStringAsEnum
	}
	return
}

func (p *Product) GetDisplayNames() (rv []*string) {
	if p != nil {
		return p.DisplayNames
	}
	return
}

func (p *Product) GetImage() (rv string) {
	if p != nil && p.Image != nil {
		return *p.Image
	}
	return
}
