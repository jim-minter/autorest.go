//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package aztables

import "time"

// AccessPolicy - An Access policy.
type AccessPolicy struct {
	// REQUIRED; The datetime that the policy expires.
	Expiry *time.Time `xml:"Expiry"`

	// REQUIRED; The permissions for the acl policy.
	Permission *string `xml:"Permission"`

	// REQUIRED; The start datetime from which the policy is active.
	Start *time.Time `xml:"Start"`
}

func (a *AccessPolicy) GetExpiry() (rv *time.Time) {
	if a != nil {
		return a.Expiry
	}
	return
}

func (a *AccessPolicy) GetPermission() (rv string) {
	if a != nil && a.Permission != nil {
		return *a.Permission
	}
	return
}

func (a *AccessPolicy) GetStart() (rv *time.Time) {
	if a != nil {
		return a.Start
	}
	return
}

// CorsRule - CORS is an HTTP feature that enables a web application running under one domain to access resources in another
// domain. Web browsers implement a security restriction known as same-origin policy that
// prevents a web page from calling APIs in a different domain; CORS provides a secure way to allow one domain (the origin
// domain) to call APIs in another domain.
type CorsRule struct {
	// REQUIRED; The request headers that the origin domain may specify on the CORS request.
	AllowedHeaders *string `xml:"AllowedHeaders"`

	// REQUIRED; The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated)
	AllowedMethods *string `xml:"AllowedMethods"`

	// REQUIRED; The origin domains that are permitted to make a request against the service via CORS. The origin domain is the
	// domain from which the request originates. Note that the origin must be an exact
	// case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '*'
	// to allow all origin domains to make requests via CORS.
	AllowedOrigins *string `xml:"AllowedOrigins"`

	// REQUIRED; The response headers that may be sent in the response to the CORS request and exposed by the browser to the request
	// issuer.
	ExposedHeaders *string `xml:"ExposedHeaders"`

	// REQUIRED; The maximum amount time that a browser should cache the preflight OPTIONS request.
	MaxAgeInSeconds *int32 `xml:"MaxAgeInSeconds"`
}

func (c *CorsRule) GetAllowedHeaders() (rv string) {
	if c != nil && c.AllowedHeaders != nil {
		return *c.AllowedHeaders
	}
	return
}

func (c *CorsRule) GetAllowedMethods() (rv string) {
	if c != nil && c.AllowedMethods != nil {
		return *c.AllowedMethods
	}
	return
}

func (c *CorsRule) GetAllowedOrigins() (rv string) {
	if c != nil && c.AllowedOrigins != nil {
		return *c.AllowedOrigins
	}
	return
}

func (c *CorsRule) GetExposedHeaders() (rv string) {
	if c != nil && c.ExposedHeaders != nil {
		return *c.ExposedHeaders
	}
	return
}

func (c *CorsRule) GetMaxAgeInSeconds() (rv int32) {
	if c != nil && c.MaxAgeInSeconds != nil {
		return *c.MaxAgeInSeconds
	}
	return
}

// EntityQueryResponse - The properties for the table entity query response.
type EntityQueryResponse struct {
	// The metadata response of the table.
	ODataMetadata *string

	// List of table entities.
	Value []map[string]any
}

func (e *EntityQueryResponse) GetODataMetadata() (rv string) {
	if e != nil && e.ODataMetadata != nil {
		return *e.ODataMetadata
	}
	return
}

func (e *EntityQueryResponse) GetValue() (rv []map[string]any) {
	if e != nil {
		return e.Value
	}
	return
}

type GeoReplication struct {
	// REQUIRED; A GMT date/time value, to the second. All primary writes preceding this value are guaranteed to be available
	// for read operations at the secondary. Primary writes after this point in time may or may
	// not be available for reads.
	LastSyncTime *time.Time `xml:"LastSyncTime"`

	// REQUIRED; The status of the secondary location.
	Status *GeoReplicationStatusType `xml:"Status"`
}

func (g *GeoReplication) GetLastSyncTime() (rv *time.Time) {
	if g != nil {
		return g.LastSyncTime
	}
	return
}

func (g *GeoReplication) GetStatus() (rv *GeoReplicationStatusType) {
	if g != nil {
		return g.Status
	}
	return
}

// Logging - Azure Analytics Logging settings.
type Logging struct {
	// REQUIRED; Indicates whether all delete requests should be logged.
	Delete *bool `xml:"Delete"`

	// REQUIRED; Indicates whether all read requests should be logged.
	Read *bool `xml:"Read"`

	// REQUIRED; The retention policy.
	RetentionPolicy *RetentionPolicy `xml:"RetentionPolicy"`

	// REQUIRED; The version of Analytics to configure.
	Version *string `xml:"Version"`

	// REQUIRED; Indicates whether all write requests should be logged.
	Write *bool `xml:"Write"`
}

func (l *Logging) GetDelete() (rv bool) {
	if l != nil && l.Delete != nil {
		return *l.Delete
	}
	return
}

func (l *Logging) GetRead() (rv bool) {
	if l != nil && l.Read != nil {
		return *l.Read
	}
	return
}

func (l *Logging) GetRetentionPolicy() (rv *RetentionPolicy) {
	if l != nil {
		return l.RetentionPolicy
	}
	return
}

func (l *Logging) GetVersion() (rv string) {
	if l != nil && l.Version != nil {
		return *l.Version
	}
	return
}

func (l *Logging) GetWrite() (rv bool) {
	if l != nil && l.Write != nil {
		return *l.Write
	}
	return
}

type Metrics struct {
	// REQUIRED; Indicates whether metrics are enabled for the Table service.
	Enabled *bool `xml:"Enabled"`

	// Indicates whether metrics should generate summary statistics for called API operations.
	IncludeAPIs *bool `xml:"IncludeAPIs"`

	// The retention policy.
	RetentionPolicy *RetentionPolicy `xml:"RetentionPolicy"`

	// The version of Analytics to configure.
	Version *string `xml:"Version"`
}

func (m *Metrics) GetEnabled() (rv bool) {
	if m != nil && m.Enabled != nil {
		return *m.Enabled
	}
	return
}

func (m *Metrics) GetIncludeAPIs() (rv bool) {
	if m != nil && m.IncludeAPIs != nil {
		return *m.IncludeAPIs
	}
	return
}

func (m *Metrics) GetRetentionPolicy() (rv *RetentionPolicy) {
	if m != nil {
		return m.RetentionPolicy
	}
	return
}

func (m *Metrics) GetVersion() (rv string) {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return
}

// Properties - The properties for creating a table.
type Properties struct {
	// The name of the table to create.
	TableName *string
}

func (p *Properties) GetTableName() (rv string) {
	if p != nil && p.TableName != nil {
		return *p.TableName
	}
	return
}

// QueryResponse - The properties for the table query response.
type QueryResponse struct {
	// The metadata response of the table.
	ODataMetadata *string

	// List of tables.
	Value []*ResponseProperties
}

func (q *QueryResponse) GetODataMetadata() (rv string) {
	if q != nil && q.ODataMetadata != nil {
		return *q.ODataMetadata
	}
	return
}

func (q *QueryResponse) GetValue() (rv []*ResponseProperties) {
	if q != nil {
		return q.Value
	}
	return
}

// Response - The response for a single table.
type Response struct {
	// The edit link of the table.
	ODataEditLink *string

	// The id of the table.
	ODataID *string

	// The metadata response of the table.
	ODataMetadata *string

	// The odata type of the table.
	ODataType *string

	// The name of the table.
	TableName *string
}

func (r *Response) GetODataEditLink() (rv string) {
	if r != nil && r.ODataEditLink != nil {
		return *r.ODataEditLink
	}
	return
}

func (r *Response) GetODataID() (rv string) {
	if r != nil && r.ODataID != nil {
		return *r.ODataID
	}
	return
}

func (r *Response) GetODataMetadata() (rv string) {
	if r != nil && r.ODataMetadata != nil {
		return *r.ODataMetadata
	}
	return
}

func (r *Response) GetODataType() (rv string) {
	if r != nil && r.ODataType != nil {
		return *r.ODataType
	}
	return
}

func (r *Response) GetTableName() (rv string) {
	if r != nil && r.TableName != nil {
		return *r.TableName
	}
	return
}

// ResponseProperties - The properties for the table response.
type ResponseProperties struct {
	// The edit link of the table.
	ODataEditLink *string

	// The id of the table.
	ODataID *string

	// The odata type of the table.
	ODataType *string

	// The name of the table.
	TableName *string
}

func (r *ResponseProperties) GetODataEditLink() (rv string) {
	if r != nil && r.ODataEditLink != nil {
		return *r.ODataEditLink
	}
	return
}

func (r *ResponseProperties) GetODataID() (rv string) {
	if r != nil && r.ODataID != nil {
		return *r.ODataID
	}
	return
}

func (r *ResponseProperties) GetODataType() (rv string) {
	if r != nil && r.ODataType != nil {
		return *r.ODataType
	}
	return
}

func (r *ResponseProperties) GetTableName() (rv string) {
	if r != nil && r.TableName != nil {
		return *r.TableName
	}
	return
}

// RetentionPolicy - The retention policy.
type RetentionPolicy struct {
	// REQUIRED; Indicates whether a retention policy is enabled for the service.
	Enabled *bool `xml:"Enabled"`

	// Indicates the number of days that metrics or logging or soft-deleted data should be retained. All data older than this
	// value will be deleted.
	Days *int32 `xml:"Days"`
}

func (r *RetentionPolicy) GetEnabled() (rv bool) {
	if r != nil && r.Enabled != nil {
		return *r.Enabled
	}
	return
}

func (r *RetentionPolicy) GetDays() (rv int32) {
	if r != nil && r.Days != nil {
		return *r.Days
	}
	return
}

// ServiceError - Table Service error.
type ServiceError struct {
	// The error message.
	Message *string
}

func (s *ServiceError) GetMessage() (rv string) {
	if s != nil && s.Message != nil {
		return *s.Message
	}
	return
}

// ServiceProperties - Table Service Properties.
type ServiceProperties struct {
	// The set of CORS rules.
	Cors []*CorsRule `xml:"Cors>CorsRule"`

	// A summary of request statistics grouped by API in hourly aggregates for tables.
	HourMetrics *Metrics `xml:"HourMetrics"`

	// Azure Analytics Logging settings.
	Logging *Logging `xml:"Logging"`

	// A summary of request statistics grouped by API in minute aggregates for tables.
	MinuteMetrics *Metrics `xml:"MinuteMetrics"`
}

func (s *ServiceProperties) GetCors() (rv []*CorsRule) {
	if s != nil {
		return s.Cors
	}
	return
}

func (s *ServiceProperties) GetHourMetrics() (rv *Metrics) {
	if s != nil {
		return s.HourMetrics
	}
	return
}

func (s *ServiceProperties) GetLogging() (rv *Logging) {
	if s != nil {
		return s.Logging
	}
	return
}

func (s *ServiceProperties) GetMinuteMetrics() (rv *Metrics) {
	if s != nil {
		return s.MinuteMetrics
	}
	return
}

// ServiceStats - Stats for the service.
type ServiceStats struct {
	// Geo-Replication information for the Secondary Storage Service.
	GeoReplication *GeoReplication `xml:"GeoReplication"`
}

func (s *ServiceStats) GetGeoReplication() (rv *GeoReplication) {
	if s != nil {
		return s.GeoReplication
	}
	return
}

// SignedIdentifier - A signed identifier.
type SignedIdentifier struct {
	// REQUIRED; The access policy.
	AccessPolicy *AccessPolicy `xml:"AccessPolicy"`

	// REQUIRED; A unique id.
	ID *string `xml:"Id"`
}

func (s *SignedIdentifier) GetAccessPolicy() (rv *AccessPolicy) {
	if s != nil {
		return s.AccessPolicy
	}
	return
}

func (s *SignedIdentifier) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}
