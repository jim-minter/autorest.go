//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armnetwork

import "time"

// AADAuthenticationParameters - AAD Vpn authentication type related parameters.
type AADAuthenticationParameters struct {
	// AAD Vpn authentication parameter AAD audience.
	AADAudience *string

	// AAD Vpn authentication parameter AAD issuer.
	AADIssuer *string

	// AAD Vpn authentication parameter AAD tenant.
	AADTenant *string
}

func (a *AADAuthenticationParameters) GetAADAudience() (rv string) {
	if a != nil && a.AADAudience != nil {
		return *a.AADAudience
	}
	return
}

func (a *AADAuthenticationParameters) GetAADIssuer() (rv string) {
	if a != nil && a.AADIssuer != nil {
		return *a.AADIssuer
	}
	return
}

func (a *AADAuthenticationParameters) GetAADTenant() (rv string) {
	if a != nil && a.AADTenant != nil {
		return *a.AADTenant
	}
	return
}

// Action to be taken on a route matching a RouteMap criterion.
type Action struct {
	// List of parameters relevant to the action.For instance if type is drop then parameters has list of prefixes to be dropped.If
	// type is add, parameters would have list of ASN numbers to be added
	Parameters []*Parameter

	// Type of action to be taken. Supported types are 'Remove', 'Add', 'Replace', and 'Drop.'
	Type *RouteMapActionType
}

func (a *Action) GetParameters() (rv []*Parameter) {
	if a != nil {
		return a.Parameters
	}
	return
}

func (a *Action) GetType() (rv *RouteMapActionType) {
	if a != nil {
		return a.Type
	}
	return
}

// ActiveBaseSecurityAdminRule - Network base admin rule.
type ActiveBaseSecurityAdminRule struct {
	// REQUIRED; Whether the rule is custom or default.
	Kind *EffectiveAdminRuleKind

	// Deployment time string.
	CommitTime *time.Time

	// A description of the security admin configuration.
	ConfigurationDescription *string

	// Resource ID.
	ID *string

	// Deployment region.
	Region *string

	// Groups for rule collection
	RuleCollectionAppliesToGroups []*ManagerSecurityGroupItem

	// A description of the rule collection.
	RuleCollectionDescription *string

	// Effective configuration groups.
	RuleGroups []*ConfigurationGroup
}

func (a *ActiveBaseSecurityAdminRule) GetKind() (rv *EffectiveAdminRuleKind) {
	if a != nil {
		return a.Kind
	}
	return
}

func (a *ActiveBaseSecurityAdminRule) GetCommitTime() (rv *time.Time) {
	if a != nil {
		return a.CommitTime
	}
	return
}

func (a *ActiveBaseSecurityAdminRule) GetConfigurationDescription() (rv string) {
	if a != nil && a.ConfigurationDescription != nil {
		return *a.ConfigurationDescription
	}
	return
}

func (a *ActiveBaseSecurityAdminRule) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ActiveBaseSecurityAdminRule) GetRegion() (rv string) {
	if a != nil && a.Region != nil {
		return *a.Region
	}
	return
}

func (a *ActiveBaseSecurityAdminRule) GetRuleCollectionAppliesToGroups() (rv []*ManagerSecurityGroupItem) {
	if a != nil {
		return a.RuleCollectionAppliesToGroups
	}
	return
}

func (a *ActiveBaseSecurityAdminRule) GetRuleCollectionDescription() (rv string) {
	if a != nil && a.RuleCollectionDescription != nil {
		return *a.RuleCollectionDescription
	}
	return
}

func (a *ActiveBaseSecurityAdminRule) GetRuleGroups() (rv []*ConfigurationGroup) {
	if a != nil {
		return a.RuleGroups
	}
	return
}

// GetActiveBaseSecurityAdminRule implements the ActiveBaseSecurityAdminRuleClassification interface for type ActiveBaseSecurityAdminRule.
func (a *ActiveBaseSecurityAdminRule) GetActiveBaseSecurityAdminRule() *ActiveBaseSecurityAdminRule {
	return a
}

// ActiveConfigurationParameter - Effective Virtual Networks Parameter.
type ActiveConfigurationParameter struct {
	// List of regions.
	Regions []*string

	// When present, the value can be passed to a subsequent query call (together with the same query and scopes used in the current
	// request) to retrieve the next page of data.
	SkipToken *string
}

func (a *ActiveConfigurationParameter) GetRegions() (rv []*string) {
	if a != nil {
		return a.Regions
	}
	return
}

func (a *ActiveConfigurationParameter) GetSkipToken() (rv string) {
	if a != nil && a.SkipToken != nil {
		return *a.SkipToken
	}
	return
}

// ActiveConnectivityConfiguration - Active connectivity configuration.
type ActiveConnectivityConfiguration struct {
	// Deployment time string.
	CommitTime *time.Time

	// Effective configuration groups.
	ConfigurationGroups []*ConfigurationGroup

	// Connectivity configuration ID.
	ID *string

	// Properties of a network manager connectivity configuration
	Properties *ConnectivityConfigurationProperties

	// Deployment region.
	Region *string
}

func (a *ActiveConnectivityConfiguration) GetCommitTime() (rv *time.Time) {
	if a != nil {
		return a.CommitTime
	}
	return
}

func (a *ActiveConnectivityConfiguration) GetConfigurationGroups() (rv []*ConfigurationGroup) {
	if a != nil {
		return a.ConfigurationGroups
	}
	return
}

func (a *ActiveConnectivityConfiguration) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ActiveConnectivityConfiguration) GetProperties() (rv *ConnectivityConfigurationProperties) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ActiveConnectivityConfiguration) GetRegion() (rv string) {
	if a != nil && a.Region != nil {
		return *a.Region
	}
	return
}

// ActiveConnectivityConfigurationsListResult - Result of the request to list active connectivity configurations. It contains
// a list of active connectivity configurations and a skiptoken to get the next set of results.
type ActiveConnectivityConfigurationsListResult struct {
	// When present, the value can be passed to a subsequent query call (together with the same query and scopes used in the current
	// request) to retrieve the next page of data.
	SkipToken *string

	// Gets a page of active connectivity configurations.
	Value []*ActiveConnectivityConfiguration
}

func (a *ActiveConnectivityConfigurationsListResult) GetSkipToken() (rv string) {
	if a != nil && a.SkipToken != nil {
		return *a.SkipToken
	}
	return
}

func (a *ActiveConnectivityConfigurationsListResult) GetValue() (rv []*ActiveConnectivityConfiguration) {
	if a != nil {
		return a.Value
	}
	return
}

// ActiveDefaultSecurityAdminRule - Network default admin rule.
type ActiveDefaultSecurityAdminRule struct {
	// REQUIRED; Whether the rule is custom or default.
	Kind *EffectiveAdminRuleKind

	// Deployment time string.
	CommitTime *time.Time

	// A description of the security admin configuration.
	ConfigurationDescription *string

	// Resource ID.
	ID *string

	// Indicates the properties of the default security admin rule
	Properties *DefaultAdminPropertiesFormat

	// Deployment region.
	Region *string

	// Groups for rule collection
	RuleCollectionAppliesToGroups []*ManagerSecurityGroupItem

	// A description of the rule collection.
	RuleCollectionDescription *string

	// Effective configuration groups.
	RuleGroups []*ConfigurationGroup
}

func (a *ActiveDefaultSecurityAdminRule) GetKind() (rv *EffectiveAdminRuleKind) {
	if a != nil {
		return a.Kind
	}
	return
}

func (a *ActiveDefaultSecurityAdminRule) GetCommitTime() (rv *time.Time) {
	if a != nil {
		return a.CommitTime
	}
	return
}

func (a *ActiveDefaultSecurityAdminRule) GetConfigurationDescription() (rv string) {
	if a != nil && a.ConfigurationDescription != nil {
		return *a.ConfigurationDescription
	}
	return
}

func (a *ActiveDefaultSecurityAdminRule) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ActiveDefaultSecurityAdminRule) GetProperties() (rv *DefaultAdminPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ActiveDefaultSecurityAdminRule) GetRegion() (rv string) {
	if a != nil && a.Region != nil {
		return *a.Region
	}
	return
}

func (a *ActiveDefaultSecurityAdminRule) GetRuleCollectionAppliesToGroups() (rv []*ManagerSecurityGroupItem) {
	if a != nil {
		return a.RuleCollectionAppliesToGroups
	}
	return
}

func (a *ActiveDefaultSecurityAdminRule) GetRuleCollectionDescription() (rv string) {
	if a != nil && a.RuleCollectionDescription != nil {
		return *a.RuleCollectionDescription
	}
	return
}

func (a *ActiveDefaultSecurityAdminRule) GetRuleGroups() (rv []*ConfigurationGroup) {
	if a != nil {
		return a.RuleGroups
	}
	return
}

// GetActiveBaseSecurityAdminRule implements the ActiveBaseSecurityAdminRuleClassification interface for type ActiveDefaultSecurityAdminRule.
func (a *ActiveDefaultSecurityAdminRule) GetActiveBaseSecurityAdminRule() *ActiveBaseSecurityAdminRule {
	return &ActiveBaseSecurityAdminRule{
		CommitTime:                    a.CommitTime,
		ConfigurationDescription:      a.ConfigurationDescription,
		ID:                            a.ID,
		Kind:                          a.Kind,
		Region:                        a.Region,
		RuleCollectionAppliesToGroups: a.RuleCollectionAppliesToGroups,
		RuleCollectionDescription:     a.RuleCollectionDescription,
		RuleGroups:                    a.RuleGroups,
	}
}

// ActiveSecurityAdminRule - Network admin rule.
type ActiveSecurityAdminRule struct {
	// REQUIRED; Whether the rule is custom or default.
	Kind *EffectiveAdminRuleKind

	// Deployment time string.
	CommitTime *time.Time

	// A description of the security admin configuration.
	ConfigurationDescription *string

	// Resource ID.
	ID *string

	// Indicates the properties of the security admin rule
	Properties *AdminPropertiesFormat

	// Deployment region.
	Region *string

	// Groups for rule collection
	RuleCollectionAppliesToGroups []*ManagerSecurityGroupItem

	// A description of the rule collection.
	RuleCollectionDescription *string

	// Effective configuration groups.
	RuleGroups []*ConfigurationGroup
}

func (a *ActiveSecurityAdminRule) GetKind() (rv *EffectiveAdminRuleKind) {
	if a != nil {
		return a.Kind
	}
	return
}

func (a *ActiveSecurityAdminRule) GetCommitTime() (rv *time.Time) {
	if a != nil {
		return a.CommitTime
	}
	return
}

func (a *ActiveSecurityAdminRule) GetConfigurationDescription() (rv string) {
	if a != nil && a.ConfigurationDescription != nil {
		return *a.ConfigurationDescription
	}
	return
}

func (a *ActiveSecurityAdminRule) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ActiveSecurityAdminRule) GetProperties() (rv *AdminPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ActiveSecurityAdminRule) GetRegion() (rv string) {
	if a != nil && a.Region != nil {
		return *a.Region
	}
	return
}

func (a *ActiveSecurityAdminRule) GetRuleCollectionAppliesToGroups() (rv []*ManagerSecurityGroupItem) {
	if a != nil {
		return a.RuleCollectionAppliesToGroups
	}
	return
}

func (a *ActiveSecurityAdminRule) GetRuleCollectionDescription() (rv string) {
	if a != nil && a.RuleCollectionDescription != nil {
		return *a.RuleCollectionDescription
	}
	return
}

func (a *ActiveSecurityAdminRule) GetRuleGroups() (rv []*ConfigurationGroup) {
	if a != nil {
		return a.RuleGroups
	}
	return
}

// GetActiveBaseSecurityAdminRule implements the ActiveBaseSecurityAdminRuleClassification interface for type ActiveSecurityAdminRule.
func (a *ActiveSecurityAdminRule) GetActiveBaseSecurityAdminRule() *ActiveBaseSecurityAdminRule {
	return &ActiveBaseSecurityAdminRule{
		CommitTime:                    a.CommitTime,
		ConfigurationDescription:      a.ConfigurationDescription,
		ID:                            a.ID,
		Kind:                          a.Kind,
		Region:                        a.Region,
		RuleCollectionAppliesToGroups: a.RuleCollectionAppliesToGroups,
		RuleCollectionDescription:     a.RuleCollectionDescription,
		RuleGroups:                    a.RuleGroups,
	}
}

// ActiveSecurityAdminRulesListResult - Result of the request to list active security admin rules. It contains a list of active
// security admin rules and a skiptoken to get the next set of results.
type ActiveSecurityAdminRulesListResult struct {
	// When present, the value can be passed to a subsequent query call (together with the same query and scopes used in the current
	// request) to retrieve the next page of data.
	SkipToken *string

	// Gets a page of active security admin rules.
	Value []ActiveBaseSecurityAdminRuleClassification
}

func (a *ActiveSecurityAdminRulesListResult) GetSkipToken() (rv string) {
	if a != nil && a.SkipToken != nil {
		return *a.SkipToken
	}
	return
}

func (a *ActiveSecurityAdminRulesListResult) GetValue() (rv []ActiveBaseSecurityAdminRuleClassification) {
	if a != nil {
		return a.Value
	}
	return
}

// AddressPrefixItem - Address prefix item.
type AddressPrefixItem struct {
	// Address prefix.
	AddressPrefix *string

	// Address prefix type.
	AddressPrefixType *AddressPrefixType
}

func (a *AddressPrefixItem) GetAddressPrefix() (rv string) {
	if a != nil && a.AddressPrefix != nil {
		return *a.AddressPrefix
	}
	return
}

func (a *AddressPrefixItem) GetAddressPrefixType() (rv *AddressPrefixType) {
	if a != nil {
		return a.AddressPrefixType
	}
	return
}

// AddressSpace contains an array of IP address ranges that can be used by subnets of the virtual network.
type AddressSpace struct {
	// A list of address blocks reserved for this virtual network in CIDR notation.
	AddressPrefixes []*string
}

func (a *AddressSpace) GetAddressPrefixes() (rv []*string) {
	if a != nil {
		return a.AddressPrefixes
	}
	return
}

// AdminPropertiesFormat - Security admin rule resource.
type AdminPropertiesFormat struct {
	// REQUIRED; Indicates the access allowed for this particular rule
	Access *SecurityConfigurationRuleAccess

	// REQUIRED; Indicates if the traffic matched against the rule in inbound or outbound.
	Direction *SecurityConfigurationRuleDirection

	// REQUIRED; The priority of the rule. The value can be between 1 and 4096. The priority number must be unique for each rule
	// in the collection. The lower the priority number, the higher the priority of the rule.
	Priority *int32

	// REQUIRED; Network protocol this rule applies to.
	Protocol *SecurityConfigurationRuleProtocol

	// A description for this rule. Restricted to 140 chars.
	Description *string

	// The destination port ranges.
	DestinationPortRanges []*string

	// The destination address prefixes. CIDR or destination IP ranges.
	Destinations []*AddressPrefixItem

	// The source port ranges.
	SourcePortRanges []*string

	// The CIDR or source IP ranges.
	Sources []*AddressPrefixItem

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

func (a *AdminPropertiesFormat) GetAccess() (rv *SecurityConfigurationRuleAccess) {
	if a != nil {
		return a.Access
	}
	return
}

func (a *AdminPropertiesFormat) GetDirection() (rv *SecurityConfigurationRuleDirection) {
	if a != nil {
		return a.Direction
	}
	return
}

func (a *AdminPropertiesFormat) GetPriority() (rv int32) {
	if a != nil && a.Priority != nil {
		return *a.Priority
	}
	return
}

func (a *AdminPropertiesFormat) GetProtocol() (rv *SecurityConfigurationRuleProtocol) {
	if a != nil {
		return a.Protocol
	}
	return
}

func (a *AdminPropertiesFormat) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AdminPropertiesFormat) GetDestinationPortRanges() (rv []*string) {
	if a != nil {
		return a.DestinationPortRanges
	}
	return
}

func (a *AdminPropertiesFormat) GetDestinations() (rv []*AddressPrefixItem) {
	if a != nil {
		return a.Destinations
	}
	return
}

func (a *AdminPropertiesFormat) GetSourcePortRanges() (rv []*string) {
	if a != nil {
		return a.SourcePortRanges
	}
	return
}

func (a *AdminPropertiesFormat) GetSources() (rv []*AddressPrefixItem) {
	if a != nil {
		return a.Sources
	}
	return
}

func (a *AdminPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// AdminRule - Network admin rule.
type AdminRule struct {
	// REQUIRED; Whether the rule is custom or default.
	Kind *AdminRuleKind

	// Indicates the properties of the security admin rule
	Properties *AdminPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource ID.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; The system metadata related to this resource.
	SystemData *SystemData

	// READ-ONLY; Resource type.
	Type *string
}

func (a *AdminRule) GetKind() (rv *AdminRuleKind) {
	if a != nil {
		return a.Kind
	}
	return
}

func (a *AdminRule) GetProperties() (rv *AdminPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *AdminRule) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *AdminRule) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AdminRule) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AdminRule) GetSystemData() (rv *SystemData) {
	if a != nil {
		return a.SystemData
	}
	return
}

func (a *AdminRule) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// GetBaseAdminRule implements the BaseAdminRuleClassification interface for type AdminRule.
func (a *AdminRule) GetBaseAdminRule() *BaseAdminRule {
	return &BaseAdminRule{
		Etag:       a.Etag,
		ID:         a.ID,
		Kind:       a.Kind,
		Name:       a.Name,
		SystemData: a.SystemData,
		Type:       a.Type,
	}
}

// AdminRuleCollection - Defines the admin rule collection.
type AdminRuleCollection struct {
	// Indicates the properties for the network manager admin rule collection.
	Properties *AdminRuleCollectionPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource ID.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; The system metadata related to this resource.
	SystemData *SystemData

	// READ-ONLY; Resource type.
	Type *string
}

func (a *AdminRuleCollection) GetProperties() (rv *AdminRuleCollectionPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *AdminRuleCollection) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *AdminRuleCollection) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AdminRuleCollection) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AdminRuleCollection) GetSystemData() (rv *SystemData) {
	if a != nil {
		return a.SystemData
	}
	return
}

func (a *AdminRuleCollection) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// AdminRuleCollectionListResult - Security admin configuration rule collection list result.
type AdminRuleCollectionListResult struct {
	// Gets the URL to get the next set of results.
	NextLink *string

	// A list of network manager security admin configuration rule collections
	Value []*AdminRuleCollection
}

func (a *AdminRuleCollectionListResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

func (a *AdminRuleCollectionListResult) GetValue() (rv []*AdminRuleCollection) {
	if a != nil {
		return a.Value
	}
	return
}

// AdminRuleCollectionPropertiesFormat - Defines the admin rule collection properties.
type AdminRuleCollectionPropertiesFormat struct {
	// REQUIRED; Groups for configuration
	AppliesToGroups []*ManagerSecurityGroupItem

	// A description of the admin rule collection.
	Description *string

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

func (a *AdminRuleCollectionPropertiesFormat) GetAppliesToGroups() (rv []*ManagerSecurityGroupItem) {
	if a != nil {
		return a.AppliesToGroups
	}
	return
}

func (a *AdminRuleCollectionPropertiesFormat) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AdminRuleCollectionPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// AdminRuleListResult - security configuration admin rule list result.
type AdminRuleListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of admin rules
	Value []BaseAdminRuleClassification
}

func (a *AdminRuleListResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

func (a *AdminRuleListResult) GetValue() (rv []BaseAdminRuleClassification) {
	if a != nil {
		return a.Value
	}
	return
}

// ApplicationGateway - Application gateway resource.
type ApplicationGateway struct {
	// Resource ID.
	ID *string

	// The identity of the application gateway, if configured.
	Identity *ManagedServiceIdentity

	// Resource location.
	Location *string

	// Properties of the application gateway.
	Properties *ApplicationGatewayPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// A list of availability zones denoting where the resource needs to come from.
	Zones []*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (a *ApplicationGateway) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGateway) GetIdentity() (rv *ManagedServiceIdentity) {
	if a != nil {
		return a.Identity
	}
	return
}

func (a *ApplicationGateway) GetLocation() (rv string) {
	if a != nil && a.Location != nil {
		return *a.Location
	}
	return
}

func (a *ApplicationGateway) GetProperties() (rv *ApplicationGatewayPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGateway) GetTags() (rv map[string]*string) {
	if a != nil {
		return a.Tags
	}
	return
}

func (a *ApplicationGateway) GetZones() (rv []*string) {
	if a != nil {
		return a.Zones
	}
	return
}

func (a *ApplicationGateway) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGateway) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGateway) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayAuthenticationCertificate - Authentication certificates of an application gateway.
type ApplicationGatewayAuthenticationCertificate struct {
	// Resource ID.
	ID *string

	// Name of the authentication certificate that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway authentication certificate.
	Properties *ApplicationGatewayAuthenticationCertificatePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayAuthenticationCertificate) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayAuthenticationCertificate) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayAuthenticationCertificate) GetProperties() (rv *ApplicationGatewayAuthenticationCertificatePropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayAuthenticationCertificate) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayAuthenticationCertificate) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayAuthenticationCertificatePropertiesFormat - Authentication certificates properties of an application
// gateway.
type ApplicationGatewayAuthenticationCertificatePropertiesFormat struct {
	// Certificate public data.
	Data *string

	// READ-ONLY; The provisioning state of the authentication certificate resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayAuthenticationCertificatePropertiesFormat) GetData() (rv string) {
	if a != nil && a.Data != nil {
		return *a.Data
	}
	return
}

func (a *ApplicationGatewayAuthenticationCertificatePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayAutoscaleConfiguration - Application Gateway autoscale configuration.
type ApplicationGatewayAutoscaleConfiguration struct {
	// REQUIRED; Lower bound on number of Application Gateway capacity.
	MinCapacity *int32

	// Upper bound on number of Application Gateway capacity.
	MaxCapacity *int32
}

func (a *ApplicationGatewayAutoscaleConfiguration) GetMinCapacity() (rv int32) {
	if a != nil && a.MinCapacity != nil {
		return *a.MinCapacity
	}
	return
}

func (a *ApplicationGatewayAutoscaleConfiguration) GetMaxCapacity() (rv int32) {
	if a != nil && a.MaxCapacity != nil {
		return *a.MaxCapacity
	}
	return
}

// ApplicationGatewayAvailableSSLOptions - Response for ApplicationGatewayAvailableSslOptions API service call.
type ApplicationGatewayAvailableSSLOptions struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the application gateway available SSL options.
	Properties *ApplicationGatewayAvailableSSLOptionsPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (a *ApplicationGatewayAvailableSSLOptions) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayAvailableSSLOptions) GetLocation() (rv string) {
	if a != nil && a.Location != nil {
		return *a.Location
	}
	return
}

func (a *ApplicationGatewayAvailableSSLOptions) GetProperties() (rv *ApplicationGatewayAvailableSSLOptionsPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayAvailableSSLOptions) GetTags() (rv map[string]*string) {
	if a != nil {
		return a.Tags
	}
	return
}

func (a *ApplicationGatewayAvailableSSLOptions) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayAvailableSSLOptions) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayAvailableSSLOptionsPropertiesFormat - Properties of ApplicationGatewayAvailableSslOptions.
type ApplicationGatewayAvailableSSLOptionsPropertiesFormat struct {
	// List of available Ssl cipher suites.
	AvailableCipherSuites []*ApplicationGatewaySSLCipherSuite

	// List of available Ssl protocols.
	AvailableProtocols []*ApplicationGatewaySSLProtocol

	// Name of the Ssl predefined policy applied by default to application gateway.
	DefaultPolicy *ApplicationGatewaySSLPolicyName

	// List of available Ssl predefined policy.
	PredefinedPolicies []*SubResource
}

func (a *ApplicationGatewayAvailableSSLOptionsPropertiesFormat) GetAvailableCipherSuites() (rv []*ApplicationGatewaySSLCipherSuite) {
	if a != nil {
		return a.AvailableCipherSuites
	}
	return
}

func (a *ApplicationGatewayAvailableSSLOptionsPropertiesFormat) GetAvailableProtocols() (rv []*ApplicationGatewaySSLProtocol) {
	if a != nil {
		return a.AvailableProtocols
	}
	return
}

func (a *ApplicationGatewayAvailableSSLOptionsPropertiesFormat) GetDefaultPolicy() (rv *ApplicationGatewaySSLPolicyName) {
	if a != nil {
		return a.DefaultPolicy
	}
	return
}

func (a *ApplicationGatewayAvailableSSLOptionsPropertiesFormat) GetPredefinedPolicies() (rv []*SubResource) {
	if a != nil {
		return a.PredefinedPolicies
	}
	return
}

// ApplicationGatewayAvailableSSLPredefinedPolicies - Response for ApplicationGatewayAvailableSslOptions API service call.
type ApplicationGatewayAvailableSSLPredefinedPolicies struct {
	// URL to get the next set of results.
	NextLink *string

	// List of available Ssl predefined policy.
	Value []*ApplicationGatewaySSLPredefinedPolicy
}

func (a *ApplicationGatewayAvailableSSLPredefinedPolicies) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

func (a *ApplicationGatewayAvailableSSLPredefinedPolicies) GetValue() (rv []*ApplicationGatewaySSLPredefinedPolicy) {
	if a != nil {
		return a.Value
	}
	return
}

// ApplicationGatewayAvailableWafRuleSetsResult - Response for ApplicationGatewayAvailableWafRuleSets API service call.
type ApplicationGatewayAvailableWafRuleSetsResult struct {
	// The list of application gateway rule sets.
	Value []*ApplicationGatewayFirewallRuleSet
}

func (a *ApplicationGatewayAvailableWafRuleSetsResult) GetValue() (rv []*ApplicationGatewayFirewallRuleSet) {
	if a != nil {
		return a.Value
	}
	return
}

// ApplicationGatewayBackendAddress - Backend address of an application gateway.
type ApplicationGatewayBackendAddress struct {
	// Fully qualified domain name (FQDN).
	Fqdn *string

	// IP address.
	IPAddress *string
}

func (a *ApplicationGatewayBackendAddress) GetFqdn() (rv string) {
	if a != nil && a.Fqdn != nil {
		return *a.Fqdn
	}
	return
}

func (a *ApplicationGatewayBackendAddress) GetIPAddress() (rv string) {
	if a != nil && a.IPAddress != nil {
		return *a.IPAddress
	}
	return
}

// ApplicationGatewayBackendAddressPool - Backend Address Pool of an application gateway.
type ApplicationGatewayBackendAddressPool struct {
	// Resource ID.
	ID *string

	// Name of the backend address pool that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway backend address pool.
	Properties *ApplicationGatewayBackendAddressPoolPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayBackendAddressPool) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayBackendAddressPool) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayBackendAddressPool) GetProperties() (rv *ApplicationGatewayBackendAddressPoolPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayBackendAddressPool) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayBackendAddressPool) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayBackendAddressPoolPropertiesFormat - Properties of Backend Address Pool of an application gateway.
type ApplicationGatewayBackendAddressPoolPropertiesFormat struct {
	// Backend addresses.
	BackendAddresses []*ApplicationGatewayBackendAddress

	// READ-ONLY; Collection of references to IPs defined in network interfaces.
	BackendIPConfigurations []*InterfaceIPConfiguration

	// READ-ONLY; The provisioning state of the backend address pool resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayBackendAddressPoolPropertiesFormat) GetBackendAddresses() (rv []*ApplicationGatewayBackendAddress) {
	if a != nil {
		return a.BackendAddresses
	}
	return
}

func (a *ApplicationGatewayBackendAddressPoolPropertiesFormat) GetBackendIPConfigurations() (rv []*InterfaceIPConfiguration) {
	if a != nil {
		return a.BackendIPConfigurations
	}
	return
}

func (a *ApplicationGatewayBackendAddressPoolPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayBackendHTTPSettings - Backend address pool settings of an application gateway.
type ApplicationGatewayBackendHTTPSettings struct {
	// Resource ID.
	ID *string

	// Name of the backend http settings that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway backend HTTP settings.
	Properties *ApplicationGatewayBackendHTTPSettingsPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayBackendHTTPSettings) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettings) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettings) GetProperties() (rv *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettings) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettings) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayBackendHTTPSettingsPropertiesFormat - Properties of Backend address pool settings of an application gateway.
type ApplicationGatewayBackendHTTPSettingsPropertiesFormat struct {
	// Cookie name to use for the affinity cookie.
	AffinityCookieName *string

	// Array of references to application gateway authentication certificates.
	AuthenticationCertificates []*SubResource

	// Connection draining of the backend http settings resource.
	ConnectionDraining *ApplicationGatewayConnectionDraining

	// Cookie based affinity.
	CookieBasedAffinity *ApplicationGatewayCookieBasedAffinity

	// Host header to be sent to the backend servers.
	HostName *string

	// Path which should be used as a prefix for all HTTP requests. Null means no path will be prefixed. Default value is null.
	Path *string

	// Whether to pick host header should be picked from the host name of the backend server. Default value is false.
	PickHostNameFromBackendAddress *bool

	// The destination port on the backend.
	Port *int32

	// Probe resource of an application gateway.
	Probe *SubResource

	// Whether the probe is enabled. Default value is false.
	ProbeEnabled *bool

	// The protocol used to communicate with the backend.
	Protocol *ApplicationGatewayProtocol

	// Request timeout in seconds. Application Gateway will fail the request if response is not received within RequestTimeout.
	// Acceptable values are from 1 second to 86400 seconds.
	RequestTimeout *int32

	// Array of references to application gateway trusted root certificates.
	TrustedRootCertificates []*SubResource

	// READ-ONLY; The provisioning state of the backend HTTP settings resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetAffinityCookieName() (rv string) {
	if a != nil && a.AffinityCookieName != nil {
		return *a.AffinityCookieName
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetAuthenticationCertificates() (rv []*SubResource) {
	if a != nil {
		return a.AuthenticationCertificates
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetConnectionDraining() (rv *ApplicationGatewayConnectionDraining) {
	if a != nil {
		return a.ConnectionDraining
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetCookieBasedAffinity() (rv *ApplicationGatewayCookieBasedAffinity) {
	if a != nil {
		return a.CookieBasedAffinity
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetHostName() (rv string) {
	if a != nil && a.HostName != nil {
		return *a.HostName
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetPath() (rv string) {
	if a != nil && a.Path != nil {
		return *a.Path
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetPickHostNameFromBackendAddress() (rv bool) {
	if a != nil && a.PickHostNameFromBackendAddress != nil {
		return *a.PickHostNameFromBackendAddress
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetPort() (rv int32) {
	if a != nil && a.Port != nil {
		return *a.Port
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetProbe() (rv *SubResource) {
	if a != nil {
		return a.Probe
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetProbeEnabled() (rv bool) {
	if a != nil && a.ProbeEnabled != nil {
		return *a.ProbeEnabled
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetProtocol() (rv *ApplicationGatewayProtocol) {
	if a != nil {
		return a.Protocol
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetRequestTimeout() (rv int32) {
	if a != nil && a.RequestTimeout != nil {
		return *a.RequestTimeout
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetTrustedRootCertificates() (rv []*SubResource) {
	if a != nil {
		return a.TrustedRootCertificates
	}
	return
}

func (a *ApplicationGatewayBackendHTTPSettingsPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayBackendHealth - Response for ApplicationGatewayBackendHealth API service call.
type ApplicationGatewayBackendHealth struct {
	// A list of ApplicationGatewayBackendHealthPool resources.
	BackendAddressPools []*ApplicationGatewayBackendHealthPool
}

func (a *ApplicationGatewayBackendHealth) GetBackendAddressPools() (rv []*ApplicationGatewayBackendHealthPool) {
	if a != nil {
		return a.BackendAddressPools
	}
	return
}

// ApplicationGatewayBackendHealthHTTPSettings - Application gateway BackendHealthHttp settings.
type ApplicationGatewayBackendHealthHTTPSettings struct {
	// Reference to an ApplicationGatewayBackendHttpSettings resource.
	BackendHTTPSettings *ApplicationGatewayBackendHTTPSettings

	// List of ApplicationGatewayBackendHealthServer resources.
	Servers []*ApplicationGatewayBackendHealthServer
}

func (a *ApplicationGatewayBackendHealthHTTPSettings) GetBackendHTTPSettings() (rv *ApplicationGatewayBackendHTTPSettings) {
	if a != nil {
		return a.BackendHTTPSettings
	}
	return
}

func (a *ApplicationGatewayBackendHealthHTTPSettings) GetServers() (rv []*ApplicationGatewayBackendHealthServer) {
	if a != nil {
		return a.Servers
	}
	return
}

// ApplicationGatewayBackendHealthOnDemand - Result of on demand test probe.
type ApplicationGatewayBackendHealthOnDemand struct {
	// Reference to an ApplicationGatewayBackendAddressPool resource.
	BackendAddressPool *ApplicationGatewayBackendAddressPool

	// Application gateway BackendHealthHttp settings.
	BackendHealthHTTPSettings *ApplicationGatewayBackendHealthHTTPSettings
}

func (a *ApplicationGatewayBackendHealthOnDemand) GetBackendAddressPool() (rv *ApplicationGatewayBackendAddressPool) {
	if a != nil {
		return a.BackendAddressPool
	}
	return
}

func (a *ApplicationGatewayBackendHealthOnDemand) GetBackendHealthHTTPSettings() (rv *ApplicationGatewayBackendHealthHTTPSettings) {
	if a != nil {
		return a.BackendHealthHTTPSettings
	}
	return
}

// ApplicationGatewayBackendHealthPool - Application gateway BackendHealth pool.
type ApplicationGatewayBackendHealthPool struct {
	// Reference to an ApplicationGatewayBackendAddressPool resource.
	BackendAddressPool *ApplicationGatewayBackendAddressPool

	// List of ApplicationGatewayBackendHealthHttpSettings resources.
	BackendHTTPSettingsCollection []*ApplicationGatewayBackendHealthHTTPSettings
}

func (a *ApplicationGatewayBackendHealthPool) GetBackendAddressPool() (rv *ApplicationGatewayBackendAddressPool) {
	if a != nil {
		return a.BackendAddressPool
	}
	return
}

func (a *ApplicationGatewayBackendHealthPool) GetBackendHTTPSettingsCollection() (rv []*ApplicationGatewayBackendHealthHTTPSettings) {
	if a != nil {
		return a.BackendHTTPSettingsCollection
	}
	return
}

// ApplicationGatewayBackendHealthServer - Application gateway backendhealth http settings.
type ApplicationGatewayBackendHealthServer struct {
	// IP address or FQDN of backend server.
	Address *string

	// Health of backend server.
	Health *ApplicationGatewayBackendHealthServerHealth

	// Health Probe Log.
	HealthProbeLog *string

	// Reference to IP configuration of backend server.
	IPConfiguration *InterfaceIPConfiguration
}

func (a *ApplicationGatewayBackendHealthServer) GetAddress() (rv string) {
	if a != nil && a.Address != nil {
		return *a.Address
	}
	return
}

func (a *ApplicationGatewayBackendHealthServer) GetHealth() (rv *ApplicationGatewayBackendHealthServerHealth) {
	if a != nil {
		return a.Health
	}
	return
}

func (a *ApplicationGatewayBackendHealthServer) GetHealthProbeLog() (rv string) {
	if a != nil && a.HealthProbeLog != nil {
		return *a.HealthProbeLog
	}
	return
}

func (a *ApplicationGatewayBackendHealthServer) GetIPConfiguration() (rv *InterfaceIPConfiguration) {
	if a != nil {
		return a.IPConfiguration
	}
	return
}

// ApplicationGatewayBackendSettings - Backend address pool settings of an application gateway.
type ApplicationGatewayBackendSettings struct {
	// Resource ID.
	ID *string

	// Name of the backend settings that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway backend settings.
	Properties *ApplicationGatewayBackendSettingsPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayBackendSettings) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayBackendSettings) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayBackendSettings) GetProperties() (rv *ApplicationGatewayBackendSettingsPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayBackendSettings) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayBackendSettings) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayBackendSettingsPropertiesFormat - Properties of Backend address pool settings of an application gateway.
type ApplicationGatewayBackendSettingsPropertiesFormat struct {
	// Server name indication to be sent to the backend servers for Tls protocol.
	HostName *string

	// Whether to pick server name indication from the host name of the backend server for Tls protocol. Default value is false.
	PickHostNameFromBackendAddress *bool

	// The destination port on the backend.
	Port *int32

	// Probe resource of an application gateway.
	Probe *SubResource

	// The protocol used to communicate with the backend.
	Protocol *ApplicationGatewayProtocol

	// Connection timeout in seconds. Application Gateway will fail the request if response is not received within ConnectionTimeout.
	// Acceptable values are from 1 second to 86400 seconds.
	Timeout *int32

	// Array of references to application gateway trusted root certificates.
	TrustedRootCertificates []*SubResource

	// READ-ONLY; The provisioning state of the backend HTTP settings resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayBackendSettingsPropertiesFormat) GetHostName() (rv string) {
	if a != nil && a.HostName != nil {
		return *a.HostName
	}
	return
}

func (a *ApplicationGatewayBackendSettingsPropertiesFormat) GetPickHostNameFromBackendAddress() (rv bool) {
	if a != nil && a.PickHostNameFromBackendAddress != nil {
		return *a.PickHostNameFromBackendAddress
	}
	return
}

func (a *ApplicationGatewayBackendSettingsPropertiesFormat) GetPort() (rv int32) {
	if a != nil && a.Port != nil {
		return *a.Port
	}
	return
}

func (a *ApplicationGatewayBackendSettingsPropertiesFormat) GetProbe() (rv *SubResource) {
	if a != nil {
		return a.Probe
	}
	return
}

func (a *ApplicationGatewayBackendSettingsPropertiesFormat) GetProtocol() (rv *ApplicationGatewayProtocol) {
	if a != nil {
		return a.Protocol
	}
	return
}

func (a *ApplicationGatewayBackendSettingsPropertiesFormat) GetTimeout() (rv int32) {
	if a != nil && a.Timeout != nil {
		return *a.Timeout
	}
	return
}

func (a *ApplicationGatewayBackendSettingsPropertiesFormat) GetTrustedRootCertificates() (rv []*SubResource) {
	if a != nil {
		return a.TrustedRootCertificates
	}
	return
}

func (a *ApplicationGatewayBackendSettingsPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayClientAuthConfiguration - Application gateway client authentication configuration.
type ApplicationGatewayClientAuthConfiguration struct {
	// Verify client certificate issuer name on the application gateway.
	VerifyClientCertIssuerDN *bool

	// Verify client certificate revocation status.
	VerifyClientRevocation *ApplicationGatewayClientRevocationOptions
}

func (a *ApplicationGatewayClientAuthConfiguration) GetVerifyClientCertIssuerDN() (rv bool) {
	if a != nil && a.VerifyClientCertIssuerDN != nil {
		return *a.VerifyClientCertIssuerDN
	}
	return
}

func (a *ApplicationGatewayClientAuthConfiguration) GetVerifyClientRevocation() (rv *ApplicationGatewayClientRevocationOptions) {
	if a != nil {
		return a.VerifyClientRevocation
	}
	return
}

// ApplicationGatewayConnectionDraining - Connection draining allows open connections to a backend server to be active for
// a specified time after the backend server got removed from the configuration.
type ApplicationGatewayConnectionDraining struct {
	// REQUIRED; The number of seconds connection draining is active. Acceptable values are from 1 second to 3600 seconds.
	DrainTimeoutInSec *int32

	// REQUIRED; Whether connection draining is enabled or not.
	Enabled *bool
}

func (a *ApplicationGatewayConnectionDraining) GetDrainTimeoutInSec() (rv int32) {
	if a != nil && a.DrainTimeoutInSec != nil {
		return *a.DrainTimeoutInSec
	}
	return
}

func (a *ApplicationGatewayConnectionDraining) GetEnabled() (rv bool) {
	if a != nil && a.Enabled != nil {
		return *a.Enabled
	}
	return
}

// ApplicationGatewayCustomError - Custom error of an application gateway.
type ApplicationGatewayCustomError struct {
	// Error page URL of the application gateway custom error.
	CustomErrorPageURL *string

	// Status code of the application gateway custom error.
	StatusCode *ApplicationGatewayCustomErrorStatusCode
}

func (a *ApplicationGatewayCustomError) GetCustomErrorPageURL() (rv string) {
	if a != nil && a.CustomErrorPageURL != nil {
		return *a.CustomErrorPageURL
	}
	return
}

func (a *ApplicationGatewayCustomError) GetStatusCode() (rv *ApplicationGatewayCustomErrorStatusCode) {
	if a != nil {
		return a.StatusCode
	}
	return
}

// ApplicationGatewayFirewallDisabledRuleGroup - Allows to disable rules within a rule group or an entire rule group.
type ApplicationGatewayFirewallDisabledRuleGroup struct {
	// REQUIRED; The name of the rule group that will be disabled.
	RuleGroupName *string

	// The list of rules that will be disabled. If null, all rules of the rule group will be disabled.
	Rules []*int32
}

func (a *ApplicationGatewayFirewallDisabledRuleGroup) GetRuleGroupName() (rv string) {
	if a != nil && a.RuleGroupName != nil {
		return *a.RuleGroupName
	}
	return
}

func (a *ApplicationGatewayFirewallDisabledRuleGroup) GetRules() (rv []*int32) {
	if a != nil {
		return a.Rules
	}
	return
}

// ApplicationGatewayFirewallExclusion - Allow to exclude some variable satisfy the condition for the WAF check.
type ApplicationGatewayFirewallExclusion struct {
	// REQUIRED; The variable to be excluded.
	MatchVariable *string

	// REQUIRED; When matchVariable is a collection, operator used to specify which elements in the collection this exclusion
	// applies to.
	Selector *string

	// REQUIRED; When matchVariable is a collection, operate on the selector to specify which elements in the collection this
	// exclusion applies to.
	SelectorMatchOperator *string
}

func (a *ApplicationGatewayFirewallExclusion) GetMatchVariable() (rv string) {
	if a != nil && a.MatchVariable != nil {
		return *a.MatchVariable
	}
	return
}

func (a *ApplicationGatewayFirewallExclusion) GetSelector() (rv string) {
	if a != nil && a.Selector != nil {
		return *a.Selector
	}
	return
}

func (a *ApplicationGatewayFirewallExclusion) GetSelectorMatchOperator() (rv string) {
	if a != nil && a.SelectorMatchOperator != nil {
		return *a.SelectorMatchOperator
	}
	return
}

// ApplicationGatewayFirewallManifestRuleSet - Properties of the web application firewall rule set.
type ApplicationGatewayFirewallManifestRuleSet struct {
	// REQUIRED; The rule groups of the web application firewall rule set.
	RuleGroups []*ApplicationGatewayFirewallRuleGroup

	// REQUIRED; The type of the web application firewall rule set.
	RuleSetType *string

	// REQUIRED; The version of the web application firewall rule set type.
	RuleSetVersion *string

	// The rule set status
	Status *ApplicationGatewayRuleSetStatusOptions

	// Tier of an application gateway that support the rule set.
	Tiers []*ApplicationGatewayTierTypes
}

func (a *ApplicationGatewayFirewallManifestRuleSet) GetRuleGroups() (rv []*ApplicationGatewayFirewallRuleGroup) {
	if a != nil {
		return a.RuleGroups
	}
	return
}

func (a *ApplicationGatewayFirewallManifestRuleSet) GetRuleSetType() (rv string) {
	if a != nil && a.RuleSetType != nil {
		return *a.RuleSetType
	}
	return
}

func (a *ApplicationGatewayFirewallManifestRuleSet) GetRuleSetVersion() (rv string) {
	if a != nil && a.RuleSetVersion != nil {
		return *a.RuleSetVersion
	}
	return
}

func (a *ApplicationGatewayFirewallManifestRuleSet) GetStatus() (rv *ApplicationGatewayRuleSetStatusOptions) {
	if a != nil {
		return a.Status
	}
	return
}

func (a *ApplicationGatewayFirewallManifestRuleSet) GetTiers() (rv []*ApplicationGatewayTierTypes) {
	if a != nil {
		return a.Tiers
	}
	return
}

// ApplicationGatewayFirewallRule - A web application firewall rule.
type ApplicationGatewayFirewallRule struct {
	// REQUIRED; The identifier of the web application firewall rule.
	RuleID *int32

	// The string representation of the web application firewall rule action.
	Action *ApplicationGatewayWafRuleActionTypes

	// The description of the web application firewall rule.
	Description *string

	// The string representation of the web application firewall rule identifier.
	RuleIDString *string

	// The string representation of the web application firewall rule state.
	State *ApplicationGatewayWafRuleStateTypes
}

func (a *ApplicationGatewayFirewallRule) GetRuleID() (rv int32) {
	if a != nil && a.RuleID != nil {
		return *a.RuleID
	}
	return
}

func (a *ApplicationGatewayFirewallRule) GetAction() (rv *ApplicationGatewayWafRuleActionTypes) {
	if a != nil {
		return a.Action
	}
	return
}

func (a *ApplicationGatewayFirewallRule) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *ApplicationGatewayFirewallRule) GetRuleIDString() (rv string) {
	if a != nil && a.RuleIDString != nil {
		return *a.RuleIDString
	}
	return
}

func (a *ApplicationGatewayFirewallRule) GetState() (rv *ApplicationGatewayWafRuleStateTypes) {
	if a != nil {
		return a.State
	}
	return
}

// ApplicationGatewayFirewallRuleGroup - A web application firewall rule group.
type ApplicationGatewayFirewallRuleGroup struct {
	// REQUIRED; The name of the web application firewall rule group.
	RuleGroupName *string

	// REQUIRED; The rules of the web application firewall rule group.
	Rules []*ApplicationGatewayFirewallRule

	// The description of the web application firewall rule group.
	Description *string
}

func (a *ApplicationGatewayFirewallRuleGroup) GetRuleGroupName() (rv string) {
	if a != nil && a.RuleGroupName != nil {
		return *a.RuleGroupName
	}
	return
}

func (a *ApplicationGatewayFirewallRuleGroup) GetRules() (rv []*ApplicationGatewayFirewallRule) {
	if a != nil {
		return a.Rules
	}
	return
}

func (a *ApplicationGatewayFirewallRuleGroup) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

// ApplicationGatewayFirewallRuleSet - A web application firewall rule set.
type ApplicationGatewayFirewallRuleSet struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the application gateway firewall rule set.
	Properties *ApplicationGatewayFirewallRuleSetPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (a *ApplicationGatewayFirewallRuleSet) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayFirewallRuleSet) GetLocation() (rv string) {
	if a != nil && a.Location != nil {
		return *a.Location
	}
	return
}

func (a *ApplicationGatewayFirewallRuleSet) GetProperties() (rv *ApplicationGatewayFirewallRuleSetPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayFirewallRuleSet) GetTags() (rv map[string]*string) {
	if a != nil {
		return a.Tags
	}
	return
}

func (a *ApplicationGatewayFirewallRuleSet) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayFirewallRuleSet) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayFirewallRuleSetPropertiesFormat - Properties of the web application firewall rule set.
type ApplicationGatewayFirewallRuleSetPropertiesFormat struct {
	// REQUIRED; The rule groups of the web application firewall rule set.
	RuleGroups []*ApplicationGatewayFirewallRuleGroup

	// REQUIRED; The type of the web application firewall rule set.
	RuleSetType *string

	// REQUIRED; The version of the web application firewall rule set type.
	RuleSetVersion *string

	// Tier of an application gateway that support the rule set.
	Tiers []*ApplicationGatewayTierTypes

	// READ-ONLY; The provisioning state of the web application firewall rule set.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayFirewallRuleSetPropertiesFormat) GetRuleGroups() (rv []*ApplicationGatewayFirewallRuleGroup) {
	if a != nil {
		return a.RuleGroups
	}
	return
}

func (a *ApplicationGatewayFirewallRuleSetPropertiesFormat) GetRuleSetType() (rv string) {
	if a != nil && a.RuleSetType != nil {
		return *a.RuleSetType
	}
	return
}

func (a *ApplicationGatewayFirewallRuleSetPropertiesFormat) GetRuleSetVersion() (rv string) {
	if a != nil && a.RuleSetVersion != nil {
		return *a.RuleSetVersion
	}
	return
}

func (a *ApplicationGatewayFirewallRuleSetPropertiesFormat) GetTiers() (rv []*ApplicationGatewayTierTypes) {
	if a != nil {
		return a.Tiers
	}
	return
}

func (a *ApplicationGatewayFirewallRuleSetPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayFrontendIPConfiguration - Frontend IP configuration of an application gateway.
type ApplicationGatewayFrontendIPConfiguration struct {
	// Resource ID.
	ID *string

	// Name of the frontend IP configuration that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway frontend IP configuration.
	Properties *ApplicationGatewayFrontendIPConfigurationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayFrontendIPConfiguration) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayFrontendIPConfiguration) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayFrontendIPConfiguration) GetProperties() (rv *ApplicationGatewayFrontendIPConfigurationPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayFrontendIPConfiguration) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayFrontendIPConfiguration) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayFrontendIPConfigurationPropertiesFormat - Properties of Frontend IP configuration of an application gateway.
type ApplicationGatewayFrontendIPConfigurationPropertiesFormat struct {
	// PrivateIPAddress of the network interface IP Configuration.
	PrivateIPAddress *string

	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod

	// Reference to the application gateway private link configuration.
	PrivateLinkConfiguration *SubResource

	// Reference to the PublicIP resource.
	PublicIPAddress *SubResource

	// Reference to the subnet resource.
	Subnet *SubResource

	// READ-ONLY; The provisioning state of the frontend IP configuration resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayFrontendIPConfigurationPropertiesFormat) GetPrivateIPAddress() (rv string) {
	if a != nil && a.PrivateIPAddress != nil {
		return *a.PrivateIPAddress
	}
	return
}

func (a *ApplicationGatewayFrontendIPConfigurationPropertiesFormat) GetPrivateIPAllocationMethod() (rv *IPAllocationMethod) {
	if a != nil {
		return a.PrivateIPAllocationMethod
	}
	return
}

func (a *ApplicationGatewayFrontendIPConfigurationPropertiesFormat) GetPrivateLinkConfiguration() (rv *SubResource) {
	if a != nil {
		return a.PrivateLinkConfiguration
	}
	return
}

func (a *ApplicationGatewayFrontendIPConfigurationPropertiesFormat) GetPublicIPAddress() (rv *SubResource) {
	if a != nil {
		return a.PublicIPAddress
	}
	return
}

func (a *ApplicationGatewayFrontendIPConfigurationPropertiesFormat) GetSubnet() (rv *SubResource) {
	if a != nil {
		return a.Subnet
	}
	return
}

func (a *ApplicationGatewayFrontendIPConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayFrontendPort - Frontend port of an application gateway.
type ApplicationGatewayFrontendPort struct {
	// Resource ID.
	ID *string

	// Name of the frontend port that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway frontend port.
	Properties *ApplicationGatewayFrontendPortPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayFrontendPort) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayFrontendPort) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayFrontendPort) GetProperties() (rv *ApplicationGatewayFrontendPortPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayFrontendPort) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayFrontendPort) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayFrontendPortPropertiesFormat - Properties of Frontend port of an application gateway.
type ApplicationGatewayFrontendPortPropertiesFormat struct {
	// Frontend port.
	Port *int32

	// READ-ONLY; The provisioning state of the frontend port resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayFrontendPortPropertiesFormat) GetPort() (rv int32) {
	if a != nil && a.Port != nil {
		return *a.Port
	}
	return
}

func (a *ApplicationGatewayFrontendPortPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayGlobalConfiguration - Application Gateway global configuration.
type ApplicationGatewayGlobalConfiguration struct {
	// Enable request buffering.
	EnableRequestBuffering *bool

	// Enable response buffering.
	EnableResponseBuffering *bool
}

func (a *ApplicationGatewayGlobalConfiguration) GetEnableRequestBuffering() (rv bool) {
	if a != nil && a.EnableRequestBuffering != nil {
		return *a.EnableRequestBuffering
	}
	return
}

func (a *ApplicationGatewayGlobalConfiguration) GetEnableResponseBuffering() (rv bool) {
	if a != nil && a.EnableResponseBuffering != nil {
		return *a.EnableResponseBuffering
	}
	return
}

// ApplicationGatewayHTTPListener - Http listener of an application gateway.
type ApplicationGatewayHTTPListener struct {
	// Resource ID.
	ID *string

	// Name of the HTTP listener that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway HTTP listener.
	Properties *ApplicationGatewayHTTPListenerPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayHTTPListener) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayHTTPListener) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayHTTPListener) GetProperties() (rv *ApplicationGatewayHTTPListenerPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayHTTPListener) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayHTTPListener) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayHTTPListenerPropertiesFormat - Properties of HTTP listener of an application gateway.
type ApplicationGatewayHTTPListenerPropertiesFormat struct {
	// Custom error configurations of the HTTP listener.
	CustomErrorConfigurations []*ApplicationGatewayCustomError

	// Reference to the FirewallPolicy resource.
	FirewallPolicy *SubResource

	// Frontend IP configuration resource of an application gateway.
	FrontendIPConfiguration *SubResource

	// Frontend port resource of an application gateway.
	FrontendPort *SubResource

	// Host name of HTTP listener.
	HostName *string

	// List of Host names for HTTP Listener that allows special wildcard characters as well.
	HostNames []*string

	// Protocol of the HTTP listener.
	Protocol *ApplicationGatewayProtocol

	// Applicable only if protocol is https. Enables SNI for multi-hosting.
	RequireServerNameIndication *bool

	// SSL certificate resource of an application gateway.
	SSLCertificate *SubResource

	// SSL profile resource of the application gateway.
	SSLProfile *SubResource

	// READ-ONLY; The provisioning state of the HTTP listener resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayHTTPListenerPropertiesFormat) GetCustomErrorConfigurations() (rv []*ApplicationGatewayCustomError) {
	if a != nil {
		return a.CustomErrorConfigurations
	}
	return
}

func (a *ApplicationGatewayHTTPListenerPropertiesFormat) GetFirewallPolicy() (rv *SubResource) {
	if a != nil {
		return a.FirewallPolicy
	}
	return
}

func (a *ApplicationGatewayHTTPListenerPropertiesFormat) GetFrontendIPConfiguration() (rv *SubResource) {
	if a != nil {
		return a.FrontendIPConfiguration
	}
	return
}

func (a *ApplicationGatewayHTTPListenerPropertiesFormat) GetFrontendPort() (rv *SubResource) {
	if a != nil {
		return a.FrontendPort
	}
	return
}

func (a *ApplicationGatewayHTTPListenerPropertiesFormat) GetHostName() (rv string) {
	if a != nil && a.HostName != nil {
		return *a.HostName
	}
	return
}

func (a *ApplicationGatewayHTTPListenerPropertiesFormat) GetHostNames() (rv []*string) {
	if a != nil {
		return a.HostNames
	}
	return
}

func (a *ApplicationGatewayHTTPListenerPropertiesFormat) GetProtocol() (rv *ApplicationGatewayProtocol) {
	if a != nil {
		return a.Protocol
	}
	return
}

func (a *ApplicationGatewayHTTPListenerPropertiesFormat) GetRequireServerNameIndication() (rv bool) {
	if a != nil && a.RequireServerNameIndication != nil {
		return *a.RequireServerNameIndication
	}
	return
}

func (a *ApplicationGatewayHTTPListenerPropertiesFormat) GetSSLCertificate() (rv *SubResource) {
	if a != nil {
		return a.SSLCertificate
	}
	return
}

func (a *ApplicationGatewayHTTPListenerPropertiesFormat) GetSSLProfile() (rv *SubResource) {
	if a != nil {
		return a.SSLProfile
	}
	return
}

func (a *ApplicationGatewayHTTPListenerPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayHeaderConfiguration - Header configuration of the Actions set in Application Gateway.
type ApplicationGatewayHeaderConfiguration struct {
	// Header name of the header configuration.
	HeaderName *string

	// Header value of the header configuration.
	HeaderValue *string
}

func (a *ApplicationGatewayHeaderConfiguration) GetHeaderName() (rv string) {
	if a != nil && a.HeaderName != nil {
		return *a.HeaderName
	}
	return
}

func (a *ApplicationGatewayHeaderConfiguration) GetHeaderValue() (rv string) {
	if a != nil && a.HeaderValue != nil {
		return *a.HeaderValue
	}
	return
}

// ApplicationGatewayIPConfiguration - IP configuration of an application gateway. Currently 1 public and 1 private IP configuration
// is allowed.
type ApplicationGatewayIPConfiguration struct {
	// Resource ID.
	ID *string

	// Name of the IP configuration that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway IP configuration.
	Properties *ApplicationGatewayIPConfigurationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayIPConfiguration) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayIPConfiguration) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayIPConfiguration) GetProperties() (rv *ApplicationGatewayIPConfigurationPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayIPConfiguration) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayIPConfiguration) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayIPConfigurationPropertiesFormat - Properties of IP configuration of an application gateway.
type ApplicationGatewayIPConfigurationPropertiesFormat struct {
	// Reference to the subnet resource. A subnet from where application gateway gets its private address.
	Subnet *SubResource

	// READ-ONLY; The provisioning state of the application gateway IP configuration resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayIPConfigurationPropertiesFormat) GetSubnet() (rv *SubResource) {
	if a != nil {
		return a.Subnet
	}
	return
}

func (a *ApplicationGatewayIPConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayListResult - Response for ListApplicationGateways API service call.
type ApplicationGatewayListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of an application gateways in a resource group.
	Value []*ApplicationGateway
}

func (a *ApplicationGatewayListResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

func (a *ApplicationGatewayListResult) GetValue() (rv []*ApplicationGateway) {
	if a != nil {
		return a.Value
	}
	return
}

// ApplicationGatewayListener - Listener of an application gateway.
type ApplicationGatewayListener struct {
	// Resource ID.
	ID *string

	// Name of the listener that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway listener.
	Properties *ApplicationGatewayListenerPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayListener) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayListener) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayListener) GetProperties() (rv *ApplicationGatewayListenerPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayListener) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayListener) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayListenerPropertiesFormat - Properties of listener of an application gateway.
type ApplicationGatewayListenerPropertiesFormat struct {
	// Frontend IP configuration resource of an application gateway.
	FrontendIPConfiguration *SubResource

	// Frontend port resource of an application gateway.
	FrontendPort *SubResource

	// Protocol of the listener.
	Protocol *ApplicationGatewayProtocol

	// SSL certificate resource of an application gateway.
	SSLCertificate *SubResource

	// SSL profile resource of the application gateway.
	SSLProfile *SubResource

	// READ-ONLY; The provisioning state of the listener resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayListenerPropertiesFormat) GetFrontendIPConfiguration() (rv *SubResource) {
	if a != nil {
		return a.FrontendIPConfiguration
	}
	return
}

func (a *ApplicationGatewayListenerPropertiesFormat) GetFrontendPort() (rv *SubResource) {
	if a != nil {
		return a.FrontendPort
	}
	return
}

func (a *ApplicationGatewayListenerPropertiesFormat) GetProtocol() (rv *ApplicationGatewayProtocol) {
	if a != nil {
		return a.Protocol
	}
	return
}

func (a *ApplicationGatewayListenerPropertiesFormat) GetSSLCertificate() (rv *SubResource) {
	if a != nil {
		return a.SSLCertificate
	}
	return
}

func (a *ApplicationGatewayListenerPropertiesFormat) GetSSLProfile() (rv *SubResource) {
	if a != nil {
		return a.SSLProfile
	}
	return
}

func (a *ApplicationGatewayListenerPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayLoadDistributionPolicy - Load Distribution Policy of an application gateway.
type ApplicationGatewayLoadDistributionPolicy struct {
	// Resource ID.
	ID *string

	// Name of the load distribution policy that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway load distribution policy.
	Properties *ApplicationGatewayLoadDistributionPolicyPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayLoadDistributionPolicy) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayLoadDistributionPolicy) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayLoadDistributionPolicy) GetProperties() (rv *ApplicationGatewayLoadDistributionPolicyPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayLoadDistributionPolicy) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayLoadDistributionPolicy) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayLoadDistributionPolicyPropertiesFormat - Properties of Load Distribution Policy of an application gateway.
type ApplicationGatewayLoadDistributionPolicyPropertiesFormat struct {
	// Load Distribution Targets resource of an application gateway.
	LoadDistributionAlgorithm *ApplicationGatewayLoadDistributionAlgorithm

	// Load Distribution Targets resource of an application gateway.
	LoadDistributionTargets []*ApplicationGatewayLoadDistributionTarget

	// READ-ONLY; The provisioning state of the Load Distribution Policy resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayLoadDistributionPolicyPropertiesFormat) GetLoadDistributionAlgorithm() (rv *ApplicationGatewayLoadDistributionAlgorithm) {
	if a != nil {
		return a.LoadDistributionAlgorithm
	}
	return
}

func (a *ApplicationGatewayLoadDistributionPolicyPropertiesFormat) GetLoadDistributionTargets() (rv []*ApplicationGatewayLoadDistributionTarget) {
	if a != nil {
		return a.LoadDistributionTargets
	}
	return
}

func (a *ApplicationGatewayLoadDistributionPolicyPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayLoadDistributionTarget - Load Distribution Target of an application gateway.
type ApplicationGatewayLoadDistributionTarget struct {
	// Resource ID.
	ID *string

	// Name of the load distribution policy that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway load distribution target.
	Properties *ApplicationGatewayLoadDistributionTargetPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayLoadDistributionTarget) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayLoadDistributionTarget) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayLoadDistributionTarget) GetProperties() (rv *ApplicationGatewayLoadDistributionTargetPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayLoadDistributionTarget) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayLoadDistributionTarget) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

type ApplicationGatewayLoadDistributionTargetPropertiesFormat struct {
	// Backend address pool resource of the application gateway.
	BackendAddressPool *SubResource

	// Weight per server. Range between 1 and 100.
	WeightPerServer *int32
}

func (a *ApplicationGatewayLoadDistributionTargetPropertiesFormat) GetBackendAddressPool() (rv *SubResource) {
	if a != nil {
		return a.BackendAddressPool
	}
	return
}

func (a *ApplicationGatewayLoadDistributionTargetPropertiesFormat) GetWeightPerServer() (rv int32) {
	if a != nil && a.WeightPerServer != nil {
		return *a.WeightPerServer
	}
	return
}

// ApplicationGatewayOnDemandProbe - Details of on demand test probe request.
type ApplicationGatewayOnDemandProbe struct {
	// Reference to backend pool of application gateway to which probe request will be sent.
	BackendAddressPool *SubResource

	// Reference to backend http setting of application gateway to be used for test probe.
	BackendHTTPSettings *SubResource

	// Host name to send the probe to.
	Host *string

	// Criterion for classifying a healthy probe response.
	Match *ApplicationGatewayProbeHealthResponseMatch

	// Relative path of probe. Valid path starts from '/'. Probe is sent to ://:.
	Path *string

	// Whether the host header should be picked from the backend http settings. Default value is false.
	PickHostNameFromBackendHTTPSettings *bool

	// The protocol used for the probe.
	Protocol *ApplicationGatewayProtocol

	// The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable
	// values are from 1 second to 86400 seconds.
	Timeout *int32
}

func (a *ApplicationGatewayOnDemandProbe) GetBackendAddressPool() (rv *SubResource) {
	if a != nil {
		return a.BackendAddressPool
	}
	return
}

func (a *ApplicationGatewayOnDemandProbe) GetBackendHTTPSettings() (rv *SubResource) {
	if a != nil {
		return a.BackendHTTPSettings
	}
	return
}

func (a *ApplicationGatewayOnDemandProbe) GetHost() (rv string) {
	if a != nil && a.Host != nil {
		return *a.Host
	}
	return
}

func (a *ApplicationGatewayOnDemandProbe) GetMatch() (rv *ApplicationGatewayProbeHealthResponseMatch) {
	if a != nil {
		return a.Match
	}
	return
}

func (a *ApplicationGatewayOnDemandProbe) GetPath() (rv string) {
	if a != nil && a.Path != nil {
		return *a.Path
	}
	return
}

func (a *ApplicationGatewayOnDemandProbe) GetPickHostNameFromBackendHTTPSettings() (rv bool) {
	if a != nil && a.PickHostNameFromBackendHTTPSettings != nil {
		return *a.PickHostNameFromBackendHTTPSettings
	}
	return
}

func (a *ApplicationGatewayOnDemandProbe) GetProtocol() (rv *ApplicationGatewayProtocol) {
	if a != nil {
		return a.Protocol
	}
	return
}

func (a *ApplicationGatewayOnDemandProbe) GetTimeout() (rv int32) {
	if a != nil && a.Timeout != nil {
		return *a.Timeout
	}
	return
}

// ApplicationGatewayPathRule - Path rule of URL path map of an application gateway.
type ApplicationGatewayPathRule struct {
	// Resource ID.
	ID *string

	// Name of the path rule that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway path rule.
	Properties *ApplicationGatewayPathRulePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayPathRule) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayPathRule) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayPathRule) GetProperties() (rv *ApplicationGatewayPathRulePropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayPathRule) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayPathRule) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayPathRulePropertiesFormat - Properties of path rule of an application gateway.
type ApplicationGatewayPathRulePropertiesFormat struct {
	// Backend address pool resource of URL path map path rule.
	BackendAddressPool *SubResource

	// Backend http settings resource of URL path map path rule.
	BackendHTTPSettings *SubResource

	// Reference to the FirewallPolicy resource.
	FirewallPolicy *SubResource

	// Load Distribution Policy resource of URL path map path rule.
	LoadDistributionPolicy *SubResource

	// Path rules of URL path map.
	Paths []*string

	// Redirect configuration resource of URL path map path rule.
	RedirectConfiguration *SubResource

	// Rewrite rule set resource of URL path map path rule.
	RewriteRuleSet *SubResource

	// READ-ONLY; The provisioning state of the path rule resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayPathRulePropertiesFormat) GetBackendAddressPool() (rv *SubResource) {
	if a != nil {
		return a.BackendAddressPool
	}
	return
}

func (a *ApplicationGatewayPathRulePropertiesFormat) GetBackendHTTPSettings() (rv *SubResource) {
	if a != nil {
		return a.BackendHTTPSettings
	}
	return
}

func (a *ApplicationGatewayPathRulePropertiesFormat) GetFirewallPolicy() (rv *SubResource) {
	if a != nil {
		return a.FirewallPolicy
	}
	return
}

func (a *ApplicationGatewayPathRulePropertiesFormat) GetLoadDistributionPolicy() (rv *SubResource) {
	if a != nil {
		return a.LoadDistributionPolicy
	}
	return
}

func (a *ApplicationGatewayPathRulePropertiesFormat) GetPaths() (rv []*string) {
	if a != nil {
		return a.Paths
	}
	return
}

func (a *ApplicationGatewayPathRulePropertiesFormat) GetRedirectConfiguration() (rv *SubResource) {
	if a != nil {
		return a.RedirectConfiguration
	}
	return
}

func (a *ApplicationGatewayPathRulePropertiesFormat) GetRewriteRuleSet() (rv *SubResource) {
	if a != nil {
		return a.RewriteRuleSet
	}
	return
}

func (a *ApplicationGatewayPathRulePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayPrivateEndpointConnection - Private Endpoint connection on an application gateway.
type ApplicationGatewayPrivateEndpointConnection struct {
	// Resource ID.
	ID *string

	// Name of the private endpoint connection on an application gateway.
	Name *string

	// Properties of the application gateway private endpoint connection.
	Properties *ApplicationGatewayPrivateEndpointConnectionProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayPrivateEndpointConnection) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayPrivateEndpointConnection) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayPrivateEndpointConnection) GetProperties() (rv *ApplicationGatewayPrivateEndpointConnectionProperties) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayPrivateEndpointConnection) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayPrivateEndpointConnection) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayPrivateEndpointConnectionListResult - Response for ListApplicationGatewayPrivateEndpointConnection API
// service call. Gets all private endpoint connections for an application gateway.
type ApplicationGatewayPrivateEndpointConnectionListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of private endpoint connections on an application gateway.
	Value []*ApplicationGatewayPrivateEndpointConnection
}

func (a *ApplicationGatewayPrivateEndpointConnectionListResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

func (a *ApplicationGatewayPrivateEndpointConnectionListResult) GetValue() (rv []*ApplicationGatewayPrivateEndpointConnection) {
	if a != nil {
		return a.Value
	}
	return
}

// ApplicationGatewayPrivateEndpointConnectionProperties - Properties of Private Link Resource of an application gateway.
type ApplicationGatewayPrivateEndpointConnectionProperties struct {
	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState

	// READ-ONLY; The consumer link id.
	LinkIdentifier *string

	// READ-ONLY; The resource of private end point.
	PrivateEndpoint *PrivateEndpoint

	// READ-ONLY; The provisioning state of the application gateway private endpoint connection resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayPrivateEndpointConnectionProperties) GetPrivateLinkServiceConnectionState() (rv *PrivateLinkServiceConnectionState) {
	if a != nil {
		return a.PrivateLinkServiceConnectionState
	}
	return
}

func (a *ApplicationGatewayPrivateEndpointConnectionProperties) GetLinkIdentifier() (rv string) {
	if a != nil && a.LinkIdentifier != nil {
		return *a.LinkIdentifier
	}
	return
}

func (a *ApplicationGatewayPrivateEndpointConnectionProperties) GetPrivateEndpoint() (rv *PrivateEndpoint) {
	if a != nil {
		return a.PrivateEndpoint
	}
	return
}

func (a *ApplicationGatewayPrivateEndpointConnectionProperties) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayPrivateLinkConfiguration - Private Link Configuration on an application gateway.
type ApplicationGatewayPrivateLinkConfiguration struct {
	// Resource ID.
	ID *string

	// Name of the private link configuration that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway private link configuration.
	Properties *ApplicationGatewayPrivateLinkConfigurationProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayPrivateLinkConfiguration) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayPrivateLinkConfiguration) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayPrivateLinkConfiguration) GetProperties() (rv *ApplicationGatewayPrivateLinkConfigurationProperties) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayPrivateLinkConfiguration) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayPrivateLinkConfiguration) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayPrivateLinkConfigurationProperties - Properties of private link configuration on an application gateway.
type ApplicationGatewayPrivateLinkConfigurationProperties struct {
	// An array of application gateway private link ip configurations.
	IPConfigurations []*ApplicationGatewayPrivateLinkIPConfiguration

	// READ-ONLY; The provisioning state of the application gateway private link configuration.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayPrivateLinkConfigurationProperties) GetIPConfigurations() (rv []*ApplicationGatewayPrivateLinkIPConfiguration) {
	if a != nil {
		return a.IPConfigurations
	}
	return
}

func (a *ApplicationGatewayPrivateLinkConfigurationProperties) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayPrivateLinkIPConfiguration - The application gateway private link ip configuration.
type ApplicationGatewayPrivateLinkIPConfiguration struct {
	// Resource ID.
	ID *string

	// The name of application gateway private link ip configuration.
	Name *string

	// Properties of an application gateway private link ip configuration.
	Properties *ApplicationGatewayPrivateLinkIPConfigurationProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; The resource type.
	Type *string
}

func (a *ApplicationGatewayPrivateLinkIPConfiguration) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayPrivateLinkIPConfiguration) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayPrivateLinkIPConfiguration) GetProperties() (rv *ApplicationGatewayPrivateLinkIPConfigurationProperties) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayPrivateLinkIPConfiguration) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayPrivateLinkIPConfiguration) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayPrivateLinkIPConfigurationProperties - Properties of an application gateway private link IP configuration.
type ApplicationGatewayPrivateLinkIPConfigurationProperties struct {
	// Whether the ip configuration is primary or not.
	Primary *bool

	// The private IP address of the IP configuration.
	PrivateIPAddress *string

	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod

	// Reference to the subnet resource.
	Subnet *SubResource

	// READ-ONLY; The provisioning state of the application gateway private link IP configuration.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayPrivateLinkIPConfigurationProperties) GetPrimary() (rv bool) {
	if a != nil && a.Primary != nil {
		return *a.Primary
	}
	return
}

func (a *ApplicationGatewayPrivateLinkIPConfigurationProperties) GetPrivateIPAddress() (rv string) {
	if a != nil && a.PrivateIPAddress != nil {
		return *a.PrivateIPAddress
	}
	return
}

func (a *ApplicationGatewayPrivateLinkIPConfigurationProperties) GetPrivateIPAllocationMethod() (rv *IPAllocationMethod) {
	if a != nil {
		return a.PrivateIPAllocationMethod
	}
	return
}

func (a *ApplicationGatewayPrivateLinkIPConfigurationProperties) GetSubnet() (rv *SubResource) {
	if a != nil {
		return a.Subnet
	}
	return
}

func (a *ApplicationGatewayPrivateLinkIPConfigurationProperties) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayPrivateLinkResource - PrivateLink Resource of an application gateway.
type ApplicationGatewayPrivateLinkResource struct {
	// Resource ID.
	ID *string

	// Name of the private link resource that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway private link resource.
	Properties *ApplicationGatewayPrivateLinkResourceProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayPrivateLinkResource) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayPrivateLinkResource) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayPrivateLinkResource) GetProperties() (rv *ApplicationGatewayPrivateLinkResourceProperties) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayPrivateLinkResource) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayPrivateLinkResource) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayPrivateLinkResourceListResult - Response for ListApplicationGatewayPrivateLinkResources API service call.
// Gets all private link resources for an application gateway.
type ApplicationGatewayPrivateLinkResourceListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of private link resources of an application gateway.
	Value []*ApplicationGatewayPrivateLinkResource
}

func (a *ApplicationGatewayPrivateLinkResourceListResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

func (a *ApplicationGatewayPrivateLinkResourceListResult) GetValue() (rv []*ApplicationGatewayPrivateLinkResource) {
	if a != nil {
		return a.Value
	}
	return
}

// ApplicationGatewayPrivateLinkResourceProperties - Properties of a private link resource.
type ApplicationGatewayPrivateLinkResourceProperties struct {
	// Required DNS zone names of the the private link resource.
	RequiredZoneNames []*string

	// READ-ONLY; Group identifier of private link resource.
	GroupID *string

	// READ-ONLY; Required member names of private link resource.
	RequiredMembers []*string
}

func (a *ApplicationGatewayPrivateLinkResourceProperties) GetRequiredZoneNames() (rv []*string) {
	if a != nil {
		return a.RequiredZoneNames
	}
	return
}

func (a *ApplicationGatewayPrivateLinkResourceProperties) GetGroupID() (rv string) {
	if a != nil && a.GroupID != nil {
		return *a.GroupID
	}
	return
}

func (a *ApplicationGatewayPrivateLinkResourceProperties) GetRequiredMembers() (rv []*string) {
	if a != nil {
		return a.RequiredMembers
	}
	return
}

// ApplicationGatewayProbe - Probe of the application gateway.
type ApplicationGatewayProbe struct {
	// Resource ID.
	ID *string

	// Name of the probe that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway probe.
	Properties *ApplicationGatewayProbePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayProbe) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayProbe) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayProbe) GetProperties() (rv *ApplicationGatewayProbePropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayProbe) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayProbe) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayProbeHealthResponseMatch - Application gateway probe health response match.
type ApplicationGatewayProbeHealthResponseMatch struct {
	// Body that must be contained in the health response. Default value is empty.
	Body *string

	// Allowed ranges of healthy status codes. Default range of healthy status codes is 200-399.
	StatusCodes []*string
}

func (a *ApplicationGatewayProbeHealthResponseMatch) GetBody() (rv string) {
	if a != nil && a.Body != nil {
		return *a.Body
	}
	return
}

func (a *ApplicationGatewayProbeHealthResponseMatch) GetStatusCodes() (rv []*string) {
	if a != nil {
		return a.StatusCodes
	}
	return
}

// ApplicationGatewayProbePropertiesFormat - Properties of probe of an application gateway.
type ApplicationGatewayProbePropertiesFormat struct {
	// Host name to send the probe to.
	Host *string

	// The probing interval in seconds. This is the time interval between two consecutive probes. Acceptable values are from 1
	// second to 86400 seconds.
	Interval *int32

	// Criterion for classifying a healthy probe response.
	Match *ApplicationGatewayProbeHealthResponseMatch

	// Minimum number of servers that are always marked healthy. Default value is 0.
	MinServers *int32

	// Relative path of probe. Valid path starts from '/'. Probe is sent to ://:.
	Path *string

	// Whether the host header should be picked from the backend http settings. Default value is false.
	PickHostNameFromBackendHTTPSettings *bool

	// Whether the server name indication should be picked from the backend settings for Tls protocol. Default value is false.
	PickHostNameFromBackendSettings *bool

	// Custom port which will be used for probing the backend servers. The valid value ranges from 1 to 65535. In case not set,
	// port from http settings will be used. This property is valid for Standardv2 and
	// WAFv2 only.
	Port *int32

	// The protocol used for the probe.
	Protocol *ApplicationGatewayProtocol

	// The probe timeout in seconds. Probe marked as failed if valid response is not received with this timeout period. Acceptable
	// values are from 1 second to 86400 seconds.
	Timeout *int32

	// The probe retry count. Backend server is marked down after consecutive probe failure count reaches UnhealthyThreshold.
	// Acceptable values are from 1 second to 20.
	UnhealthyThreshold *int32

	// READ-ONLY; The provisioning state of the probe resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayProbePropertiesFormat) GetHost() (rv string) {
	if a != nil && a.Host != nil {
		return *a.Host
	}
	return
}

func (a *ApplicationGatewayProbePropertiesFormat) GetInterval() (rv int32) {
	if a != nil && a.Interval != nil {
		return *a.Interval
	}
	return
}

func (a *ApplicationGatewayProbePropertiesFormat) GetMatch() (rv *ApplicationGatewayProbeHealthResponseMatch) {
	if a != nil {
		return a.Match
	}
	return
}

func (a *ApplicationGatewayProbePropertiesFormat) GetMinServers() (rv int32) {
	if a != nil && a.MinServers != nil {
		return *a.MinServers
	}
	return
}

func (a *ApplicationGatewayProbePropertiesFormat) GetPath() (rv string) {
	if a != nil && a.Path != nil {
		return *a.Path
	}
	return
}

func (a *ApplicationGatewayProbePropertiesFormat) GetPickHostNameFromBackendHTTPSettings() (rv bool) {
	if a != nil && a.PickHostNameFromBackendHTTPSettings != nil {
		return *a.PickHostNameFromBackendHTTPSettings
	}
	return
}

func (a *ApplicationGatewayProbePropertiesFormat) GetPickHostNameFromBackendSettings() (rv bool) {
	if a != nil && a.PickHostNameFromBackendSettings != nil {
		return *a.PickHostNameFromBackendSettings
	}
	return
}

func (a *ApplicationGatewayProbePropertiesFormat) GetPort() (rv int32) {
	if a != nil && a.Port != nil {
		return *a.Port
	}
	return
}

func (a *ApplicationGatewayProbePropertiesFormat) GetProtocol() (rv *ApplicationGatewayProtocol) {
	if a != nil {
		return a.Protocol
	}
	return
}

func (a *ApplicationGatewayProbePropertiesFormat) GetTimeout() (rv int32) {
	if a != nil && a.Timeout != nil {
		return *a.Timeout
	}
	return
}

func (a *ApplicationGatewayProbePropertiesFormat) GetUnhealthyThreshold() (rv int32) {
	if a != nil && a.UnhealthyThreshold != nil {
		return *a.UnhealthyThreshold
	}
	return
}

func (a *ApplicationGatewayProbePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayPropertiesFormat - Properties of the application gateway.
type ApplicationGatewayPropertiesFormat struct {
	// Authentication certificates of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	AuthenticationCertificates []*ApplicationGatewayAuthenticationCertificate

	// Autoscale Configuration.
	AutoscaleConfiguration *ApplicationGatewayAutoscaleConfiguration

	// Backend address pool of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	BackendAddressPools []*ApplicationGatewayBackendAddressPool

	// Backend http settings of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	BackendHTTPSettingsCollection []*ApplicationGatewayBackendHTTPSettings

	// Backend settings of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits]
	// .
	BackendSettingsCollection []*ApplicationGatewayBackendSettings

	// Custom error configurations of the application gateway resource.
	CustomErrorConfigurations []*ApplicationGatewayCustomError

	// Whether FIPS is enabled on the application gateway resource.
	EnableFips *bool

	// Whether HTTP2 is enabled on the application gateway resource.
	EnableHTTP2 *bool

	// Reference to the FirewallPolicy resource.
	FirewallPolicy *SubResource

	// If true, associates a firewall policy with an application gateway regardless whether the policy differs from the WAF Config.
	ForceFirewallPolicyAssociation *bool

	// Frontend IP addresses of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	FrontendIPConfigurations []*ApplicationGatewayFrontendIPConfiguration

	// Frontend ports of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	FrontendPorts []*ApplicationGatewayFrontendPort

	// Subnets of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	GatewayIPConfigurations []*ApplicationGatewayIPConfiguration

	// Global Configuration.
	GlobalConfiguration *ApplicationGatewayGlobalConfiguration

	// Http listeners of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	HTTPListeners []*ApplicationGatewayHTTPListener

	// Listeners of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	Listeners []*ApplicationGatewayListener

	// Load distribution policies of the application gateway resource.
	LoadDistributionPolicies []*ApplicationGatewayLoadDistributionPolicy

	// PrivateLink configurations on application gateway.
	PrivateLinkConfigurations []*ApplicationGatewayPrivateLinkConfiguration

	// Probes of the application gateway resource.
	Probes []*ApplicationGatewayProbe

	// Redirect configurations of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	RedirectConfigurations []*ApplicationGatewayRedirectConfiguration

	// Request routing rules of the application gateway resource.
	RequestRoutingRules []*ApplicationGatewayRequestRoutingRule

	// Rewrite rules for the application gateway resource.
	RewriteRuleSets []*ApplicationGatewayRewriteRuleSet

	// Routing rules of the application gateway resource.
	RoutingRules []*ApplicationGatewayRoutingRule

	// SKU of the application gateway resource.
	SKU *ApplicationGatewaySKU

	// SSL certificates of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits]
	// .
	SSLCertificates []*ApplicationGatewaySSLCertificate

	// SSL policy of the application gateway resource.
	SSLPolicy *ApplicationGatewaySSLPolicy

	// SSL profiles of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	SSLProfiles []*ApplicationGatewaySSLProfile

	// Trusted client certificates of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	TrustedClientCertificates []*ApplicationGatewayTrustedClientCertificate

	// Trusted Root certificates of the application gateway resource. For default limits, see Application Gateway limits
	// [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	TrustedRootCertificates []*ApplicationGatewayTrustedRootCertificate

	// URL path map of the application gateway resource. For default limits, see Application Gateway limits [https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits].
	URLPathMaps []*ApplicationGatewayURLPathMap

	// Web application firewall configuration.
	WebApplicationFirewallConfiguration *ApplicationGatewayWebApplicationFirewallConfiguration

	// READ-ONLY; Operational state of the application gateway resource.
	OperationalState *ApplicationGatewayOperationalState

	// READ-ONLY; Private Endpoint connections on application gateway.
	PrivateEndpointConnections []*ApplicationGatewayPrivateEndpointConnection

	// READ-ONLY; The provisioning state of the application gateway resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the application gateway resource.
	ResourceGUID *string
}

func (a *ApplicationGatewayPropertiesFormat) GetAuthenticationCertificates() (rv []*ApplicationGatewayAuthenticationCertificate) {
	if a != nil {
		return a.AuthenticationCertificates
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetAutoscaleConfiguration() (rv *ApplicationGatewayAutoscaleConfiguration) {
	if a != nil {
		return a.AutoscaleConfiguration
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetBackendAddressPools() (rv []*ApplicationGatewayBackendAddressPool) {
	if a != nil {
		return a.BackendAddressPools
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetBackendHTTPSettingsCollection() (rv []*ApplicationGatewayBackendHTTPSettings) {
	if a != nil {
		return a.BackendHTTPSettingsCollection
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetBackendSettingsCollection() (rv []*ApplicationGatewayBackendSettings) {
	if a != nil {
		return a.BackendSettingsCollection
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetCustomErrorConfigurations() (rv []*ApplicationGatewayCustomError) {
	if a != nil {
		return a.CustomErrorConfigurations
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetEnableFips() (rv bool) {
	if a != nil && a.EnableFips != nil {
		return *a.EnableFips
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetEnableHTTP2() (rv bool) {
	if a != nil && a.EnableHTTP2 != nil {
		return *a.EnableHTTP2
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetFirewallPolicy() (rv *SubResource) {
	if a != nil {
		return a.FirewallPolicy
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetForceFirewallPolicyAssociation() (rv bool) {
	if a != nil && a.ForceFirewallPolicyAssociation != nil {
		return *a.ForceFirewallPolicyAssociation
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetFrontendIPConfigurations() (rv []*ApplicationGatewayFrontendIPConfiguration) {
	if a != nil {
		return a.FrontendIPConfigurations
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetFrontendPorts() (rv []*ApplicationGatewayFrontendPort) {
	if a != nil {
		return a.FrontendPorts
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetGatewayIPConfigurations() (rv []*ApplicationGatewayIPConfiguration) {
	if a != nil {
		return a.GatewayIPConfigurations
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetGlobalConfiguration() (rv *ApplicationGatewayGlobalConfiguration) {
	if a != nil {
		return a.GlobalConfiguration
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetHTTPListeners() (rv []*ApplicationGatewayHTTPListener) {
	if a != nil {
		return a.HTTPListeners
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetListeners() (rv []*ApplicationGatewayListener) {
	if a != nil {
		return a.Listeners
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetLoadDistributionPolicies() (rv []*ApplicationGatewayLoadDistributionPolicy) {
	if a != nil {
		return a.LoadDistributionPolicies
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetPrivateLinkConfigurations() (rv []*ApplicationGatewayPrivateLinkConfiguration) {
	if a != nil {
		return a.PrivateLinkConfigurations
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetProbes() (rv []*ApplicationGatewayProbe) {
	if a != nil {
		return a.Probes
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetRedirectConfigurations() (rv []*ApplicationGatewayRedirectConfiguration) {
	if a != nil {
		return a.RedirectConfigurations
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetRequestRoutingRules() (rv []*ApplicationGatewayRequestRoutingRule) {
	if a != nil {
		return a.RequestRoutingRules
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetRewriteRuleSets() (rv []*ApplicationGatewayRewriteRuleSet) {
	if a != nil {
		return a.RewriteRuleSets
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetRoutingRules() (rv []*ApplicationGatewayRoutingRule) {
	if a != nil {
		return a.RoutingRules
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetSKU() (rv *ApplicationGatewaySKU) {
	if a != nil {
		return a.SKU
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetSSLCertificates() (rv []*ApplicationGatewaySSLCertificate) {
	if a != nil {
		return a.SSLCertificates
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetSSLPolicy() (rv *ApplicationGatewaySSLPolicy) {
	if a != nil {
		return a.SSLPolicy
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetSSLProfiles() (rv []*ApplicationGatewaySSLProfile) {
	if a != nil {
		return a.SSLProfiles
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetTrustedClientCertificates() (rv []*ApplicationGatewayTrustedClientCertificate) {
	if a != nil {
		return a.TrustedClientCertificates
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetTrustedRootCertificates() (rv []*ApplicationGatewayTrustedRootCertificate) {
	if a != nil {
		return a.TrustedRootCertificates
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetURLPathMaps() (rv []*ApplicationGatewayURLPathMap) {
	if a != nil {
		return a.URLPathMaps
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetWebApplicationFirewallConfiguration() (rv *ApplicationGatewayWebApplicationFirewallConfiguration) {
	if a != nil {
		return a.WebApplicationFirewallConfiguration
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetOperationalState() (rv *ApplicationGatewayOperationalState) {
	if a != nil {
		return a.OperationalState
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetPrivateEndpointConnections() (rv []*ApplicationGatewayPrivateEndpointConnection) {
	if a != nil {
		return a.PrivateEndpointConnections
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

func (a *ApplicationGatewayPropertiesFormat) GetResourceGUID() (rv string) {
	if a != nil && a.ResourceGUID != nil {
		return *a.ResourceGUID
	}
	return
}

// ApplicationGatewayRedirectConfiguration - Redirect configuration of an application gateway.
type ApplicationGatewayRedirectConfiguration struct {
	// Resource ID.
	ID *string

	// Name of the redirect configuration that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway redirect configuration.
	Properties *ApplicationGatewayRedirectConfigurationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayRedirectConfiguration) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayRedirectConfiguration) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayRedirectConfiguration) GetProperties() (rv *ApplicationGatewayRedirectConfigurationPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayRedirectConfiguration) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayRedirectConfiguration) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayRedirectConfigurationPropertiesFormat - Properties of redirect configuration of the application gateway.
type ApplicationGatewayRedirectConfigurationPropertiesFormat struct {
	// Include path in the redirected url.
	IncludePath *bool

	// Include query string in the redirected url.
	IncludeQueryString *bool

	// Path rules specifying redirect configuration.
	PathRules []*SubResource

	// HTTP redirection type.
	RedirectType *ApplicationGatewayRedirectType

	// Request routing specifying redirect configuration.
	RequestRoutingRules []*SubResource

	// Reference to a listener to redirect the request to.
	TargetListener *SubResource

	// Url to redirect the request to.
	TargetURL *string

	// Url path maps specifying default redirect configuration.
	URLPathMaps []*SubResource
}

func (a *ApplicationGatewayRedirectConfigurationPropertiesFormat) GetIncludePath() (rv bool) {
	if a != nil && a.IncludePath != nil {
		return *a.IncludePath
	}
	return
}

func (a *ApplicationGatewayRedirectConfigurationPropertiesFormat) GetIncludeQueryString() (rv bool) {
	if a != nil && a.IncludeQueryString != nil {
		return *a.IncludeQueryString
	}
	return
}

func (a *ApplicationGatewayRedirectConfigurationPropertiesFormat) GetPathRules() (rv []*SubResource) {
	if a != nil {
		return a.PathRules
	}
	return
}

func (a *ApplicationGatewayRedirectConfigurationPropertiesFormat) GetRedirectType() (rv *ApplicationGatewayRedirectType) {
	if a != nil {
		return a.RedirectType
	}
	return
}

func (a *ApplicationGatewayRedirectConfigurationPropertiesFormat) GetRequestRoutingRules() (rv []*SubResource) {
	if a != nil {
		return a.RequestRoutingRules
	}
	return
}

func (a *ApplicationGatewayRedirectConfigurationPropertiesFormat) GetTargetListener() (rv *SubResource) {
	if a != nil {
		return a.TargetListener
	}
	return
}

func (a *ApplicationGatewayRedirectConfigurationPropertiesFormat) GetTargetURL() (rv string) {
	if a != nil && a.TargetURL != nil {
		return *a.TargetURL
	}
	return
}

func (a *ApplicationGatewayRedirectConfigurationPropertiesFormat) GetURLPathMaps() (rv []*SubResource) {
	if a != nil {
		return a.URLPathMaps
	}
	return
}

// ApplicationGatewayRequestRoutingRule - Request routing rule of an application gateway.
type ApplicationGatewayRequestRoutingRule struct {
	// Resource ID.
	ID *string

	// Name of the request routing rule that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway request routing rule.
	Properties *ApplicationGatewayRequestRoutingRulePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayRequestRoutingRule) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayRequestRoutingRule) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayRequestRoutingRule) GetProperties() (rv *ApplicationGatewayRequestRoutingRulePropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayRequestRoutingRule) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayRequestRoutingRule) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayRequestRoutingRulePropertiesFormat - Properties of request routing rule of the application gateway.
type ApplicationGatewayRequestRoutingRulePropertiesFormat struct {
	// Backend address pool resource of the application gateway.
	BackendAddressPool *SubResource

	// Backend http settings resource of the application gateway.
	BackendHTTPSettings *SubResource

	// Http listener resource of the application gateway.
	HTTPListener *SubResource

	// Load Distribution Policy resource of the application gateway.
	LoadDistributionPolicy *SubResource

	// Priority of the request routing rule.
	Priority *int32

	// Redirect configuration resource of the application gateway.
	RedirectConfiguration *SubResource

	// Rewrite Rule Set resource in Basic rule of the application gateway.
	RewriteRuleSet *SubResource

	// Rule type.
	RuleType *ApplicationGatewayRequestRoutingRuleType

	// URL path map resource of the application gateway.
	URLPathMap *SubResource

	// READ-ONLY; The provisioning state of the request routing rule resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayRequestRoutingRulePropertiesFormat) GetBackendAddressPool() (rv *SubResource) {
	if a != nil {
		return a.BackendAddressPool
	}
	return
}

func (a *ApplicationGatewayRequestRoutingRulePropertiesFormat) GetBackendHTTPSettings() (rv *SubResource) {
	if a != nil {
		return a.BackendHTTPSettings
	}
	return
}

func (a *ApplicationGatewayRequestRoutingRulePropertiesFormat) GetHTTPListener() (rv *SubResource) {
	if a != nil {
		return a.HTTPListener
	}
	return
}

func (a *ApplicationGatewayRequestRoutingRulePropertiesFormat) GetLoadDistributionPolicy() (rv *SubResource) {
	if a != nil {
		return a.LoadDistributionPolicy
	}
	return
}

func (a *ApplicationGatewayRequestRoutingRulePropertiesFormat) GetPriority() (rv int32) {
	if a != nil && a.Priority != nil {
		return *a.Priority
	}
	return
}

func (a *ApplicationGatewayRequestRoutingRulePropertiesFormat) GetRedirectConfiguration() (rv *SubResource) {
	if a != nil {
		return a.RedirectConfiguration
	}
	return
}

func (a *ApplicationGatewayRequestRoutingRulePropertiesFormat) GetRewriteRuleSet() (rv *SubResource) {
	if a != nil {
		return a.RewriteRuleSet
	}
	return
}

func (a *ApplicationGatewayRequestRoutingRulePropertiesFormat) GetRuleType() (rv *ApplicationGatewayRequestRoutingRuleType) {
	if a != nil {
		return a.RuleType
	}
	return
}

func (a *ApplicationGatewayRequestRoutingRulePropertiesFormat) GetURLPathMap() (rv *SubResource) {
	if a != nil {
		return a.URLPathMap
	}
	return
}

func (a *ApplicationGatewayRequestRoutingRulePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayRewriteRule - Rewrite rule of an application gateway.
type ApplicationGatewayRewriteRule struct {
	// Set of actions to be done as part of the rewrite Rule.
	ActionSet *ApplicationGatewayRewriteRuleActionSet

	// Conditions based on which the action set execution will be evaluated.
	Conditions []*ApplicationGatewayRewriteRuleCondition

	// Name of the rewrite rule that is unique within an Application Gateway.
	Name *string

	// Rule Sequence of the rewrite rule that determines the order of execution of a particular rule in a RewriteRuleSet.
	RuleSequence *int32
}

func (a *ApplicationGatewayRewriteRule) GetActionSet() (rv *ApplicationGatewayRewriteRuleActionSet) {
	if a != nil {
		return a.ActionSet
	}
	return
}

func (a *ApplicationGatewayRewriteRule) GetConditions() (rv []*ApplicationGatewayRewriteRuleCondition) {
	if a != nil {
		return a.Conditions
	}
	return
}

func (a *ApplicationGatewayRewriteRule) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayRewriteRule) GetRuleSequence() (rv int32) {
	if a != nil && a.RuleSequence != nil {
		return *a.RuleSequence
	}
	return
}

// ApplicationGatewayRewriteRuleActionSet - Set of actions in the Rewrite Rule in Application Gateway.
type ApplicationGatewayRewriteRuleActionSet struct {
	// Request Header Actions in the Action Set.
	RequestHeaderConfigurations []*ApplicationGatewayHeaderConfiguration

	// Response Header Actions in the Action Set.
	ResponseHeaderConfigurations []*ApplicationGatewayHeaderConfiguration

	// Url Configuration Action in the Action Set.
	URLConfiguration *ApplicationGatewayURLConfiguration
}

func (a *ApplicationGatewayRewriteRuleActionSet) GetRequestHeaderConfigurations() (rv []*ApplicationGatewayHeaderConfiguration) {
	if a != nil {
		return a.RequestHeaderConfigurations
	}
	return
}

func (a *ApplicationGatewayRewriteRuleActionSet) GetResponseHeaderConfigurations() (rv []*ApplicationGatewayHeaderConfiguration) {
	if a != nil {
		return a.ResponseHeaderConfigurations
	}
	return
}

func (a *ApplicationGatewayRewriteRuleActionSet) GetURLConfiguration() (rv *ApplicationGatewayURLConfiguration) {
	if a != nil {
		return a.URLConfiguration
	}
	return
}

// ApplicationGatewayRewriteRuleCondition - Set of conditions in the Rewrite Rule in Application Gateway.
type ApplicationGatewayRewriteRuleCondition struct {
	// Setting this parameter to truth value with force the pattern to do a case in-sensitive comparison.
	IgnoreCase *bool

	// Setting this value as truth will force to check the negation of the condition given by the user.
	Negate *bool

	// The pattern, either fixed string or regular expression, that evaluates the truthfulness of the condition.
	Pattern *string

	// The condition parameter of the RewriteRuleCondition.
	Variable *string
}

func (a *ApplicationGatewayRewriteRuleCondition) GetIgnoreCase() (rv bool) {
	if a != nil && a.IgnoreCase != nil {
		return *a.IgnoreCase
	}
	return
}

func (a *ApplicationGatewayRewriteRuleCondition) GetNegate() (rv bool) {
	if a != nil && a.Negate != nil {
		return *a.Negate
	}
	return
}

func (a *ApplicationGatewayRewriteRuleCondition) GetPattern() (rv string) {
	if a != nil && a.Pattern != nil {
		return *a.Pattern
	}
	return
}

func (a *ApplicationGatewayRewriteRuleCondition) GetVariable() (rv string) {
	if a != nil && a.Variable != nil {
		return *a.Variable
	}
	return
}

// ApplicationGatewayRewriteRuleSet - Rewrite rule set of an application gateway.
type ApplicationGatewayRewriteRuleSet struct {
	// Resource ID.
	ID *string

	// Name of the rewrite rule set that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway rewrite rule set.
	Properties *ApplicationGatewayRewriteRuleSetPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (a *ApplicationGatewayRewriteRuleSet) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayRewriteRuleSet) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayRewriteRuleSet) GetProperties() (rv *ApplicationGatewayRewriteRuleSetPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayRewriteRuleSet) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

// ApplicationGatewayRewriteRuleSetPropertiesFormat - Properties of rewrite rule set of the application gateway.
type ApplicationGatewayRewriteRuleSetPropertiesFormat struct {
	// Rewrite rules in the rewrite rule set.
	RewriteRules []*ApplicationGatewayRewriteRule

	// READ-ONLY; The provisioning state of the rewrite rule set resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayRewriteRuleSetPropertiesFormat) GetRewriteRules() (rv []*ApplicationGatewayRewriteRule) {
	if a != nil {
		return a.RewriteRules
	}
	return
}

func (a *ApplicationGatewayRewriteRuleSetPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayRoutingRule - Routing rule of an application gateway.
type ApplicationGatewayRoutingRule struct {
	// Resource ID.
	ID *string

	// Name of the routing rule that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway routing rule.
	Properties *ApplicationGatewayRoutingRulePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayRoutingRule) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayRoutingRule) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayRoutingRule) GetProperties() (rv *ApplicationGatewayRoutingRulePropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayRoutingRule) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayRoutingRule) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayRoutingRulePropertiesFormat - Properties of routing rule of the application gateway.
type ApplicationGatewayRoutingRulePropertiesFormat struct {
	// REQUIRED; Priority of the routing rule.
	Priority *int32

	// Backend address pool resource of the application gateway.
	BackendAddressPool *SubResource

	// Backend settings resource of the application gateway.
	BackendSettings *SubResource

	// Listener resource of the application gateway.
	Listener *SubResource

	// Rule type.
	RuleType *ApplicationGatewayRequestRoutingRuleType

	// READ-ONLY; The provisioning state of the request routing rule resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayRoutingRulePropertiesFormat) GetPriority() (rv int32) {
	if a != nil && a.Priority != nil {
		return *a.Priority
	}
	return
}

func (a *ApplicationGatewayRoutingRulePropertiesFormat) GetBackendAddressPool() (rv *SubResource) {
	if a != nil {
		return a.BackendAddressPool
	}
	return
}

func (a *ApplicationGatewayRoutingRulePropertiesFormat) GetBackendSettings() (rv *SubResource) {
	if a != nil {
		return a.BackendSettings
	}
	return
}

func (a *ApplicationGatewayRoutingRulePropertiesFormat) GetListener() (rv *SubResource) {
	if a != nil {
		return a.Listener
	}
	return
}

func (a *ApplicationGatewayRoutingRulePropertiesFormat) GetRuleType() (rv *ApplicationGatewayRequestRoutingRuleType) {
	if a != nil {
		return a.RuleType
	}
	return
}

func (a *ApplicationGatewayRoutingRulePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewaySKU - SKU of an application gateway.
type ApplicationGatewaySKU struct {
	// Capacity (instance count) of an application gateway.
	Capacity *int32

	// Name of an application gateway SKU.
	Name *ApplicationGatewaySKUName

	// Tier of an application gateway.
	Tier *ApplicationGatewayTier
}

func (a *ApplicationGatewaySKU) GetCapacity() (rv int32) {
	if a != nil && a.Capacity != nil {
		return *a.Capacity
	}
	return
}

func (a *ApplicationGatewaySKU) GetName() (rv *ApplicationGatewaySKUName) {
	if a != nil {
		return a.Name
	}
	return
}

func (a *ApplicationGatewaySKU) GetTier() (rv *ApplicationGatewayTier) {
	if a != nil {
		return a.Tier
	}
	return
}

// ApplicationGatewaySSLCertificate - SSL certificates of an application gateway.
type ApplicationGatewaySSLCertificate struct {
	// Resource ID.
	ID *string

	// Name of the SSL certificate that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway SSL certificate.
	Properties *ApplicationGatewaySSLCertificatePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewaySSLCertificate) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewaySSLCertificate) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewaySSLCertificate) GetProperties() (rv *ApplicationGatewaySSLCertificatePropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewaySSLCertificate) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewaySSLCertificate) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewaySSLCertificatePropertiesFormat - Properties of SSL certificates of an application gateway.
type ApplicationGatewaySSLCertificatePropertiesFormat struct {
	// Base-64 encoded pfx certificate. Only applicable in PUT Request.
	Data *string

	// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
	KeyVaultSecretID *string

	// Password for the pfx file specified in data. Only applicable in PUT request.
	Password *string

	// READ-ONLY; The provisioning state of the SSL certificate resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Base-64 encoded Public cert data corresponding to pfx specified in data. Only applicable in GET request.
	PublicCertData *string
}

func (a *ApplicationGatewaySSLCertificatePropertiesFormat) GetData() (rv string) {
	if a != nil && a.Data != nil {
		return *a.Data
	}
	return
}

func (a *ApplicationGatewaySSLCertificatePropertiesFormat) GetKeyVaultSecretID() (rv string) {
	if a != nil && a.KeyVaultSecretID != nil {
		return *a.KeyVaultSecretID
	}
	return
}

func (a *ApplicationGatewaySSLCertificatePropertiesFormat) GetPassword() (rv string) {
	if a != nil && a.Password != nil {
		return *a.Password
	}
	return
}

func (a *ApplicationGatewaySSLCertificatePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

func (a *ApplicationGatewaySSLCertificatePropertiesFormat) GetPublicCertData() (rv string) {
	if a != nil && a.PublicCertData != nil {
		return *a.PublicCertData
	}
	return
}

// ApplicationGatewaySSLPolicy - Application Gateway Ssl policy.
type ApplicationGatewaySSLPolicy struct {
	// Ssl cipher suites to be enabled in the specified order to application gateway.
	CipherSuites []*ApplicationGatewaySSLCipherSuite

	// Ssl protocols to be disabled on application gateway.
	DisabledSSLProtocols []*ApplicationGatewaySSLProtocol

	// Minimum version of Ssl protocol to be supported on application gateway.
	MinProtocolVersion *ApplicationGatewaySSLProtocol

	// Name of Ssl predefined policy.
	PolicyName *ApplicationGatewaySSLPolicyName

	// Type of Ssl Policy.
	PolicyType *ApplicationGatewaySSLPolicyType
}

func (a *ApplicationGatewaySSLPolicy) GetCipherSuites() (rv []*ApplicationGatewaySSLCipherSuite) {
	if a != nil {
		return a.CipherSuites
	}
	return
}

func (a *ApplicationGatewaySSLPolicy) GetDisabledSSLProtocols() (rv []*ApplicationGatewaySSLProtocol) {
	if a != nil {
		return a.DisabledSSLProtocols
	}
	return
}

func (a *ApplicationGatewaySSLPolicy) GetMinProtocolVersion() (rv *ApplicationGatewaySSLProtocol) {
	if a != nil {
		return a.MinProtocolVersion
	}
	return
}

func (a *ApplicationGatewaySSLPolicy) GetPolicyName() (rv *ApplicationGatewaySSLPolicyName) {
	if a != nil {
		return a.PolicyName
	}
	return
}

func (a *ApplicationGatewaySSLPolicy) GetPolicyType() (rv *ApplicationGatewaySSLPolicyType) {
	if a != nil {
		return a.PolicyType
	}
	return
}

// ApplicationGatewaySSLPredefinedPolicy - An Ssl predefined policy.
type ApplicationGatewaySSLPredefinedPolicy struct {
	// Resource ID.
	ID *string

	// Name of the Ssl predefined policy.
	Name *string

	// Properties of the application gateway SSL predefined policy.
	Properties *ApplicationGatewaySSLPredefinedPolicyPropertiesFormat
}

func (a *ApplicationGatewaySSLPredefinedPolicy) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewaySSLPredefinedPolicy) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewaySSLPredefinedPolicy) GetProperties() (rv *ApplicationGatewaySSLPredefinedPolicyPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

// ApplicationGatewaySSLPredefinedPolicyPropertiesFormat - Properties of ApplicationGatewaySslPredefinedPolicy.
type ApplicationGatewaySSLPredefinedPolicyPropertiesFormat struct {
	// Ssl cipher suites to be enabled in the specified order for application gateway.
	CipherSuites []*ApplicationGatewaySSLCipherSuite

	// Minimum version of Ssl protocol to be supported on application gateway.
	MinProtocolVersion *ApplicationGatewaySSLProtocol
}

func (a *ApplicationGatewaySSLPredefinedPolicyPropertiesFormat) GetCipherSuites() (rv []*ApplicationGatewaySSLCipherSuite) {
	if a != nil {
		return a.CipherSuites
	}
	return
}

func (a *ApplicationGatewaySSLPredefinedPolicyPropertiesFormat) GetMinProtocolVersion() (rv *ApplicationGatewaySSLProtocol) {
	if a != nil {
		return a.MinProtocolVersion
	}
	return
}

// ApplicationGatewaySSLProfile - SSL profile of an application gateway.
type ApplicationGatewaySSLProfile struct {
	// Resource ID.
	ID *string

	// Name of the SSL profile that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway SSL profile.
	Properties *ApplicationGatewaySSLProfilePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewaySSLProfile) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewaySSLProfile) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewaySSLProfile) GetProperties() (rv *ApplicationGatewaySSLProfilePropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewaySSLProfile) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewaySSLProfile) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewaySSLProfilePropertiesFormat - Properties of SSL profile of an application gateway.
type ApplicationGatewaySSLProfilePropertiesFormat struct {
	// Client authentication configuration of the application gateway resource.
	ClientAuthConfiguration *ApplicationGatewayClientAuthConfiguration

	// SSL policy of the application gateway resource.
	SSLPolicy *ApplicationGatewaySSLPolicy

	// Array of references to application gateway trusted client certificates.
	TrustedClientCertificates []*SubResource

	// READ-ONLY; The provisioning state of the HTTP listener resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewaySSLProfilePropertiesFormat) GetClientAuthConfiguration() (rv *ApplicationGatewayClientAuthConfiguration) {
	if a != nil {
		return a.ClientAuthConfiguration
	}
	return
}

func (a *ApplicationGatewaySSLProfilePropertiesFormat) GetSSLPolicy() (rv *ApplicationGatewaySSLPolicy) {
	if a != nil {
		return a.SSLPolicy
	}
	return
}

func (a *ApplicationGatewaySSLProfilePropertiesFormat) GetTrustedClientCertificates() (rv []*SubResource) {
	if a != nil {
		return a.TrustedClientCertificates
	}
	return
}

func (a *ApplicationGatewaySSLProfilePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayTrustedClientCertificate - Trusted client certificates of an application gateway.
type ApplicationGatewayTrustedClientCertificate struct {
	// Resource ID.
	ID *string

	// Name of the trusted client certificate that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway trusted client certificate.
	Properties *ApplicationGatewayTrustedClientCertificatePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayTrustedClientCertificate) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayTrustedClientCertificate) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayTrustedClientCertificate) GetProperties() (rv *ApplicationGatewayTrustedClientCertificatePropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayTrustedClientCertificate) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayTrustedClientCertificate) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayTrustedClientCertificatePropertiesFormat - Trusted client certificates properties of an application gateway.
type ApplicationGatewayTrustedClientCertificatePropertiesFormat struct {
	// Certificate public data.
	Data *string

	// READ-ONLY; Distinguished name of client certificate issuer.
	ClientCertIssuerDN *string

	// READ-ONLY; The provisioning state of the trusted client certificate resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Validated certificate data.
	ValidatedCertData *string
}

func (a *ApplicationGatewayTrustedClientCertificatePropertiesFormat) GetData() (rv string) {
	if a != nil && a.Data != nil {
		return *a.Data
	}
	return
}

func (a *ApplicationGatewayTrustedClientCertificatePropertiesFormat) GetClientCertIssuerDN() (rv string) {
	if a != nil && a.ClientCertIssuerDN != nil {
		return *a.ClientCertIssuerDN
	}
	return
}

func (a *ApplicationGatewayTrustedClientCertificatePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

func (a *ApplicationGatewayTrustedClientCertificatePropertiesFormat) GetValidatedCertData() (rv string) {
	if a != nil && a.ValidatedCertData != nil {
		return *a.ValidatedCertData
	}
	return
}

// ApplicationGatewayTrustedRootCertificate - Trusted Root certificates of an application gateway.
type ApplicationGatewayTrustedRootCertificate struct {
	// Resource ID.
	ID *string

	// Name of the trusted root certificate that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway trusted root certificate.
	Properties *ApplicationGatewayTrustedRootCertificatePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayTrustedRootCertificate) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayTrustedRootCertificate) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayTrustedRootCertificate) GetProperties() (rv *ApplicationGatewayTrustedRootCertificatePropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayTrustedRootCertificate) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayTrustedRootCertificate) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayTrustedRootCertificatePropertiesFormat - Trusted Root certificates properties of an application gateway.
type ApplicationGatewayTrustedRootCertificatePropertiesFormat struct {
	// Certificate public data.
	Data *string

	// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
	KeyVaultSecretID *string

	// READ-ONLY; The provisioning state of the trusted root certificate resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayTrustedRootCertificatePropertiesFormat) GetData() (rv string) {
	if a != nil && a.Data != nil {
		return *a.Data
	}
	return
}

func (a *ApplicationGatewayTrustedRootCertificatePropertiesFormat) GetKeyVaultSecretID() (rv string) {
	if a != nil && a.KeyVaultSecretID != nil {
		return *a.KeyVaultSecretID
	}
	return
}

func (a *ApplicationGatewayTrustedRootCertificatePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayURLConfiguration - Url configuration of the Actions set in Application Gateway.
type ApplicationGatewayURLConfiguration struct {
	// Url path which user has provided for url rewrite. Null means no path will be updated. Default value is null.
	ModifiedPath *string

	// Query string which user has provided for url rewrite. Null means no query string will be updated. Default value is null.
	ModifiedQueryString *string

	// If set as true, it will re-evaluate the url path map provided in path based request routing rules using modified path.
	// Default value is false.
	Reroute *bool
}

func (a *ApplicationGatewayURLConfiguration) GetModifiedPath() (rv string) {
	if a != nil && a.ModifiedPath != nil {
		return *a.ModifiedPath
	}
	return
}

func (a *ApplicationGatewayURLConfiguration) GetModifiedQueryString() (rv string) {
	if a != nil && a.ModifiedQueryString != nil {
		return *a.ModifiedQueryString
	}
	return
}

func (a *ApplicationGatewayURLConfiguration) GetReroute() (rv bool) {
	if a != nil && a.Reroute != nil {
		return *a.Reroute
	}
	return
}

// ApplicationGatewayURLPathMap - UrlPathMaps give a url path to the backend mapping information for PathBasedRouting.
type ApplicationGatewayURLPathMap struct {
	// Resource ID.
	ID *string

	// Name of the URL path map that is unique within an Application Gateway.
	Name *string

	// Properties of the application gateway URL path map.
	Properties *ApplicationGatewayURLPathMapPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *ApplicationGatewayURLPathMap) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayURLPathMap) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayURLPathMap) GetProperties() (rv *ApplicationGatewayURLPathMapPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayURLPathMap) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationGatewayURLPathMap) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayURLPathMapPropertiesFormat - Properties of UrlPathMap of the application gateway.
type ApplicationGatewayURLPathMapPropertiesFormat struct {
	// Default backend address pool resource of URL path map.
	DefaultBackendAddressPool *SubResource

	// Default backend http settings resource of URL path map.
	DefaultBackendHTTPSettings *SubResource

	// Default Load Distribution Policy resource of URL path map.
	DefaultLoadDistributionPolicy *SubResource

	// Default redirect configuration resource of URL path map.
	DefaultRedirectConfiguration *SubResource

	// Default Rewrite rule set resource of URL path map.
	DefaultRewriteRuleSet *SubResource

	// Path rule of URL path map resource.
	PathRules []*ApplicationGatewayPathRule

	// READ-ONLY; The provisioning state of the URL path map resource.
	ProvisioningState *ProvisioningState
}

func (a *ApplicationGatewayURLPathMapPropertiesFormat) GetDefaultBackendAddressPool() (rv *SubResource) {
	if a != nil {
		return a.DefaultBackendAddressPool
	}
	return
}

func (a *ApplicationGatewayURLPathMapPropertiesFormat) GetDefaultBackendHTTPSettings() (rv *SubResource) {
	if a != nil {
		return a.DefaultBackendHTTPSettings
	}
	return
}

func (a *ApplicationGatewayURLPathMapPropertiesFormat) GetDefaultLoadDistributionPolicy() (rv *SubResource) {
	if a != nil {
		return a.DefaultLoadDistributionPolicy
	}
	return
}

func (a *ApplicationGatewayURLPathMapPropertiesFormat) GetDefaultRedirectConfiguration() (rv *SubResource) {
	if a != nil {
		return a.DefaultRedirectConfiguration
	}
	return
}

func (a *ApplicationGatewayURLPathMapPropertiesFormat) GetDefaultRewriteRuleSet() (rv *SubResource) {
	if a != nil {
		return a.DefaultRewriteRuleSet
	}
	return
}

func (a *ApplicationGatewayURLPathMapPropertiesFormat) GetPathRules() (rv []*ApplicationGatewayPathRule) {
	if a != nil {
		return a.PathRules
	}
	return
}

func (a *ApplicationGatewayURLPathMapPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// ApplicationGatewayWafDynamicManifestPropertiesResult - Properties of ApplicationGatewayWafDynamicManifest.
type ApplicationGatewayWafDynamicManifestPropertiesResult struct {
	// The available rulesets.
	AvailableRuleSets []*ApplicationGatewayFirewallManifestRuleSet

	// The default ruleset.
	DefaultRuleSet *DefaultRuleSetPropertyFormat
}

func (a *ApplicationGatewayWafDynamicManifestPropertiesResult) GetAvailableRuleSets() (rv []*ApplicationGatewayFirewallManifestRuleSet) {
	if a != nil {
		return a.AvailableRuleSets
	}
	return
}

func (a *ApplicationGatewayWafDynamicManifestPropertiesResult) GetDefaultRuleSet() (rv *DefaultRuleSetPropertyFormat) {
	if a != nil {
		return a.DefaultRuleSet
	}
	return
}

// ApplicationGatewayWafDynamicManifestResult - Response for ApplicationGatewayWafDynamicManifest API service call.
type ApplicationGatewayWafDynamicManifestResult struct {
	// Resource ID.
	ID *string

	// Properties of the ApplicationGatewayWafDynamicManifest .
	Properties *ApplicationGatewayWafDynamicManifestPropertiesResult

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (a *ApplicationGatewayWafDynamicManifestResult) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationGatewayWafDynamicManifestResult) GetProperties() (rv *ApplicationGatewayWafDynamicManifestPropertiesResult) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationGatewayWafDynamicManifestResult) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationGatewayWafDynamicManifestResult) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationGatewayWafDynamicManifestResultList - Response for ApplicationGatewayWafDynamicManifests API service call.
type ApplicationGatewayWafDynamicManifestResultList struct {
	// URL to get the next set of results.
	NextLink *string

	// The list of application gateway waf manifest.
	Value []*ApplicationGatewayWafDynamicManifestResult
}

func (a *ApplicationGatewayWafDynamicManifestResultList) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

func (a *ApplicationGatewayWafDynamicManifestResultList) GetValue() (rv []*ApplicationGatewayWafDynamicManifestResult) {
	if a != nil {
		return a.Value
	}
	return
}

// ApplicationGatewayWebApplicationFirewallConfiguration - Application gateway web application firewall configuration.
type ApplicationGatewayWebApplicationFirewallConfiguration struct {
	// REQUIRED; Whether the web application firewall is enabled or not.
	Enabled *bool

	// REQUIRED; Web application firewall mode.
	FirewallMode *ApplicationGatewayFirewallMode

	// REQUIRED; The type of the web application firewall rule set. Possible values are: 'OWASP'.
	RuleSetType *string

	// REQUIRED; The version of the rule set type.
	RuleSetVersion *string

	// The disabled rule groups.
	DisabledRuleGroups []*ApplicationGatewayFirewallDisabledRuleGroup

	// The exclusion list.
	Exclusions []*ApplicationGatewayFirewallExclusion

	// Maximum file upload size in Mb for WAF.
	FileUploadLimitInMb *int32

	// Maximum request body size for WAF.
	MaxRequestBodySize *int32

	// Maximum request body size in Kb for WAF.
	MaxRequestBodySizeInKb *int32

	// Whether allow WAF to check request Body.
	RequestBodyCheck *bool
}

func (a *ApplicationGatewayWebApplicationFirewallConfiguration) GetEnabled() (rv bool) {
	if a != nil && a.Enabled != nil {
		return *a.Enabled
	}
	return
}

func (a *ApplicationGatewayWebApplicationFirewallConfiguration) GetFirewallMode() (rv *ApplicationGatewayFirewallMode) {
	if a != nil {
		return a.FirewallMode
	}
	return
}

func (a *ApplicationGatewayWebApplicationFirewallConfiguration) GetRuleSetType() (rv string) {
	if a != nil && a.RuleSetType != nil {
		return *a.RuleSetType
	}
	return
}

func (a *ApplicationGatewayWebApplicationFirewallConfiguration) GetRuleSetVersion() (rv string) {
	if a != nil && a.RuleSetVersion != nil {
		return *a.RuleSetVersion
	}
	return
}

func (a *ApplicationGatewayWebApplicationFirewallConfiguration) GetDisabledRuleGroups() (rv []*ApplicationGatewayFirewallDisabledRuleGroup) {
	if a != nil {
		return a.DisabledRuleGroups
	}
	return
}

func (a *ApplicationGatewayWebApplicationFirewallConfiguration) GetExclusions() (rv []*ApplicationGatewayFirewallExclusion) {
	if a != nil {
		return a.Exclusions
	}
	return
}

func (a *ApplicationGatewayWebApplicationFirewallConfiguration) GetFileUploadLimitInMb() (rv int32) {
	if a != nil && a.FileUploadLimitInMb != nil {
		return *a.FileUploadLimitInMb
	}
	return
}

func (a *ApplicationGatewayWebApplicationFirewallConfiguration) GetMaxRequestBodySize() (rv int32) {
	if a != nil && a.MaxRequestBodySize != nil {
		return *a.MaxRequestBodySize
	}
	return
}

func (a *ApplicationGatewayWebApplicationFirewallConfiguration) GetMaxRequestBodySizeInKb() (rv int32) {
	if a != nil && a.MaxRequestBodySizeInKb != nil {
		return *a.MaxRequestBodySizeInKb
	}
	return
}

func (a *ApplicationGatewayWebApplicationFirewallConfiguration) GetRequestBodyCheck() (rv bool) {
	if a != nil && a.RequestBodyCheck != nil {
		return *a.RequestBodyCheck
	}
	return
}

// ApplicationRule - Rule of type application.
type ApplicationRule struct {
	// REQUIRED; Rule Type.
	RuleType *FirewallPolicyRuleType

	// Description of the rule.
	Description *string

	// List of destination IP addresses or Service Tags.
	DestinationAddresses []*string

	// List of FQDN Tags for this rule.
	FqdnTags []*string

	// Name of the rule.
	Name *string

	// Array of Application Protocols.
	Protocols []*FirewallPolicyRuleApplicationProtocol

	// List of source IP addresses for this rule.
	SourceAddresses []*string

	// List of source IpGroups for this rule.
	SourceIPGroups []*string

	// List of FQDNs for this rule.
	TargetFqdns []*string

	// List of Urls for this rule condition.
	TargetUrls []*string

	// Terminate TLS connections for this rule.
	TerminateTLS *bool

	// List of destination azure web categories.
	WebCategories []*string
}

func (a *ApplicationRule) GetRuleType() (rv *FirewallPolicyRuleType) {
	if a != nil {
		return a.RuleType
	}
	return
}

func (a *ApplicationRule) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *ApplicationRule) GetDestinationAddresses() (rv []*string) {
	if a != nil {
		return a.DestinationAddresses
	}
	return
}

func (a *ApplicationRule) GetFqdnTags() (rv []*string) {
	if a != nil {
		return a.FqdnTags
	}
	return
}

func (a *ApplicationRule) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationRule) GetProtocols() (rv []*FirewallPolicyRuleApplicationProtocol) {
	if a != nil {
		return a.Protocols
	}
	return
}

func (a *ApplicationRule) GetSourceAddresses() (rv []*string) {
	if a != nil {
		return a.SourceAddresses
	}
	return
}

func (a *ApplicationRule) GetSourceIPGroups() (rv []*string) {
	if a != nil {
		return a.SourceIPGroups
	}
	return
}

func (a *ApplicationRule) GetTargetFqdns() (rv []*string) {
	if a != nil {
		return a.TargetFqdns
	}
	return
}

func (a *ApplicationRule) GetTargetUrls() (rv []*string) {
	if a != nil {
		return a.TargetUrls
	}
	return
}

func (a *ApplicationRule) GetTerminateTLS() (rv bool) {
	if a != nil && a.TerminateTLS != nil {
		return *a.TerminateTLS
	}
	return
}

func (a *ApplicationRule) GetWebCategories() (rv []*string) {
	if a != nil {
		return a.WebCategories
	}
	return
}

// GetFirewallPolicyRule implements the FirewallPolicyRuleClassification interface for type ApplicationRule.
func (a *ApplicationRule) GetFirewallPolicyRule() *FirewallPolicyRule {
	return &FirewallPolicyRule{
		Description: a.Description,
		Name:        a.Name,
		RuleType:    a.RuleType,
	}
}

// ApplicationSecurityGroup - An application security group in a resource group.
type ApplicationSecurityGroup struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the application security group.
	Properties *ApplicationSecurityGroupPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (a *ApplicationSecurityGroup) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *ApplicationSecurityGroup) GetLocation() (rv string) {
	if a != nil && a.Location != nil {
		return *a.Location
	}
	return
}

func (a *ApplicationSecurityGroup) GetProperties() (rv *ApplicationSecurityGroupPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *ApplicationSecurityGroup) GetTags() (rv map[string]*string) {
	if a != nil {
		return a.Tags
	}
	return
}

func (a *ApplicationSecurityGroup) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *ApplicationSecurityGroup) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *ApplicationSecurityGroup) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// ApplicationSecurityGroupListResult - A list of application security groups.
type ApplicationSecurityGroupListResult struct {
	// A list of application security groups.
	Value []*ApplicationSecurityGroup

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (a *ApplicationSecurityGroupListResult) GetValue() (rv []*ApplicationSecurityGroup) {
	if a != nil {
		return a.Value
	}
	return
}

func (a *ApplicationSecurityGroupListResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

// ApplicationSecurityGroupPropertiesFormat - Application security group properties.
type ApplicationSecurityGroupPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the application security group resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the application security group resource. It uniquely identifies a resource, even
	// if the user changes its name or migrate the resource across subscriptions or resource
	// groups.
	ResourceGUID *string
}

func (a *ApplicationSecurityGroupPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

func (a *ApplicationSecurityGroupPropertiesFormat) GetResourceGUID() (rv string) {
	if a != nil && a.ResourceGUID != nil {
		return *a.ResourceGUID
	}
	return
}

// AuthorizationListResult - Response for ListAuthorizations API service call retrieves all authorizations that belongs to
// an ExpressRouteCircuit.
type AuthorizationListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// The authorizations in an ExpressRoute Circuit.
	Value []*ExpressRouteCircuitAuthorization
}

func (a *AuthorizationListResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

func (a *AuthorizationListResult) GetValue() (rv []*ExpressRouteCircuitAuthorization) {
	if a != nil {
		return a.Value
	}
	return
}

// AuthorizationPropertiesFormat - Properties of ExpressRouteCircuitAuthorization.
type AuthorizationPropertiesFormat struct {
	// The authorization key.
	AuthorizationKey *string

	// The authorization use status.
	AuthorizationUseStatus *AuthorizationUseStatus

	// READ-ONLY; The provisioning state of the authorization resource.
	ProvisioningState *ProvisioningState
}

func (a *AuthorizationPropertiesFormat) GetAuthorizationKey() (rv string) {
	if a != nil && a.AuthorizationKey != nil {
		return *a.AuthorizationKey
	}
	return
}

func (a *AuthorizationPropertiesFormat) GetAuthorizationUseStatus() (rv *AuthorizationUseStatus) {
	if a != nil {
		return a.AuthorizationUseStatus
	}
	return
}

func (a *AuthorizationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// AutoApprovedPrivateLinkService - The information of an AutoApprovedPrivateLinkService.
type AutoApprovedPrivateLinkService struct {
	// The id of the private link service resource.
	PrivateLinkService *string
}

func (a *AutoApprovedPrivateLinkService) GetPrivateLinkService() (rv string) {
	if a != nil && a.PrivateLinkService != nil {
		return *a.PrivateLinkService
	}
	return
}

// AutoApprovedPrivateLinkServicesResult - An array of private link service id that can be linked to a private end point with
// auto approved.
type AutoApprovedPrivateLinkServicesResult struct {
	// An array of auto approved private link service.
	Value []*AutoApprovedPrivateLinkService

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (a *AutoApprovedPrivateLinkServicesResult) GetValue() (rv []*AutoApprovedPrivateLinkService) {
	if a != nil {
		return a.Value
	}
	return
}

func (a *AutoApprovedPrivateLinkServicesResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

// Availability of the metric.
type Availability struct {
	// Duration of the availability blob.
	BlobDuration *string

	// The retention of the availability.
	Retention *string

	// The time grain of the availability.
	TimeGrain *string
}

func (a *Availability) GetBlobDuration() (rv string) {
	if a != nil && a.BlobDuration != nil {
		return *a.BlobDuration
	}
	return
}

func (a *Availability) GetRetention() (rv string) {
	if a != nil && a.Retention != nil {
		return *a.Retention
	}
	return
}

func (a *Availability) GetTimeGrain() (rv string) {
	if a != nil && a.TimeGrain != nil {
		return *a.TimeGrain
	}
	return
}

// AvailableDelegation - The serviceName of an AvailableDelegation indicates a possible delegation for a subnet.
type AvailableDelegation struct {
	// The actions permitted to the service upon delegation.
	Actions []*string

	// A unique identifier of the AvailableDelegation resource.
	ID *string

	// The name of the AvailableDelegation resource.
	Name *string

	// The name of the service and resource.
	ServiceName *string

	// Resource type.
	Type *string
}

func (a *AvailableDelegation) GetActions() (rv []*string) {
	if a != nil {
		return a.Actions
	}
	return
}

func (a *AvailableDelegation) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AvailableDelegation) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AvailableDelegation) GetServiceName() (rv string) {
	if a != nil && a.ServiceName != nil {
		return *a.ServiceName
	}
	return
}

func (a *AvailableDelegation) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// AvailableDelegationsResult - An array of available delegations.
type AvailableDelegationsResult struct {
	// An array of available delegations.
	Value []*AvailableDelegation

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (a *AvailableDelegationsResult) GetValue() (rv []*AvailableDelegation) {
	if a != nil {
		return a.Value
	}
	return
}

func (a *AvailableDelegationsResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

// AvailablePrivateEndpointType - The information of an AvailablePrivateEndpointType.
type AvailablePrivateEndpointType struct {
	// Display name of the resource.
	DisplayName *string

	// A unique identifier of the AvailablePrivateEndpoint Type resource.
	ID *string

	// The name of the service and resource.
	Name *string

	// The name of the service and resource.
	ResourceName *string

	// Resource type.
	Type *string
}

func (a *AvailablePrivateEndpointType) GetDisplayName() (rv string) {
	if a != nil && a.DisplayName != nil {
		return *a.DisplayName
	}
	return
}

func (a *AvailablePrivateEndpointType) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AvailablePrivateEndpointType) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AvailablePrivateEndpointType) GetResourceName() (rv string) {
	if a != nil && a.ResourceName != nil {
		return *a.ResourceName
	}
	return
}

func (a *AvailablePrivateEndpointType) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// AvailablePrivateEndpointTypesResult - An array of available PrivateEndpoint types.
type AvailablePrivateEndpointTypesResult struct {
	// An array of available privateEndpoint type.
	Value []*AvailablePrivateEndpointType

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (a *AvailablePrivateEndpointTypesResult) GetValue() (rv []*AvailablePrivateEndpointType) {
	if a != nil {
		return a.Value
	}
	return
}

func (a *AvailablePrivateEndpointTypesResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

// AvailableProvidersList - List of available countries with details.
type AvailableProvidersList struct {
	// REQUIRED; List of available countries.
	Countries []*AvailableProvidersListCountry
}

func (a *AvailableProvidersList) GetCountries() (rv []*AvailableProvidersListCountry) {
	if a != nil {
		return a.Countries
	}
	return
}

// AvailableProvidersListCity - City or town details.
type AvailableProvidersListCity struct {
	// The city or town name.
	CityName *string

	// A list of Internet service providers.
	Providers []*string
}

func (a *AvailableProvidersListCity) GetCityName() (rv string) {
	if a != nil && a.CityName != nil {
		return *a.CityName
	}
	return
}

func (a *AvailableProvidersListCity) GetProviders() (rv []*string) {
	if a != nil {
		return a.Providers
	}
	return
}

// AvailableProvidersListCountry - Country details.
type AvailableProvidersListCountry struct {
	// The country name.
	CountryName *string

	// A list of Internet service providers.
	Providers []*string

	// List of available states in the country.
	States []*AvailableProvidersListState
}

func (a *AvailableProvidersListCountry) GetCountryName() (rv string) {
	if a != nil && a.CountryName != nil {
		return *a.CountryName
	}
	return
}

func (a *AvailableProvidersListCountry) GetProviders() (rv []*string) {
	if a != nil {
		return a.Providers
	}
	return
}

func (a *AvailableProvidersListCountry) GetStates() (rv []*AvailableProvidersListState) {
	if a != nil {
		return a.States
	}
	return
}

// AvailableProvidersListParameters - Constraints that determine the list of available Internet service providers.
type AvailableProvidersListParameters struct {
	// A list of Azure regions.
	AzureLocations []*string

	// The city or town for available providers list.
	City *string

	// The country for available providers list.
	Country *string

	// The state for available providers list.
	State *string
}

func (a *AvailableProvidersListParameters) GetAzureLocations() (rv []*string) {
	if a != nil {
		return a.AzureLocations
	}
	return
}

func (a *AvailableProvidersListParameters) GetCity() (rv string) {
	if a != nil && a.City != nil {
		return *a.City
	}
	return
}

func (a *AvailableProvidersListParameters) GetCountry() (rv string) {
	if a != nil && a.Country != nil {
		return *a.Country
	}
	return
}

func (a *AvailableProvidersListParameters) GetState() (rv string) {
	if a != nil && a.State != nil {
		return *a.State
	}
	return
}

// AvailableProvidersListState - State details.
type AvailableProvidersListState struct {
	// List of available cities or towns in the state.
	Cities []*AvailableProvidersListCity

	// A list of Internet service providers.
	Providers []*string

	// The state name.
	StateName *string
}

func (a *AvailableProvidersListState) GetCities() (rv []*AvailableProvidersListCity) {
	if a != nil {
		return a.Cities
	}
	return
}

func (a *AvailableProvidersListState) GetProviders() (rv []*string) {
	if a != nil {
		return a.Providers
	}
	return
}

func (a *AvailableProvidersListState) GetStateName() (rv string) {
	if a != nil && a.StateName != nil {
		return *a.StateName
	}
	return
}

// AvailableServiceAlias - The available service alias.
type AvailableServiceAlias struct {
	// The ID of the service alias.
	ID *string

	// The name of the service alias.
	Name *string

	// The resource name of the service alias.
	ResourceName *string

	// The type of the resource.
	Type *string
}

func (a *AvailableServiceAlias) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AvailableServiceAlias) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AvailableServiceAlias) GetResourceName() (rv string) {
	if a != nil && a.ResourceName != nil {
		return *a.ResourceName
	}
	return
}

func (a *AvailableServiceAlias) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// AvailableServiceAliasesResult - An array of available service aliases.
type AvailableServiceAliasesResult struct {
	// An array of available service aliases.
	Value []*AvailableServiceAlias

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (a *AvailableServiceAliasesResult) GetValue() (rv []*AvailableServiceAlias) {
	if a != nil {
		return a.Value
	}
	return
}

func (a *AvailableServiceAliasesResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

// AzureFirewall - Azure Firewall resource.
type AzureFirewall struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the azure firewall.
	Properties *AzureFirewallPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// A list of availability zones denoting where the resource needs to come from.
	Zones []*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (a *AzureFirewall) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AzureFirewall) GetLocation() (rv string) {
	if a != nil && a.Location != nil {
		return *a.Location
	}
	return
}

func (a *AzureFirewall) GetProperties() (rv *AzureFirewallPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *AzureFirewall) GetTags() (rv map[string]*string) {
	if a != nil {
		return a.Tags
	}
	return
}

func (a *AzureFirewall) GetZones() (rv []*string) {
	if a != nil {
		return a.Zones
	}
	return
}

func (a *AzureFirewall) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *AzureFirewall) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureFirewall) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// AzureFirewallApplicationRule - Properties of an application rule.
type AzureFirewallApplicationRule struct {
	// Description of the rule.
	Description *string

	// List of FQDN Tags for this rule.
	FqdnTags []*string

	// Name of the application rule.
	Name *string

	// Array of ApplicationRuleProtocols.
	Protocols []*AzureFirewallApplicationRuleProtocol

	// List of source IP addresses for this rule.
	SourceAddresses []*string

	// List of source IpGroups for this rule.
	SourceIPGroups []*string

	// List of FQDNs for this rule.
	TargetFqdns []*string
}

func (a *AzureFirewallApplicationRule) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureFirewallApplicationRule) GetFqdnTags() (rv []*string) {
	if a != nil {
		return a.FqdnTags
	}
	return
}

func (a *AzureFirewallApplicationRule) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureFirewallApplicationRule) GetProtocols() (rv []*AzureFirewallApplicationRuleProtocol) {
	if a != nil {
		return a.Protocols
	}
	return
}

func (a *AzureFirewallApplicationRule) GetSourceAddresses() (rv []*string) {
	if a != nil {
		return a.SourceAddresses
	}
	return
}

func (a *AzureFirewallApplicationRule) GetSourceIPGroups() (rv []*string) {
	if a != nil {
		return a.SourceIPGroups
	}
	return
}

func (a *AzureFirewallApplicationRule) GetTargetFqdns() (rv []*string) {
	if a != nil {
		return a.TargetFqdns
	}
	return
}

// AzureFirewallApplicationRuleCollection - Application rule collection resource.
type AzureFirewallApplicationRuleCollection struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
	Name *string

	// Properties of the azure firewall application rule collection.
	Properties *AzureFirewallApplicationRuleCollectionPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (a *AzureFirewallApplicationRuleCollection) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AzureFirewallApplicationRuleCollection) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureFirewallApplicationRuleCollection) GetProperties() (rv *AzureFirewallApplicationRuleCollectionPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *AzureFirewallApplicationRuleCollection) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

// AzureFirewallApplicationRuleCollectionPropertiesFormat - Properties of the application rule collection.
type AzureFirewallApplicationRuleCollectionPropertiesFormat struct {
	// The action type of a rule collection.
	Action *AzureFirewallRCAction

	// Priority of the application rule collection resource.
	Priority *int32

	// Collection of rules used by a application rule collection.
	Rules []*AzureFirewallApplicationRule

	// READ-ONLY; The provisioning state of the application rule collection resource.
	ProvisioningState *ProvisioningState
}

func (a *AzureFirewallApplicationRuleCollectionPropertiesFormat) GetAction() (rv *AzureFirewallRCAction) {
	if a != nil {
		return a.Action
	}
	return
}

func (a *AzureFirewallApplicationRuleCollectionPropertiesFormat) GetPriority() (rv int32) {
	if a != nil && a.Priority != nil {
		return *a.Priority
	}
	return
}

func (a *AzureFirewallApplicationRuleCollectionPropertiesFormat) GetRules() (rv []*AzureFirewallApplicationRule) {
	if a != nil {
		return a.Rules
	}
	return
}

func (a *AzureFirewallApplicationRuleCollectionPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// AzureFirewallApplicationRuleProtocol - Properties of the application rule protocol.
type AzureFirewallApplicationRuleProtocol struct {
	// Port number for the protocol, cannot be greater than 64000. This field is optional.
	Port *int32

	// Protocol type.
	ProtocolType *AzureFirewallApplicationRuleProtocolType
}

func (a *AzureFirewallApplicationRuleProtocol) GetPort() (rv int32) {
	if a != nil && a.Port != nil {
		return *a.Port
	}
	return
}

func (a *AzureFirewallApplicationRuleProtocol) GetProtocolType() (rv *AzureFirewallApplicationRuleProtocolType) {
	if a != nil {
		return a.ProtocolType
	}
	return
}

// AzureFirewallFqdnTag - Azure Firewall FQDN Tag Resource.
type AzureFirewallFqdnTag struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the azure firewall FQDN tag.
	Properties *AzureFirewallFqdnTagPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (a *AzureFirewallFqdnTag) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AzureFirewallFqdnTag) GetLocation() (rv string) {
	if a != nil && a.Location != nil {
		return *a.Location
	}
	return
}

func (a *AzureFirewallFqdnTag) GetProperties() (rv *AzureFirewallFqdnTagPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *AzureFirewallFqdnTag) GetTags() (rv map[string]*string) {
	if a != nil {
		return a.Tags
	}
	return
}

func (a *AzureFirewallFqdnTag) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *AzureFirewallFqdnTag) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureFirewallFqdnTag) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// AzureFirewallFqdnTagListResult - Response for ListAzureFirewallFqdnTags API service call.
type AzureFirewallFqdnTagListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of Azure Firewall FQDN Tags in a resource group.
	Value []*AzureFirewallFqdnTag
}

func (a *AzureFirewallFqdnTagListResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

func (a *AzureFirewallFqdnTagListResult) GetValue() (rv []*AzureFirewallFqdnTag) {
	if a != nil {
		return a.Value
	}
	return
}

// AzureFirewallFqdnTagPropertiesFormat - Azure Firewall FQDN Tag Properties.
type AzureFirewallFqdnTagPropertiesFormat struct {
	// READ-ONLY; The name of this FQDN Tag.
	FqdnTagName *string

	// READ-ONLY; The provisioning state of the Azure firewall FQDN tag resource.
	ProvisioningState *ProvisioningState
}

func (a *AzureFirewallFqdnTagPropertiesFormat) GetFqdnTagName() (rv string) {
	if a != nil && a.FqdnTagName != nil {
		return *a.FqdnTagName
	}
	return
}

func (a *AzureFirewallFqdnTagPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// AzureFirewallIPConfiguration - IP configuration of an Azure Firewall.
type AzureFirewallIPConfiguration struct {
	// Resource ID.
	ID *string

	// Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the azure firewall IP configuration.
	Properties *AzureFirewallIPConfigurationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (a *AzureFirewallIPConfiguration) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AzureFirewallIPConfiguration) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureFirewallIPConfiguration) GetProperties() (rv *AzureFirewallIPConfigurationPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *AzureFirewallIPConfiguration) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *AzureFirewallIPConfiguration) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// AzureFirewallIPConfigurationPropertiesFormat - Properties of IP configuration of an Azure Firewall.
type AzureFirewallIPConfigurationPropertiesFormat struct {
	// Reference to the PublicIP resource. This field is a mandatory input if subnet is not null.
	PublicIPAddress *SubResource

	// Reference to the subnet resource. This resource must be named 'AzureFirewallSubnet' or 'AzureFirewallManagementSubnet'.
	Subnet *SubResource

	// READ-ONLY; The Firewall Internal Load Balancer IP to be used as the next hop in User Defined Routes.
	PrivateIPAddress *string

	// READ-ONLY; The provisioning state of the Azure firewall IP configuration resource.
	ProvisioningState *ProvisioningState
}

func (a *AzureFirewallIPConfigurationPropertiesFormat) GetPublicIPAddress() (rv *SubResource) {
	if a != nil {
		return a.PublicIPAddress
	}
	return
}

func (a *AzureFirewallIPConfigurationPropertiesFormat) GetSubnet() (rv *SubResource) {
	if a != nil {
		return a.Subnet
	}
	return
}

func (a *AzureFirewallIPConfigurationPropertiesFormat) GetPrivateIPAddress() (rv string) {
	if a != nil && a.PrivateIPAddress != nil {
		return *a.PrivateIPAddress
	}
	return
}

func (a *AzureFirewallIPConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// AzureFirewallIPGroups - IpGroups associated with azure firewall.
type AzureFirewallIPGroups struct {
	// READ-ONLY; The iteration number.
	ChangeNumber *string

	// READ-ONLY; Resource ID.
	ID *string
}

func (a *AzureFirewallIPGroups) GetChangeNumber() (rv string) {
	if a != nil && a.ChangeNumber != nil {
		return *a.ChangeNumber
	}
	return
}

func (a *AzureFirewallIPGroups) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

// AzureFirewallListResult - Response for ListAzureFirewalls API service call.
type AzureFirewallListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of Azure Firewalls in a resource group.
	Value []*AzureFirewall
}

func (a *AzureFirewallListResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

func (a *AzureFirewallListResult) GetValue() (rv []*AzureFirewall) {
	if a != nil {
		return a.Value
	}
	return
}

// AzureFirewallNatRCAction - AzureFirewall NAT Rule Collection Action.
type AzureFirewallNatRCAction struct {
	// The type of action.
	Type *AzureFirewallNatRCActionType
}

func (a *AzureFirewallNatRCAction) GetType() (rv *AzureFirewallNatRCActionType) {
	if a != nil {
		return a.Type
	}
	return
}

// AzureFirewallNatRule - Properties of a NAT rule.
type AzureFirewallNatRule struct {
	// Description of the rule.
	Description *string

	// List of destination IP addresses for this rule. Supports IP ranges, prefixes, and service tags.
	DestinationAddresses []*string

	// List of destination ports.
	DestinationPorts []*string

	// Name of the NAT rule.
	Name *string

	// Array of AzureFirewallNetworkRuleProtocols applicable to this NAT rule.
	Protocols []*AzureFirewallNetworkRuleProtocol

	// List of source IP addresses for this rule.
	SourceAddresses []*string

	// List of source IpGroups for this rule.
	SourceIPGroups []*string

	// The translated address for this NAT rule.
	TranslatedAddress *string

	// The translated FQDN for this NAT rule.
	TranslatedFqdn *string

	// The translated port for this NAT rule.
	TranslatedPort *string
}

func (a *AzureFirewallNatRule) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureFirewallNatRule) GetDestinationAddresses() (rv []*string) {
	if a != nil {
		return a.DestinationAddresses
	}
	return
}

func (a *AzureFirewallNatRule) GetDestinationPorts() (rv []*string) {
	if a != nil {
		return a.DestinationPorts
	}
	return
}

func (a *AzureFirewallNatRule) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureFirewallNatRule) GetProtocols() (rv []*AzureFirewallNetworkRuleProtocol) {
	if a != nil {
		return a.Protocols
	}
	return
}

func (a *AzureFirewallNatRule) GetSourceAddresses() (rv []*string) {
	if a != nil {
		return a.SourceAddresses
	}
	return
}

func (a *AzureFirewallNatRule) GetSourceIPGroups() (rv []*string) {
	if a != nil {
		return a.SourceIPGroups
	}
	return
}

func (a *AzureFirewallNatRule) GetTranslatedAddress() (rv string) {
	if a != nil && a.TranslatedAddress != nil {
		return *a.TranslatedAddress
	}
	return
}

func (a *AzureFirewallNatRule) GetTranslatedFqdn() (rv string) {
	if a != nil && a.TranslatedFqdn != nil {
		return *a.TranslatedFqdn
	}
	return
}

func (a *AzureFirewallNatRule) GetTranslatedPort() (rv string) {
	if a != nil && a.TranslatedPort != nil {
		return *a.TranslatedPort
	}
	return
}

// AzureFirewallNatRuleCollection - NAT rule collection resource.
type AzureFirewallNatRuleCollection struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
	Name *string

	// Properties of the azure firewall NAT rule collection.
	Properties *AzureFirewallNatRuleCollectionProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (a *AzureFirewallNatRuleCollection) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AzureFirewallNatRuleCollection) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureFirewallNatRuleCollection) GetProperties() (rv *AzureFirewallNatRuleCollectionProperties) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *AzureFirewallNatRuleCollection) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

// AzureFirewallNatRuleCollectionProperties - Properties of the NAT rule collection.
type AzureFirewallNatRuleCollectionProperties struct {
	// The action type of a NAT rule collection.
	Action *AzureFirewallNatRCAction

	// Priority of the NAT rule collection resource.
	Priority *int32

	// Collection of rules used by a NAT rule collection.
	Rules []*AzureFirewallNatRule

	// READ-ONLY; The provisioning state of the NAT rule collection resource.
	ProvisioningState *ProvisioningState
}

func (a *AzureFirewallNatRuleCollectionProperties) GetAction() (rv *AzureFirewallNatRCAction) {
	if a != nil {
		return a.Action
	}
	return
}

func (a *AzureFirewallNatRuleCollectionProperties) GetPriority() (rv int32) {
	if a != nil && a.Priority != nil {
		return *a.Priority
	}
	return
}

func (a *AzureFirewallNatRuleCollectionProperties) GetRules() (rv []*AzureFirewallNatRule) {
	if a != nil {
		return a.Rules
	}
	return
}

func (a *AzureFirewallNatRuleCollectionProperties) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// AzureFirewallNetworkRule - Properties of the network rule.
type AzureFirewallNetworkRule struct {
	// Description of the rule.
	Description *string

	// List of destination IP addresses.
	DestinationAddresses []*string

	// List of destination FQDNs.
	DestinationFqdns []*string

	// List of destination IpGroups for this rule.
	DestinationIPGroups []*string

	// List of destination ports.
	DestinationPorts []*string

	// Name of the network rule.
	Name *string

	// Array of AzureFirewallNetworkRuleProtocols.
	Protocols []*AzureFirewallNetworkRuleProtocol

	// List of source IP addresses for this rule.
	SourceAddresses []*string

	// List of source IpGroups for this rule.
	SourceIPGroups []*string
}

func (a *AzureFirewallNetworkRule) GetDescription() (rv string) {
	if a != nil && a.Description != nil {
		return *a.Description
	}
	return
}

func (a *AzureFirewallNetworkRule) GetDestinationAddresses() (rv []*string) {
	if a != nil {
		return a.DestinationAddresses
	}
	return
}

func (a *AzureFirewallNetworkRule) GetDestinationFqdns() (rv []*string) {
	if a != nil {
		return a.DestinationFqdns
	}
	return
}

func (a *AzureFirewallNetworkRule) GetDestinationIPGroups() (rv []*string) {
	if a != nil {
		return a.DestinationIPGroups
	}
	return
}

func (a *AzureFirewallNetworkRule) GetDestinationPorts() (rv []*string) {
	if a != nil {
		return a.DestinationPorts
	}
	return
}

func (a *AzureFirewallNetworkRule) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureFirewallNetworkRule) GetProtocols() (rv []*AzureFirewallNetworkRuleProtocol) {
	if a != nil {
		return a.Protocols
	}
	return
}

func (a *AzureFirewallNetworkRule) GetSourceAddresses() (rv []*string) {
	if a != nil {
		return a.SourceAddresses
	}
	return
}

func (a *AzureFirewallNetworkRule) GetSourceIPGroups() (rv []*string) {
	if a != nil {
		return a.SourceIPGroups
	}
	return
}

// AzureFirewallNetworkRuleCollection - Network rule collection resource.
type AzureFirewallNetworkRuleCollection struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.
	Name *string

	// Properties of the azure firewall network rule collection.
	Properties *AzureFirewallNetworkRuleCollectionPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (a *AzureFirewallNetworkRuleCollection) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AzureFirewallNetworkRuleCollection) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureFirewallNetworkRuleCollection) GetProperties() (rv *AzureFirewallNetworkRuleCollectionPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *AzureFirewallNetworkRuleCollection) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

// AzureFirewallNetworkRuleCollectionPropertiesFormat - Properties of the network rule collection.
type AzureFirewallNetworkRuleCollectionPropertiesFormat struct {
	// The action type of a rule collection.
	Action *AzureFirewallRCAction

	// Priority of the network rule collection resource.
	Priority *int32

	// Collection of rules used by a network rule collection.
	Rules []*AzureFirewallNetworkRule

	// READ-ONLY; The provisioning state of the network rule collection resource.
	ProvisioningState *ProvisioningState
}

func (a *AzureFirewallNetworkRuleCollectionPropertiesFormat) GetAction() (rv *AzureFirewallRCAction) {
	if a != nil {
		return a.Action
	}
	return
}

func (a *AzureFirewallNetworkRuleCollectionPropertiesFormat) GetPriority() (rv int32) {
	if a != nil && a.Priority != nil {
		return *a.Priority
	}
	return
}

func (a *AzureFirewallNetworkRuleCollectionPropertiesFormat) GetRules() (rv []*AzureFirewallNetworkRule) {
	if a != nil {
		return a.Rules
	}
	return
}

func (a *AzureFirewallNetworkRuleCollectionPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// AzureFirewallPropertiesFormat - Properties of the Azure Firewall.
type AzureFirewallPropertiesFormat struct {
	// The additional properties used to further config this azure firewall.
	AdditionalProperties map[string]*string

	// Collection of application rule collections used by Azure Firewall.
	ApplicationRuleCollections []*AzureFirewallApplicationRuleCollection

	// The firewallPolicy associated with this azure firewall.
	FirewallPolicy *SubResource

	// IP addresses associated with AzureFirewall.
	HubIPAddresses *HubIPAddresses

	// IP configuration of the Azure Firewall resource.
	IPConfigurations []*AzureFirewallIPConfiguration

	// IP configuration of the Azure Firewall used for management traffic.
	ManagementIPConfiguration *AzureFirewallIPConfiguration

	// Collection of NAT rule collections used by Azure Firewall.
	NatRuleCollections []*AzureFirewallNatRuleCollection

	// Collection of network rule collections used by Azure Firewall.
	NetworkRuleCollections []*AzureFirewallNetworkRuleCollection

	// The Azure Firewall Resource SKU.
	SKU *AzureFirewallSKU

	// The operation mode for Threat Intelligence.
	ThreatIntelMode *AzureFirewallThreatIntelMode

	// The virtualHub to which the firewall belongs.
	VirtualHub *SubResource

	// READ-ONLY; IpGroups associated with AzureFirewall.
	IPGroups []*AzureFirewallIPGroups

	// READ-ONLY; The provisioning state of the Azure firewall resource.
	ProvisioningState *ProvisioningState
}

func (a *AzureFirewallPropertiesFormat) GetAdditionalProperties() (rv map[string]*string) {
	if a != nil {
		return a.AdditionalProperties
	}
	return
}

func (a *AzureFirewallPropertiesFormat) GetApplicationRuleCollections() (rv []*AzureFirewallApplicationRuleCollection) {
	if a != nil {
		return a.ApplicationRuleCollections
	}
	return
}

func (a *AzureFirewallPropertiesFormat) GetFirewallPolicy() (rv *SubResource) {
	if a != nil {
		return a.FirewallPolicy
	}
	return
}

func (a *AzureFirewallPropertiesFormat) GetHubIPAddresses() (rv *HubIPAddresses) {
	if a != nil {
		return a.HubIPAddresses
	}
	return
}

func (a *AzureFirewallPropertiesFormat) GetIPConfigurations() (rv []*AzureFirewallIPConfiguration) {
	if a != nil {
		return a.IPConfigurations
	}
	return
}

func (a *AzureFirewallPropertiesFormat) GetManagementIPConfiguration() (rv *AzureFirewallIPConfiguration) {
	if a != nil {
		return a.ManagementIPConfiguration
	}
	return
}

func (a *AzureFirewallPropertiesFormat) GetNatRuleCollections() (rv []*AzureFirewallNatRuleCollection) {
	if a != nil {
		return a.NatRuleCollections
	}
	return
}

func (a *AzureFirewallPropertiesFormat) GetNetworkRuleCollections() (rv []*AzureFirewallNetworkRuleCollection) {
	if a != nil {
		return a.NetworkRuleCollections
	}
	return
}

func (a *AzureFirewallPropertiesFormat) GetSKU() (rv *AzureFirewallSKU) {
	if a != nil {
		return a.SKU
	}
	return
}

func (a *AzureFirewallPropertiesFormat) GetThreatIntelMode() (rv *AzureFirewallThreatIntelMode) {
	if a != nil {
		return a.ThreatIntelMode
	}
	return
}

func (a *AzureFirewallPropertiesFormat) GetVirtualHub() (rv *SubResource) {
	if a != nil {
		return a.VirtualHub
	}
	return
}

func (a *AzureFirewallPropertiesFormat) GetIPGroups() (rv []*AzureFirewallIPGroups) {
	if a != nil {
		return a.IPGroups
	}
	return
}

func (a *AzureFirewallPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if a != nil {
		return a.ProvisioningState
	}
	return
}

// AzureFirewallPublicIPAddress - Public IP Address associated with azure firewall.
type AzureFirewallPublicIPAddress struct {
	// Public IP Address value.
	Address *string
}

func (a *AzureFirewallPublicIPAddress) GetAddress() (rv string) {
	if a != nil && a.Address != nil {
		return *a.Address
	}
	return
}

// AzureFirewallRCAction - Properties of the AzureFirewallRCAction.
type AzureFirewallRCAction struct {
	// The type of action.
	Type *AzureFirewallRCActionType
}

func (a *AzureFirewallRCAction) GetType() (rv *AzureFirewallRCActionType) {
	if a != nil {
		return a.Type
	}
	return
}

// AzureFirewallSKU - SKU of an Azure Firewall.
type AzureFirewallSKU struct {
	// Name of an Azure Firewall SKU.
	Name *AzureFirewallSKUName

	// Tier of an Azure Firewall.
	Tier *AzureFirewallSKUTier
}

func (a *AzureFirewallSKU) GetName() (rv *AzureFirewallSKUName) {
	if a != nil {
		return a.Name
	}
	return
}

func (a *AzureFirewallSKU) GetTier() (rv *AzureFirewallSKUTier) {
	if a != nil {
		return a.Tier
	}
	return
}

// AzureReachabilityReport - Azure reachability report details.
type AzureReachabilityReport struct {
	// REQUIRED; The aggregation level of Azure reachability report. Can be Country, State or City.
	AggregationLevel *string

	// REQUIRED; Parameters that define a geographic location.
	ProviderLocation *AzureReachabilityReportLocation

	// REQUIRED; List of Azure reachability report items.
	ReachabilityReport []*AzureReachabilityReportItem
}

func (a *AzureReachabilityReport) GetAggregationLevel() (rv string) {
	if a != nil && a.AggregationLevel != nil {
		return *a.AggregationLevel
	}
	return
}

func (a *AzureReachabilityReport) GetProviderLocation() (rv *AzureReachabilityReportLocation) {
	if a != nil {
		return a.ProviderLocation
	}
	return
}

func (a *AzureReachabilityReport) GetReachabilityReport() (rv []*AzureReachabilityReportItem) {
	if a != nil {
		return a.ReachabilityReport
	}
	return
}

// AzureReachabilityReportItem - Azure reachability report details for a given provider location.
type AzureReachabilityReportItem struct {
	// The Azure region.
	AzureLocation *string

	// List of latency details for each of the time series.
	Latencies []*AzureReachabilityReportLatencyInfo

	// The Internet service provider.
	Provider *string
}

func (a *AzureReachabilityReportItem) GetAzureLocation() (rv string) {
	if a != nil && a.AzureLocation != nil {
		return *a.AzureLocation
	}
	return
}

func (a *AzureReachabilityReportItem) GetLatencies() (rv []*AzureReachabilityReportLatencyInfo) {
	if a != nil {
		return a.Latencies
	}
	return
}

func (a *AzureReachabilityReportItem) GetProvider() (rv string) {
	if a != nil && a.Provider != nil {
		return *a.Provider
	}
	return
}

// AzureReachabilityReportLatencyInfo - Details on latency for a time series.
type AzureReachabilityReportLatencyInfo struct {
	// The relative latency score between 1 and 100, higher values indicating a faster connection.
	Score *int32

	// The time stamp.
	TimeStamp *time.Time
}

func (a *AzureReachabilityReportLatencyInfo) GetScore() (rv int32) {
	if a != nil && a.Score != nil {
		return *a.Score
	}
	return
}

func (a *AzureReachabilityReportLatencyInfo) GetTimeStamp() (rv *time.Time) {
	if a != nil {
		return a.TimeStamp
	}
	return
}

// AzureReachabilityReportLocation - Parameters that define a geographic location.
type AzureReachabilityReportLocation struct {
	// REQUIRED; The name of the country.
	Country *string

	// The name of the city or town.
	City *string

	// The name of the state.
	State *string
}

func (a *AzureReachabilityReportLocation) GetCountry() (rv string) {
	if a != nil && a.Country != nil {
		return *a.Country
	}
	return
}

func (a *AzureReachabilityReportLocation) GetCity() (rv string) {
	if a != nil && a.City != nil {
		return *a.City
	}
	return
}

func (a *AzureReachabilityReportLocation) GetState() (rv string) {
	if a != nil && a.State != nil {
		return *a.State
	}
	return
}

// AzureReachabilityReportParameters - Geographic and time constraints for Azure reachability report.
type AzureReachabilityReportParameters struct {
	// REQUIRED; The end time for the Azure reachability report.
	EndTime *time.Time

	// REQUIRED; Parameters that define a geographic location.
	ProviderLocation *AzureReachabilityReportLocation

	// REQUIRED; The start time for the Azure reachability report.
	StartTime *time.Time

	// Optional Azure regions to scope the query to.
	AzureLocations []*string

	// List of Internet service providers.
	Providers []*string
}

func (a *AzureReachabilityReportParameters) GetEndTime() (rv *time.Time) {
	if a != nil {
		return a.EndTime
	}
	return
}

func (a *AzureReachabilityReportParameters) GetProviderLocation() (rv *AzureReachabilityReportLocation) {
	if a != nil {
		return a.ProviderLocation
	}
	return
}

func (a *AzureReachabilityReportParameters) GetStartTime() (rv *time.Time) {
	if a != nil {
		return a.StartTime
	}
	return
}

func (a *AzureReachabilityReportParameters) GetAzureLocations() (rv []*string) {
	if a != nil {
		return a.AzureLocations
	}
	return
}

func (a *AzureReachabilityReportParameters) GetProviders() (rv []*string) {
	if a != nil {
		return a.Providers
	}
	return
}

// AzureWebCategory - Azure Web Category Resource.
type AzureWebCategory struct {
	// Resource ID.
	ID *string

	// Properties of the Azure Web Category.
	Properties *AzureWebCategoryPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (a *AzureWebCategory) GetID() (rv string) {
	if a != nil && a.ID != nil {
		return *a.ID
	}
	return
}

func (a *AzureWebCategory) GetProperties() (rv *AzureWebCategoryPropertiesFormat) {
	if a != nil {
		return a.Properties
	}
	return
}

func (a *AzureWebCategory) GetEtag() (rv string) {
	if a != nil && a.Etag != nil {
		return *a.Etag
	}
	return
}

func (a *AzureWebCategory) GetName() (rv string) {
	if a != nil && a.Name != nil {
		return *a.Name
	}
	return
}

func (a *AzureWebCategory) GetType() (rv string) {
	if a != nil && a.Type != nil {
		return *a.Type
	}
	return
}

// AzureWebCategoryListResult - Response for ListAzureWebCategories API service call.
type AzureWebCategoryListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of Azure Web Categories for a given Subscription.
	Value []*AzureWebCategory
}

func (a *AzureWebCategoryListResult) GetNextLink() (rv string) {
	if a != nil && a.NextLink != nil {
		return *a.NextLink
	}
	return
}

func (a *AzureWebCategoryListResult) GetValue() (rv []*AzureWebCategory) {
	if a != nil {
		return a.Value
	}
	return
}

// AzureWebCategoryPropertiesFormat - Azure Web Category Properties.
type AzureWebCategoryPropertiesFormat struct {
	// READ-ONLY; The name of the group that the category belongs to.
	Group *string
}

func (a *AzureWebCategoryPropertiesFormat) GetGroup() (rv string) {
	if a != nil && a.Group != nil {
		return *a.Group
	}
	return
}

// BGPCommunity - Contains bgp community information offered in Service Community resources.
type BGPCommunity struct {
	// The name of the bgp community. e.g. Skype.
	CommunityName *string

	// The prefixes that the bgp community contains.
	CommunityPrefixes []*string

	// The value of the bgp community. For more information: https://docs.microsoft.com/en-us/azure/expressroute/expressroute-routing.
	CommunityValue *string

	// Customer is authorized to use bgp community or not.
	IsAuthorizedToUse *bool

	// The service group of the bgp community contains.
	ServiceGroup *string

	// The region which the service support. e.g. For O365, region is Global.
	ServiceSupportedRegion *string
}

func (b *BGPCommunity) GetCommunityName() (rv string) {
	if b != nil && b.CommunityName != nil {
		return *b.CommunityName
	}
	return
}

func (b *BGPCommunity) GetCommunityPrefixes() (rv []*string) {
	if b != nil {
		return b.CommunityPrefixes
	}
	return
}

func (b *BGPCommunity) GetCommunityValue() (rv string) {
	if b != nil && b.CommunityValue != nil {
		return *b.CommunityValue
	}
	return
}

func (b *BGPCommunity) GetIsAuthorizedToUse() (rv bool) {
	if b != nil && b.IsAuthorizedToUse != nil {
		return *b.IsAuthorizedToUse
	}
	return
}

func (b *BGPCommunity) GetServiceGroup() (rv string) {
	if b != nil && b.ServiceGroup != nil {
		return *b.ServiceGroup
	}
	return
}

func (b *BGPCommunity) GetServiceSupportedRegion() (rv string) {
	if b != nil && b.ServiceSupportedRegion != nil {
		return *b.ServiceSupportedRegion
	}
	return
}

// BackendAddressInboundNatRulePortMappings - The response for a QueryInboundNatRulePortMapping API.
type BackendAddressInboundNatRulePortMappings struct {
	// Collection of inbound NAT rule port mappings.
	InboundNatRulePortMappings []*InboundNatRulePortMapping
}

func (b *BackendAddressInboundNatRulePortMappings) GetInboundNatRulePortMappings() (rv []*InboundNatRulePortMapping) {
	if b != nil {
		return b.InboundNatRulePortMappings
	}
	return
}

// BackendAddressPool - Pool of backend IP addresses.
type BackendAddressPool struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within the set of backend address pools used by the load balancer. This name can
	// be used to access the resource.
	Name *string

	// Properties of load balancer backend address pool.
	Properties *BackendAddressPoolPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (b *BackendAddressPool) GetID() (rv string) {
	if b != nil && b.ID != nil {
		return *b.ID
	}
	return
}

func (b *BackendAddressPool) GetName() (rv string) {
	if b != nil && b.Name != nil {
		return *b.Name
	}
	return
}

func (b *BackendAddressPool) GetProperties() (rv *BackendAddressPoolPropertiesFormat) {
	if b != nil {
		return b.Properties
	}
	return
}

func (b *BackendAddressPool) GetEtag() (rv string) {
	if b != nil && b.Etag != nil {
		return *b.Etag
	}
	return
}

func (b *BackendAddressPool) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

// BackendAddressPoolPropertiesFormat - Properties of the backend address pool.
type BackendAddressPoolPropertiesFormat struct {
	// Amount of seconds Load Balancer waits for before sending RESET to client and backend address.
	DrainPeriodInSeconds *int32

	// An array of backend addresses.
	LoadBalancerBackendAddresses []*LoadBalancerBackendAddress

	// The location of the backend address pool.
	Location *string

	// An array of gateway load balancer tunnel interfaces.
	TunnelInterfaces []*GatewayLoadBalancerTunnelInterface

	// A reference to a virtual network.
	VirtualNetwork *SubResource

	// READ-ONLY; An array of references to IP addresses defined in network interfaces.
	BackendIPConfigurations []*InterfaceIPConfiguration

	// READ-ONLY; An array of references to inbound NAT rules that use this backend address pool.
	InboundNatRules []*SubResource

	// READ-ONLY; An array of references to load balancing rules that use this backend address pool.
	LoadBalancingRules []*SubResource

	// READ-ONLY; A reference to an outbound rule that uses this backend address pool.
	OutboundRule *SubResource

	// READ-ONLY; An array of references to outbound rules that use this backend address pool.
	OutboundRules []*SubResource

	// READ-ONLY; The provisioning state of the backend address pool resource.
	ProvisioningState *ProvisioningState
}

func (b *BackendAddressPoolPropertiesFormat) GetDrainPeriodInSeconds() (rv int32) {
	if b != nil && b.DrainPeriodInSeconds != nil {
		return *b.DrainPeriodInSeconds
	}
	return
}

func (b *BackendAddressPoolPropertiesFormat) GetLoadBalancerBackendAddresses() (rv []*LoadBalancerBackendAddress) {
	if b != nil {
		return b.LoadBalancerBackendAddresses
	}
	return
}

func (b *BackendAddressPoolPropertiesFormat) GetLocation() (rv string) {
	if b != nil && b.Location != nil {
		return *b.Location
	}
	return
}

func (b *BackendAddressPoolPropertiesFormat) GetTunnelInterfaces() (rv []*GatewayLoadBalancerTunnelInterface) {
	if b != nil {
		return b.TunnelInterfaces
	}
	return
}

func (b *BackendAddressPoolPropertiesFormat) GetVirtualNetwork() (rv *SubResource) {
	if b != nil {
		return b.VirtualNetwork
	}
	return
}

func (b *BackendAddressPoolPropertiesFormat) GetBackendIPConfigurations() (rv []*InterfaceIPConfiguration) {
	if b != nil {
		return b.BackendIPConfigurations
	}
	return
}

func (b *BackendAddressPoolPropertiesFormat) GetInboundNatRules() (rv []*SubResource) {
	if b != nil {
		return b.InboundNatRules
	}
	return
}

func (b *BackendAddressPoolPropertiesFormat) GetLoadBalancingRules() (rv []*SubResource) {
	if b != nil {
		return b.LoadBalancingRules
	}
	return
}

func (b *BackendAddressPoolPropertiesFormat) GetOutboundRule() (rv *SubResource) {
	if b != nil {
		return b.OutboundRule
	}
	return
}

func (b *BackendAddressPoolPropertiesFormat) GetOutboundRules() (rv []*SubResource) {
	if b != nil {
		return b.OutboundRules
	}
	return
}

func (b *BackendAddressPoolPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if b != nil {
		return b.ProvisioningState
	}
	return
}

// BaseAdminRule - Network base admin rule.
type BaseAdminRule struct {
	// REQUIRED; Whether the rule is custom or default.
	Kind *AdminRuleKind

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource ID.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; The system metadata related to this resource.
	SystemData *SystemData

	// READ-ONLY; Resource type.
	Type *string
}

func (b *BaseAdminRule) GetKind() (rv *AdminRuleKind) {
	if b != nil {
		return b.Kind
	}
	return
}

func (b *BaseAdminRule) GetEtag() (rv string) {
	if b != nil && b.Etag != nil {
		return *b.Etag
	}
	return
}

func (b *BaseAdminRule) GetID() (rv string) {
	if b != nil && b.ID != nil {
		return *b.ID
	}
	return
}

func (b *BaseAdminRule) GetName() (rv string) {
	if b != nil && b.Name != nil {
		return *b.Name
	}
	return
}

func (b *BaseAdminRule) GetSystemData() (rv *SystemData) {
	if b != nil {
		return b.SystemData
	}
	return
}

func (b *BaseAdminRule) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

// GetBaseAdminRule implements the BaseAdminRuleClassification interface for type BaseAdminRule.
func (b *BaseAdminRule) GetBaseAdminRule() *BaseAdminRule { return b }

// BastionActiveSession - The session detail for a target.
type BastionActiveSession struct {
	// READ-ONLY; The protocol used to connect to the target.
	Protocol *BastionConnectProtocol

	// READ-ONLY; The type of the resource.
	ResourceType *string

	// READ-ONLY; Duration in mins the session has been active.
	SessionDurationInMins *float32

	// READ-ONLY; A unique id for the session.
	SessionID *string

	// READ-ONLY; The time when the session started.
	StartTime any

	// READ-ONLY; The host name of the target.
	TargetHostName *string

	// READ-ONLY; The IP Address of the target.
	TargetIPAddress *string

	// READ-ONLY; The resource group of the target.
	TargetResourceGroup *string

	// READ-ONLY; The resource id of the target.
	TargetResourceID *string

	// READ-ONLY; The subscription id for the target virtual machine.
	TargetSubscriptionID *string

	// READ-ONLY; The user name who is active on this session.
	UserName *string
}

func (b *BastionActiveSession) GetProtocol() (rv *BastionConnectProtocol) {
	if b != nil {
		return b.Protocol
	}
	return
}

func (b *BastionActiveSession) GetResourceType() (rv string) {
	if b != nil && b.ResourceType != nil {
		return *b.ResourceType
	}
	return
}

func (b *BastionActiveSession) GetSessionDurationInMins() (rv float32) {
	if b != nil && b.SessionDurationInMins != nil {
		return *b.SessionDurationInMins
	}
	return
}

func (b *BastionActiveSession) GetSessionID() (rv string) {
	if b != nil && b.SessionID != nil {
		return *b.SessionID
	}
	return
}

func (b *BastionActiveSession) GetStartTime() (rv any) {
	if b != nil {
		return b.StartTime
	}
	return
}

func (b *BastionActiveSession) GetTargetHostName() (rv string) {
	if b != nil && b.TargetHostName != nil {
		return *b.TargetHostName
	}
	return
}

func (b *BastionActiveSession) GetTargetIPAddress() (rv string) {
	if b != nil && b.TargetIPAddress != nil {
		return *b.TargetIPAddress
	}
	return
}

func (b *BastionActiveSession) GetTargetResourceGroup() (rv string) {
	if b != nil && b.TargetResourceGroup != nil {
		return *b.TargetResourceGroup
	}
	return
}

func (b *BastionActiveSession) GetTargetResourceID() (rv string) {
	if b != nil && b.TargetResourceID != nil {
		return *b.TargetResourceID
	}
	return
}

func (b *BastionActiveSession) GetTargetSubscriptionID() (rv string) {
	if b != nil && b.TargetSubscriptionID != nil {
		return *b.TargetSubscriptionID
	}
	return
}

func (b *BastionActiveSession) GetUserName() (rv string) {
	if b != nil && b.UserName != nil {
		return *b.UserName
	}
	return
}

// BastionActiveSessionListResult - Response for GetActiveSessions.
type BastionActiveSessionListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// List of active sessions on the bastion.
	Value []*BastionActiveSession
}

func (b *BastionActiveSessionListResult) GetNextLink() (rv string) {
	if b != nil && b.NextLink != nil {
		return *b.NextLink
	}
	return
}

func (b *BastionActiveSessionListResult) GetValue() (rv []*BastionActiveSession) {
	if b != nil {
		return b.Value
	}
	return
}

// BastionHost - Bastion Host resource.
type BastionHost struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Represents the bastion host resource.
	Properties *BastionHostPropertiesFormat

	// The sku of this Bastion Host.
	SKU *SKU

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (b *BastionHost) GetID() (rv string) {
	if b != nil && b.ID != nil {
		return *b.ID
	}
	return
}

func (b *BastionHost) GetLocation() (rv string) {
	if b != nil && b.Location != nil {
		return *b.Location
	}
	return
}

func (b *BastionHost) GetProperties() (rv *BastionHostPropertiesFormat) {
	if b != nil {
		return b.Properties
	}
	return
}

func (b *BastionHost) GetSKU() (rv *SKU) {
	if b != nil {
		return b.SKU
	}
	return
}

func (b *BastionHost) GetTags() (rv map[string]*string) {
	if b != nil {
		return b.Tags
	}
	return
}

func (b *BastionHost) GetEtag() (rv string) {
	if b != nil && b.Etag != nil {
		return *b.Etag
	}
	return
}

func (b *BastionHost) GetName() (rv string) {
	if b != nil && b.Name != nil {
		return *b.Name
	}
	return
}

func (b *BastionHost) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

// BastionHostIPConfiguration - IP configuration of an Bastion Host.
type BastionHostIPConfiguration struct {
	// Resource ID.
	ID *string

	// Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Represents the ip configuration associated with the resource.
	Properties *BastionHostIPConfigurationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Ip configuration type.
	Type *string
}

func (b *BastionHostIPConfiguration) GetID() (rv string) {
	if b != nil && b.ID != nil {
		return *b.ID
	}
	return
}

func (b *BastionHostIPConfiguration) GetName() (rv string) {
	if b != nil && b.Name != nil {
		return *b.Name
	}
	return
}

func (b *BastionHostIPConfiguration) GetProperties() (rv *BastionHostIPConfigurationPropertiesFormat) {
	if b != nil {
		return b.Properties
	}
	return
}

func (b *BastionHostIPConfiguration) GetEtag() (rv string) {
	if b != nil && b.Etag != nil {
		return *b.Etag
	}
	return
}

func (b *BastionHostIPConfiguration) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

// BastionHostIPConfigurationPropertiesFormat - Properties of IP configuration of an Bastion Host.
type BastionHostIPConfigurationPropertiesFormat struct {
	// REQUIRED; Reference of the PublicIP resource.
	PublicIPAddress *SubResource

	// REQUIRED; Reference of the subnet resource.
	Subnet *SubResource

	// Private IP allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod

	// READ-ONLY; The provisioning state of the bastion host IP configuration resource.
	ProvisioningState *ProvisioningState
}

func (b *BastionHostIPConfigurationPropertiesFormat) GetPublicIPAddress() (rv *SubResource) {
	if b != nil {
		return b.PublicIPAddress
	}
	return
}

func (b *BastionHostIPConfigurationPropertiesFormat) GetSubnet() (rv *SubResource) {
	if b != nil {
		return b.Subnet
	}
	return
}

func (b *BastionHostIPConfigurationPropertiesFormat) GetPrivateIPAllocationMethod() (rv *IPAllocationMethod) {
	if b != nil {
		return b.PrivateIPAllocationMethod
	}
	return
}

func (b *BastionHostIPConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if b != nil {
		return b.ProvisioningState
	}
	return
}

// BastionHostListResult - Response for ListBastionHosts API service call.
type BastionHostListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of Bastion Hosts in a resource group.
	Value []*BastionHost
}

func (b *BastionHostListResult) GetNextLink() (rv string) {
	if b != nil && b.NextLink != nil {
		return *b.NextLink
	}
	return
}

func (b *BastionHostListResult) GetValue() (rv []*BastionHost) {
	if b != nil {
		return b.Value
	}
	return
}

// BastionHostPropertiesFormat - Properties of the Bastion Host.
type BastionHostPropertiesFormat struct {
	// FQDN for the endpoint on which bastion host is accessible.
	DNSName *string

	// Enable/Disable Copy/Paste feature of the Bastion Host resource.
	DisableCopyPaste *bool

	// Enable/Disable File Copy feature of the Bastion Host resource.
	EnableFileCopy *bool

	// Enable/Disable IP Connect feature of the Bastion Host resource.
	EnableIPConnect *bool

	// Enable/Disable Shareable Link of the Bastion Host resource.
	EnableShareableLink *bool

	// Enable/Disable Tunneling feature of the Bastion Host resource.
	EnableTunneling *bool

	// IP configuration of the Bastion Host resource.
	IPConfigurations []*BastionHostIPConfiguration

	// The scale units for the Bastion Host resource.
	ScaleUnits *int32

	// READ-ONLY; The provisioning state of the bastion host resource.
	ProvisioningState *ProvisioningState
}

func (b *BastionHostPropertiesFormat) GetDNSName() (rv string) {
	if b != nil && b.DNSName != nil {
		return *b.DNSName
	}
	return
}

func (b *BastionHostPropertiesFormat) GetDisableCopyPaste() (rv bool) {
	if b != nil && b.DisableCopyPaste != nil {
		return *b.DisableCopyPaste
	}
	return
}

func (b *BastionHostPropertiesFormat) GetEnableFileCopy() (rv bool) {
	if b != nil && b.EnableFileCopy != nil {
		return *b.EnableFileCopy
	}
	return
}

func (b *BastionHostPropertiesFormat) GetEnableIPConnect() (rv bool) {
	if b != nil && b.EnableIPConnect != nil {
		return *b.EnableIPConnect
	}
	return
}

func (b *BastionHostPropertiesFormat) GetEnableShareableLink() (rv bool) {
	if b != nil && b.EnableShareableLink != nil {
		return *b.EnableShareableLink
	}
	return
}

func (b *BastionHostPropertiesFormat) GetEnableTunneling() (rv bool) {
	if b != nil && b.EnableTunneling != nil {
		return *b.EnableTunneling
	}
	return
}

func (b *BastionHostPropertiesFormat) GetIPConfigurations() (rv []*BastionHostIPConfiguration) {
	if b != nil {
		return b.IPConfigurations
	}
	return
}

func (b *BastionHostPropertiesFormat) GetScaleUnits() (rv int32) {
	if b != nil && b.ScaleUnits != nil {
		return *b.ScaleUnits
	}
	return
}

func (b *BastionHostPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if b != nil {
		return b.ProvisioningState
	}
	return
}

// BastionSessionDeleteResult - Response for DisconnectActiveSessions.
type BastionSessionDeleteResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// List of sessions with their corresponding state.
	Value []*BastionSessionState
}

func (b *BastionSessionDeleteResult) GetNextLink() (rv string) {
	if b != nil && b.NextLink != nil {
		return *b.NextLink
	}
	return
}

func (b *BastionSessionDeleteResult) GetValue() (rv []*BastionSessionState) {
	if b != nil {
		return b.Value
	}
	return
}

// BastionSessionState - The session state detail for a target.
type BastionSessionState struct {
	// READ-ONLY; Used for extra information.
	Message *string

	// READ-ONLY; A unique id for the session.
	SessionID *string

	// READ-ONLY; The state of the session. Disconnected/Failed/NotFound.
	State *string
}

func (b *BastionSessionState) GetMessage() (rv string) {
	if b != nil && b.Message != nil {
		return *b.Message
	}
	return
}

func (b *BastionSessionState) GetSessionID() (rv string) {
	if b != nil && b.SessionID != nil {
		return *b.SessionID
	}
	return
}

func (b *BastionSessionState) GetState() (rv string) {
	if b != nil && b.State != nil {
		return *b.State
	}
	return
}

// BastionShareableLink - Bastion Shareable Link.
type BastionShareableLink struct {
	// REQUIRED; Reference of the virtual machine resource.
	VM *VM

	// READ-ONLY; The unique Bastion Shareable Link to the virtual machine.
	Bsl *string

	// READ-ONLY; The time when the link was created.
	CreatedAt *string

	// READ-ONLY; Optional field indicating the warning or error message related to the vm in case of partial failure.
	Message *string
}

func (b *BastionShareableLink) GetVM() (rv *VM) {
	if b != nil {
		return b.VM
	}
	return
}

func (b *BastionShareableLink) GetBsl() (rv string) {
	if b != nil && b.Bsl != nil {
		return *b.Bsl
	}
	return
}

func (b *BastionShareableLink) GetCreatedAt() (rv string) {
	if b != nil && b.CreatedAt != nil {
		return *b.CreatedAt
	}
	return
}

func (b *BastionShareableLink) GetMessage() (rv string) {
	if b != nil && b.Message != nil {
		return *b.Message
	}
	return
}

// BastionShareableLinkListRequest - Post request for all the Bastion Shareable Link endpoints.
type BastionShareableLinkListRequest struct {
	// List of VM references.
	VMs []*BastionShareableLink
}

func (b *BastionShareableLinkListRequest) GetVMs() (rv []*BastionShareableLink) {
	if b != nil {
		return b.VMs
	}
	return
}

// BastionShareableLinkListResult - Response for all the Bastion Shareable Link endpoints.
type BastionShareableLinkListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// List of Bastion Shareable Links for the request.
	Value []*BastionShareableLink
}

func (b *BastionShareableLinkListResult) GetNextLink() (rv string) {
	if b != nil && b.NextLink != nil {
		return *b.NextLink
	}
	return
}

func (b *BastionShareableLinkListResult) GetValue() (rv []*BastionShareableLink) {
	if b != nil {
		return b.Value
	}
	return
}

// BgpConnection - Virtual Appliance Site resource.
type BgpConnection struct {
	// Resource ID.
	ID *string

	// Name of the connection.
	Name *string

	// The properties of the Bgp connections.
	Properties *BgpConnectionProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Connection type.
	Type *string
}

func (b *BgpConnection) GetID() (rv string) {
	if b != nil && b.ID != nil {
		return *b.ID
	}
	return
}

func (b *BgpConnection) GetName() (rv string) {
	if b != nil && b.Name != nil {
		return *b.Name
	}
	return
}

func (b *BgpConnection) GetProperties() (rv *BgpConnectionProperties) {
	if b != nil {
		return b.Properties
	}
	return
}

func (b *BgpConnection) GetEtag() (rv string) {
	if b != nil && b.Etag != nil {
		return *b.Etag
	}
	return
}

func (b *BgpConnection) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

// BgpConnectionProperties - Properties of the bgp connection.
type BgpConnectionProperties struct {
	// The reference to the HubVirtualNetworkConnection resource.
	HubVirtualNetworkConnection *SubResource

	// Peer ASN.
	PeerAsn *int64

	// Peer IP.
	PeerIP *string

	// READ-ONLY; The current state of the VirtualHub to Peer.
	ConnectionState *HubBgpConnectionStatus

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

func (b *BgpConnectionProperties) GetHubVirtualNetworkConnection() (rv *SubResource) {
	if b != nil {
		return b.HubVirtualNetworkConnection
	}
	return
}

func (b *BgpConnectionProperties) GetPeerAsn() (rv int64) {
	if b != nil && b.PeerAsn != nil {
		return *b.PeerAsn
	}
	return
}

func (b *BgpConnectionProperties) GetPeerIP() (rv string) {
	if b != nil && b.PeerIP != nil {
		return *b.PeerIP
	}
	return
}

func (b *BgpConnectionProperties) GetConnectionState() (rv *HubBgpConnectionStatus) {
	if b != nil {
		return b.ConnectionState
	}
	return
}

func (b *BgpConnectionProperties) GetProvisioningState() (rv *ProvisioningState) {
	if b != nil {
		return b.ProvisioningState
	}
	return
}

// BgpPeerStatus - BGP peer status details.
type BgpPeerStatus struct {
	// READ-ONLY; The autonomous system number of the remote BGP peer.
	Asn *int64

	// READ-ONLY; For how long the peering has been up.
	ConnectedDuration *string

	// READ-ONLY; The virtual network gateway's local address.
	LocalAddress *string

	// READ-ONLY; The number of BGP messages received.
	MessagesReceived *int64

	// READ-ONLY; The number of BGP messages sent.
	MessagesSent *int64

	// READ-ONLY; The remote BGP peer.
	Neighbor *string

	// READ-ONLY; The number of routes learned from this peer.
	RoutesReceived *int64

	// READ-ONLY; The BGP peer state.
	State *BgpPeerState
}

func (b *BgpPeerStatus) GetAsn() (rv int64) {
	if b != nil && b.Asn != nil {
		return *b.Asn
	}
	return
}

func (b *BgpPeerStatus) GetConnectedDuration() (rv string) {
	if b != nil && b.ConnectedDuration != nil {
		return *b.ConnectedDuration
	}
	return
}

func (b *BgpPeerStatus) GetLocalAddress() (rv string) {
	if b != nil && b.LocalAddress != nil {
		return *b.LocalAddress
	}
	return
}

func (b *BgpPeerStatus) GetMessagesReceived() (rv int64) {
	if b != nil && b.MessagesReceived != nil {
		return *b.MessagesReceived
	}
	return
}

func (b *BgpPeerStatus) GetMessagesSent() (rv int64) {
	if b != nil && b.MessagesSent != nil {
		return *b.MessagesSent
	}
	return
}

func (b *BgpPeerStatus) GetNeighbor() (rv string) {
	if b != nil && b.Neighbor != nil {
		return *b.Neighbor
	}
	return
}

func (b *BgpPeerStatus) GetRoutesReceived() (rv int64) {
	if b != nil && b.RoutesReceived != nil {
		return *b.RoutesReceived
	}
	return
}

func (b *BgpPeerStatus) GetState() (rv *BgpPeerState) {
	if b != nil {
		return b.State
	}
	return
}

// BgpPeerStatusListResult - Response for list BGP peer status API service call.
type BgpPeerStatusListResult struct {
	// List of BGP peers.
	Value []*BgpPeerStatus
}

func (b *BgpPeerStatusListResult) GetValue() (rv []*BgpPeerStatus) {
	if b != nil {
		return b.Value
	}
	return
}

// BgpServiceCommunity - Service Community Properties.
type BgpServiceCommunity struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the BGP service community.
	Properties *BgpServiceCommunityPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (b *BgpServiceCommunity) GetID() (rv string) {
	if b != nil && b.ID != nil {
		return *b.ID
	}
	return
}

func (b *BgpServiceCommunity) GetLocation() (rv string) {
	if b != nil && b.Location != nil {
		return *b.Location
	}
	return
}

func (b *BgpServiceCommunity) GetProperties() (rv *BgpServiceCommunityPropertiesFormat) {
	if b != nil {
		return b.Properties
	}
	return
}

func (b *BgpServiceCommunity) GetTags() (rv map[string]*string) {
	if b != nil {
		return b.Tags
	}
	return
}

func (b *BgpServiceCommunity) GetName() (rv string) {
	if b != nil && b.Name != nil {
		return *b.Name
	}
	return
}

func (b *BgpServiceCommunity) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

// BgpServiceCommunityListResult - Response for the ListServiceCommunity API service call.
type BgpServiceCommunityListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of service community resources.
	Value []*BgpServiceCommunity
}

func (b *BgpServiceCommunityListResult) GetNextLink() (rv string) {
	if b != nil && b.NextLink != nil {
		return *b.NextLink
	}
	return
}

func (b *BgpServiceCommunityListResult) GetValue() (rv []*BgpServiceCommunity) {
	if b != nil {
		return b.Value
	}
	return
}

// BgpServiceCommunityPropertiesFormat - Properties of Service Community.
type BgpServiceCommunityPropertiesFormat struct {
	// A list of bgp communities.
	BgpCommunities []*BGPCommunity

	// The name of the bgp community. e.g. Skype.
	ServiceName *string
}

func (b *BgpServiceCommunityPropertiesFormat) GetBgpCommunities() (rv []*BGPCommunity) {
	if b != nil {
		return b.BgpCommunities
	}
	return
}

func (b *BgpServiceCommunityPropertiesFormat) GetServiceName() (rv string) {
	if b != nil && b.ServiceName != nil {
		return *b.ServiceName
	}
	return
}

// BgpSettings - BGP settings details.
type BgpSettings struct {
	// The BGP speaker's ASN.
	Asn *int64

	// The BGP peering address and BGP identifier of this BGP speaker.
	BgpPeeringAddress *string

	// BGP peering address with IP configuration ID for virtual network gateway.
	BgpPeeringAddresses []*IPConfigurationBgpPeeringAddress

	// The weight added to routes learned from this BGP speaker.
	PeerWeight *int32
}

func (b *BgpSettings) GetAsn() (rv int64) {
	if b != nil && b.Asn != nil {
		return *b.Asn
	}
	return
}

func (b *BgpSettings) GetBgpPeeringAddress() (rv string) {
	if b != nil && b.BgpPeeringAddress != nil {
		return *b.BgpPeeringAddress
	}
	return
}

func (b *BgpSettings) GetBgpPeeringAddresses() (rv []*IPConfigurationBgpPeeringAddress) {
	if b != nil {
		return b.BgpPeeringAddresses
	}
	return
}

func (b *BgpSettings) GetPeerWeight() (rv int32) {
	if b != nil && b.PeerWeight != nil {
		return *b.PeerWeight
	}
	return
}

// BreakOutCategoryPolicies - Network Virtual Appliance Sku Properties.
type BreakOutCategoryPolicies struct {
	// Flag to control breakout of o365 allow category.
	Allow *bool

	// Flag to control breakout of o365 default category.
	Default *bool

	// Flag to control breakout of o365 optimize category.
	Optimize *bool
}

func (b *BreakOutCategoryPolicies) GetAllow() (rv bool) {
	if b != nil && b.Allow != nil {
		return *b.Allow
	}
	return
}

func (b *BreakOutCategoryPolicies) GetDefault() (rv bool) {
	if b != nil && b.Default != nil {
		return *b.Default
	}
	return
}

func (b *BreakOutCategoryPolicies) GetOptimize() (rv bool) {
	if b != nil && b.Optimize != nil {
		return *b.Optimize
	}
	return
}

// CheckPrivateLinkServiceVisibilityRequest - Request body of the CheckPrivateLinkServiceVisibility API service call.
type CheckPrivateLinkServiceVisibilityRequest struct {
	// The alias of the private link service.
	PrivateLinkServiceAlias *string
}

func (c *CheckPrivateLinkServiceVisibilityRequest) GetPrivateLinkServiceAlias() (rv string) {
	if c != nil && c.PrivateLinkServiceAlias != nil {
		return *c.PrivateLinkServiceAlias
	}
	return
}

type Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties struct {
	// READ-ONLY; The client id of user assigned identity.
	ClientID *string

	// READ-ONLY; The principal id of user assigned identity.
	PrincipalID *string
}

func (c *Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties) GetClientID() (rv string) {
	if c != nil && c.ClientID != nil {
		return *c.ClientID
	}
	return
}

func (c *Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties) GetPrincipalID() (rv string) {
	if c != nil && c.PrincipalID != nil {
		return *c.PrincipalID
	}
	return
}

// ConfigurationDiagnosticParameters - Parameters to get network configuration diagnostic.
type ConfigurationDiagnosticParameters struct {
	// REQUIRED; List of network configuration diagnostic profiles.
	Profiles []*ConfigurationDiagnosticProfile

	// REQUIRED; The ID of the target resource to perform network configuration diagnostic. Valid options are VM, NetworkInterface,
	// VMSS/NetworkInterface and Application Gateway.
	TargetResourceID *string

	// Verbosity level.
	VerbosityLevel *VerbosityLevel
}

func (c *ConfigurationDiagnosticParameters) GetProfiles() (rv []*ConfigurationDiagnosticProfile) {
	if c != nil {
		return c.Profiles
	}
	return
}

func (c *ConfigurationDiagnosticParameters) GetTargetResourceID() (rv string) {
	if c != nil && c.TargetResourceID != nil {
		return *c.TargetResourceID
	}
	return
}

func (c *ConfigurationDiagnosticParameters) GetVerbosityLevel() (rv *VerbosityLevel) {
	if c != nil {
		return c.VerbosityLevel
	}
	return
}

// ConfigurationDiagnosticProfile - Parameters to compare with network configuration.
type ConfigurationDiagnosticProfile struct {
	// REQUIRED; Traffic destination. Accepted values are: '*', IP Address/CIDR, Service Tag.
	Destination *string

	// REQUIRED; Traffic destination port. Accepted values are '*' and a single port in the range (0 - 65535).
	DestinationPort *string

	// REQUIRED; The direction of the traffic.
	Direction *Direction

	// REQUIRED; Protocol to be verified on. Accepted values are '*', TCP, UDP.
	Protocol *string

	// REQUIRED; Traffic source. Accepted values are '*', IP Address/CIDR, Service Tag.
	Source *string
}

func (c *ConfigurationDiagnosticProfile) GetDestination() (rv string) {
	if c != nil && c.Destination != nil {
		return *c.Destination
	}
	return
}

func (c *ConfigurationDiagnosticProfile) GetDestinationPort() (rv string) {
	if c != nil && c.DestinationPort != nil {
		return *c.DestinationPort
	}
	return
}

func (c *ConfigurationDiagnosticProfile) GetDirection() (rv *Direction) {
	if c != nil {
		return c.Direction
	}
	return
}

func (c *ConfigurationDiagnosticProfile) GetProtocol() (rv string) {
	if c != nil && c.Protocol != nil {
		return *c.Protocol
	}
	return
}

func (c *ConfigurationDiagnosticProfile) GetSource() (rv string) {
	if c != nil && c.Source != nil {
		return *c.Source
	}
	return
}

// ConfigurationDiagnosticResponse - Results of network configuration diagnostic on the target resource.
type ConfigurationDiagnosticResponse struct {
	// READ-ONLY; List of network configuration diagnostic results.
	Results []*ConfigurationDiagnosticResult
}

func (c *ConfigurationDiagnosticResponse) GetResults() (rv []*ConfigurationDiagnosticResult) {
	if c != nil {
		return c.Results
	}
	return
}

// ConfigurationDiagnosticResult - Network configuration diagnostic result corresponded to provided traffic query.
type ConfigurationDiagnosticResult struct {
	// Network security group result.
	NetworkSecurityGroupResult *SecurityGroupResult

	// Network configuration diagnostic profile.
	Profile *ConfigurationDiagnosticProfile
}

func (c *ConfigurationDiagnosticResult) GetNetworkSecurityGroupResult() (rv *SecurityGroupResult) {
	if c != nil {
		return c.NetworkSecurityGroupResult
	}
	return
}

func (c *ConfigurationDiagnosticResult) GetProfile() (rv *ConfigurationDiagnosticProfile) {
	if c != nil {
		return c.Profile
	}
	return
}

// ConfigurationGroup - The network configuration group resource
type ConfigurationGroup struct {
	// Network group ID.
	ID *string

	// The network configuration group properties
	Properties *GroupProperties
}

func (c *ConfigurationGroup) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *ConfigurationGroup) GetProperties() (rv *GroupProperties) {
	if c != nil {
		return c.Properties
	}
	return
}

// ConnectionMonitor - Parameters that define the operation to create a connection monitor.
type ConnectionMonitor struct {
	// REQUIRED; Properties of the connection monitor.
	Properties *ConnectionMonitorParameters

	// Connection monitor location.
	Location *string

	// Connection monitor tags.
	Tags map[string]*string
}

func (c *ConnectionMonitor) GetProperties() (rv *ConnectionMonitorParameters) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *ConnectionMonitor) GetLocation() (rv string) {
	if c != nil && c.Location != nil {
		return *c.Location
	}
	return
}

func (c *ConnectionMonitor) GetTags() (rv map[string]*string) {
	if c != nil {
		return c.Tags
	}
	return
}

// ConnectionMonitorDestination - Describes the destination of connection monitor.
type ConnectionMonitorDestination struct {
	// Address of the connection monitor destination (IP or domain name).
	Address *string

	// The destination port used by connection monitor.
	Port *int32

	// The ID of the resource used as the destination by connection monitor.
	ResourceID *string
}

func (c *ConnectionMonitorDestination) GetAddress() (rv string) {
	if c != nil && c.Address != nil {
		return *c.Address
	}
	return
}

func (c *ConnectionMonitorDestination) GetPort() (rv int32) {
	if c != nil && c.Port != nil {
		return *c.Port
	}
	return
}

func (c *ConnectionMonitorDestination) GetResourceID() (rv string) {
	if c != nil && c.ResourceID != nil {
		return *c.ResourceID
	}
	return
}

// ConnectionMonitorEndpoint - Describes the connection monitor endpoint.
type ConnectionMonitorEndpoint struct {
	// REQUIRED; The name of the connection monitor endpoint.
	Name *string

	// Address of the connection monitor endpoint (IP or domain name).
	Address *string

	// Test coverage for the endpoint.
	CoverageLevel *CoverageLevel

	// Filter for sub-items within the endpoint.
	Filter *ConnectionMonitorEndpointFilter

	// Resource ID of the connection monitor endpoint.
	ResourceID *string

	// Endpoint scope.
	Scope *ConnectionMonitorEndpointScope

	// The endpoint type.
	Type *EndpointType
}

func (c *ConnectionMonitorEndpoint) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *ConnectionMonitorEndpoint) GetAddress() (rv string) {
	if c != nil && c.Address != nil {
		return *c.Address
	}
	return
}

func (c *ConnectionMonitorEndpoint) GetCoverageLevel() (rv *CoverageLevel) {
	if c != nil {
		return c.CoverageLevel
	}
	return
}

func (c *ConnectionMonitorEndpoint) GetFilter() (rv *ConnectionMonitorEndpointFilter) {
	if c != nil {
		return c.Filter
	}
	return
}

func (c *ConnectionMonitorEndpoint) GetResourceID() (rv string) {
	if c != nil && c.ResourceID != nil {
		return *c.ResourceID
	}
	return
}

func (c *ConnectionMonitorEndpoint) GetScope() (rv *ConnectionMonitorEndpointScope) {
	if c != nil {
		return c.Scope
	}
	return
}

func (c *ConnectionMonitorEndpoint) GetType() (rv *EndpointType) {
	if c != nil {
		return c.Type
	}
	return
}

// ConnectionMonitorEndpointFilter - Describes the connection monitor endpoint filter.
type ConnectionMonitorEndpointFilter struct {
	// List of items in the filter.
	Items []*ConnectionMonitorEndpointFilterItem

	// The behavior of the endpoint filter. Currently only 'Include' is supported.
	Type *ConnectionMonitorEndpointFilterType
}

func (c *ConnectionMonitorEndpointFilter) GetItems() (rv []*ConnectionMonitorEndpointFilterItem) {
	if c != nil {
		return c.Items
	}
	return
}

func (c *ConnectionMonitorEndpointFilter) GetType() (rv *ConnectionMonitorEndpointFilterType) {
	if c != nil {
		return c.Type
	}
	return
}

// ConnectionMonitorEndpointFilterItem - Describes the connection monitor endpoint filter item.
type ConnectionMonitorEndpointFilterItem struct {
	// The address of the filter item.
	Address *string

	// The type of item included in the filter. Currently only 'AgentAddress' is supported.
	Type *ConnectionMonitorEndpointFilterItemType
}

func (c *ConnectionMonitorEndpointFilterItem) GetAddress() (rv string) {
	if c != nil && c.Address != nil {
		return *c.Address
	}
	return
}

func (c *ConnectionMonitorEndpointFilterItem) GetType() (rv *ConnectionMonitorEndpointFilterItemType) {
	if c != nil {
		return c.Type
	}
	return
}

// ConnectionMonitorEndpointScope - Describes the connection monitor endpoint scope.
type ConnectionMonitorEndpointScope struct {
	// List of items which needs to be excluded from the endpoint scope.
	Exclude []*ConnectionMonitorEndpointScopeItem

	// List of items which needs to be included to the endpoint scope.
	Include []*ConnectionMonitorEndpointScopeItem
}

func (c *ConnectionMonitorEndpointScope) GetExclude() (rv []*ConnectionMonitorEndpointScopeItem) {
	if c != nil {
		return c.Exclude
	}
	return
}

func (c *ConnectionMonitorEndpointScope) GetInclude() (rv []*ConnectionMonitorEndpointScopeItem) {
	if c != nil {
		return c.Include
	}
	return
}

// ConnectionMonitorEndpointScopeItem - Describes the connection monitor endpoint scope item.
type ConnectionMonitorEndpointScopeItem struct {
	// The address of the endpoint item. Supported types are IPv4/IPv6 subnet mask or IPv4/IPv6 IP address.
	Address *string
}

func (c *ConnectionMonitorEndpointScopeItem) GetAddress() (rv string) {
	if c != nil && c.Address != nil {
		return *c.Address
	}
	return
}

// ConnectionMonitorHTTPConfiguration - Describes the HTTP configuration.
type ConnectionMonitorHTTPConfiguration struct {
	// The HTTP method to use.
	Method *HTTPConfigurationMethod

	// The path component of the URI. For instance, "/dir1/dir2".
	Path *string

	// The port to connect to.
	Port *int32

	// Value indicating whether HTTPS is preferred over HTTP in cases where the choice is not explicit.
	PreferHTTPS *bool

	// The HTTP headers to transmit with the request.
	RequestHeaders []*HTTPHeader

	// HTTP status codes to consider successful. For instance, "2xx,301-304,418".
	ValidStatusCodeRanges []*string
}

func (c *ConnectionMonitorHTTPConfiguration) GetMethod() (rv *HTTPConfigurationMethod) {
	if c != nil {
		return c.Method
	}
	return
}

func (c *ConnectionMonitorHTTPConfiguration) GetPath() (rv string) {
	if c != nil && c.Path != nil {
		return *c.Path
	}
	return
}

func (c *ConnectionMonitorHTTPConfiguration) GetPort() (rv int32) {
	if c != nil && c.Port != nil {
		return *c.Port
	}
	return
}

func (c *ConnectionMonitorHTTPConfiguration) GetPreferHTTPS() (rv bool) {
	if c != nil && c.PreferHTTPS != nil {
		return *c.PreferHTTPS
	}
	return
}

func (c *ConnectionMonitorHTTPConfiguration) GetRequestHeaders() (rv []*HTTPHeader) {
	if c != nil {
		return c.RequestHeaders
	}
	return
}

func (c *ConnectionMonitorHTTPConfiguration) GetValidStatusCodeRanges() (rv []*string) {
	if c != nil {
		return c.ValidStatusCodeRanges
	}
	return
}

// ConnectionMonitorIcmpConfiguration - Describes the ICMP configuration.
type ConnectionMonitorIcmpConfiguration struct {
	// Value indicating whether path evaluation with trace route should be disabled.
	DisableTraceRoute *bool
}

func (c *ConnectionMonitorIcmpConfiguration) GetDisableTraceRoute() (rv bool) {
	if c != nil && c.DisableTraceRoute != nil {
		return *c.DisableTraceRoute
	}
	return
}

// ConnectionMonitorListResult - List of connection monitors.
type ConnectionMonitorListResult struct {
	// Information about connection monitors.
	Value []*ConnectionMonitorResult
}

func (c *ConnectionMonitorListResult) GetValue() (rv []*ConnectionMonitorResult) {
	if c != nil {
		return c.Value
	}
	return
}

// ConnectionMonitorOutput - Describes a connection monitor output destination.
type ConnectionMonitorOutput struct {
	// Connection monitor output destination type. Currently, only "Workspace" is supported.
	Type *OutputType

	// Describes the settings for producing output into a log analytics workspace.
	WorkspaceSettings *ConnectionMonitorWorkspaceSettings
}

func (c *ConnectionMonitorOutput) GetType() (rv *OutputType) {
	if c != nil {
		return c.Type
	}
	return
}

func (c *ConnectionMonitorOutput) GetWorkspaceSettings() (rv *ConnectionMonitorWorkspaceSettings) {
	if c != nil {
		return c.WorkspaceSettings
	}
	return
}

// ConnectionMonitorParameters - Parameters that define the operation to create a connection monitor.
type ConnectionMonitorParameters struct {
	// Determines if the connection monitor will start automatically once created.
	AutoStart *bool

	// Describes the destination of connection monitor.
	Destination *ConnectionMonitorDestination

	// List of connection monitor endpoints.
	Endpoints []*ConnectionMonitorEndpoint

	// Monitoring interval in seconds.
	MonitoringIntervalInSeconds *int32

	// Optional notes to be associated with the connection monitor.
	Notes *string

	// List of connection monitor outputs.
	Outputs []*ConnectionMonitorOutput

	// Describes the source of connection monitor.
	Source *ConnectionMonitorSource

	// List of connection monitor test configurations.
	TestConfigurations []*ConnectionMonitorTestConfiguration

	// List of connection monitor test groups.
	TestGroups []*ConnectionMonitorTestGroup
}

func (c *ConnectionMonitorParameters) GetAutoStart() (rv bool) {
	if c != nil && c.AutoStart != nil {
		return *c.AutoStart
	}
	return
}

func (c *ConnectionMonitorParameters) GetDestination() (rv *ConnectionMonitorDestination) {
	if c != nil {
		return c.Destination
	}
	return
}

func (c *ConnectionMonitorParameters) GetEndpoints() (rv []*ConnectionMonitorEndpoint) {
	if c != nil {
		return c.Endpoints
	}
	return
}

func (c *ConnectionMonitorParameters) GetMonitoringIntervalInSeconds() (rv int32) {
	if c != nil && c.MonitoringIntervalInSeconds != nil {
		return *c.MonitoringIntervalInSeconds
	}
	return
}

func (c *ConnectionMonitorParameters) GetNotes() (rv string) {
	if c != nil && c.Notes != nil {
		return *c.Notes
	}
	return
}

func (c *ConnectionMonitorParameters) GetOutputs() (rv []*ConnectionMonitorOutput) {
	if c != nil {
		return c.Outputs
	}
	return
}

func (c *ConnectionMonitorParameters) GetSource() (rv *ConnectionMonitorSource) {
	if c != nil {
		return c.Source
	}
	return
}

func (c *ConnectionMonitorParameters) GetTestConfigurations() (rv []*ConnectionMonitorTestConfiguration) {
	if c != nil {
		return c.TestConfigurations
	}
	return
}

func (c *ConnectionMonitorParameters) GetTestGroups() (rv []*ConnectionMonitorTestGroup) {
	if c != nil {
		return c.TestGroups
	}
	return
}

// ConnectionMonitorQueryResult - List of connection states snapshots.
type ConnectionMonitorQueryResult struct {
	// Status of connection monitor source.
	SourceStatus *ConnectionMonitorSourceStatus

	// Information about connection states.
	States []*ConnectionStateSnapshot
}

func (c *ConnectionMonitorQueryResult) GetSourceStatus() (rv *ConnectionMonitorSourceStatus) {
	if c != nil {
		return c.SourceStatus
	}
	return
}

func (c *ConnectionMonitorQueryResult) GetStates() (rv []*ConnectionStateSnapshot) {
	if c != nil {
		return c.States
	}
	return
}

// ConnectionMonitorResult - Information about the connection monitor.
type ConnectionMonitorResult struct {
	// Connection monitor location.
	Location *string

	// Properties of the connection monitor result.
	Properties *ConnectionMonitorResultProperties

	// Connection monitor tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; ID of the connection monitor.
	ID *string

	// READ-ONLY; Name of the connection monitor.
	Name *string

	// READ-ONLY; Connection monitor type.
	Type *string
}

func (c *ConnectionMonitorResult) GetLocation() (rv string) {
	if c != nil && c.Location != nil {
		return *c.Location
	}
	return
}

func (c *ConnectionMonitorResult) GetProperties() (rv *ConnectionMonitorResultProperties) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *ConnectionMonitorResult) GetTags() (rv map[string]*string) {
	if c != nil {
		return c.Tags
	}
	return
}

func (c *ConnectionMonitorResult) GetEtag() (rv string) {
	if c != nil && c.Etag != nil {
		return *c.Etag
	}
	return
}

func (c *ConnectionMonitorResult) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *ConnectionMonitorResult) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *ConnectionMonitorResult) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// ConnectionMonitorResultProperties - Describes the properties of a connection monitor.
type ConnectionMonitorResultProperties struct {
	// Determines if the connection monitor will start automatically once created.
	AutoStart *bool

	// Describes the destination of connection monitor.
	Destination *ConnectionMonitorDestination

	// List of connection monitor endpoints.
	Endpoints []*ConnectionMonitorEndpoint

	// Monitoring interval in seconds.
	MonitoringIntervalInSeconds *int32

	// Optional notes to be associated with the connection monitor.
	Notes *string

	// List of connection monitor outputs.
	Outputs []*ConnectionMonitorOutput

	// Describes the source of connection monitor.
	Source *ConnectionMonitorSource

	// List of connection monitor test configurations.
	TestConfigurations []*ConnectionMonitorTestConfiguration

	// List of connection monitor test groups.
	TestGroups []*ConnectionMonitorTestGroup

	// READ-ONLY; Type of connection monitor.
	ConnectionMonitorType *ConnectionMonitorType

	// READ-ONLY; The monitoring status of the connection monitor.
	MonitoringStatus *string

	// READ-ONLY; The provisioning state of the connection monitor.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The date and time when the connection monitor was started.
	StartTime *time.Time
}

func (c *ConnectionMonitorResultProperties) GetAutoStart() (rv bool) {
	if c != nil && c.AutoStart != nil {
		return *c.AutoStart
	}
	return
}

func (c *ConnectionMonitorResultProperties) GetDestination() (rv *ConnectionMonitorDestination) {
	if c != nil {
		return c.Destination
	}
	return
}

func (c *ConnectionMonitorResultProperties) GetEndpoints() (rv []*ConnectionMonitorEndpoint) {
	if c != nil {
		return c.Endpoints
	}
	return
}

func (c *ConnectionMonitorResultProperties) GetMonitoringIntervalInSeconds() (rv int32) {
	if c != nil && c.MonitoringIntervalInSeconds != nil {
		return *c.MonitoringIntervalInSeconds
	}
	return
}

func (c *ConnectionMonitorResultProperties) GetNotes() (rv string) {
	if c != nil && c.Notes != nil {
		return *c.Notes
	}
	return
}

func (c *ConnectionMonitorResultProperties) GetOutputs() (rv []*ConnectionMonitorOutput) {
	if c != nil {
		return c.Outputs
	}
	return
}

func (c *ConnectionMonitorResultProperties) GetSource() (rv *ConnectionMonitorSource) {
	if c != nil {
		return c.Source
	}
	return
}

func (c *ConnectionMonitorResultProperties) GetTestConfigurations() (rv []*ConnectionMonitorTestConfiguration) {
	if c != nil {
		return c.TestConfigurations
	}
	return
}

func (c *ConnectionMonitorResultProperties) GetTestGroups() (rv []*ConnectionMonitorTestGroup) {
	if c != nil {
		return c.TestGroups
	}
	return
}

func (c *ConnectionMonitorResultProperties) GetConnectionMonitorType() (rv *ConnectionMonitorType) {
	if c != nil {
		return c.ConnectionMonitorType
	}
	return
}

func (c *ConnectionMonitorResultProperties) GetMonitoringStatus() (rv string) {
	if c != nil && c.MonitoringStatus != nil {
		return *c.MonitoringStatus
	}
	return
}

func (c *ConnectionMonitorResultProperties) GetProvisioningState() (rv *ProvisioningState) {
	if c != nil {
		return c.ProvisioningState
	}
	return
}

func (c *ConnectionMonitorResultProperties) GetStartTime() (rv *time.Time) {
	if c != nil {
		return c.StartTime
	}
	return
}

// ConnectionMonitorSource - Describes the source of connection monitor.
type ConnectionMonitorSource struct {
	// REQUIRED; The ID of the resource used as the source by connection monitor.
	ResourceID *string

	// The source port used by connection monitor.
	Port *int32
}

func (c *ConnectionMonitorSource) GetResourceID() (rv string) {
	if c != nil && c.ResourceID != nil {
		return *c.ResourceID
	}
	return
}

func (c *ConnectionMonitorSource) GetPort() (rv int32) {
	if c != nil && c.Port != nil {
		return *c.Port
	}
	return
}

// ConnectionMonitorSuccessThreshold - Describes the threshold for declaring a test successful.
type ConnectionMonitorSuccessThreshold struct {
	// The maximum percentage of failed checks permitted for a test to evaluate as successful.
	ChecksFailedPercent *int32

	// The maximum round-trip time in milliseconds permitted for a test to evaluate as successful.
	RoundTripTimeMs *float32
}

func (c *ConnectionMonitorSuccessThreshold) GetChecksFailedPercent() (rv int32) {
	if c != nil && c.ChecksFailedPercent != nil {
		return *c.ChecksFailedPercent
	}
	return
}

func (c *ConnectionMonitorSuccessThreshold) GetRoundTripTimeMs() (rv float32) {
	if c != nil && c.RoundTripTimeMs != nil {
		return *c.RoundTripTimeMs
	}
	return
}

// ConnectionMonitorTCPConfiguration - Describes the TCP configuration.
type ConnectionMonitorTCPConfiguration struct {
	// Destination port behavior.
	DestinationPortBehavior *DestinationPortBehavior

	// Value indicating whether path evaluation with trace route should be disabled.
	DisableTraceRoute *bool

	// The port to connect to.
	Port *int32
}

func (c *ConnectionMonitorTCPConfiguration) GetDestinationPortBehavior() (rv *DestinationPortBehavior) {
	if c != nil {
		return c.DestinationPortBehavior
	}
	return
}

func (c *ConnectionMonitorTCPConfiguration) GetDisableTraceRoute() (rv bool) {
	if c != nil && c.DisableTraceRoute != nil {
		return *c.DisableTraceRoute
	}
	return
}

func (c *ConnectionMonitorTCPConfiguration) GetPort() (rv int32) {
	if c != nil && c.Port != nil {
		return *c.Port
	}
	return
}

// ConnectionMonitorTestConfiguration - Describes a connection monitor test configuration.
type ConnectionMonitorTestConfiguration struct {
	// REQUIRED; The name of the connection monitor test configuration.
	Name *string

	// REQUIRED; The protocol to use in test evaluation.
	Protocol *ConnectionMonitorTestConfigurationProtocol

	// The parameters used to perform test evaluation over HTTP.
	HTTPConfiguration *ConnectionMonitorHTTPConfiguration

	// The parameters used to perform test evaluation over ICMP.
	IcmpConfiguration *ConnectionMonitorIcmpConfiguration

	// The preferred IP version to use in test evaluation. The connection monitor may choose to use a different version depending
	// on other parameters.
	PreferredIPVersion *PreferredIPVersion

	// The threshold for declaring a test successful.
	SuccessThreshold *ConnectionMonitorSuccessThreshold

	// The parameters used to perform test evaluation over TCP.
	TCPConfiguration *ConnectionMonitorTCPConfiguration

	// The frequency of test evaluation, in seconds.
	TestFrequencySec *int32
}

func (c *ConnectionMonitorTestConfiguration) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *ConnectionMonitorTestConfiguration) GetProtocol() (rv *ConnectionMonitorTestConfigurationProtocol) {
	if c != nil {
		return c.Protocol
	}
	return
}

func (c *ConnectionMonitorTestConfiguration) GetHTTPConfiguration() (rv *ConnectionMonitorHTTPConfiguration) {
	if c != nil {
		return c.HTTPConfiguration
	}
	return
}

func (c *ConnectionMonitorTestConfiguration) GetIcmpConfiguration() (rv *ConnectionMonitorIcmpConfiguration) {
	if c != nil {
		return c.IcmpConfiguration
	}
	return
}

func (c *ConnectionMonitorTestConfiguration) GetPreferredIPVersion() (rv *PreferredIPVersion) {
	if c != nil {
		return c.PreferredIPVersion
	}
	return
}

func (c *ConnectionMonitorTestConfiguration) GetSuccessThreshold() (rv *ConnectionMonitorSuccessThreshold) {
	if c != nil {
		return c.SuccessThreshold
	}
	return
}

func (c *ConnectionMonitorTestConfiguration) GetTCPConfiguration() (rv *ConnectionMonitorTCPConfiguration) {
	if c != nil {
		return c.TCPConfiguration
	}
	return
}

func (c *ConnectionMonitorTestConfiguration) GetTestFrequencySec() (rv int32) {
	if c != nil && c.TestFrequencySec != nil {
		return *c.TestFrequencySec
	}
	return
}

// ConnectionMonitorTestGroup - Describes the connection monitor test group.
type ConnectionMonitorTestGroup struct {
	// REQUIRED; List of destination endpoint names.
	Destinations []*string

	// REQUIRED; The name of the connection monitor test group.
	Name *string

	// REQUIRED; List of source endpoint names.
	Sources []*string

	// REQUIRED; List of test configuration names.
	TestConfigurations []*string

	// Value indicating whether test group is disabled.
	Disable *bool
}

func (c *ConnectionMonitorTestGroup) GetDestinations() (rv []*string) {
	if c != nil {
		return c.Destinations
	}
	return
}

func (c *ConnectionMonitorTestGroup) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *ConnectionMonitorTestGroup) GetSources() (rv []*string) {
	if c != nil {
		return c.Sources
	}
	return
}

func (c *ConnectionMonitorTestGroup) GetTestConfigurations() (rv []*string) {
	if c != nil {
		return c.TestConfigurations
	}
	return
}

func (c *ConnectionMonitorTestGroup) GetDisable() (rv bool) {
	if c != nil && c.Disable != nil {
		return *c.Disable
	}
	return
}

// ConnectionMonitorWorkspaceSettings - Describes the settings for producing output into a log analytics workspace.
type ConnectionMonitorWorkspaceSettings struct {
	// Log analytics workspace resource ID.
	WorkspaceResourceID *string
}

func (c *ConnectionMonitorWorkspaceSettings) GetWorkspaceResourceID() (rv string) {
	if c != nil && c.WorkspaceResourceID != nil {
		return *c.WorkspaceResourceID
	}
	return
}

// ConnectionResetSharedKey - The virtual network connection reset shared key.
type ConnectionResetSharedKey struct {
	// REQUIRED; The virtual network connection reset shared key length, should between 1 and 128.
	KeyLength *int32
}

func (c *ConnectionResetSharedKey) GetKeyLength() (rv int32) {
	if c != nil && c.KeyLength != nil {
		return *c.KeyLength
	}
	return
}

// ConnectionSharedKey - Response for GetConnectionSharedKey API service call.
type ConnectionSharedKey struct {
	// REQUIRED; The virtual network connection shared key value.
	Value *string

	// Resource ID.
	ID *string
}

func (c *ConnectionSharedKey) GetValue() (rv string) {
	if c != nil && c.Value != nil {
		return *c.Value
	}
	return
}

func (c *ConnectionSharedKey) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

// ConnectionStateSnapshot - Connection state snapshot.
type ConnectionStateSnapshot struct {
	// Average latency in ms.
	AvgLatencyInMs *int64

	// The connection state.
	ConnectionState *ConnectionState

	// The end time of the connection snapshot.
	EndTime *time.Time

	// Connectivity analysis evaluation state.
	EvaluationState *EvaluationState

	// Maximum latency in ms.
	MaxLatencyInMs *int64

	// Minimum latency in ms.
	MinLatencyInMs *int64

	// The number of failed probes.
	ProbesFailed *int64

	// The number of sent probes.
	ProbesSent *int64

	// The start time of the connection snapshot.
	StartTime *time.Time

	// READ-ONLY; List of hops between the source and the destination.
	Hops []*ConnectivityHop
}

func (c *ConnectionStateSnapshot) GetAvgLatencyInMs() (rv int64) {
	if c != nil && c.AvgLatencyInMs != nil {
		return *c.AvgLatencyInMs
	}
	return
}

func (c *ConnectionStateSnapshot) GetConnectionState() (rv *ConnectionState) {
	if c != nil {
		return c.ConnectionState
	}
	return
}

func (c *ConnectionStateSnapshot) GetEndTime() (rv *time.Time) {
	if c != nil {
		return c.EndTime
	}
	return
}

func (c *ConnectionStateSnapshot) GetEvaluationState() (rv *EvaluationState) {
	if c != nil {
		return c.EvaluationState
	}
	return
}

func (c *ConnectionStateSnapshot) GetMaxLatencyInMs() (rv int64) {
	if c != nil && c.MaxLatencyInMs != nil {
		return *c.MaxLatencyInMs
	}
	return
}

func (c *ConnectionStateSnapshot) GetMinLatencyInMs() (rv int64) {
	if c != nil && c.MinLatencyInMs != nil {
		return *c.MinLatencyInMs
	}
	return
}

func (c *ConnectionStateSnapshot) GetProbesFailed() (rv int64) {
	if c != nil && c.ProbesFailed != nil {
		return *c.ProbesFailed
	}
	return
}

func (c *ConnectionStateSnapshot) GetProbesSent() (rv int64) {
	if c != nil && c.ProbesSent != nil {
		return *c.ProbesSent
	}
	return
}

func (c *ConnectionStateSnapshot) GetStartTime() (rv *time.Time) {
	if c != nil {
		return c.StartTime
	}
	return
}

func (c *ConnectionStateSnapshot) GetHops() (rv []*ConnectivityHop) {
	if c != nil {
		return c.Hops
	}
	return
}

// ConnectivityConfiguration - The network manager connectivity configuration resource
type ConnectivityConfiguration struct {
	// Properties of a network manager connectivity configuration
	Properties *ConnectivityConfigurationProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource ID.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; The system metadata related to this resource.
	SystemData *SystemData

	// READ-ONLY; Resource type.
	Type *string
}

func (c *ConnectivityConfiguration) GetProperties() (rv *ConnectivityConfigurationProperties) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *ConnectivityConfiguration) GetEtag() (rv string) {
	if c != nil && c.Etag != nil {
		return *c.Etag
	}
	return
}

func (c *ConnectivityConfiguration) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *ConnectivityConfiguration) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *ConnectivityConfiguration) GetSystemData() (rv *SystemData) {
	if c != nil {
		return c.SystemData
	}
	return
}

func (c *ConnectivityConfiguration) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// ConnectivityConfigurationListResult - Result of the request to list network manager connectivity configurations. It contains
// a list of configurations and a link to get the next set of results.
type ConnectivityConfigurationListResult struct {
	// Gets the URL to get the next page of results.
	NextLink *string

	// Gets a page of Connectivity Configurations
	Value []*ConnectivityConfiguration
}

func (c *ConnectivityConfigurationListResult) GetNextLink() (rv string) {
	if c != nil && c.NextLink != nil {
		return *c.NextLink
	}
	return
}

func (c *ConnectivityConfigurationListResult) GetValue() (rv []*ConnectivityConfiguration) {
	if c != nil {
		return c.Value
	}
	return
}

// ConnectivityConfigurationProperties - Properties of network manager connectivity configuration
type ConnectivityConfigurationProperties struct {
	// REQUIRED; Groups for configuration
	AppliesToGroups []*ConnectivityGroupItem

	// REQUIRED; Connectivity topology type.
	ConnectivityTopology *ConnectivityTopology

	// Flag if need to remove current existing peerings.
	DeleteExistingPeering *DeleteExistingPeering

	// A description of the connectivity configuration.
	Description *string

	// List of hubItems
	Hubs []*Hub

	// Flag if global mesh is supported.
	IsGlobal *IsGlobal

	// READ-ONLY; The provisioning state of the connectivity configuration resource.
	ProvisioningState *ProvisioningState
}

func (c *ConnectivityConfigurationProperties) GetAppliesToGroups() (rv []*ConnectivityGroupItem) {
	if c != nil {
		return c.AppliesToGroups
	}
	return
}

func (c *ConnectivityConfigurationProperties) GetConnectivityTopology() (rv *ConnectivityTopology) {
	if c != nil {
		return c.ConnectivityTopology
	}
	return
}

func (c *ConnectivityConfigurationProperties) GetDeleteExistingPeering() (rv *DeleteExistingPeering) {
	if c != nil {
		return c.DeleteExistingPeering
	}
	return
}

func (c *ConnectivityConfigurationProperties) GetDescription() (rv string) {
	if c != nil && c.Description != nil {
		return *c.Description
	}
	return
}

func (c *ConnectivityConfigurationProperties) GetHubs() (rv []*Hub) {
	if c != nil {
		return c.Hubs
	}
	return
}

func (c *ConnectivityConfigurationProperties) GetIsGlobal() (rv *IsGlobal) {
	if c != nil {
		return c.IsGlobal
	}
	return
}

func (c *ConnectivityConfigurationProperties) GetProvisioningState() (rv *ProvisioningState) {
	if c != nil {
		return c.ProvisioningState
	}
	return
}

// ConnectivityDestination - Parameters that define destination of connection.
type ConnectivityDestination struct {
	// The IP address or URI the resource to which a connection attempt will be made.
	Address *string

	// Port on which check connectivity will be performed.
	Port *int32

	// The ID of the resource to which a connection attempt will be made.
	ResourceID *string
}

func (c *ConnectivityDestination) GetAddress() (rv string) {
	if c != nil && c.Address != nil {
		return *c.Address
	}
	return
}

func (c *ConnectivityDestination) GetPort() (rv int32) {
	if c != nil && c.Port != nil {
		return *c.Port
	}
	return
}

func (c *ConnectivityDestination) GetResourceID() (rv string) {
	if c != nil && c.ResourceID != nil {
		return *c.ResourceID
	}
	return
}

// ConnectivityGroupItem - Connectivity group item.
type ConnectivityGroupItem struct {
	// REQUIRED; Group connectivity type.
	GroupConnectivity *GroupConnectivity

	// REQUIRED; Network group Id.
	NetworkGroupID *string

	// Flag if global is supported.
	IsGlobal *IsGlobal

	// Flag if need to use hub gateway.
	UseHubGateway *UseHubGateway
}

func (c *ConnectivityGroupItem) GetGroupConnectivity() (rv *GroupConnectivity) {
	if c != nil {
		return c.GroupConnectivity
	}
	return
}

func (c *ConnectivityGroupItem) GetNetworkGroupID() (rv string) {
	if c != nil && c.NetworkGroupID != nil {
		return *c.NetworkGroupID
	}
	return
}

func (c *ConnectivityGroupItem) GetIsGlobal() (rv *IsGlobal) {
	if c != nil {
		return c.IsGlobal
	}
	return
}

func (c *ConnectivityGroupItem) GetUseHubGateway() (rv *UseHubGateway) {
	if c != nil {
		return c.UseHubGateway
	}
	return
}

// ConnectivityHop - Information about a hop between the source and the destination.
type ConnectivityHop struct {
	// READ-ONLY; The IP address of the hop.
	Address *string

	// READ-ONLY; The ID of the hop.
	ID *string

	// READ-ONLY; List of issues.
	Issues []*ConnectivityIssue

	// READ-ONLY; List of hop links.
	Links []*HopLink

	// READ-ONLY; List of next hop identifiers.
	NextHopIDs []*string

	// READ-ONLY; List of previous hop identifiers.
	PreviousHopIDs []*string

	// READ-ONLY; List of previous hop links.
	PreviousLinks []*HopLink

	// READ-ONLY; The ID of the resource corresponding to this hop.
	ResourceID *string

	// READ-ONLY; The type of the hop.
	Type *string
}

func (c *ConnectivityHop) GetAddress() (rv string) {
	if c != nil && c.Address != nil {
		return *c.Address
	}
	return
}

func (c *ConnectivityHop) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *ConnectivityHop) GetIssues() (rv []*ConnectivityIssue) {
	if c != nil {
		return c.Issues
	}
	return
}

func (c *ConnectivityHop) GetLinks() (rv []*HopLink) {
	if c != nil {
		return c.Links
	}
	return
}

func (c *ConnectivityHop) GetNextHopIDs() (rv []*string) {
	if c != nil {
		return c.NextHopIDs
	}
	return
}

func (c *ConnectivityHop) GetPreviousHopIDs() (rv []*string) {
	if c != nil {
		return c.PreviousHopIDs
	}
	return
}

func (c *ConnectivityHop) GetPreviousLinks() (rv []*HopLink) {
	if c != nil {
		return c.PreviousLinks
	}
	return
}

func (c *ConnectivityHop) GetResourceID() (rv string) {
	if c != nil && c.ResourceID != nil {
		return *c.ResourceID
	}
	return
}

func (c *ConnectivityHop) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// ConnectivityInformation - Information on the connectivity status.
type ConnectivityInformation struct {
	// READ-ONLY; Average latency in milliseconds.
	AvgLatencyInMs *int32

	// READ-ONLY; The connection status.
	ConnectionStatus *ConnectionStatus

	// READ-ONLY; List of hops between the source and the destination.
	Hops []*ConnectivityHop

	// READ-ONLY; Maximum latency in milliseconds.
	MaxLatencyInMs *int32

	// READ-ONLY; Minimum latency in milliseconds.
	MinLatencyInMs *int32

	// READ-ONLY; Number of failed probes.
	ProbesFailed *int32

	// READ-ONLY; Total number of probes sent.
	ProbesSent *int32
}

func (c *ConnectivityInformation) GetAvgLatencyInMs() (rv int32) {
	if c != nil && c.AvgLatencyInMs != nil {
		return *c.AvgLatencyInMs
	}
	return
}

func (c *ConnectivityInformation) GetConnectionStatus() (rv *ConnectionStatus) {
	if c != nil {
		return c.ConnectionStatus
	}
	return
}

func (c *ConnectivityInformation) GetHops() (rv []*ConnectivityHop) {
	if c != nil {
		return c.Hops
	}
	return
}

func (c *ConnectivityInformation) GetMaxLatencyInMs() (rv int32) {
	if c != nil && c.MaxLatencyInMs != nil {
		return *c.MaxLatencyInMs
	}
	return
}

func (c *ConnectivityInformation) GetMinLatencyInMs() (rv int32) {
	if c != nil && c.MinLatencyInMs != nil {
		return *c.MinLatencyInMs
	}
	return
}

func (c *ConnectivityInformation) GetProbesFailed() (rv int32) {
	if c != nil && c.ProbesFailed != nil {
		return *c.ProbesFailed
	}
	return
}

func (c *ConnectivityInformation) GetProbesSent() (rv int32) {
	if c != nil && c.ProbesSent != nil {
		return *c.ProbesSent
	}
	return
}

// ConnectivityIssue - Information about an issue encountered in the process of checking for connectivity.
type ConnectivityIssue struct {
	// READ-ONLY; Provides additional context on the issue.
	Context []map[string]*string

	// READ-ONLY; The origin of the issue.
	Origin *Origin

	// READ-ONLY; The severity of the issue.
	Severity *Severity

	// READ-ONLY; The type of issue.
	Type *IssueType
}

func (c *ConnectivityIssue) GetContext() (rv []map[string]*string) {
	if c != nil {
		return c.Context
	}
	return
}

func (c *ConnectivityIssue) GetOrigin() (rv *Origin) {
	if c != nil {
		return c.Origin
	}
	return
}

func (c *ConnectivityIssue) GetSeverity() (rv *Severity) {
	if c != nil {
		return c.Severity
	}
	return
}

func (c *ConnectivityIssue) GetType() (rv *IssueType) {
	if c != nil {
		return c.Type
	}
	return
}

// ConnectivityParameters - Parameters that determine how the connectivity check will be performed.
type ConnectivityParameters struct {
	// REQUIRED; The destination of connection.
	Destination *ConnectivityDestination

	// REQUIRED; The source of the connection.
	Source *ConnectivitySource

	// Preferred IP version of the connection.
	PreferredIPVersion *IPVersion

	// Network protocol.
	Protocol *Protocol

	// Configuration of the protocol.
	ProtocolConfiguration *ProtocolConfiguration
}

func (c *ConnectivityParameters) GetDestination() (rv *ConnectivityDestination) {
	if c != nil {
		return c.Destination
	}
	return
}

func (c *ConnectivityParameters) GetSource() (rv *ConnectivitySource) {
	if c != nil {
		return c.Source
	}
	return
}

func (c *ConnectivityParameters) GetPreferredIPVersion() (rv *IPVersion) {
	if c != nil {
		return c.PreferredIPVersion
	}
	return
}

func (c *ConnectivityParameters) GetProtocol() (rv *Protocol) {
	if c != nil {
		return c.Protocol
	}
	return
}

func (c *ConnectivityParameters) GetProtocolConfiguration() (rv *ProtocolConfiguration) {
	if c != nil {
		return c.ProtocolConfiguration
	}
	return
}

// ConnectivitySource - Parameters that define the source of the connection.
type ConnectivitySource struct {
	// REQUIRED; The ID of the resource from which a connectivity check will be initiated.
	ResourceID *string

	// The source port from which a connectivity check will be performed.
	Port *int32
}

func (c *ConnectivitySource) GetResourceID() (rv string) {
	if c != nil && c.ResourceID != nil {
		return *c.ResourceID
	}
	return
}

func (c *ConnectivitySource) GetPort() (rv int32) {
	if c != nil && c.Port != nil {
		return *c.Port
	}
	return
}

// Container - Reference to container resource in remote resource provider.
type Container struct {
	// Resource ID.
	ID *string
}

func (c *Container) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

// ContainerNetworkInterface - Container network interface child resource.
type ContainerNetworkInterface struct {
	// Resource ID.
	ID *string

	// The name of the resource. This name can be used to access the resource.
	Name *string

	// Container network interface properties.
	Properties *ContainerNetworkInterfacePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Sub Resource type.
	Type *string
}

func (c *ContainerNetworkInterface) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *ContainerNetworkInterface) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *ContainerNetworkInterface) GetProperties() (rv *ContainerNetworkInterfacePropertiesFormat) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *ContainerNetworkInterface) GetEtag() (rv string) {
	if c != nil && c.Etag != nil {
		return *c.Etag
	}
	return
}

func (c *ContainerNetworkInterface) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// ContainerNetworkInterfaceConfiguration - Container network interface configuration child resource.
type ContainerNetworkInterfaceConfiguration struct {
	// Resource ID.
	ID *string

	// The name of the resource. This name can be used to access the resource.
	Name *string

	// Container network interface configuration properties.
	Properties *ContainerNetworkInterfaceConfigurationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Sub Resource type.
	Type *string
}

func (c *ContainerNetworkInterfaceConfiguration) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *ContainerNetworkInterfaceConfiguration) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *ContainerNetworkInterfaceConfiguration) GetProperties() (rv *ContainerNetworkInterfaceConfigurationPropertiesFormat) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *ContainerNetworkInterfaceConfiguration) GetEtag() (rv string) {
	if c != nil && c.Etag != nil {
		return *c.Etag
	}
	return
}

func (c *ContainerNetworkInterfaceConfiguration) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// ContainerNetworkInterfaceConfigurationPropertiesFormat - Container network interface configuration properties.
type ContainerNetworkInterfaceConfigurationPropertiesFormat struct {
	// A list of container network interfaces created from this container network interface configuration.
	ContainerNetworkInterfaces []*SubResource

	// A list of ip configurations of the container network interface configuration.
	IPConfigurations []*IPConfigurationProfile

	// READ-ONLY; The provisioning state of the container network interface configuration resource.
	ProvisioningState *ProvisioningState
}

func (c *ContainerNetworkInterfaceConfigurationPropertiesFormat) GetContainerNetworkInterfaces() (rv []*SubResource) {
	if c != nil {
		return c.ContainerNetworkInterfaces
	}
	return
}

func (c *ContainerNetworkInterfaceConfigurationPropertiesFormat) GetIPConfigurations() (rv []*IPConfigurationProfile) {
	if c != nil {
		return c.IPConfigurations
	}
	return
}

func (c *ContainerNetworkInterfaceConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if c != nil {
		return c.ProvisioningState
	}
	return
}

// ContainerNetworkInterfaceIPConfiguration - The ip configuration for a container network interface.
type ContainerNetworkInterfaceIPConfiguration struct {
	// The name of the resource. This name can be used to access the resource.
	Name *string

	// Properties of the container network interface IP configuration.
	Properties *ContainerNetworkInterfaceIPConfigurationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Sub Resource type.
	Type *string
}

func (c *ContainerNetworkInterfaceIPConfiguration) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *ContainerNetworkInterfaceIPConfiguration) GetProperties() (rv *ContainerNetworkInterfaceIPConfigurationPropertiesFormat) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *ContainerNetworkInterfaceIPConfiguration) GetEtag() (rv string) {
	if c != nil && c.Etag != nil {
		return *c.Etag
	}
	return
}

func (c *ContainerNetworkInterfaceIPConfiguration) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// ContainerNetworkInterfaceIPConfigurationPropertiesFormat - Properties of the container network interface IP configuration.
type ContainerNetworkInterfaceIPConfigurationPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the container network interface IP configuration resource.
	ProvisioningState *ProvisioningState
}

func (c *ContainerNetworkInterfaceIPConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if c != nil {
		return c.ProvisioningState
	}
	return
}

// ContainerNetworkInterfacePropertiesFormat - Properties of container network interface.
type ContainerNetworkInterfacePropertiesFormat struct {
	// Reference to the container to which this container network interface is attached.
	Container *Container

	// READ-ONLY; Container network interface configuration from which this container network interface is created.
	ContainerNetworkInterfaceConfiguration *ContainerNetworkInterfaceConfiguration

	// READ-ONLY; Reference to the ip configuration on this container nic.
	IPConfigurations []*ContainerNetworkInterfaceIPConfiguration

	// READ-ONLY; The provisioning state of the container network interface resource.
	ProvisioningState *ProvisioningState
}

func (c *ContainerNetworkInterfacePropertiesFormat) GetContainer() (rv *Container) {
	if c != nil {
		return c.Container
	}
	return
}

func (c *ContainerNetworkInterfacePropertiesFormat) GetContainerNetworkInterfaceConfiguration() (rv *ContainerNetworkInterfaceConfiguration) {
	if c != nil {
		return c.ContainerNetworkInterfaceConfiguration
	}
	return
}

func (c *ContainerNetworkInterfacePropertiesFormat) GetIPConfigurations() (rv []*ContainerNetworkInterfaceIPConfiguration) {
	if c != nil {
		return c.IPConfigurations
	}
	return
}

func (c *ContainerNetworkInterfacePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if c != nil {
		return c.ProvisioningState
	}
	return
}

// Criterion - A matching criteria which matches routes based on route prefix, community, and AS path.
type Criterion struct {
	// List of AS paths which this criteria matches.
	AsPath []*string

	// List of BGP communities which this criteria matches.
	Community []*string

	// Match condition to apply RouteMap rules.
	MatchCondition *RouteMapMatchCondition

	// List of route prefixes which this criteria matches.
	RoutePrefix []*string
}

func (c *Criterion) GetAsPath() (rv []*string) {
	if c != nil {
		return c.AsPath
	}
	return
}

func (c *Criterion) GetCommunity() (rv []*string) {
	if c != nil {
		return c.Community
	}
	return
}

func (c *Criterion) GetMatchCondition() (rv *RouteMapMatchCondition) {
	if c != nil {
		return c.MatchCondition
	}
	return
}

func (c *Criterion) GetRoutePrefix() (rv []*string) {
	if c != nil {
		return c.RoutePrefix
	}
	return
}

// CrossTenantScopes - Cross tenant scopes.
type CrossTenantScopes struct {
	// READ-ONLY; List of management groups.
	ManagementGroups []*string

	// READ-ONLY; List of subscriptions.
	Subscriptions []*string

	// READ-ONLY; Tenant ID.
	TenantID *string
}

func (c *CrossTenantScopes) GetManagementGroups() (rv []*string) {
	if c != nil {
		return c.ManagementGroups
	}
	return
}

func (c *CrossTenantScopes) GetSubscriptions() (rv []*string) {
	if c != nil {
		return c.Subscriptions
	}
	return
}

func (c *CrossTenantScopes) GetTenantID() (rv string) {
	if c != nil && c.TenantID != nil {
		return *c.TenantID
	}
	return
}

// CustomDNSConfigPropertiesFormat - Contains custom Dns resolution configuration from customer.
type CustomDNSConfigPropertiesFormat struct {
	// Fqdn that resolves to private endpoint ip address.
	Fqdn *string

	// A list of private ip addresses of the private endpoint.
	IPAddresses []*string
}

func (c *CustomDNSConfigPropertiesFormat) GetFqdn() (rv string) {
	if c != nil && c.Fqdn != nil {
		return *c.Fqdn
	}
	return
}

func (c *CustomDNSConfigPropertiesFormat) GetIPAddresses() (rv []*string) {
	if c != nil {
		return c.IPAddresses
	}
	return
}

// CustomIPPrefix - Custom IP prefix resource.
type CustomIPPrefix struct {
	// The extended location of the custom IP prefix.
	ExtendedLocation *ExtendedLocation

	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Custom IP prefix properties.
	Properties *CustomIPPrefixPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// A list of availability zones denoting the IP allocated for the resource needs to come from.
	Zones []*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (c *CustomIPPrefix) GetExtendedLocation() (rv *ExtendedLocation) {
	if c != nil {
		return c.ExtendedLocation
	}
	return
}

func (c *CustomIPPrefix) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *CustomIPPrefix) GetLocation() (rv string) {
	if c != nil && c.Location != nil {
		return *c.Location
	}
	return
}

func (c *CustomIPPrefix) GetProperties() (rv *CustomIPPrefixPropertiesFormat) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *CustomIPPrefix) GetTags() (rv map[string]*string) {
	if c != nil {
		return c.Tags
	}
	return
}

func (c *CustomIPPrefix) GetZones() (rv []*string) {
	if c != nil {
		return c.Zones
	}
	return
}

func (c *CustomIPPrefix) GetEtag() (rv string) {
	if c != nil && c.Etag != nil {
		return *c.Etag
	}
	return
}

func (c *CustomIPPrefix) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CustomIPPrefix) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// CustomIPPrefixListResult - Response for ListCustomIpPrefixes API service call.
type CustomIPPrefixListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of Custom IP prefixes that exists in a resource group.
	Value []*CustomIPPrefix
}

func (c *CustomIPPrefixListResult) GetNextLink() (rv string) {
	if c != nil && c.NextLink != nil {
		return *c.NextLink
	}
	return
}

func (c *CustomIPPrefixListResult) GetValue() (rv []*CustomIPPrefix) {
	if c != nil {
		return c.Value
	}
	return
}

// CustomIPPrefixPropertiesFormat - Custom IP prefix properties.
type CustomIPPrefixPropertiesFormat struct {
	// The ASN for CIDR advertising. Should be an integer as string.
	Asn *string

	// Authorization message for WAN validation.
	AuthorizationMessage *string

	// The prefix range in CIDR notation. Should include the start address and the prefix length.
	Cidr *string

	// The commissioned state of the Custom IP Prefix.
	CommissionedState *CommissionedState

	// The Parent CustomIpPrefix for IPv6 /64 CustomIpPrefix.
	CustomIPPrefixParent *SubResource

	// Whether to do express route advertise.
	ExpressRouteAdvertise *bool

	// The Geo for CIDR advertising. Should be an Geo code.
	Geo *Geo

	// Whether to Advertise the range to Internet.
	NoInternetAdvertise *bool

	// Type of custom IP prefix. Should be Singular, Parent, or Child.
	PrefixType *CustomIPPrefixType

	// Signed message for WAN validation.
	SignedMessage *string

	// READ-ONLY; The list of all Children for IPv6 /48 CustomIpPrefix.
	ChildCustomIPPrefixes []*SubResource

	// READ-ONLY; The reason why resource is in failed state.
	FailedReason *string

	// READ-ONLY; The provisioning state of the custom IP prefix resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The list of all referenced PublicIpPrefixes.
	PublicIPPrefixes []*SubResource

	// READ-ONLY; The resource GUID property of the custom IP prefix resource.
	ResourceGUID *string
}

func (c *CustomIPPrefixPropertiesFormat) GetAsn() (rv string) {
	if c != nil && c.Asn != nil {
		return *c.Asn
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetAuthorizationMessage() (rv string) {
	if c != nil && c.AuthorizationMessage != nil {
		return *c.AuthorizationMessage
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetCidr() (rv string) {
	if c != nil && c.Cidr != nil {
		return *c.Cidr
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetCommissionedState() (rv *CommissionedState) {
	if c != nil {
		return c.CommissionedState
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetCustomIPPrefixParent() (rv *SubResource) {
	if c != nil {
		return c.CustomIPPrefixParent
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetExpressRouteAdvertise() (rv bool) {
	if c != nil && c.ExpressRouteAdvertise != nil {
		return *c.ExpressRouteAdvertise
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetGeo() (rv *Geo) {
	if c != nil {
		return c.Geo
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetNoInternetAdvertise() (rv bool) {
	if c != nil && c.NoInternetAdvertise != nil {
		return *c.NoInternetAdvertise
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetPrefixType() (rv *CustomIPPrefixType) {
	if c != nil {
		return c.PrefixType
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetSignedMessage() (rv string) {
	if c != nil && c.SignedMessage != nil {
		return *c.SignedMessage
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetChildCustomIPPrefixes() (rv []*SubResource) {
	if c != nil {
		return c.ChildCustomIPPrefixes
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetFailedReason() (rv string) {
	if c != nil && c.FailedReason != nil {
		return *c.FailedReason
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if c != nil {
		return c.ProvisioningState
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetPublicIPPrefixes() (rv []*SubResource) {
	if c != nil {
		return c.PublicIPPrefixes
	}
	return
}

func (c *CustomIPPrefixPropertiesFormat) GetResourceGUID() (rv string) {
	if c != nil && c.ResourceGUID != nil {
		return *c.ResourceGUID
	}
	return
}

// DNSNameAvailabilityResult - Response for the CheckDnsNameAvailability API service call.
type DNSNameAvailabilityResult struct {
	// Domain availability (True/False).
	Available *bool
}

func (d *DNSNameAvailabilityResult) GetAvailable() (rv bool) {
	if d != nil && d.Available != nil {
		return *d.Available
	}
	return
}

// DNSSettings - DNS Proxy Settings in Firewall Policy.
type DNSSettings struct {
	// Enable DNS Proxy on Firewalls attached to the Firewall Policy.
	EnableProxy *bool

	// FQDNs in Network Rules are supported when set to true.
	RequireProxyForNetworkRules *bool

	// List of Custom DNS Servers.
	Servers []*string
}

func (d *DNSSettings) GetEnableProxy() (rv bool) {
	if d != nil && d.EnableProxy != nil {
		return *d.EnableProxy
	}
	return
}

func (d *DNSSettings) GetRequireProxyForNetworkRules() (rv bool) {
	if d != nil && d.RequireProxyForNetworkRules != nil {
		return *d.RequireProxyForNetworkRules
	}
	return
}

func (d *DNSSettings) GetServers() (rv []*string) {
	if d != nil {
		return d.Servers
	}
	return
}

// DdosCustomPolicy - A DDoS custom policy in a resource group.
type DdosCustomPolicy struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the DDoS custom policy.
	Properties *DdosCustomPolicyPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (d *DdosCustomPolicy) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *DdosCustomPolicy) GetLocation() (rv string) {
	if d != nil && d.Location != nil {
		return *d.Location
	}
	return
}

func (d *DdosCustomPolicy) GetProperties() (rv *DdosCustomPolicyPropertiesFormat) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DdosCustomPolicy) GetTags() (rv map[string]*string) {
	if d != nil {
		return d.Tags
	}
	return
}

func (d *DdosCustomPolicy) GetEtag() (rv string) {
	if d != nil && d.Etag != nil {
		return *d.Etag
	}
	return
}

func (d *DdosCustomPolicy) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DdosCustomPolicy) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

// DdosCustomPolicyPropertiesFormat - DDoS custom policy properties.
type DdosCustomPolicyPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the DDoS custom policy resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the DDoS custom policy resource. It uniquely identifies the resource, even if
	// the user changes its name or migrate the resource across subscriptions or resource groups.
	ResourceGUID *string
}

func (d *DdosCustomPolicyPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if d != nil {
		return d.ProvisioningState
	}
	return
}

func (d *DdosCustomPolicyPropertiesFormat) GetResourceGUID() (rv string) {
	if d != nil && d.ResourceGUID != nil {
		return *d.ResourceGUID
	}
	return
}

// DdosProtectionPlan - A DDoS protection plan in a resource group.
type DdosProtectionPlan struct {
	// Resource location.
	Location *string

	// Properties of the DDoS protection plan.
	Properties *DdosProtectionPlanPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource ID.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (d *DdosProtectionPlan) GetLocation() (rv string) {
	if d != nil && d.Location != nil {
		return *d.Location
	}
	return
}

func (d *DdosProtectionPlan) GetProperties() (rv *DdosProtectionPlanPropertiesFormat) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DdosProtectionPlan) GetTags() (rv map[string]*string) {
	if d != nil {
		return d.Tags
	}
	return
}

func (d *DdosProtectionPlan) GetEtag() (rv string) {
	if d != nil && d.Etag != nil {
		return *d.Etag
	}
	return
}

func (d *DdosProtectionPlan) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *DdosProtectionPlan) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DdosProtectionPlan) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

// DdosProtectionPlanListResult - A list of DDoS protection plans.
type DdosProtectionPlanListResult struct {
	// A list of DDoS protection plans.
	Value []*DdosProtectionPlan

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (d *DdosProtectionPlanListResult) GetValue() (rv []*DdosProtectionPlan) {
	if d != nil {
		return d.Value
	}
	return
}

func (d *DdosProtectionPlanListResult) GetNextLink() (rv string) {
	if d != nil && d.NextLink != nil {
		return *d.NextLink
	}
	return
}

// DdosProtectionPlanPropertiesFormat - DDoS protection plan properties.
type DdosProtectionPlanPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the DDoS protection plan resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The list of public IPs associated with the DDoS protection plan resource. This list is read-only.
	PublicIPAddresses []*SubResource

	// READ-ONLY; The resource GUID property of the DDoS protection plan resource. It uniquely identifies the resource, even if
	// the user changes its name or migrate the resource across subscriptions or resource groups.
	ResourceGUID *string

	// READ-ONLY; The list of virtual networks associated with the DDoS protection plan resource. This list is read-only.
	VirtualNetworks []*SubResource
}

func (d *DdosProtectionPlanPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if d != nil {
		return d.ProvisioningState
	}
	return
}

func (d *DdosProtectionPlanPropertiesFormat) GetPublicIPAddresses() (rv []*SubResource) {
	if d != nil {
		return d.PublicIPAddresses
	}
	return
}

func (d *DdosProtectionPlanPropertiesFormat) GetResourceGUID() (rv string) {
	if d != nil && d.ResourceGUID != nil {
		return *d.ResourceGUID
	}
	return
}

func (d *DdosProtectionPlanPropertiesFormat) GetVirtualNetworks() (rv []*SubResource) {
	if d != nil {
		return d.VirtualNetworks
	}
	return
}

// DdosSettings - Contains the DDoS protection settings of the public IP.
type DdosSettings struct {
	// The DDoS protection plan associated with the public IP. Can only be set if ProtectionMode is Enabled
	DdosProtectionPlan *SubResource

	// The DDoS protection mode of the public IP
	ProtectionMode *DdosSettingsProtectionMode
}

func (d *DdosSettings) GetDdosProtectionPlan() (rv *SubResource) {
	if d != nil {
		return d.DdosProtectionPlan
	}
	return
}

func (d *DdosSettings) GetProtectionMode() (rv *DdosSettingsProtectionMode) {
	if d != nil {
		return d.ProtectionMode
	}
	return
}

// DefaultAdminPropertiesFormat - Security default admin rule resource.
type DefaultAdminPropertiesFormat struct {
	// Default rule flag.
	Flag *string

	// READ-ONLY; Indicates the access allowed for this particular rule
	Access *SecurityConfigurationRuleAccess

	// READ-ONLY; A description for this rule. Restricted to 140 chars.
	Description *string

	// READ-ONLY; The destination port ranges.
	DestinationPortRanges []*string

	// READ-ONLY; The destination address prefixes. CIDR or destination IP ranges.
	Destinations []*AddressPrefixItem

	// READ-ONLY; Indicates if the traffic matched against the rule in inbound or outbound.
	Direction *SecurityConfigurationRuleDirection

	// READ-ONLY; The priority of the rule. The value can be between 1 and 4096. The priority number must be unique for each rule
	// in the collection. The lower the priority number, the higher the priority of the rule.
	Priority *int32

	// READ-ONLY; Network protocol this rule applies to.
	Protocol *SecurityConfigurationRuleProtocol

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The source port ranges.
	SourcePortRanges []*string

	// READ-ONLY; The CIDR or source IP ranges.
	Sources []*AddressPrefixItem
}

func (d *DefaultAdminPropertiesFormat) GetFlag() (rv string) {
	if d != nil && d.Flag != nil {
		return *d.Flag
	}
	return
}

func (d *DefaultAdminPropertiesFormat) GetAccess() (rv *SecurityConfigurationRuleAccess) {
	if d != nil {
		return d.Access
	}
	return
}

func (d *DefaultAdminPropertiesFormat) GetDescription() (rv string) {
	if d != nil && d.Description != nil {
		return *d.Description
	}
	return
}

func (d *DefaultAdminPropertiesFormat) GetDestinationPortRanges() (rv []*string) {
	if d != nil {
		return d.DestinationPortRanges
	}
	return
}

func (d *DefaultAdminPropertiesFormat) GetDestinations() (rv []*AddressPrefixItem) {
	if d != nil {
		return d.Destinations
	}
	return
}

func (d *DefaultAdminPropertiesFormat) GetDirection() (rv *SecurityConfigurationRuleDirection) {
	if d != nil {
		return d.Direction
	}
	return
}

func (d *DefaultAdminPropertiesFormat) GetPriority() (rv int32) {
	if d != nil && d.Priority != nil {
		return *d.Priority
	}
	return
}

func (d *DefaultAdminPropertiesFormat) GetProtocol() (rv *SecurityConfigurationRuleProtocol) {
	if d != nil {
		return d.Protocol
	}
	return
}

func (d *DefaultAdminPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if d != nil {
		return d.ProvisioningState
	}
	return
}

func (d *DefaultAdminPropertiesFormat) GetSourcePortRanges() (rv []*string) {
	if d != nil {
		return d.SourcePortRanges
	}
	return
}

func (d *DefaultAdminPropertiesFormat) GetSources() (rv []*AddressPrefixItem) {
	if d != nil {
		return d.Sources
	}
	return
}

// DefaultAdminRule - Network default admin rule.
type DefaultAdminRule struct {
	// REQUIRED; Whether the rule is custom or default.
	Kind *AdminRuleKind

	// Indicates the properties of the security admin rule
	Properties *DefaultAdminPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource ID.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; The system metadata related to this resource.
	SystemData *SystemData

	// READ-ONLY; Resource type.
	Type *string
}

func (d *DefaultAdminRule) GetKind() (rv *AdminRuleKind) {
	if d != nil {
		return d.Kind
	}
	return
}

func (d *DefaultAdminRule) GetProperties() (rv *DefaultAdminPropertiesFormat) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DefaultAdminRule) GetEtag() (rv string) {
	if d != nil && d.Etag != nil {
		return *d.Etag
	}
	return
}

func (d *DefaultAdminRule) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *DefaultAdminRule) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DefaultAdminRule) GetSystemData() (rv *SystemData) {
	if d != nil {
		return d.SystemData
	}
	return
}

func (d *DefaultAdminRule) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

// GetBaseAdminRule implements the BaseAdminRuleClassification interface for type DefaultAdminRule.
func (d *DefaultAdminRule) GetBaseAdminRule() *BaseAdminRule {
	return &BaseAdminRule{
		Etag:       d.Etag,
		ID:         d.ID,
		Kind:       d.Kind,
		Name:       d.Name,
		SystemData: d.SystemData,
		Type:       d.Type,
	}
}

// DefaultRuleSetPropertyFormat - the default web application firewall rule set.
type DefaultRuleSetPropertyFormat struct {
	// The type of the web application firewall rule set.
	RuleSetType *string

	// The version of the web application firewall rule set type.
	RuleSetVersion *string
}

func (d *DefaultRuleSetPropertyFormat) GetRuleSetType() (rv string) {
	if d != nil && d.RuleSetType != nil {
		return *d.RuleSetType
	}
	return
}

func (d *DefaultRuleSetPropertyFormat) GetRuleSetVersion() (rv string) {
	if d != nil && d.RuleSetVersion != nil {
		return *d.RuleSetVersion
	}
	return
}

// Delegation - Details the service to which the subnet is delegated.
type Delegation struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a subnet. This name can be used to access the resource.
	Name *string

	// Properties of the subnet.
	Properties *ServiceDelegationPropertiesFormat

	// Resource type.
	Type *string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (d *Delegation) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *Delegation) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *Delegation) GetProperties() (rv *ServiceDelegationPropertiesFormat) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *Delegation) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

func (d *Delegation) GetEtag() (rv string) {
	if d != nil && d.Etag != nil {
		return *d.Etag
	}
	return
}

// DelegationProperties - Properties of the delegation.
type DelegationProperties struct {
	// The service name to which the NVA is delegated.
	ServiceName *string

	// READ-ONLY; The current provisioning state.
	ProvisioningState *ProvisioningState
}

func (d *DelegationProperties) GetServiceName() (rv string) {
	if d != nil && d.ServiceName != nil {
		return *d.ServiceName
	}
	return
}

func (d *DelegationProperties) GetProvisioningState() (rv *ProvisioningState) {
	if d != nil {
		return d.ProvisioningState
	}
	return
}

// DeviceProperties - List of properties of the device.
type DeviceProperties struct {
	// Model of the device.
	DeviceModel *string

	// Name of the device Vendor.
	DeviceVendor *string

	// Link speed.
	LinkSpeedInMbps *int32
}

func (d *DeviceProperties) GetDeviceModel() (rv string) {
	if d != nil && d.DeviceModel != nil {
		return *d.DeviceModel
	}
	return
}

func (d *DeviceProperties) GetDeviceVendor() (rv string) {
	if d != nil && d.DeviceVendor != nil {
		return *d.DeviceVendor
	}
	return
}

func (d *DeviceProperties) GetLinkSpeedInMbps() (rv int32) {
	if d != nil && d.LinkSpeedInMbps != nil {
		return *d.LinkSpeedInMbps
	}
	return
}

// DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network. Standard DHCP option for
// a subnet overrides VNET DHCP options.
type DhcpOptions struct {
	// The list of DNS servers IP addresses.
	DNSServers []*string
}

func (d *DhcpOptions) GetDNSServers() (rv []*string) {
	if d != nil {
		return d.DNSServers
	}
	return
}

// Dimension of the metric.
type Dimension struct {
	// The display name of the dimension.
	DisplayName *string

	// The internal name of the dimension.
	InternalName *string

	// The name of the dimension.
	Name *string
}

func (d *Dimension) GetDisplayName() (rv string) {
	if d != nil && d.DisplayName != nil {
		return *d.DisplayName
	}
	return
}

func (d *Dimension) GetInternalName() (rv string) {
	if d != nil && d.InternalName != nil {
		return *d.InternalName
	}
	return
}

func (d *Dimension) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

// DscpConfiguration - Differentiated Services Code Point configuration for any given network interface
type DscpConfiguration struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the network interface.
	Properties *DscpConfigurationPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (d *DscpConfiguration) GetID() (rv string) {
	if d != nil && d.ID != nil {
		return *d.ID
	}
	return
}

func (d *DscpConfiguration) GetLocation() (rv string) {
	if d != nil && d.Location != nil {
		return *d.Location
	}
	return
}

func (d *DscpConfiguration) GetProperties() (rv *DscpConfigurationPropertiesFormat) {
	if d != nil {
		return d.Properties
	}
	return
}

func (d *DscpConfiguration) GetTags() (rv map[string]*string) {
	if d != nil {
		return d.Tags
	}
	return
}

func (d *DscpConfiguration) GetEtag() (rv string) {
	if d != nil && d.Etag != nil {
		return *d.Etag
	}
	return
}

func (d *DscpConfiguration) GetName() (rv string) {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return
}

func (d *DscpConfiguration) GetType() (rv string) {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return
}

// DscpConfigurationListResult - Response for the DscpConfigurationList API service call.
type DscpConfigurationListResult struct {
	// A list of dscp configurations in a resource group.
	Value []*DscpConfiguration

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (d *DscpConfigurationListResult) GetValue() (rv []*DscpConfiguration) {
	if d != nil {
		return d.Value
	}
	return
}

func (d *DscpConfigurationListResult) GetNextLink() (rv string) {
	if d != nil && d.NextLink != nil {
		return *d.NextLink
	}
	return
}

// DscpConfigurationPropertiesFormat - Differentiated Services Code Point configuration properties.
type DscpConfigurationPropertiesFormat struct {
	// Destination IP ranges.
	DestinationIPRanges []*QosIPRange

	// Destination port ranges.
	DestinationPortRanges []*QosPortRange

	// List of markings to be used in the configuration.
	Markings []*int32

	// RNM supported protocol types.
	Protocol *ProtocolType

	// QoS object definitions
	QosDefinitionCollection []*QosDefinition

	// Source IP ranges.
	SourceIPRanges []*QosIPRange

	// Sources port ranges.
	SourcePortRanges []*QosPortRange

	// READ-ONLY; Associated Network Interfaces to the DSCP Configuration.
	AssociatedNetworkInterfaces []*Interface

	// READ-ONLY; The provisioning state of the DSCP Configuration resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Qos Collection ID generated by RNM.
	QosCollectionID *string

	// READ-ONLY; The resource GUID property of the DSCP Configuration resource.
	ResourceGUID *string
}

func (d *DscpConfigurationPropertiesFormat) GetDestinationIPRanges() (rv []*QosIPRange) {
	if d != nil {
		return d.DestinationIPRanges
	}
	return
}

func (d *DscpConfigurationPropertiesFormat) GetDestinationPortRanges() (rv []*QosPortRange) {
	if d != nil {
		return d.DestinationPortRanges
	}
	return
}

func (d *DscpConfigurationPropertiesFormat) GetMarkings() (rv []*int32) {
	if d != nil {
		return d.Markings
	}
	return
}

func (d *DscpConfigurationPropertiesFormat) GetProtocol() (rv *ProtocolType) {
	if d != nil {
		return d.Protocol
	}
	return
}

func (d *DscpConfigurationPropertiesFormat) GetQosDefinitionCollection() (rv []*QosDefinition) {
	if d != nil {
		return d.QosDefinitionCollection
	}
	return
}

func (d *DscpConfigurationPropertiesFormat) GetSourceIPRanges() (rv []*QosIPRange) {
	if d != nil {
		return d.SourceIPRanges
	}
	return
}

func (d *DscpConfigurationPropertiesFormat) GetSourcePortRanges() (rv []*QosPortRange) {
	if d != nil {
		return d.SourcePortRanges
	}
	return
}

func (d *DscpConfigurationPropertiesFormat) GetAssociatedNetworkInterfaces() (rv []*Interface) {
	if d != nil {
		return d.AssociatedNetworkInterfaces
	}
	return
}

func (d *DscpConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if d != nil {
		return d.ProvisioningState
	}
	return
}

func (d *DscpConfigurationPropertiesFormat) GetQosCollectionID() (rv string) {
	if d != nil && d.QosCollectionID != nil {
		return *d.QosCollectionID
	}
	return
}

func (d *DscpConfigurationPropertiesFormat) GetResourceGUID() (rv string) {
	if d != nil && d.ResourceGUID != nil {
		return *d.ResourceGUID
	}
	return
}

// EffectiveBaseSecurityAdminRule - Network base admin rule.
type EffectiveBaseSecurityAdminRule struct {
	// REQUIRED; Whether the rule is custom or default.
	Kind *EffectiveAdminRuleKind

	// A description of the security admin configuration.
	ConfigurationDescription *string

	// Resource ID.
	ID *string

	// Groups for rule collection
	RuleCollectionAppliesToGroups []*ManagerSecurityGroupItem

	// A description of the rule collection.
	RuleCollectionDescription *string

	// Effective configuration groups.
	RuleGroups []*ConfigurationGroup
}

func (e *EffectiveBaseSecurityAdminRule) GetKind() (rv *EffectiveAdminRuleKind) {
	if e != nil {
		return e.Kind
	}
	return
}

func (e *EffectiveBaseSecurityAdminRule) GetConfigurationDescription() (rv string) {
	if e != nil && e.ConfigurationDescription != nil {
		return *e.ConfigurationDescription
	}
	return
}

func (e *EffectiveBaseSecurityAdminRule) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *EffectiveBaseSecurityAdminRule) GetRuleCollectionAppliesToGroups() (rv []*ManagerSecurityGroupItem) {
	if e != nil {
		return e.RuleCollectionAppliesToGroups
	}
	return
}

func (e *EffectiveBaseSecurityAdminRule) GetRuleCollectionDescription() (rv string) {
	if e != nil && e.RuleCollectionDescription != nil {
		return *e.RuleCollectionDescription
	}
	return
}

func (e *EffectiveBaseSecurityAdminRule) GetRuleGroups() (rv []*ConfigurationGroup) {
	if e != nil {
		return e.RuleGroups
	}
	return
}

// GetEffectiveBaseSecurityAdminRule implements the EffectiveBaseSecurityAdminRuleClassification interface for type EffectiveBaseSecurityAdminRule.
func (e *EffectiveBaseSecurityAdminRule) GetEffectiveBaseSecurityAdminRule() *EffectiveBaseSecurityAdminRule {
	return e
}

// EffectiveConnectivityConfiguration - The network manager effective connectivity configuration
type EffectiveConnectivityConfiguration struct {
	// Effective configuration groups.
	ConfigurationGroups []*ConfigurationGroup

	// Connectivity configuration ID.
	ID *string

	// Properties of a network manager connectivity configuration
	Properties *ConnectivityConfigurationProperties
}

func (e *EffectiveConnectivityConfiguration) GetConfigurationGroups() (rv []*ConfigurationGroup) {
	if e != nil {
		return e.ConfigurationGroups
	}
	return
}

func (e *EffectiveConnectivityConfiguration) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *EffectiveConnectivityConfiguration) GetProperties() (rv *ConnectivityConfigurationProperties) {
	if e != nil {
		return e.Properties
	}
	return
}

// EffectiveDefaultSecurityAdminRule - Network default admin rule.
type EffectiveDefaultSecurityAdminRule struct {
	// REQUIRED; Whether the rule is custom or default.
	Kind *EffectiveAdminRuleKind

	// A description of the security admin configuration.
	ConfigurationDescription *string

	// Resource ID.
	ID *string

	// Indicates the properties of the default security admin rule
	Properties *DefaultAdminPropertiesFormat

	// Groups for rule collection
	RuleCollectionAppliesToGroups []*ManagerSecurityGroupItem

	// A description of the rule collection.
	RuleCollectionDescription *string

	// Effective configuration groups.
	RuleGroups []*ConfigurationGroup
}

func (e *EffectiveDefaultSecurityAdminRule) GetKind() (rv *EffectiveAdminRuleKind) {
	if e != nil {
		return e.Kind
	}
	return
}

func (e *EffectiveDefaultSecurityAdminRule) GetConfigurationDescription() (rv string) {
	if e != nil && e.ConfigurationDescription != nil {
		return *e.ConfigurationDescription
	}
	return
}

func (e *EffectiveDefaultSecurityAdminRule) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *EffectiveDefaultSecurityAdminRule) GetProperties() (rv *DefaultAdminPropertiesFormat) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *EffectiveDefaultSecurityAdminRule) GetRuleCollectionAppliesToGroups() (rv []*ManagerSecurityGroupItem) {
	if e != nil {
		return e.RuleCollectionAppliesToGroups
	}
	return
}

func (e *EffectiveDefaultSecurityAdminRule) GetRuleCollectionDescription() (rv string) {
	if e != nil && e.RuleCollectionDescription != nil {
		return *e.RuleCollectionDescription
	}
	return
}

func (e *EffectiveDefaultSecurityAdminRule) GetRuleGroups() (rv []*ConfigurationGroup) {
	if e != nil {
		return e.RuleGroups
	}
	return
}

// GetEffectiveBaseSecurityAdminRule implements the EffectiveBaseSecurityAdminRuleClassification interface for type EffectiveDefaultSecurityAdminRule.
func (e *EffectiveDefaultSecurityAdminRule) GetEffectiveBaseSecurityAdminRule() *EffectiveBaseSecurityAdminRule {
	return &EffectiveBaseSecurityAdminRule{
		ConfigurationDescription:      e.ConfigurationDescription,
		ID:                            e.ID,
		Kind:                          e.Kind,
		RuleCollectionAppliesToGroups: e.RuleCollectionAppliesToGroups,
		RuleCollectionDescription:     e.RuleCollectionDescription,
		RuleGroups:                    e.RuleGroups,
	}
}

// EffectiveNetworkSecurityGroup - Effective network security group.
type EffectiveNetworkSecurityGroup struct {
	// Associated resources.
	Association *EffectiveNetworkSecurityGroupAssociation

	// A collection of effective security rules.
	EffectiveSecurityRules []*EffectiveNetworkSecurityRule

	// The ID of network security group that is applied.
	NetworkSecurityGroup *SubResource

	// Mapping of tags to list of IP Addresses included within the tag.
	TagMap *string
}

func (e *EffectiveNetworkSecurityGroup) GetAssociation() (rv *EffectiveNetworkSecurityGroupAssociation) {
	if e != nil {
		return e.Association
	}
	return
}

func (e *EffectiveNetworkSecurityGroup) GetEffectiveSecurityRules() (rv []*EffectiveNetworkSecurityRule) {
	if e != nil {
		return e.EffectiveSecurityRules
	}
	return
}

func (e *EffectiveNetworkSecurityGroup) GetNetworkSecurityGroup() (rv *SubResource) {
	if e != nil {
		return e.NetworkSecurityGroup
	}
	return
}

func (e *EffectiveNetworkSecurityGroup) GetTagMap() (rv string) {
	if e != nil && e.TagMap != nil {
		return *e.TagMap
	}
	return
}

// EffectiveNetworkSecurityGroupAssociation - The effective network security group association.
type EffectiveNetworkSecurityGroupAssociation struct {
	// The ID of the network interface if assigned.
	NetworkInterface *SubResource

	// The ID of the Azure network manager if assigned.
	NetworkManager *SubResource

	// The ID of the subnet if assigned.
	Subnet *SubResource
}

func (e *EffectiveNetworkSecurityGroupAssociation) GetNetworkInterface() (rv *SubResource) {
	if e != nil {
		return e.NetworkInterface
	}
	return
}

func (e *EffectiveNetworkSecurityGroupAssociation) GetNetworkManager() (rv *SubResource) {
	if e != nil {
		return e.NetworkManager
	}
	return
}

func (e *EffectiveNetworkSecurityGroupAssociation) GetSubnet() (rv *SubResource) {
	if e != nil {
		return e.Subnet
	}
	return
}

// EffectiveNetworkSecurityGroupListResult - Response for list effective network security groups API service call.
type EffectiveNetworkSecurityGroupListResult struct {
	// A list of effective network security groups.
	Value []*EffectiveNetworkSecurityGroup

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (e *EffectiveNetworkSecurityGroupListResult) GetValue() (rv []*EffectiveNetworkSecurityGroup) {
	if e != nil {
		return e.Value
	}
	return
}

func (e *EffectiveNetworkSecurityGroupListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

// EffectiveNetworkSecurityRule - Effective network security rules.
type EffectiveNetworkSecurityRule struct {
	// Whether network traffic is allowed or denied.
	Access *SecurityRuleAccess

	// The destination address prefix.
	DestinationAddressPrefix *string

	// The destination address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer,
	// Internet), System Tags, and the asterisk (*).
	DestinationAddressPrefixes []*string

	// The destination port or range.
	DestinationPortRange *string

	// The destination port ranges. Expected values include a single integer between 0 and 65535, a range using '-' as separator
	// (e.g. 100-400), or an asterisk (*).
	DestinationPortRanges []*string

	// The direction of the rule.
	Direction *SecurityRuleDirection

	// Expanded destination address prefix.
	ExpandedDestinationAddressPrefix []*string

	// The expanded source address prefix.
	ExpandedSourceAddressPrefix []*string

	// The name of the security rule specified by the user (if created by the user).
	Name *string

	// The priority of the rule.
	Priority *int32

	// The network protocol this rule applies to.
	Protocol *EffectiveSecurityRuleProtocol

	// The source address prefix.
	SourceAddressPrefix *string

	// The source address prefixes. Expected values include CIDR IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet),
	// System Tags, and the asterisk (*).
	SourceAddressPrefixes []*string

	// The source port or range.
	SourcePortRange *string

	// The source port ranges. Expected values include a single integer between 0 and 65535, a range using '-' as separator (e.g.
	// 100-400), or an asterisk (*).
	SourcePortRanges []*string
}

func (e *EffectiveNetworkSecurityRule) GetAccess() (rv *SecurityRuleAccess) {
	if e != nil {
		return e.Access
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetDestinationAddressPrefix() (rv string) {
	if e != nil && e.DestinationAddressPrefix != nil {
		return *e.DestinationAddressPrefix
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetDestinationAddressPrefixes() (rv []*string) {
	if e != nil {
		return e.DestinationAddressPrefixes
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetDestinationPortRange() (rv string) {
	if e != nil && e.DestinationPortRange != nil {
		return *e.DestinationPortRange
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetDestinationPortRanges() (rv []*string) {
	if e != nil {
		return e.DestinationPortRanges
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetDirection() (rv *SecurityRuleDirection) {
	if e != nil {
		return e.Direction
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetExpandedDestinationAddressPrefix() (rv []*string) {
	if e != nil {
		return e.ExpandedDestinationAddressPrefix
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetExpandedSourceAddressPrefix() (rv []*string) {
	if e != nil {
		return e.ExpandedSourceAddressPrefix
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetPriority() (rv int32) {
	if e != nil && e.Priority != nil {
		return *e.Priority
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetProtocol() (rv *EffectiveSecurityRuleProtocol) {
	if e != nil {
		return e.Protocol
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetSourceAddressPrefix() (rv string) {
	if e != nil && e.SourceAddressPrefix != nil {
		return *e.SourceAddressPrefix
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetSourceAddressPrefixes() (rv []*string) {
	if e != nil {
		return e.SourceAddressPrefixes
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetSourcePortRange() (rv string) {
	if e != nil && e.SourcePortRange != nil {
		return *e.SourcePortRange
	}
	return
}

func (e *EffectiveNetworkSecurityRule) GetSourcePortRanges() (rv []*string) {
	if e != nil {
		return e.SourcePortRanges
	}
	return
}

// EffectiveRoute - Effective Route.
type EffectiveRoute struct {
	// The address prefixes of the effective routes in CIDR notation.
	AddressPrefix []*string

	// If true, on-premises routes are not propagated to the network interfaces in the subnet.
	DisableBgpRoutePropagation *bool

	// The name of the user defined route. This is optional.
	Name *string

	// The IP address of the next hop of the effective route.
	NextHopIPAddress []*string

	// The type of Azure hop the packet should be sent to.
	NextHopType *RouteNextHopType

	// Who created the route.
	Source *EffectiveRouteSource

	// The value of effective route.
	State *EffectiveRouteState
}

func (e *EffectiveRoute) GetAddressPrefix() (rv []*string) {
	if e != nil {
		return e.AddressPrefix
	}
	return
}

func (e *EffectiveRoute) GetDisableBgpRoutePropagation() (rv bool) {
	if e != nil && e.DisableBgpRoutePropagation != nil {
		return *e.DisableBgpRoutePropagation
	}
	return
}

func (e *EffectiveRoute) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *EffectiveRoute) GetNextHopIPAddress() (rv []*string) {
	if e != nil {
		return e.NextHopIPAddress
	}
	return
}

func (e *EffectiveRoute) GetNextHopType() (rv *RouteNextHopType) {
	if e != nil {
		return e.NextHopType
	}
	return
}

func (e *EffectiveRoute) GetSource() (rv *EffectiveRouteSource) {
	if e != nil {
		return e.Source
	}
	return
}

func (e *EffectiveRoute) GetState() (rv *EffectiveRouteState) {
	if e != nil {
		return e.State
	}
	return
}

// EffectiveRouteListResult - Response for list effective route API service call.
type EffectiveRouteListResult struct {
	// A list of effective routes.
	Value []*EffectiveRoute

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (e *EffectiveRouteListResult) GetValue() (rv []*EffectiveRoute) {
	if e != nil {
		return e.Value
	}
	return
}

func (e *EffectiveRouteListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

// EffectiveRoutesParameters - The parameters specifying the resource whose effective routes are being requested.
type EffectiveRoutesParameters struct {
	// The resource whose effective routes are being requested.
	ResourceID *string

	// The type of the specified resource like RouteTable, ExpressRouteConnection, HubVirtualNetworkConnection, VpnConnection
	// and P2SConnection.
	VirtualWanResourceType *string
}

func (e *EffectiveRoutesParameters) GetResourceID() (rv string) {
	if e != nil && e.ResourceID != nil {
		return *e.ResourceID
	}
	return
}

func (e *EffectiveRoutesParameters) GetVirtualWanResourceType() (rv string) {
	if e != nil && e.VirtualWanResourceType != nil {
		return *e.VirtualWanResourceType
	}
	return
}

// EffectiveSecurityAdminRule - Network admin rule.
type EffectiveSecurityAdminRule struct {
	// REQUIRED; Whether the rule is custom or default.
	Kind *EffectiveAdminRuleKind

	// A description of the security admin configuration.
	ConfigurationDescription *string

	// Resource ID.
	ID *string

	// Indicates the properties of the security admin rule
	Properties *AdminPropertiesFormat

	// Groups for rule collection
	RuleCollectionAppliesToGroups []*ManagerSecurityGroupItem

	// A description of the rule collection.
	RuleCollectionDescription *string

	// Effective configuration groups.
	RuleGroups []*ConfigurationGroup
}

func (e *EffectiveSecurityAdminRule) GetKind() (rv *EffectiveAdminRuleKind) {
	if e != nil {
		return e.Kind
	}
	return
}

func (e *EffectiveSecurityAdminRule) GetConfigurationDescription() (rv string) {
	if e != nil && e.ConfigurationDescription != nil {
		return *e.ConfigurationDescription
	}
	return
}

func (e *EffectiveSecurityAdminRule) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *EffectiveSecurityAdminRule) GetProperties() (rv *AdminPropertiesFormat) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *EffectiveSecurityAdminRule) GetRuleCollectionAppliesToGroups() (rv []*ManagerSecurityGroupItem) {
	if e != nil {
		return e.RuleCollectionAppliesToGroups
	}
	return
}

func (e *EffectiveSecurityAdminRule) GetRuleCollectionDescription() (rv string) {
	if e != nil && e.RuleCollectionDescription != nil {
		return *e.RuleCollectionDescription
	}
	return
}

func (e *EffectiveSecurityAdminRule) GetRuleGroups() (rv []*ConfigurationGroup) {
	if e != nil {
		return e.RuleGroups
	}
	return
}

// GetEffectiveBaseSecurityAdminRule implements the EffectiveBaseSecurityAdminRuleClassification interface for type EffectiveSecurityAdminRule.
func (e *EffectiveSecurityAdminRule) GetEffectiveBaseSecurityAdminRule() *EffectiveBaseSecurityAdminRule {
	return &EffectiveBaseSecurityAdminRule{
		ConfigurationDescription:      e.ConfigurationDescription,
		ID:                            e.ID,
		Kind:                          e.Kind,
		RuleCollectionAppliesToGroups: e.RuleCollectionAppliesToGroups,
		RuleCollectionDescription:     e.RuleCollectionDescription,
		RuleGroups:                    e.RuleGroups,
	}
}

// EndpointServiceResult - Endpoint service.
type EndpointServiceResult struct {
	// Resource ID.
	ID *string

	// READ-ONLY; Name of the endpoint service.
	Name *string

	// READ-ONLY; Type of the endpoint service.
	Type *string
}

func (e *EndpointServiceResult) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *EndpointServiceResult) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *EndpointServiceResult) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// EndpointServicesListResult - Response for the ListAvailableEndpointServices API service call.
type EndpointServicesListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// List of available endpoint services in a region.
	Value []*EndpointServiceResult
}

func (e *EndpointServicesListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

func (e *EndpointServicesListResult) GetValue() (rv []*EndpointServiceResult) {
	if e != nil {
		return e.Value
	}
	return
}

// EvaluatedNetworkSecurityGroup - Results of network security group evaluation.
type EvaluatedNetworkSecurityGroup struct {
	// Resource ID of nic or subnet to which network security group is applied.
	AppliedTo *string

	// Matched network security rule.
	MatchedRule *MatchedRule

	// Network security group ID.
	NetworkSecurityGroupID *string

	// READ-ONLY; List of network security rules evaluation results.
	RulesEvaluationResult []*SecurityRulesEvaluationResult
}

func (e *EvaluatedNetworkSecurityGroup) GetAppliedTo() (rv string) {
	if e != nil && e.AppliedTo != nil {
		return *e.AppliedTo
	}
	return
}

func (e *EvaluatedNetworkSecurityGroup) GetMatchedRule() (rv *MatchedRule) {
	if e != nil {
		return e.MatchedRule
	}
	return
}

func (e *EvaluatedNetworkSecurityGroup) GetNetworkSecurityGroupID() (rv string) {
	if e != nil && e.NetworkSecurityGroupID != nil {
		return *e.NetworkSecurityGroupID
	}
	return
}

func (e *EvaluatedNetworkSecurityGroup) GetRulesEvaluationResult() (rv []*SecurityRulesEvaluationResult) {
	if e != nil {
		return e.RulesEvaluationResult
	}
	return
}

// ExclusionManagedRule - Defines a managed rule to use for exclusion.
type ExclusionManagedRule struct {
	// REQUIRED; Identifier for the managed rule.
	RuleID *string
}

func (e *ExclusionManagedRule) GetRuleID() (rv string) {
	if e != nil && e.RuleID != nil {
		return *e.RuleID
	}
	return
}

// ExclusionManagedRuleGroup - Defines a managed rule group to use for exclusion.
type ExclusionManagedRuleGroup struct {
	// REQUIRED; The managed rule group for exclusion.
	RuleGroupName *string

	// List of rules that will be excluded. If none specified, all rules in the group will be excluded.
	Rules []*ExclusionManagedRule
}

func (e *ExclusionManagedRuleGroup) GetRuleGroupName() (rv string) {
	if e != nil && e.RuleGroupName != nil {
		return *e.RuleGroupName
	}
	return
}

func (e *ExclusionManagedRuleGroup) GetRules() (rv []*ExclusionManagedRule) {
	if e != nil {
		return e.Rules
	}
	return
}

// ExclusionManagedRuleSet - Defines a managed rule set for Exclusions.
type ExclusionManagedRuleSet struct {
	// REQUIRED; Defines the rule set type to use.
	RuleSetType *string

	// REQUIRED; Defines the version of the rule set to use.
	RuleSetVersion *string

	// Defines the rule groups to apply to the rule set.
	RuleGroups []*ExclusionManagedRuleGroup
}

func (e *ExclusionManagedRuleSet) GetRuleSetType() (rv string) {
	if e != nil && e.RuleSetType != nil {
		return *e.RuleSetType
	}
	return
}

func (e *ExclusionManagedRuleSet) GetRuleSetVersion() (rv string) {
	if e != nil && e.RuleSetVersion != nil {
		return *e.RuleSetVersion
	}
	return
}

func (e *ExclusionManagedRuleSet) GetRuleGroups() (rv []*ExclusionManagedRuleGroup) {
	if e != nil {
		return e.RuleGroups
	}
	return
}

// ExplicitProxy - Explicit Proxy Settings in Firewall Policy.
type ExplicitProxy struct {
	// When set to true, explicit proxy mode is enabled.
	EnableExplicitProxy *bool

	// When set to true, pac file port and url needs to be provided.
	EnablePacFile *bool

	// Port number for explicit proxy http protocol, cannot be greater than 64000.
	HTTPPort *int32

	// Port number for explicit proxy https protocol, cannot be greater than 64000.
	HTTPSPort *int32

	// SAS URL for PAC file.
	PacFile *string

	// Port number for firewall to serve PAC file.
	PacFilePort *int32
}

func (e *ExplicitProxy) GetEnableExplicitProxy() (rv bool) {
	if e != nil && e.EnableExplicitProxy != nil {
		return *e.EnableExplicitProxy
	}
	return
}

func (e *ExplicitProxy) GetEnablePacFile() (rv bool) {
	if e != nil && e.EnablePacFile != nil {
		return *e.EnablePacFile
	}
	return
}

func (e *ExplicitProxy) GetHTTPPort() (rv int32) {
	if e != nil && e.HTTPPort != nil {
		return *e.HTTPPort
	}
	return
}

func (e *ExplicitProxy) GetHTTPSPort() (rv int32) {
	if e != nil && e.HTTPSPort != nil {
		return *e.HTTPSPort
	}
	return
}

func (e *ExplicitProxy) GetPacFile() (rv string) {
	if e != nil && e.PacFile != nil {
		return *e.PacFile
	}
	return
}

func (e *ExplicitProxy) GetPacFilePort() (rv int32) {
	if e != nil && e.PacFilePort != nil {
		return *e.PacFilePort
	}
	return
}

// ExpressRouteCircuit resource.
type ExpressRouteCircuit struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the express route circuit.
	Properties *ExpressRouteCircuitPropertiesFormat

	// The SKU.
	SKU *ExpressRouteCircuitSKU

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (e *ExpressRouteCircuit) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRouteCircuit) GetLocation() (rv string) {
	if e != nil && e.Location != nil {
		return *e.Location
	}
	return
}

func (e *ExpressRouteCircuit) GetProperties() (rv *ExpressRouteCircuitPropertiesFormat) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *ExpressRouteCircuit) GetSKU() (rv *ExpressRouteCircuitSKU) {
	if e != nil {
		return e.SKU
	}
	return
}

func (e *ExpressRouteCircuit) GetTags() (rv map[string]*string) {
	if e != nil {
		return e.Tags
	}
	return
}

func (e *ExpressRouteCircuit) GetEtag() (rv string) {
	if e != nil && e.Etag != nil {
		return *e.Etag
	}
	return
}

func (e *ExpressRouteCircuit) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRouteCircuit) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// ExpressRouteCircuitArpTable - The ARP table associated with the ExpressRouteCircuit.
type ExpressRouteCircuitArpTable struct {
	// Entry age in minutes.
	Age *int32

	// The IP address.
	IPAddress *string

	// Interface address.
	Interface *string

	// The MAC address.
	MacAddress *string
}

func (e *ExpressRouteCircuitArpTable) GetAge() (rv int32) {
	if e != nil && e.Age != nil {
		return *e.Age
	}
	return
}

func (e *ExpressRouteCircuitArpTable) GetIPAddress() (rv string) {
	if e != nil && e.IPAddress != nil {
		return *e.IPAddress
	}
	return
}

func (e *ExpressRouteCircuitArpTable) GetInterface() (rv string) {
	if e != nil && e.Interface != nil {
		return *e.Interface
	}
	return
}

func (e *ExpressRouteCircuitArpTable) GetMacAddress() (rv string) {
	if e != nil && e.MacAddress != nil {
		return *e.MacAddress
	}
	return
}

// ExpressRouteCircuitAuthorization - Authorization in an ExpressRouteCircuit resource.
type ExpressRouteCircuitAuthorization struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the express route circuit authorization.
	Properties *AuthorizationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (e *ExpressRouteCircuitAuthorization) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRouteCircuitAuthorization) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRouteCircuitAuthorization) GetProperties() (rv *AuthorizationPropertiesFormat) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *ExpressRouteCircuitAuthorization) GetEtag() (rv string) {
	if e != nil && e.Etag != nil {
		return *e.Etag
	}
	return
}

func (e *ExpressRouteCircuitAuthorization) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// ExpressRouteCircuitConnection - Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
type ExpressRouteCircuitConnection struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the express route circuit connection.
	Properties *ExpressRouteCircuitConnectionPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (e *ExpressRouteCircuitConnection) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRouteCircuitConnection) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRouteCircuitConnection) GetProperties() (rv *ExpressRouteCircuitConnectionPropertiesFormat) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *ExpressRouteCircuitConnection) GetEtag() (rv string) {
	if e != nil && e.Etag != nil {
		return *e.Etag
	}
	return
}

func (e *ExpressRouteCircuitConnection) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// ExpressRouteCircuitConnectionListResult - Response for ListConnections API service call retrieves all global reach connections
// that belongs to a Private Peering for an ExpressRouteCircuit.
type ExpressRouteCircuitConnectionListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// The global reach connection associated with Private Peering in an ExpressRoute Circuit.
	Value []*ExpressRouteCircuitConnection
}

func (e *ExpressRouteCircuitConnectionListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

func (e *ExpressRouteCircuitConnectionListResult) GetValue() (rv []*ExpressRouteCircuitConnection) {
	if e != nil {
		return e.Value
	}
	return
}

// ExpressRouteCircuitConnectionPropertiesFormat - Properties of the express route circuit connection.
type ExpressRouteCircuitConnectionPropertiesFormat struct {
	// /29 IP address space to carve out Customer addresses for tunnels.
	AddressPrefix *string

	// The authorization key.
	AuthorizationKey *string

	// Reference to Express Route Circuit Private Peering Resource of the circuit initiating connection.
	ExpressRouteCircuitPeering *SubResource

	// IPv6 Address PrefixProperties of the express route circuit connection.
	IPv6CircuitConnectionConfig *IPv6CircuitConnectionConfig

	// Reference to Express Route Circuit Private Peering Resource of the peered circuit.
	PeerExpressRouteCircuitPeering *SubResource

	// READ-ONLY; Express Route Circuit connection state.
	CircuitConnectionStatus *CircuitConnectionStatus

	// READ-ONLY; The provisioning state of the express route circuit connection resource.
	ProvisioningState *ProvisioningState
}

func (e *ExpressRouteCircuitConnectionPropertiesFormat) GetAddressPrefix() (rv string) {
	if e != nil && e.AddressPrefix != nil {
		return *e.AddressPrefix
	}
	return
}

func (e *ExpressRouteCircuitConnectionPropertiesFormat) GetAuthorizationKey() (rv string) {
	if e != nil && e.AuthorizationKey != nil {
		return *e.AuthorizationKey
	}
	return
}

func (e *ExpressRouteCircuitConnectionPropertiesFormat) GetExpressRouteCircuitPeering() (rv *SubResource) {
	if e != nil {
		return e.ExpressRouteCircuitPeering
	}
	return
}

func (e *ExpressRouteCircuitConnectionPropertiesFormat) GetIPv6CircuitConnectionConfig() (rv *IPv6CircuitConnectionConfig) {
	if e != nil {
		return e.IPv6CircuitConnectionConfig
	}
	return
}

func (e *ExpressRouteCircuitConnectionPropertiesFormat) GetPeerExpressRouteCircuitPeering() (rv *SubResource) {
	if e != nil {
		return e.PeerExpressRouteCircuitPeering
	}
	return
}

func (e *ExpressRouteCircuitConnectionPropertiesFormat) GetCircuitConnectionStatus() (rv *CircuitConnectionStatus) {
	if e != nil {
		return e.CircuitConnectionStatus
	}
	return
}

func (e *ExpressRouteCircuitConnectionPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if e != nil {
		return e.ProvisioningState
	}
	return
}

// ExpressRouteCircuitListResult - Response for ListExpressRouteCircuit API service call.
type ExpressRouteCircuitListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of ExpressRouteCircuits in a resource group.
	Value []*ExpressRouteCircuit
}

func (e *ExpressRouteCircuitListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

func (e *ExpressRouteCircuitListResult) GetValue() (rv []*ExpressRouteCircuit) {
	if e != nil {
		return e.Value
	}
	return
}

// ExpressRouteCircuitPeering - Peering in an ExpressRouteCircuit resource.
type ExpressRouteCircuitPeering struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the express route circuit peering.
	Properties *ExpressRouteCircuitPeeringPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (e *ExpressRouteCircuitPeering) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRouteCircuitPeering) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRouteCircuitPeering) GetProperties() (rv *ExpressRouteCircuitPeeringPropertiesFormat) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *ExpressRouteCircuitPeering) GetEtag() (rv string) {
	if e != nil && e.Etag != nil {
		return *e.Etag
	}
	return
}

func (e *ExpressRouteCircuitPeering) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// ExpressRouteCircuitPeeringConfig - Specifies the peering configuration.
type ExpressRouteCircuitPeeringConfig struct {
	// The communities of bgp peering. Specified for microsoft peering.
	AdvertisedCommunities []*string

	// The reference to AdvertisedPublicPrefixes.
	AdvertisedPublicPrefixes []*string

	// The CustomerASN of the peering.
	CustomerASN *int32

	// The legacy mode of the peering.
	LegacyMode *int32

	// The RoutingRegistryName of the configuration.
	RoutingRegistryName *string

	// READ-ONLY; The advertised public prefix state of the Peering resource.
	AdvertisedPublicPrefixesState *ExpressRouteCircuitPeeringAdvertisedPublicPrefixState
}

func (e *ExpressRouteCircuitPeeringConfig) GetAdvertisedCommunities() (rv []*string) {
	if e != nil {
		return e.AdvertisedCommunities
	}
	return
}

func (e *ExpressRouteCircuitPeeringConfig) GetAdvertisedPublicPrefixes() (rv []*string) {
	if e != nil {
		return e.AdvertisedPublicPrefixes
	}
	return
}

func (e *ExpressRouteCircuitPeeringConfig) GetCustomerASN() (rv int32) {
	if e != nil && e.CustomerASN != nil {
		return *e.CustomerASN
	}
	return
}

func (e *ExpressRouteCircuitPeeringConfig) GetLegacyMode() (rv int32) {
	if e != nil && e.LegacyMode != nil {
		return *e.LegacyMode
	}
	return
}

func (e *ExpressRouteCircuitPeeringConfig) GetRoutingRegistryName() (rv string) {
	if e != nil && e.RoutingRegistryName != nil {
		return *e.RoutingRegistryName
	}
	return
}

func (e *ExpressRouteCircuitPeeringConfig) GetAdvertisedPublicPrefixesState() (rv *ExpressRouteCircuitPeeringAdvertisedPublicPrefixState) {
	if e != nil {
		return e.AdvertisedPublicPrefixesState
	}
	return
}

// ExpressRouteCircuitPeeringID - ExpressRoute circuit peering identifier.
type ExpressRouteCircuitPeeringID struct {
	// The ID of the ExpressRoute circuit peering.
	ID *string
}

func (e *ExpressRouteCircuitPeeringID) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

// ExpressRouteCircuitPeeringListResult - Response for ListPeering API service call retrieves all peerings that belong to
// an ExpressRouteCircuit.
type ExpressRouteCircuitPeeringListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// The peerings in an express route circuit.
	Value []*ExpressRouteCircuitPeering
}

func (e *ExpressRouteCircuitPeeringListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

func (e *ExpressRouteCircuitPeeringListResult) GetValue() (rv []*ExpressRouteCircuitPeering) {
	if e != nil {
		return e.Value
	}
	return
}

// ExpressRouteCircuitPeeringPropertiesFormat - Properties of the express route circuit peering.
type ExpressRouteCircuitPeeringPropertiesFormat struct {
	// The Azure ASN.
	AzureASN *int32

	// The list of circuit connections associated with Azure Private Peering for this circuit.
	Connections []*ExpressRouteCircuitConnection

	// The ExpressRoute connection.
	ExpressRouteConnection *ExpressRouteConnectionID

	// The GatewayManager Etag.
	GatewayManagerEtag *string

	// The IPv6 peering configuration.
	IPv6PeeringConfig *IPv6ExpressRouteCircuitPeeringConfig

	// The Microsoft peering configuration.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringConfig

	// The peer ASN.
	PeerASN *int64

	// The peering type.
	PeeringType *ExpressRoutePeeringType

	// The primary port.
	PrimaryAzurePort *string

	// The primary address prefix.
	PrimaryPeerAddressPrefix *string

	// The reference to the RouteFilter resource.
	RouteFilter *SubResource

	// The secondary port.
	SecondaryAzurePort *string

	// The secondary address prefix.
	SecondaryPeerAddressPrefix *string

	// The shared key.
	SharedKey *string

	// The peering state.
	State *ExpressRoutePeeringState

	// The peering stats of express route circuit.
	Stats *ExpressRouteCircuitStats

	// The VLAN ID.
	VlanID *int32

	// READ-ONLY; Who was the last to modify the peering.
	LastModifiedBy *string

	// READ-ONLY; The list of peered circuit connections associated with Azure Private Peering for this circuit.
	PeeredConnections []*PeerExpressRouteCircuitConnection

	// READ-ONLY; The provisioning state of the express route circuit peering resource.
	ProvisioningState *ProvisioningState
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetAzureASN() (rv int32) {
	if e != nil && e.AzureASN != nil {
		return *e.AzureASN
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetConnections() (rv []*ExpressRouteCircuitConnection) {
	if e != nil {
		return e.Connections
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetExpressRouteConnection() (rv *ExpressRouteConnectionID) {
	if e != nil {
		return e.ExpressRouteConnection
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetGatewayManagerEtag() (rv string) {
	if e != nil && e.GatewayManagerEtag != nil {
		return *e.GatewayManagerEtag
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetIPv6PeeringConfig() (rv *IPv6ExpressRouteCircuitPeeringConfig) {
	if e != nil {
		return e.IPv6PeeringConfig
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetMicrosoftPeeringConfig() (rv *ExpressRouteCircuitPeeringConfig) {
	if e != nil {
		return e.MicrosoftPeeringConfig
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetPeerASN() (rv int64) {
	if e != nil && e.PeerASN != nil {
		return *e.PeerASN
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetPeeringType() (rv *ExpressRoutePeeringType) {
	if e != nil {
		return e.PeeringType
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetPrimaryAzurePort() (rv string) {
	if e != nil && e.PrimaryAzurePort != nil {
		return *e.PrimaryAzurePort
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetPrimaryPeerAddressPrefix() (rv string) {
	if e != nil && e.PrimaryPeerAddressPrefix != nil {
		return *e.PrimaryPeerAddressPrefix
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetRouteFilter() (rv *SubResource) {
	if e != nil {
		return e.RouteFilter
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetSecondaryAzurePort() (rv string) {
	if e != nil && e.SecondaryAzurePort != nil {
		return *e.SecondaryAzurePort
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetSecondaryPeerAddressPrefix() (rv string) {
	if e != nil && e.SecondaryPeerAddressPrefix != nil {
		return *e.SecondaryPeerAddressPrefix
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetSharedKey() (rv string) {
	if e != nil && e.SharedKey != nil {
		return *e.SharedKey
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetState() (rv *ExpressRoutePeeringState) {
	if e != nil {
		return e.State
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetStats() (rv *ExpressRouteCircuitStats) {
	if e != nil {
		return e.Stats
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetVlanID() (rv int32) {
	if e != nil && e.VlanID != nil {
		return *e.VlanID
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetLastModifiedBy() (rv string) {
	if e != nil && e.LastModifiedBy != nil {
		return *e.LastModifiedBy
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetPeeredConnections() (rv []*PeerExpressRouteCircuitConnection) {
	if e != nil {
		return e.PeeredConnections
	}
	return
}

func (e *ExpressRouteCircuitPeeringPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if e != nil {
		return e.ProvisioningState
	}
	return
}

// ExpressRouteCircuitPropertiesFormat - Properties of ExpressRouteCircuit.
type ExpressRouteCircuitPropertiesFormat struct {
	// Allow classic operations.
	AllowClassicOperations *bool

	// The authorizationKey.
	AuthorizationKey *string

	// The list of authorizations.
	Authorizations []*ExpressRouteCircuitAuthorization

	// The bandwidth of the circuit when the circuit is provisioned on an ExpressRoutePort resource.
	BandwidthInGbps *float32

	// The CircuitProvisioningState state of the resource.
	CircuitProvisioningState *string

	// The reference to the ExpressRoutePort resource when the circuit is provisioned on an ExpressRoutePort resource.
	ExpressRoutePort *SubResource

	// The GatewayManager Etag.
	GatewayManagerEtag *string

	// Flag denoting global reach status.
	GlobalReachEnabled *bool

	// The list of peerings.
	Peerings []*ExpressRouteCircuitPeering

	// The ServiceKey.
	ServiceKey *string

	// The ServiceProviderNotes.
	ServiceProviderNotes *string

	// The ServiceProviderProperties.
	ServiceProviderProperties *ExpressRouteCircuitServiceProviderProperties

	// The ServiceProviderProvisioningState state of the resource.
	ServiceProviderProvisioningState *ServiceProviderProvisioningState

	// READ-ONLY; The authorization status of the Circuit.
	AuthorizationStatus *string

	// READ-ONLY; The provisioning state of the express route circuit resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
	Stag *int32
}

func (e *ExpressRouteCircuitPropertiesFormat) GetAllowClassicOperations() (rv bool) {
	if e != nil && e.AllowClassicOperations != nil {
		return *e.AllowClassicOperations
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetAuthorizationKey() (rv string) {
	if e != nil && e.AuthorizationKey != nil {
		return *e.AuthorizationKey
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetAuthorizations() (rv []*ExpressRouteCircuitAuthorization) {
	if e != nil {
		return e.Authorizations
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetBandwidthInGbps() (rv float32) {
	if e != nil && e.BandwidthInGbps != nil {
		return *e.BandwidthInGbps
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetCircuitProvisioningState() (rv string) {
	if e != nil && e.CircuitProvisioningState != nil {
		return *e.CircuitProvisioningState
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetExpressRoutePort() (rv *SubResource) {
	if e != nil {
		return e.ExpressRoutePort
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetGatewayManagerEtag() (rv string) {
	if e != nil && e.GatewayManagerEtag != nil {
		return *e.GatewayManagerEtag
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetGlobalReachEnabled() (rv bool) {
	if e != nil && e.GlobalReachEnabled != nil {
		return *e.GlobalReachEnabled
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetPeerings() (rv []*ExpressRouteCircuitPeering) {
	if e != nil {
		return e.Peerings
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetServiceKey() (rv string) {
	if e != nil && e.ServiceKey != nil {
		return *e.ServiceKey
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetServiceProviderNotes() (rv string) {
	if e != nil && e.ServiceProviderNotes != nil {
		return *e.ServiceProviderNotes
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetServiceProviderProperties() (rv *ExpressRouteCircuitServiceProviderProperties) {
	if e != nil {
		return e.ServiceProviderProperties
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetServiceProviderProvisioningState() (rv *ServiceProviderProvisioningState) {
	if e != nil {
		return e.ServiceProviderProvisioningState
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetAuthorizationStatus() (rv string) {
	if e != nil && e.AuthorizationStatus != nil {
		return *e.AuthorizationStatus
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if e != nil {
		return e.ProvisioningState
	}
	return
}

func (e *ExpressRouteCircuitPropertiesFormat) GetStag() (rv int32) {
	if e != nil && e.Stag != nil {
		return *e.Stag
	}
	return
}

// ExpressRouteCircuitReference - Reference to an express route circuit.
type ExpressRouteCircuitReference struct {
	// Corresponding Express Route Circuit Id.
	ID *string
}

func (e *ExpressRouteCircuitReference) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

// ExpressRouteCircuitRoutesTable - The routes table associated with the ExpressRouteCircuit.
type ExpressRouteCircuitRoutesTable struct {
	// Local preference value as set with the set local-preference route-map configuration command.
	LocPrf *string

	// IP address of a network entity.
	Network *string

	// NextHop address.
	NextHop *string

	// Autonomous system paths to the destination network.
	Path *string

	// Route Weight.
	Weight *int32
}

func (e *ExpressRouteCircuitRoutesTable) GetLocPrf() (rv string) {
	if e != nil && e.LocPrf != nil {
		return *e.LocPrf
	}
	return
}

func (e *ExpressRouteCircuitRoutesTable) GetNetwork() (rv string) {
	if e != nil && e.Network != nil {
		return *e.Network
	}
	return
}

func (e *ExpressRouteCircuitRoutesTable) GetNextHop() (rv string) {
	if e != nil && e.NextHop != nil {
		return *e.NextHop
	}
	return
}

func (e *ExpressRouteCircuitRoutesTable) GetPath() (rv string) {
	if e != nil && e.Path != nil {
		return *e.Path
	}
	return
}

func (e *ExpressRouteCircuitRoutesTable) GetWeight() (rv int32) {
	if e != nil && e.Weight != nil {
		return *e.Weight
	}
	return
}

// ExpressRouteCircuitRoutesTableSummary - The routes table associated with the ExpressRouteCircuit.
type ExpressRouteCircuitRoutesTableSummary struct {
	// Autonomous system number.
	As *int32

	// IP address of the neighbor.
	Neighbor *string

	// Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.
	StatePfxRcd *string

	// The length of time that the BGP session has been in the Established state, or the current status if not in the Established
	// state.
	UpDown *string

	// BGP version number spoken to the neighbor.
	V *int32
}

func (e *ExpressRouteCircuitRoutesTableSummary) GetAs() (rv int32) {
	if e != nil && e.As != nil {
		return *e.As
	}
	return
}

func (e *ExpressRouteCircuitRoutesTableSummary) GetNeighbor() (rv string) {
	if e != nil && e.Neighbor != nil {
		return *e.Neighbor
	}
	return
}

func (e *ExpressRouteCircuitRoutesTableSummary) GetStatePfxRcd() (rv string) {
	if e != nil && e.StatePfxRcd != nil {
		return *e.StatePfxRcd
	}
	return
}

func (e *ExpressRouteCircuitRoutesTableSummary) GetUpDown() (rv string) {
	if e != nil && e.UpDown != nil {
		return *e.UpDown
	}
	return
}

func (e *ExpressRouteCircuitRoutesTableSummary) GetV() (rv int32) {
	if e != nil && e.V != nil {
		return *e.V
	}
	return
}

// ExpressRouteCircuitSKU - Contains SKU in an ExpressRouteCircuit.
type ExpressRouteCircuitSKU struct {
	// The family of the SKU.
	Family *ExpressRouteCircuitSKUFamily

	// The name of the SKU.
	Name *string

	// The tier of the SKU.
	Tier *ExpressRouteCircuitSKUTier
}

func (e *ExpressRouteCircuitSKU) GetFamily() (rv *ExpressRouteCircuitSKUFamily) {
	if e != nil {
		return e.Family
	}
	return
}

func (e *ExpressRouteCircuitSKU) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRouteCircuitSKU) GetTier() (rv *ExpressRouteCircuitSKUTier) {
	if e != nil {
		return e.Tier
	}
	return
}

// ExpressRouteCircuitServiceProviderProperties - Contains ServiceProviderProperties in an ExpressRouteCircuit.
type ExpressRouteCircuitServiceProviderProperties struct {
	// The BandwidthInMbps.
	BandwidthInMbps *int32

	// The peering location.
	PeeringLocation *string

	// The serviceProviderName.
	ServiceProviderName *string
}

func (e *ExpressRouteCircuitServiceProviderProperties) GetBandwidthInMbps() (rv int32) {
	if e != nil && e.BandwidthInMbps != nil {
		return *e.BandwidthInMbps
	}
	return
}

func (e *ExpressRouteCircuitServiceProviderProperties) GetPeeringLocation() (rv string) {
	if e != nil && e.PeeringLocation != nil {
		return *e.PeeringLocation
	}
	return
}

func (e *ExpressRouteCircuitServiceProviderProperties) GetServiceProviderName() (rv string) {
	if e != nil && e.ServiceProviderName != nil {
		return *e.ServiceProviderName
	}
	return
}

// ExpressRouteCircuitStats - Contains stats associated with the peering.
type ExpressRouteCircuitStats struct {
	// The Primary BytesIn of the peering.
	PrimarybytesIn *int64

	// The primary BytesOut of the peering.
	PrimarybytesOut *int64

	// The secondary BytesIn of the peering.
	SecondarybytesIn *int64

	// The secondary BytesOut of the peering.
	SecondarybytesOut *int64
}

func (e *ExpressRouteCircuitStats) GetPrimarybytesIn() (rv int64) {
	if e != nil && e.PrimarybytesIn != nil {
		return *e.PrimarybytesIn
	}
	return
}

func (e *ExpressRouteCircuitStats) GetPrimarybytesOut() (rv int64) {
	if e != nil && e.PrimarybytesOut != nil {
		return *e.PrimarybytesOut
	}
	return
}

func (e *ExpressRouteCircuitStats) GetSecondarybytesIn() (rv int64) {
	if e != nil && e.SecondarybytesIn != nil {
		return *e.SecondarybytesIn
	}
	return
}

func (e *ExpressRouteCircuitStats) GetSecondarybytesOut() (rv int64) {
	if e != nil && e.SecondarybytesOut != nil {
		return *e.SecondarybytesOut
	}
	return
}

// ExpressRouteCircuitsArpTableListResult - Response for ListArpTable associated with the Express Route Circuits API.
type ExpressRouteCircuitsArpTableListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of the ARP tables.
	Value []*ExpressRouteCircuitArpTable
}

func (e *ExpressRouteCircuitsArpTableListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

func (e *ExpressRouteCircuitsArpTableListResult) GetValue() (rv []*ExpressRouteCircuitArpTable) {
	if e != nil {
		return e.Value
	}
	return
}

// ExpressRouteCircuitsRoutesTableListResult - Response for ListRoutesTable associated with the Express Route Circuits API.
type ExpressRouteCircuitsRoutesTableListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// The list of routes table.
	Value []*ExpressRouteCircuitRoutesTable
}

func (e *ExpressRouteCircuitsRoutesTableListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

func (e *ExpressRouteCircuitsRoutesTableListResult) GetValue() (rv []*ExpressRouteCircuitRoutesTable) {
	if e != nil {
		return e.Value
	}
	return
}

// ExpressRouteCircuitsRoutesTableSummaryListResult - Response for ListRoutesTable associated with the Express Route Circuits
// API.
type ExpressRouteCircuitsRoutesTableSummaryListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of the routes table.
	Value []*ExpressRouteCircuitRoutesTableSummary
}

func (e *ExpressRouteCircuitsRoutesTableSummaryListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

func (e *ExpressRouteCircuitsRoutesTableSummaryListResult) GetValue() (rv []*ExpressRouteCircuitRoutesTableSummary) {
	if e != nil {
		return e.Value
	}
	return
}

// ExpressRouteConnection resource.
type ExpressRouteConnection struct {
	// REQUIRED; The name of the resource.
	Name *string

	// Resource ID.
	ID *string

	// Properties of the express route connection.
	Properties *ExpressRouteConnectionProperties
}

func (e *ExpressRouteConnection) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRouteConnection) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRouteConnection) GetProperties() (rv *ExpressRouteConnectionProperties) {
	if e != nil {
		return e.Properties
	}
	return
}

// ExpressRouteConnectionID - The ID of the ExpressRouteConnection.
type ExpressRouteConnectionID struct {
	// READ-ONLY; The ID of the ExpressRouteConnection.
	ID *string
}

func (e *ExpressRouteConnectionID) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

// ExpressRouteConnectionList - ExpressRouteConnection list.
type ExpressRouteConnectionList struct {
	// The list of ExpressRoute connections.
	Value []*ExpressRouteConnection
}

func (e *ExpressRouteConnectionList) GetValue() (rv []*ExpressRouteConnection) {
	if e != nil {
		return e.Value
	}
	return
}

// ExpressRouteConnectionProperties - Properties of the ExpressRouteConnection subresource.
type ExpressRouteConnectionProperties struct {
	// REQUIRED; The ExpressRoute circuit peering.
	ExpressRouteCircuitPeering *ExpressRouteCircuitPeeringID

	// Authorization key to establish the connection.
	AuthorizationKey *string

	// Enable internet security.
	EnableInternetSecurity *bool

	// Bypass the ExpressRoute gateway when accessing private-links. ExpressRoute FastPath (expressRouteGatewayBypass) must be
	// enabled.
	EnablePrivateLinkFastPath *bool

	// Enable FastPath to vWan Firewall hub.
	ExpressRouteGatewayBypass *bool

	// The Routing Configuration indicating the associated and propagated route tables on this connection.
	RoutingConfiguration *RoutingConfiguration

	// The routing weight associated to the connection.
	RoutingWeight *int32

	// READ-ONLY; The provisioning state of the express route connection resource.
	ProvisioningState *ProvisioningState
}

func (e *ExpressRouteConnectionProperties) GetExpressRouteCircuitPeering() (rv *ExpressRouteCircuitPeeringID) {
	if e != nil {
		return e.ExpressRouteCircuitPeering
	}
	return
}

func (e *ExpressRouteConnectionProperties) GetAuthorizationKey() (rv string) {
	if e != nil && e.AuthorizationKey != nil {
		return *e.AuthorizationKey
	}
	return
}

func (e *ExpressRouteConnectionProperties) GetEnableInternetSecurity() (rv bool) {
	if e != nil && e.EnableInternetSecurity != nil {
		return *e.EnableInternetSecurity
	}
	return
}

func (e *ExpressRouteConnectionProperties) GetEnablePrivateLinkFastPath() (rv bool) {
	if e != nil && e.EnablePrivateLinkFastPath != nil {
		return *e.EnablePrivateLinkFastPath
	}
	return
}

func (e *ExpressRouteConnectionProperties) GetExpressRouteGatewayBypass() (rv bool) {
	if e != nil && e.ExpressRouteGatewayBypass != nil {
		return *e.ExpressRouteGatewayBypass
	}
	return
}

func (e *ExpressRouteConnectionProperties) GetRoutingConfiguration() (rv *RoutingConfiguration) {
	if e != nil {
		return e.RoutingConfiguration
	}
	return
}

func (e *ExpressRouteConnectionProperties) GetRoutingWeight() (rv int32) {
	if e != nil && e.RoutingWeight != nil {
		return *e.RoutingWeight
	}
	return
}

func (e *ExpressRouteConnectionProperties) GetProvisioningState() (rv *ProvisioningState) {
	if e != nil {
		return e.ProvisioningState
	}
	return
}

// ExpressRouteCrossConnection resource.
type ExpressRouteCrossConnection struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the express route cross connection.
	Properties *ExpressRouteCrossConnectionProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (e *ExpressRouteCrossConnection) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRouteCrossConnection) GetLocation() (rv string) {
	if e != nil && e.Location != nil {
		return *e.Location
	}
	return
}

func (e *ExpressRouteCrossConnection) GetProperties() (rv *ExpressRouteCrossConnectionProperties) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *ExpressRouteCrossConnection) GetTags() (rv map[string]*string) {
	if e != nil {
		return e.Tags
	}
	return
}

func (e *ExpressRouteCrossConnection) GetEtag() (rv string) {
	if e != nil && e.Etag != nil {
		return *e.Etag
	}
	return
}

func (e *ExpressRouteCrossConnection) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRouteCrossConnection) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// ExpressRouteCrossConnectionListResult - Response for ListExpressRouteCrossConnection API service call.
type ExpressRouteCrossConnectionListResult struct {
	// A list of ExpressRouteCrossConnection resources.
	Value []*ExpressRouteCrossConnection

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (e *ExpressRouteCrossConnectionListResult) GetValue() (rv []*ExpressRouteCrossConnection) {
	if e != nil {
		return e.Value
	}
	return
}

func (e *ExpressRouteCrossConnectionListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

// ExpressRouteCrossConnectionPeering - Peering in an ExpressRoute Cross Connection resource.
type ExpressRouteCrossConnectionPeering struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the express route cross connection peering.
	Properties *ExpressRouteCrossConnectionPeeringProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (e *ExpressRouteCrossConnectionPeering) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRouteCrossConnectionPeering) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRouteCrossConnectionPeering) GetProperties() (rv *ExpressRouteCrossConnectionPeeringProperties) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *ExpressRouteCrossConnectionPeering) GetEtag() (rv string) {
	if e != nil && e.Etag != nil {
		return *e.Etag
	}
	return
}

// ExpressRouteCrossConnectionPeeringList - Response for ListPeering API service call retrieves all peerings that belong to
// an ExpressRouteCrossConnection.
type ExpressRouteCrossConnectionPeeringList struct {
	// The peerings in an express route cross connection.
	Value []*ExpressRouteCrossConnectionPeering

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (e *ExpressRouteCrossConnectionPeeringList) GetValue() (rv []*ExpressRouteCrossConnectionPeering) {
	if e != nil {
		return e.Value
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringList) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

// ExpressRouteCrossConnectionPeeringProperties - Properties of express route cross connection peering.
type ExpressRouteCrossConnectionPeeringProperties struct {
	// The GatewayManager Etag.
	GatewayManagerEtag *string

	// The IPv6 peering configuration.
	IPv6PeeringConfig *IPv6ExpressRouteCircuitPeeringConfig

	// The Microsoft peering configuration.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringConfig

	// The peer ASN.
	PeerASN *int64

	// The peering type.
	PeeringType *ExpressRoutePeeringType

	// The primary address prefix.
	PrimaryPeerAddressPrefix *string

	// The secondary address prefix.
	SecondaryPeerAddressPrefix *string

	// The shared key.
	SharedKey *string

	// The peering state.
	State *ExpressRoutePeeringState

	// The VLAN ID.
	VlanID *int32

	// READ-ONLY; The Azure ASN.
	AzureASN *int32

	// READ-ONLY; Who was the last to modify the peering.
	LastModifiedBy *string

	// READ-ONLY; The primary port.
	PrimaryAzurePort *string

	// READ-ONLY; The provisioning state of the express route cross connection peering resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The secondary port.
	SecondaryAzurePort *string
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetGatewayManagerEtag() (rv string) {
	if e != nil && e.GatewayManagerEtag != nil {
		return *e.GatewayManagerEtag
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetIPv6PeeringConfig() (rv *IPv6ExpressRouteCircuitPeeringConfig) {
	if e != nil {
		return e.IPv6PeeringConfig
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetMicrosoftPeeringConfig() (rv *ExpressRouteCircuitPeeringConfig) {
	if e != nil {
		return e.MicrosoftPeeringConfig
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetPeerASN() (rv int64) {
	if e != nil && e.PeerASN != nil {
		return *e.PeerASN
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetPeeringType() (rv *ExpressRoutePeeringType) {
	if e != nil {
		return e.PeeringType
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetPrimaryPeerAddressPrefix() (rv string) {
	if e != nil && e.PrimaryPeerAddressPrefix != nil {
		return *e.PrimaryPeerAddressPrefix
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetSecondaryPeerAddressPrefix() (rv string) {
	if e != nil && e.SecondaryPeerAddressPrefix != nil {
		return *e.SecondaryPeerAddressPrefix
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetSharedKey() (rv string) {
	if e != nil && e.SharedKey != nil {
		return *e.SharedKey
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetState() (rv *ExpressRoutePeeringState) {
	if e != nil {
		return e.State
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetVlanID() (rv int32) {
	if e != nil && e.VlanID != nil {
		return *e.VlanID
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetAzureASN() (rv int32) {
	if e != nil && e.AzureASN != nil {
		return *e.AzureASN
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetLastModifiedBy() (rv string) {
	if e != nil && e.LastModifiedBy != nil {
		return *e.LastModifiedBy
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetPrimaryAzurePort() (rv string) {
	if e != nil && e.PrimaryAzurePort != nil {
		return *e.PrimaryAzurePort
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetProvisioningState() (rv *ProvisioningState) {
	if e != nil {
		return e.ProvisioningState
	}
	return
}

func (e *ExpressRouteCrossConnectionPeeringProperties) GetSecondaryAzurePort() (rv string) {
	if e != nil && e.SecondaryAzurePort != nil {
		return *e.SecondaryAzurePort
	}
	return
}

// ExpressRouteCrossConnectionProperties - Properties of ExpressRouteCrossConnection.
type ExpressRouteCrossConnectionProperties struct {
	// The ExpressRouteCircuit.
	ExpressRouteCircuit *ExpressRouteCircuitReference

	// The list of peerings.
	Peerings []*ExpressRouteCrossConnectionPeering

	// Additional read only notes set by the connectivity provider.
	ServiceProviderNotes *string

	// The provisioning state of the circuit in the connectivity provider system.
	ServiceProviderProvisioningState *ServiceProviderProvisioningState

	// READ-ONLY; The circuit bandwidth In Mbps.
	BandwidthInMbps *int32

	// READ-ONLY; The peering location of the ExpressRoute circuit.
	PeeringLocation *string

	// READ-ONLY; The name of the primary port.
	PrimaryAzurePort *string

	// READ-ONLY; The provisioning state of the express route cross connection resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The identifier of the circuit traffic.
	STag *int32

	// READ-ONLY; The name of the secondary port.
	SecondaryAzurePort *string
}

func (e *ExpressRouteCrossConnectionProperties) GetExpressRouteCircuit() (rv *ExpressRouteCircuitReference) {
	if e != nil {
		return e.ExpressRouteCircuit
	}
	return
}

func (e *ExpressRouteCrossConnectionProperties) GetPeerings() (rv []*ExpressRouteCrossConnectionPeering) {
	if e != nil {
		return e.Peerings
	}
	return
}

func (e *ExpressRouteCrossConnectionProperties) GetServiceProviderNotes() (rv string) {
	if e != nil && e.ServiceProviderNotes != nil {
		return *e.ServiceProviderNotes
	}
	return
}

func (e *ExpressRouteCrossConnectionProperties) GetServiceProviderProvisioningState() (rv *ServiceProviderProvisioningState) {
	if e != nil {
		return e.ServiceProviderProvisioningState
	}
	return
}

func (e *ExpressRouteCrossConnectionProperties) GetBandwidthInMbps() (rv int32) {
	if e != nil && e.BandwidthInMbps != nil {
		return *e.BandwidthInMbps
	}
	return
}

func (e *ExpressRouteCrossConnectionProperties) GetPeeringLocation() (rv string) {
	if e != nil && e.PeeringLocation != nil {
		return *e.PeeringLocation
	}
	return
}

func (e *ExpressRouteCrossConnectionProperties) GetPrimaryAzurePort() (rv string) {
	if e != nil && e.PrimaryAzurePort != nil {
		return *e.PrimaryAzurePort
	}
	return
}

func (e *ExpressRouteCrossConnectionProperties) GetProvisioningState() (rv *ProvisioningState) {
	if e != nil {
		return e.ProvisioningState
	}
	return
}

func (e *ExpressRouteCrossConnectionProperties) GetSTag() (rv int32) {
	if e != nil && e.STag != nil {
		return *e.STag
	}
	return
}

func (e *ExpressRouteCrossConnectionProperties) GetSecondaryAzurePort() (rv string) {
	if e != nil && e.SecondaryAzurePort != nil {
		return *e.SecondaryAzurePort
	}
	return
}

// ExpressRouteCrossConnectionRoutesTableSummary - The routes table associated with the ExpressRouteCircuit.
type ExpressRouteCrossConnectionRoutesTableSummary struct {
	// Autonomous system number.
	Asn *int32

	// IP address of Neighbor router.
	Neighbor *string

	// Current state of the BGP session, and the number of prefixes that have been received from a neighbor or peer group.
	StateOrPrefixesReceived *string

	// The length of time that the BGP session has been in the Established state, or the current status if not in the Established
	// state.
	UpDown *string
}

func (e *ExpressRouteCrossConnectionRoutesTableSummary) GetAsn() (rv int32) {
	if e != nil && e.Asn != nil {
		return *e.Asn
	}
	return
}

func (e *ExpressRouteCrossConnectionRoutesTableSummary) GetNeighbor() (rv string) {
	if e != nil && e.Neighbor != nil {
		return *e.Neighbor
	}
	return
}

func (e *ExpressRouteCrossConnectionRoutesTableSummary) GetStateOrPrefixesReceived() (rv string) {
	if e != nil && e.StateOrPrefixesReceived != nil {
		return *e.StateOrPrefixesReceived
	}
	return
}

func (e *ExpressRouteCrossConnectionRoutesTableSummary) GetUpDown() (rv string) {
	if e != nil && e.UpDown != nil {
		return *e.UpDown
	}
	return
}

// ExpressRouteCrossConnectionsRoutesTableSummaryListResult - Response for ListRoutesTable associated with the Express Route
// Cross Connections.
type ExpressRouteCrossConnectionsRoutesTableSummaryListResult struct {
	// A list of the routes table.
	Value []*ExpressRouteCrossConnectionRoutesTableSummary

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (e *ExpressRouteCrossConnectionsRoutesTableSummaryListResult) GetValue() (rv []*ExpressRouteCrossConnectionRoutesTableSummary) {
	if e != nil {
		return e.Value
	}
	return
}

func (e *ExpressRouteCrossConnectionsRoutesTableSummaryListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

// ExpressRouteGateway - ExpressRoute gateway resource.
type ExpressRouteGateway struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the express route gateway.
	Properties *ExpressRouteGatewayProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (e *ExpressRouteGateway) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRouteGateway) GetLocation() (rv string) {
	if e != nil && e.Location != nil {
		return *e.Location
	}
	return
}

func (e *ExpressRouteGateway) GetProperties() (rv *ExpressRouteGatewayProperties) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *ExpressRouteGateway) GetTags() (rv map[string]*string) {
	if e != nil {
		return e.Tags
	}
	return
}

func (e *ExpressRouteGateway) GetEtag() (rv string) {
	if e != nil && e.Etag != nil {
		return *e.Etag
	}
	return
}

func (e *ExpressRouteGateway) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRouteGateway) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// ExpressRouteGatewayList - List of ExpressRoute gateways.
type ExpressRouteGatewayList struct {
	// List of ExpressRoute gateways.
	Value []*ExpressRouteGateway
}

func (e *ExpressRouteGatewayList) GetValue() (rv []*ExpressRouteGateway) {
	if e != nil {
		return e.Value
	}
	return
}

// ExpressRouteGatewayProperties - ExpressRoute gateway resource properties.
type ExpressRouteGatewayProperties struct {
	// REQUIRED; The Virtual Hub where the ExpressRoute gateway is or will be deployed.
	VirtualHub *VirtualHubID

	// Configures this gateway to accept traffic from non Virtual WAN networks.
	AllowNonVirtualWanTraffic *bool

	// Configuration for auto scaling.
	AutoScaleConfiguration *ExpressRouteGatewayPropertiesAutoScaleConfiguration

	// List of ExpressRoute connections to the ExpressRoute gateway.
	ExpressRouteConnections []*ExpressRouteConnection

	// READ-ONLY; The provisioning state of the express route gateway resource.
	ProvisioningState *ProvisioningState
}

func (e *ExpressRouteGatewayProperties) GetVirtualHub() (rv *VirtualHubID) {
	if e != nil {
		return e.VirtualHub
	}
	return
}

func (e *ExpressRouteGatewayProperties) GetAllowNonVirtualWanTraffic() (rv bool) {
	if e != nil && e.AllowNonVirtualWanTraffic != nil {
		return *e.AllowNonVirtualWanTraffic
	}
	return
}

func (e *ExpressRouteGatewayProperties) GetAutoScaleConfiguration() (rv *ExpressRouteGatewayPropertiesAutoScaleConfiguration) {
	if e != nil {
		return e.AutoScaleConfiguration
	}
	return
}

func (e *ExpressRouteGatewayProperties) GetExpressRouteConnections() (rv []*ExpressRouteConnection) {
	if e != nil {
		return e.ExpressRouteConnections
	}
	return
}

func (e *ExpressRouteGatewayProperties) GetProvisioningState() (rv *ProvisioningState) {
	if e != nil {
		return e.ProvisioningState
	}
	return
}

// ExpressRouteGatewayPropertiesAutoScaleConfiguration - Configuration for auto scaling.
type ExpressRouteGatewayPropertiesAutoScaleConfiguration struct {
	// Minimum and maximum number of scale units to deploy.
	Bounds *ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds
}

func (e *ExpressRouteGatewayPropertiesAutoScaleConfiguration) GetBounds() (rv *ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds) {
	if e != nil {
		return e.Bounds
	}
	return
}

// ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds - Minimum and maximum number of scale units to deploy.
type ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds struct {
	// Maximum number of scale units deployed for ExpressRoute gateway.
	Max *int32

	// Minimum number of scale units deployed for ExpressRoute gateway.
	Min *int32
}

func (e *ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds) GetMax() (rv int32) {
	if e != nil && e.Max != nil {
		return *e.Max
	}
	return
}

func (e *ExpressRouteGatewayPropertiesAutoScaleConfigurationBounds) GetMin() (rv int32) {
	if e != nil && e.Min != nil {
		return *e.Min
	}
	return
}

// ExpressRouteLink child resource definition.
type ExpressRouteLink struct {
	// Resource ID.
	ID *string

	// Name of child port resource that is unique among child port resources of the parent.
	Name *string

	// ExpressRouteLink properties.
	Properties *ExpressRouteLinkPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (e *ExpressRouteLink) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRouteLink) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRouteLink) GetProperties() (rv *ExpressRouteLinkPropertiesFormat) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *ExpressRouteLink) GetEtag() (rv string) {
	if e != nil && e.Etag != nil {
		return *e.Etag
	}
	return
}

// ExpressRouteLinkListResult - Response for ListExpressRouteLinks API service call.
type ExpressRouteLinkListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// The list of ExpressRouteLink sub-resources.
	Value []*ExpressRouteLink
}

func (e *ExpressRouteLinkListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

func (e *ExpressRouteLinkListResult) GetValue() (rv []*ExpressRouteLink) {
	if e != nil {
		return e.Value
	}
	return
}

// ExpressRouteLinkMacSecConfig - ExpressRouteLink Mac Security Configuration.
type ExpressRouteLinkMacSecConfig struct {
	// Keyvault Secret Identifier URL containing Mac security CAK key.
	CakSecretIdentifier *string

	// Mac security cipher.
	Cipher *ExpressRouteLinkMacSecCipher

	// Keyvault Secret Identifier URL containing Mac security CKN key.
	CknSecretIdentifier *string

	// Sci mode enabled/disabled.
	SciState *ExpressRouteLinkMacSecSciState
}

func (e *ExpressRouteLinkMacSecConfig) GetCakSecretIdentifier() (rv string) {
	if e != nil && e.CakSecretIdentifier != nil {
		return *e.CakSecretIdentifier
	}
	return
}

func (e *ExpressRouteLinkMacSecConfig) GetCipher() (rv *ExpressRouteLinkMacSecCipher) {
	if e != nil {
		return e.Cipher
	}
	return
}

func (e *ExpressRouteLinkMacSecConfig) GetCknSecretIdentifier() (rv string) {
	if e != nil && e.CknSecretIdentifier != nil {
		return *e.CknSecretIdentifier
	}
	return
}

func (e *ExpressRouteLinkMacSecConfig) GetSciState() (rv *ExpressRouteLinkMacSecSciState) {
	if e != nil {
		return e.SciState
	}
	return
}

// ExpressRouteLinkPropertiesFormat - Properties specific to ExpressRouteLink resources.
type ExpressRouteLinkPropertiesFormat struct {
	// Administrative state of the physical port.
	AdminState *ExpressRouteLinkAdminState

	// MacSec configuration.
	MacSecConfig *ExpressRouteLinkMacSecConfig

	// READ-ONLY; Cololocation for ExpressRoute Hybrid Direct.
	ColoLocation *string

	// READ-ONLY; Physical fiber port type.
	ConnectorType *ExpressRouteLinkConnectorType

	// READ-ONLY; Name of Azure router interface.
	InterfaceName *string

	// READ-ONLY; Mapping between physical port to patch panel port.
	PatchPanelID *string

	// READ-ONLY; The provisioning state of the express route link resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Mapping of physical patch panel to rack.
	RackID *string

	// READ-ONLY; Name of Azure router associated with physical port.
	RouterName *string
}

func (e *ExpressRouteLinkPropertiesFormat) GetAdminState() (rv *ExpressRouteLinkAdminState) {
	if e != nil {
		return e.AdminState
	}
	return
}

func (e *ExpressRouteLinkPropertiesFormat) GetMacSecConfig() (rv *ExpressRouteLinkMacSecConfig) {
	if e != nil {
		return e.MacSecConfig
	}
	return
}

func (e *ExpressRouteLinkPropertiesFormat) GetColoLocation() (rv string) {
	if e != nil && e.ColoLocation != nil {
		return *e.ColoLocation
	}
	return
}

func (e *ExpressRouteLinkPropertiesFormat) GetConnectorType() (rv *ExpressRouteLinkConnectorType) {
	if e != nil {
		return e.ConnectorType
	}
	return
}

func (e *ExpressRouteLinkPropertiesFormat) GetInterfaceName() (rv string) {
	if e != nil && e.InterfaceName != nil {
		return *e.InterfaceName
	}
	return
}

func (e *ExpressRouteLinkPropertiesFormat) GetPatchPanelID() (rv string) {
	if e != nil && e.PatchPanelID != nil {
		return *e.PatchPanelID
	}
	return
}

func (e *ExpressRouteLinkPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if e != nil {
		return e.ProvisioningState
	}
	return
}

func (e *ExpressRouteLinkPropertiesFormat) GetRackID() (rv string) {
	if e != nil && e.RackID != nil {
		return *e.RackID
	}
	return
}

func (e *ExpressRouteLinkPropertiesFormat) GetRouterName() (rv string) {
	if e != nil && e.RouterName != nil {
		return *e.RouterName
	}
	return
}

// ExpressRoutePort resource definition.
type ExpressRoutePort struct {
	// Resource ID.
	ID *string

	// The identity of ExpressRoutePort, if configured.
	Identity *ManagedServiceIdentity

	// Resource location.
	Location *string

	// ExpressRoutePort properties.
	Properties *ExpressRoutePortPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (e *ExpressRoutePort) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRoutePort) GetIdentity() (rv *ManagedServiceIdentity) {
	if e != nil {
		return e.Identity
	}
	return
}

func (e *ExpressRoutePort) GetLocation() (rv string) {
	if e != nil && e.Location != nil {
		return *e.Location
	}
	return
}

func (e *ExpressRoutePort) GetProperties() (rv *ExpressRoutePortPropertiesFormat) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *ExpressRoutePort) GetTags() (rv map[string]*string) {
	if e != nil {
		return e.Tags
	}
	return
}

func (e *ExpressRoutePort) GetEtag() (rv string) {
	if e != nil && e.Etag != nil {
		return *e.Etag
	}
	return
}

func (e *ExpressRoutePort) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRoutePort) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// ExpressRoutePortAuthorization - ExpressRoutePort Authorization resource definition.
type ExpressRoutePortAuthorization struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// ExpressRoutePort properties.
	Properties *ExpressRoutePortAuthorizationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (e *ExpressRoutePortAuthorization) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRoutePortAuthorization) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRoutePortAuthorization) GetProperties() (rv *ExpressRoutePortAuthorizationPropertiesFormat) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *ExpressRoutePortAuthorization) GetEtag() (rv string) {
	if e != nil && e.Etag != nil {
		return *e.Etag
	}
	return
}

func (e *ExpressRoutePortAuthorization) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// ExpressRoutePortAuthorizationListResult - Response for ListExpressRoutePortAuthorizations API service call.
type ExpressRoutePortAuthorizationListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// The authorizations in an ExpressRoute Port.
	Value []*ExpressRoutePortAuthorization
}

func (e *ExpressRoutePortAuthorizationListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

func (e *ExpressRoutePortAuthorizationListResult) GetValue() (rv []*ExpressRoutePortAuthorization) {
	if e != nil {
		return e.Value
	}
	return
}

// ExpressRoutePortAuthorizationPropertiesFormat - Properties of ExpressRoutePort Authorization.
type ExpressRoutePortAuthorizationPropertiesFormat struct {
	// READ-ONLY; The authorization key.
	AuthorizationKey *string

	// READ-ONLY; The authorization use status.
	AuthorizationUseStatus *ExpressRoutePortAuthorizationUseStatus

	// READ-ONLY; The reference to the ExpressRoute circuit resource using the authorization.
	CircuitResourceURI *string

	// READ-ONLY; The provisioning state of the authorization resource.
	ProvisioningState *ProvisioningState
}

func (e *ExpressRoutePortAuthorizationPropertiesFormat) GetAuthorizationKey() (rv string) {
	if e != nil && e.AuthorizationKey != nil {
		return *e.AuthorizationKey
	}
	return
}

func (e *ExpressRoutePortAuthorizationPropertiesFormat) GetAuthorizationUseStatus() (rv *ExpressRoutePortAuthorizationUseStatus) {
	if e != nil {
		return e.AuthorizationUseStatus
	}
	return
}

func (e *ExpressRoutePortAuthorizationPropertiesFormat) GetCircuitResourceURI() (rv string) {
	if e != nil && e.CircuitResourceURI != nil {
		return *e.CircuitResourceURI
	}
	return
}

func (e *ExpressRoutePortAuthorizationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if e != nil {
		return e.ProvisioningState
	}
	return
}

// ExpressRoutePortListResult - Response for ListExpressRoutePorts API service call.
type ExpressRoutePortListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of ExpressRoutePort resources.
	Value []*ExpressRoutePort
}

func (e *ExpressRoutePortListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

func (e *ExpressRoutePortListResult) GetValue() (rv []*ExpressRoutePort) {
	if e != nil {
		return e.Value
	}
	return
}

// ExpressRoutePortPropertiesFormat - Properties specific to ExpressRoutePort resources.
type ExpressRoutePortPropertiesFormat struct {
	// Bandwidth of procured ports in Gbps.
	BandwidthInGbps *int32

	// The billing type of the ExpressRoutePort resource.
	BillingType *ExpressRoutePortsBillingType

	// Encapsulation method on physical ports.
	Encapsulation *ExpressRoutePortsEncapsulation

	// The set of physical links of the ExpressRoutePort resource.
	Links []*ExpressRouteLink

	// The name of the peering location that the ExpressRoutePort is mapped to physically.
	PeeringLocation *string

	// READ-ONLY; Date of the physical port allocation to be used in Letter of Authorization.
	AllocationDate *string

	// READ-ONLY; Reference the ExpressRoute circuit(s) that are provisioned on this ExpressRoutePort resource.
	Circuits []*SubResource

	// READ-ONLY; Ether type of the physical port.
	EtherType *string

	// READ-ONLY; Maximum transmission unit of the physical port pair(s).
	Mtu *string

	// READ-ONLY; Aggregate Gbps of associated circuit bandwidths.
	ProvisionedBandwidthInGbps *float32

	// READ-ONLY; The provisioning state of the express route port resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the express route port resource.
	ResourceGUID *string
}

func (e *ExpressRoutePortPropertiesFormat) GetBandwidthInGbps() (rv int32) {
	if e != nil && e.BandwidthInGbps != nil {
		return *e.BandwidthInGbps
	}
	return
}

func (e *ExpressRoutePortPropertiesFormat) GetBillingType() (rv *ExpressRoutePortsBillingType) {
	if e != nil {
		return e.BillingType
	}
	return
}

func (e *ExpressRoutePortPropertiesFormat) GetEncapsulation() (rv *ExpressRoutePortsEncapsulation) {
	if e != nil {
		return e.Encapsulation
	}
	return
}

func (e *ExpressRoutePortPropertiesFormat) GetLinks() (rv []*ExpressRouteLink) {
	if e != nil {
		return e.Links
	}
	return
}

func (e *ExpressRoutePortPropertiesFormat) GetPeeringLocation() (rv string) {
	if e != nil && e.PeeringLocation != nil {
		return *e.PeeringLocation
	}
	return
}

func (e *ExpressRoutePortPropertiesFormat) GetAllocationDate() (rv string) {
	if e != nil && e.AllocationDate != nil {
		return *e.AllocationDate
	}
	return
}

func (e *ExpressRoutePortPropertiesFormat) GetCircuits() (rv []*SubResource) {
	if e != nil {
		return e.Circuits
	}
	return
}

func (e *ExpressRoutePortPropertiesFormat) GetEtherType() (rv string) {
	if e != nil && e.EtherType != nil {
		return *e.EtherType
	}
	return
}

func (e *ExpressRoutePortPropertiesFormat) GetMtu() (rv string) {
	if e != nil && e.Mtu != nil {
		return *e.Mtu
	}
	return
}

func (e *ExpressRoutePortPropertiesFormat) GetProvisionedBandwidthInGbps() (rv float32) {
	if e != nil && e.ProvisionedBandwidthInGbps != nil {
		return *e.ProvisionedBandwidthInGbps
	}
	return
}

func (e *ExpressRoutePortPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if e != nil {
		return e.ProvisioningState
	}
	return
}

func (e *ExpressRoutePortPropertiesFormat) GetResourceGUID() (rv string) {
	if e != nil && e.ResourceGUID != nil {
		return *e.ResourceGUID
	}
	return
}

// ExpressRoutePortsLocation - Definition of the ExpressRoutePorts peering location resource.
type ExpressRoutePortsLocation struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// ExpressRoutePort peering location properties.
	Properties *ExpressRoutePortsLocationPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (e *ExpressRoutePortsLocation) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRoutePortsLocation) GetLocation() (rv string) {
	if e != nil && e.Location != nil {
		return *e.Location
	}
	return
}

func (e *ExpressRoutePortsLocation) GetProperties() (rv *ExpressRoutePortsLocationPropertiesFormat) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *ExpressRoutePortsLocation) GetTags() (rv map[string]*string) {
	if e != nil {
		return e.Tags
	}
	return
}

func (e *ExpressRoutePortsLocation) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRoutePortsLocation) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// ExpressRoutePortsLocationBandwidths - Real-time inventory of available ExpressRoute port bandwidths.
type ExpressRoutePortsLocationBandwidths struct {
	// READ-ONLY; Bandwidth descriptive name.
	OfferName *string

	// READ-ONLY; Bandwidth value in Gbps.
	ValueInGbps *int32
}

func (e *ExpressRoutePortsLocationBandwidths) GetOfferName() (rv string) {
	if e != nil && e.OfferName != nil {
		return *e.OfferName
	}
	return
}

func (e *ExpressRoutePortsLocationBandwidths) GetValueInGbps() (rv int32) {
	if e != nil && e.ValueInGbps != nil {
		return *e.ValueInGbps
	}
	return
}

// ExpressRoutePortsLocationListResult - Response for ListExpressRoutePortsLocations API service call.
type ExpressRoutePortsLocationListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// The list of all ExpressRoutePort peering locations.
	Value []*ExpressRoutePortsLocation
}

func (e *ExpressRoutePortsLocationListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

func (e *ExpressRoutePortsLocationListResult) GetValue() (rv []*ExpressRoutePortsLocation) {
	if e != nil {
		return e.Value
	}
	return
}

// ExpressRoutePortsLocationPropertiesFormat - Properties specific to ExpressRoutePorts peering location resources.
type ExpressRoutePortsLocationPropertiesFormat struct {
	// The inventory of available ExpressRoutePort bandwidths.
	AvailableBandwidths []*ExpressRoutePortsLocationBandwidths

	// READ-ONLY; Address of peering location.
	Address *string

	// READ-ONLY; Contact details of peering locations.
	Contact *string

	// READ-ONLY; The provisioning state of the express route port location resource.
	ProvisioningState *ProvisioningState
}

func (e *ExpressRoutePortsLocationPropertiesFormat) GetAvailableBandwidths() (rv []*ExpressRoutePortsLocationBandwidths) {
	if e != nil {
		return e.AvailableBandwidths
	}
	return
}

func (e *ExpressRoutePortsLocationPropertiesFormat) GetAddress() (rv string) {
	if e != nil && e.Address != nil {
		return *e.Address
	}
	return
}

func (e *ExpressRoutePortsLocationPropertiesFormat) GetContact() (rv string) {
	if e != nil && e.Contact != nil {
		return *e.Contact
	}
	return
}

func (e *ExpressRoutePortsLocationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if e != nil {
		return e.ProvisioningState
	}
	return
}

// ExpressRouteProviderPort resource.
type ExpressRouteProviderPort struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the express route Service Provider Port.
	Properties *ExpressRouteProviderPortProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (e *ExpressRouteProviderPort) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRouteProviderPort) GetLocation() (rv string) {
	if e != nil && e.Location != nil {
		return *e.Location
	}
	return
}

func (e *ExpressRouteProviderPort) GetProperties() (rv *ExpressRouteProviderPortProperties) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *ExpressRouteProviderPort) GetTags() (rv map[string]*string) {
	if e != nil {
		return e.Tags
	}
	return
}

func (e *ExpressRouteProviderPort) GetEtag() (rv string) {
	if e != nil && e.Etag != nil {
		return *e.Etag
	}
	return
}

func (e *ExpressRouteProviderPort) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRouteProviderPort) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// ExpressRouteProviderPortListResult - Response for ListExpressRouteProviderPort API service call.
type ExpressRouteProviderPortListResult struct {
	// A list of ExpressRouteProviderPort resources.
	Value []*ExpressRouteProviderPort

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (e *ExpressRouteProviderPortListResult) GetValue() (rv []*ExpressRouteProviderPort) {
	if e != nil {
		return e.Value
	}
	return
}

func (e *ExpressRouteProviderPortListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

// ExpressRouteProviderPortProperties - Properties of ExpressRouteProviderPort.
type ExpressRouteProviderPortProperties struct {
	// Overprovisioning factor for the port pair.
	OverprovisionFactor *int32

	// The peering location of the port pair.
	PeeringLocation *string

	// Bandwidth of the port in Mbps
	PortBandwidthInMbps *int32

	// Remaining Bandwidth of the port in Mbps
	RemainingBandwidthInMbps *int32

	// Used Bandwidth of the port in Mbps
	UsedBandwidthInMbps *int32

	// READ-ONLY; The name of the port pair.
	PortPairDescriptor *string

	// READ-ONLY; The name of the primary port.
	PrimaryAzurePort *string

	// READ-ONLY; The name of the secondary port.
	SecondaryAzurePort *string
}

func (e *ExpressRouteProviderPortProperties) GetOverprovisionFactor() (rv int32) {
	if e != nil && e.OverprovisionFactor != nil {
		return *e.OverprovisionFactor
	}
	return
}

func (e *ExpressRouteProviderPortProperties) GetPeeringLocation() (rv string) {
	if e != nil && e.PeeringLocation != nil {
		return *e.PeeringLocation
	}
	return
}

func (e *ExpressRouteProviderPortProperties) GetPortBandwidthInMbps() (rv int32) {
	if e != nil && e.PortBandwidthInMbps != nil {
		return *e.PortBandwidthInMbps
	}
	return
}

func (e *ExpressRouteProviderPortProperties) GetRemainingBandwidthInMbps() (rv int32) {
	if e != nil && e.RemainingBandwidthInMbps != nil {
		return *e.RemainingBandwidthInMbps
	}
	return
}

func (e *ExpressRouteProviderPortProperties) GetUsedBandwidthInMbps() (rv int32) {
	if e != nil && e.UsedBandwidthInMbps != nil {
		return *e.UsedBandwidthInMbps
	}
	return
}

func (e *ExpressRouteProviderPortProperties) GetPortPairDescriptor() (rv string) {
	if e != nil && e.PortPairDescriptor != nil {
		return *e.PortPairDescriptor
	}
	return
}

func (e *ExpressRouteProviderPortProperties) GetPrimaryAzurePort() (rv string) {
	if e != nil && e.PrimaryAzurePort != nil {
		return *e.PrimaryAzurePort
	}
	return
}

func (e *ExpressRouteProviderPortProperties) GetSecondaryAzurePort() (rv string) {
	if e != nil && e.SecondaryAzurePort != nil {
		return *e.SecondaryAzurePort
	}
	return
}

// ExpressRouteServiceProvider - A ExpressRouteResourceProvider object.
type ExpressRouteServiceProvider struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the express route service provider.
	Properties *ExpressRouteServiceProviderPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (e *ExpressRouteServiceProvider) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *ExpressRouteServiceProvider) GetLocation() (rv string) {
	if e != nil && e.Location != nil {
		return *e.Location
	}
	return
}

func (e *ExpressRouteServiceProvider) GetProperties() (rv *ExpressRouteServiceProviderPropertiesFormat) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *ExpressRouteServiceProvider) GetTags() (rv map[string]*string) {
	if e != nil {
		return e.Tags
	}
	return
}

func (e *ExpressRouteServiceProvider) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExpressRouteServiceProvider) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// ExpressRouteServiceProviderBandwidthsOffered - Contains bandwidths offered in ExpressRouteServiceProvider resources.
type ExpressRouteServiceProviderBandwidthsOffered struct {
	// The OfferName.
	OfferName *string

	// The ValueInMbps.
	ValueInMbps *int32
}

func (e *ExpressRouteServiceProviderBandwidthsOffered) GetOfferName() (rv string) {
	if e != nil && e.OfferName != nil {
		return *e.OfferName
	}
	return
}

func (e *ExpressRouteServiceProviderBandwidthsOffered) GetValueInMbps() (rv int32) {
	if e != nil && e.ValueInMbps != nil {
		return *e.ValueInMbps
	}
	return
}

// ExpressRouteServiceProviderListResult - Response for the ListExpressRouteServiceProvider API service call.
type ExpressRouteServiceProviderListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of ExpressRouteResourceProvider resources.
	Value []*ExpressRouteServiceProvider
}

func (e *ExpressRouteServiceProviderListResult) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

func (e *ExpressRouteServiceProviderListResult) GetValue() (rv []*ExpressRouteServiceProvider) {
	if e != nil {
		return e.Value
	}
	return
}

// ExpressRouteServiceProviderPropertiesFormat - Properties of ExpressRouteServiceProvider.
type ExpressRouteServiceProviderPropertiesFormat struct {
	// A list of bandwidths offered.
	BandwidthsOffered []*ExpressRouteServiceProviderBandwidthsOffered

	// A list of peering locations.
	PeeringLocations []*string

	// READ-ONLY; The provisioning state of the express route service provider resource.
	ProvisioningState *ProvisioningState
}

func (e *ExpressRouteServiceProviderPropertiesFormat) GetBandwidthsOffered() (rv []*ExpressRouteServiceProviderBandwidthsOffered) {
	if e != nil {
		return e.BandwidthsOffered
	}
	return
}

func (e *ExpressRouteServiceProviderPropertiesFormat) GetPeeringLocations() (rv []*string) {
	if e != nil {
		return e.PeeringLocations
	}
	return
}

func (e *ExpressRouteServiceProviderPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if e != nil {
		return e.ProvisioningState
	}
	return
}

// ExtendedLocation complex type.
type ExtendedLocation struct {
	// The name of the extended location.
	Name *string

	// The type of the extended location.
	Type *ExtendedLocationTypes
}

func (e *ExtendedLocation) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *ExtendedLocation) GetType() (rv *ExtendedLocationTypes) {
	if e != nil {
		return e.Type
	}
	return
}

// FilterItems - Will contain the filter name and values to operate on
type FilterItems struct {
	// The name of the field we would like to filter
	Field *string

	// List of values to filter the current field by
	Values []*string
}

func (f *FilterItems) GetField() (rv string) {
	if f != nil && f.Field != nil {
		return *f.Field
	}
	return
}

func (f *FilterItems) GetValues() (rv []*string) {
	if f != nil {
		return f.Values
	}
	return
}

// FirewallPolicy Resource.
type FirewallPolicy struct {
	// Resource ID.
	ID *string

	// The identity of the firewall policy.
	Identity *ManagedServiceIdentity

	// Resource location.
	Location *string

	// Properties of the firewall policy.
	Properties *FirewallPolicyPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (f *FirewallPolicy) GetID() (rv string) {
	if f != nil && f.ID != nil {
		return *f.ID
	}
	return
}

func (f *FirewallPolicy) GetIdentity() (rv *ManagedServiceIdentity) {
	if f != nil {
		return f.Identity
	}
	return
}

func (f *FirewallPolicy) GetLocation() (rv string) {
	if f != nil && f.Location != nil {
		return *f.Location
	}
	return
}

func (f *FirewallPolicy) GetProperties() (rv *FirewallPolicyPropertiesFormat) {
	if f != nil {
		return f.Properties
	}
	return
}

func (f *FirewallPolicy) GetTags() (rv map[string]*string) {
	if f != nil {
		return f.Tags
	}
	return
}

func (f *FirewallPolicy) GetEtag() (rv string) {
	if f != nil && f.Etag != nil {
		return *f.Etag
	}
	return
}

func (f *FirewallPolicy) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

func (f *FirewallPolicy) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

// FirewallPolicyCertificateAuthority - Trusted Root certificates properties for tls.
type FirewallPolicyCertificateAuthority struct {
	// Secret Id of (base-64 encoded unencrypted pfx) 'Secret' or 'Certificate' object stored in KeyVault.
	KeyVaultSecretID *string

	// Name of the CA certificate.
	Name *string
}

func (f *FirewallPolicyCertificateAuthority) GetKeyVaultSecretID() (rv string) {
	if f != nil && f.KeyVaultSecretID != nil {
		return *f.KeyVaultSecretID
	}
	return
}

func (f *FirewallPolicyCertificateAuthority) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

// FirewallPolicyFilterRuleCollection - Firewall Policy Filter Rule Collection.
type FirewallPolicyFilterRuleCollection struct {
	// REQUIRED; The type of the rule collection.
	RuleCollectionType *FirewallPolicyRuleCollectionType

	// The action type of a Filter rule collection.
	Action *FirewallPolicyFilterRuleCollectionAction

	// The name of the rule collection.
	Name *string

	// Priority of the Firewall Policy Rule Collection resource.
	Priority *int32

	// List of rules included in a rule collection.
	Rules []FirewallPolicyRuleClassification
}

func (f *FirewallPolicyFilterRuleCollection) GetRuleCollectionType() (rv *FirewallPolicyRuleCollectionType) {
	if f != nil {
		return f.RuleCollectionType
	}
	return
}

func (f *FirewallPolicyFilterRuleCollection) GetAction() (rv *FirewallPolicyFilterRuleCollectionAction) {
	if f != nil {
		return f.Action
	}
	return
}

func (f *FirewallPolicyFilterRuleCollection) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

func (f *FirewallPolicyFilterRuleCollection) GetPriority() (rv int32) {
	if f != nil && f.Priority != nil {
		return *f.Priority
	}
	return
}

func (f *FirewallPolicyFilterRuleCollection) GetRules() (rv []FirewallPolicyRuleClassification) {
	if f != nil {
		return f.Rules
	}
	return
}

// GetFirewallPolicyRuleCollection implements the FirewallPolicyRuleCollectionClassification interface for type FirewallPolicyFilterRuleCollection.
func (f *FirewallPolicyFilterRuleCollection) GetFirewallPolicyRuleCollection() *FirewallPolicyRuleCollection {
	return &FirewallPolicyRuleCollection{
		Name:               f.Name,
		Priority:           f.Priority,
		RuleCollectionType: f.RuleCollectionType,
	}
}

// FirewallPolicyFilterRuleCollectionAction - Properties of the FirewallPolicyFilterRuleCollectionAction.
type FirewallPolicyFilterRuleCollectionAction struct {
	// The type of action.
	Type *FirewallPolicyFilterRuleCollectionActionType
}

func (f *FirewallPolicyFilterRuleCollectionAction) GetType() (rv *FirewallPolicyFilterRuleCollectionActionType) {
	if f != nil {
		return f.Type
	}
	return
}

// FirewallPolicyInsights - Firewall Policy Insights.
type FirewallPolicyInsights struct {
	// A flag to indicate if the insights are enabled on the policy.
	IsEnabled *bool

	// Workspaces needed to configure the Firewall Policy Insights.
	LogAnalyticsResources *FirewallPolicyLogAnalyticsResources

	// Number of days the insights should be enabled on the policy.
	RetentionDays *int32
}

func (f *FirewallPolicyInsights) GetIsEnabled() (rv bool) {
	if f != nil && f.IsEnabled != nil {
		return *f.IsEnabled
	}
	return
}

func (f *FirewallPolicyInsights) GetLogAnalyticsResources() (rv *FirewallPolicyLogAnalyticsResources) {
	if f != nil {
		return f.LogAnalyticsResources
	}
	return
}

func (f *FirewallPolicyInsights) GetRetentionDays() (rv int32) {
	if f != nil && f.RetentionDays != nil {
		return *f.RetentionDays
	}
	return
}

// FirewallPolicyIntrusionDetection - Configuration for intrusion detection mode and rules.
type FirewallPolicyIntrusionDetection struct {
	// Intrusion detection configuration properties.
	Configuration *FirewallPolicyIntrusionDetectionConfiguration

	// Intrusion detection general state.
	Mode *FirewallPolicyIntrusionDetectionStateType
}

func (f *FirewallPolicyIntrusionDetection) GetConfiguration() (rv *FirewallPolicyIntrusionDetectionConfiguration) {
	if f != nil {
		return f.Configuration
	}
	return
}

func (f *FirewallPolicyIntrusionDetection) GetMode() (rv *FirewallPolicyIntrusionDetectionStateType) {
	if f != nil {
		return f.Mode
	}
	return
}

// FirewallPolicyIntrusionDetectionBypassTrafficSpecifications - Intrusion detection bypass traffic specification.
type FirewallPolicyIntrusionDetectionBypassTrafficSpecifications struct {
	// Description of the bypass traffic rule.
	Description *string

	// List of destination IP addresses or ranges for this rule.
	DestinationAddresses []*string

	// List of destination IpGroups for this rule.
	DestinationIPGroups []*string

	// List of destination ports or ranges.
	DestinationPorts []*string

	// Name of the bypass traffic rule.
	Name *string

	// The rule bypass protocol.
	Protocol *FirewallPolicyIntrusionDetectionProtocol

	// List of source IP addresses or ranges for this rule.
	SourceAddresses []*string

	// List of source IpGroups for this rule.
	SourceIPGroups []*string
}

func (f *FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) GetDescription() (rv string) {
	if f != nil && f.Description != nil {
		return *f.Description
	}
	return
}

func (f *FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) GetDestinationAddresses() (rv []*string) {
	if f != nil {
		return f.DestinationAddresses
	}
	return
}

func (f *FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) GetDestinationIPGroups() (rv []*string) {
	if f != nil {
		return f.DestinationIPGroups
	}
	return
}

func (f *FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) GetDestinationPorts() (rv []*string) {
	if f != nil {
		return f.DestinationPorts
	}
	return
}

func (f *FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

func (f *FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) GetProtocol() (rv *FirewallPolicyIntrusionDetectionProtocol) {
	if f != nil {
		return f.Protocol
	}
	return
}

func (f *FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) GetSourceAddresses() (rv []*string) {
	if f != nil {
		return f.SourceAddresses
	}
	return
}

func (f *FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) GetSourceIPGroups() (rv []*string) {
	if f != nil {
		return f.SourceIPGroups
	}
	return
}

// FirewallPolicyIntrusionDetectionConfiguration - The operation for configuring intrusion detection.
type FirewallPolicyIntrusionDetectionConfiguration struct {
	// List of rules for traffic to bypass.
	BypassTrafficSettings []*FirewallPolicyIntrusionDetectionBypassTrafficSpecifications

	// IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only
	// ranges defined by IANA RFC 1918 are considered private IP addresses. To modify
	// default ranges, specify your Private IP address ranges with this property
	PrivateRanges []*string

	// List of specific signatures states.
	SignatureOverrides []*FirewallPolicyIntrusionDetectionSignatureSpecification
}

func (f *FirewallPolicyIntrusionDetectionConfiguration) GetBypassTrafficSettings() (rv []*FirewallPolicyIntrusionDetectionBypassTrafficSpecifications) {
	if f != nil {
		return f.BypassTrafficSettings
	}
	return
}

func (f *FirewallPolicyIntrusionDetectionConfiguration) GetPrivateRanges() (rv []*string) {
	if f != nil {
		return f.PrivateRanges
	}
	return
}

func (f *FirewallPolicyIntrusionDetectionConfiguration) GetSignatureOverrides() (rv []*FirewallPolicyIntrusionDetectionSignatureSpecification) {
	if f != nil {
		return f.SignatureOverrides
	}
	return
}

// FirewallPolicyIntrusionDetectionSignatureSpecification - Intrusion detection signatures specification states.
type FirewallPolicyIntrusionDetectionSignatureSpecification struct {
	// Signature id.
	ID *string

	// The signature state.
	Mode *FirewallPolicyIntrusionDetectionStateType
}

func (f *FirewallPolicyIntrusionDetectionSignatureSpecification) GetID() (rv string) {
	if f != nil && f.ID != nil {
		return *f.ID
	}
	return
}

func (f *FirewallPolicyIntrusionDetectionSignatureSpecification) GetMode() (rv *FirewallPolicyIntrusionDetectionStateType) {
	if f != nil {
		return f.Mode
	}
	return
}

// FirewallPolicyListResult - Response for ListFirewallPolicies API service call.
type FirewallPolicyListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of Firewall Policies in a resource group.
	Value []*FirewallPolicy
}

func (f *FirewallPolicyListResult) GetNextLink() (rv string) {
	if f != nil && f.NextLink != nil {
		return *f.NextLink
	}
	return
}

func (f *FirewallPolicyListResult) GetValue() (rv []*FirewallPolicy) {
	if f != nil {
		return f.Value
	}
	return
}

// FirewallPolicyLogAnalyticsResources - Log Analytics Resources for Firewall Policy Insights.
type FirewallPolicyLogAnalyticsResources struct {
	// The default workspace Id for Firewall Policy Insights.
	DefaultWorkspaceID *SubResource

	// List of workspaces for Firewall Policy Insights.
	Workspaces []*FirewallPolicyLogAnalyticsWorkspace
}

func (f *FirewallPolicyLogAnalyticsResources) GetDefaultWorkspaceID() (rv *SubResource) {
	if f != nil {
		return f.DefaultWorkspaceID
	}
	return
}

func (f *FirewallPolicyLogAnalyticsResources) GetWorkspaces() (rv []*FirewallPolicyLogAnalyticsWorkspace) {
	if f != nil {
		return f.Workspaces
	}
	return
}

// FirewallPolicyLogAnalyticsWorkspace - Log Analytics Workspace for Firewall Policy Insights.
type FirewallPolicyLogAnalyticsWorkspace struct {
	// Region to configure the Workspace.
	Region *string

	// The workspace Id for Firewall Policy Insights.
	WorkspaceID *SubResource
}

func (f *FirewallPolicyLogAnalyticsWorkspace) GetRegion() (rv string) {
	if f != nil && f.Region != nil {
		return *f.Region
	}
	return
}

func (f *FirewallPolicyLogAnalyticsWorkspace) GetWorkspaceID() (rv *SubResource) {
	if f != nil {
		return f.WorkspaceID
	}
	return
}

// FirewallPolicyNatRuleCollection - Firewall Policy NAT Rule Collection.
type FirewallPolicyNatRuleCollection struct {
	// REQUIRED; The type of the rule collection.
	RuleCollectionType *FirewallPolicyRuleCollectionType

	// The action type of a Nat rule collection.
	Action *FirewallPolicyNatRuleCollectionAction

	// The name of the rule collection.
	Name *string

	// Priority of the Firewall Policy Rule Collection resource.
	Priority *int32

	// List of rules included in a rule collection.
	Rules []FirewallPolicyRuleClassification
}

func (f *FirewallPolicyNatRuleCollection) GetRuleCollectionType() (rv *FirewallPolicyRuleCollectionType) {
	if f != nil {
		return f.RuleCollectionType
	}
	return
}

func (f *FirewallPolicyNatRuleCollection) GetAction() (rv *FirewallPolicyNatRuleCollectionAction) {
	if f != nil {
		return f.Action
	}
	return
}

func (f *FirewallPolicyNatRuleCollection) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

func (f *FirewallPolicyNatRuleCollection) GetPriority() (rv int32) {
	if f != nil && f.Priority != nil {
		return *f.Priority
	}
	return
}

func (f *FirewallPolicyNatRuleCollection) GetRules() (rv []FirewallPolicyRuleClassification) {
	if f != nil {
		return f.Rules
	}
	return
}

// GetFirewallPolicyRuleCollection implements the FirewallPolicyRuleCollectionClassification interface for type FirewallPolicyNatRuleCollection.
func (f *FirewallPolicyNatRuleCollection) GetFirewallPolicyRuleCollection() *FirewallPolicyRuleCollection {
	return &FirewallPolicyRuleCollection{
		Name:               f.Name,
		Priority:           f.Priority,
		RuleCollectionType: f.RuleCollectionType,
	}
}

// FirewallPolicyNatRuleCollectionAction - Properties of the FirewallPolicyNatRuleCollectionAction.
type FirewallPolicyNatRuleCollectionAction struct {
	// The type of action.
	Type *FirewallPolicyNatRuleCollectionActionType
}

func (f *FirewallPolicyNatRuleCollectionAction) GetType() (rv *FirewallPolicyNatRuleCollectionActionType) {
	if f != nil {
		return f.Type
	}
	return
}

// FirewallPolicyPropertiesFormat - Firewall Policy definition.
type FirewallPolicyPropertiesFormat struct {
	// The parent firewall policy from which rules are inherited.
	BasePolicy *SubResource

	// DNS Proxy Settings definition.
	DNSSettings *DNSSettings

	// Explicit Proxy Settings definition.
	ExplicitProxy *ExplicitProxy

	// Insights on Firewall Policy.
	Insights *FirewallPolicyInsights

	// The configuration for Intrusion detection.
	IntrusionDetection *FirewallPolicyIntrusionDetection

	// The Firewall Policy SKU.
	SKU *FirewallPolicySKU

	// SQL Settings definition.
	SQL *FirewallPolicySQL

	// The private IP addresses/IP ranges to which traffic will not be SNAT.
	Snat *FirewallPolicySNAT

	// The operation mode for Threat Intelligence.
	ThreatIntelMode *AzureFirewallThreatIntelMode

	// ThreatIntel Whitelist for Firewall Policy.
	ThreatIntelWhitelist *FirewallPolicyThreatIntelWhitelist

	// TLS Configuration definition.
	TransportSecurity *FirewallPolicyTransportSecurity

	// READ-ONLY; List of references to Child Firewall Policies.
	ChildPolicies []*SubResource

	// READ-ONLY; List of references to Azure Firewalls that this Firewall Policy is associated with.
	Firewalls []*SubResource

	// READ-ONLY; The provisioning state of the firewall policy resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; List of references to FirewallPolicyRuleCollectionGroups.
	RuleCollectionGroups []*SubResource
}

func (f *FirewallPolicyPropertiesFormat) GetBasePolicy() (rv *SubResource) {
	if f != nil {
		return f.BasePolicy
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetDNSSettings() (rv *DNSSettings) {
	if f != nil {
		return f.DNSSettings
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetExplicitProxy() (rv *ExplicitProxy) {
	if f != nil {
		return f.ExplicitProxy
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetInsights() (rv *FirewallPolicyInsights) {
	if f != nil {
		return f.Insights
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetIntrusionDetection() (rv *FirewallPolicyIntrusionDetection) {
	if f != nil {
		return f.IntrusionDetection
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetSKU() (rv *FirewallPolicySKU) {
	if f != nil {
		return f.SKU
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetSQL() (rv *FirewallPolicySQL) {
	if f != nil {
		return f.SQL
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetSnat() (rv *FirewallPolicySNAT) {
	if f != nil {
		return f.Snat
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetThreatIntelMode() (rv *AzureFirewallThreatIntelMode) {
	if f != nil {
		return f.ThreatIntelMode
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetThreatIntelWhitelist() (rv *FirewallPolicyThreatIntelWhitelist) {
	if f != nil {
		return f.ThreatIntelWhitelist
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetTransportSecurity() (rv *FirewallPolicyTransportSecurity) {
	if f != nil {
		return f.TransportSecurity
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetChildPolicies() (rv []*SubResource) {
	if f != nil {
		return f.ChildPolicies
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetFirewalls() (rv []*SubResource) {
	if f != nil {
		return f.Firewalls
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if f != nil {
		return f.ProvisioningState
	}
	return
}

func (f *FirewallPolicyPropertiesFormat) GetRuleCollectionGroups() (rv []*SubResource) {
	if f != nil {
		return f.RuleCollectionGroups
	}
	return
}

// FirewallPolicyRule - Properties of a rule.
type FirewallPolicyRule struct {
	// REQUIRED; Rule Type.
	RuleType *FirewallPolicyRuleType

	// Description of the rule.
	Description *string

	// Name of the rule.
	Name *string
}

func (f *FirewallPolicyRule) GetRuleType() (rv *FirewallPolicyRuleType) {
	if f != nil {
		return f.RuleType
	}
	return
}

func (f *FirewallPolicyRule) GetDescription() (rv string) {
	if f != nil && f.Description != nil {
		return *f.Description
	}
	return
}

func (f *FirewallPolicyRule) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

// GetFirewallPolicyRule implements the FirewallPolicyRuleClassification interface for type FirewallPolicyRule.
func (f *FirewallPolicyRule) GetFirewallPolicyRule() *FirewallPolicyRule { return f }

// FirewallPolicyRuleApplicationProtocol - Properties of the application rule protocol.
type FirewallPolicyRuleApplicationProtocol struct {
	// Port number for the protocol, cannot be greater than 64000.
	Port *int32

	// Protocol type.
	ProtocolType *FirewallPolicyRuleApplicationProtocolType
}

func (f *FirewallPolicyRuleApplicationProtocol) GetPort() (rv int32) {
	if f != nil && f.Port != nil {
		return *f.Port
	}
	return
}

func (f *FirewallPolicyRuleApplicationProtocol) GetProtocolType() (rv *FirewallPolicyRuleApplicationProtocolType) {
	if f != nil {
		return f.ProtocolType
	}
	return
}

// FirewallPolicyRuleCollection - Properties of the rule collection.
type FirewallPolicyRuleCollection struct {
	// REQUIRED; The type of the rule collection.
	RuleCollectionType *FirewallPolicyRuleCollectionType

	// The name of the rule collection.
	Name *string

	// Priority of the Firewall Policy Rule Collection resource.
	Priority *int32
}

func (f *FirewallPolicyRuleCollection) GetRuleCollectionType() (rv *FirewallPolicyRuleCollectionType) {
	if f != nil {
		return f.RuleCollectionType
	}
	return
}

func (f *FirewallPolicyRuleCollection) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

func (f *FirewallPolicyRuleCollection) GetPriority() (rv int32) {
	if f != nil && f.Priority != nil {
		return *f.Priority
	}
	return
}

// GetFirewallPolicyRuleCollection implements the FirewallPolicyRuleCollectionClassification interface for type FirewallPolicyRuleCollection.
func (f *FirewallPolicyRuleCollection) GetFirewallPolicyRuleCollection() *FirewallPolicyRuleCollection {
	return f
}

// FirewallPolicyRuleCollectionGroup - Rule Collection Group resource.
type FirewallPolicyRuleCollectionGroup struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// The properties of the firewall policy rule collection group.
	Properties *FirewallPolicyRuleCollectionGroupProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Rule Group type.
	Type *string
}

func (f *FirewallPolicyRuleCollectionGroup) GetID() (rv string) {
	if f != nil && f.ID != nil {
		return *f.ID
	}
	return
}

func (f *FirewallPolicyRuleCollectionGroup) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

func (f *FirewallPolicyRuleCollectionGroup) GetProperties() (rv *FirewallPolicyRuleCollectionGroupProperties) {
	if f != nil {
		return f.Properties
	}
	return
}

func (f *FirewallPolicyRuleCollectionGroup) GetEtag() (rv string) {
	if f != nil && f.Etag != nil {
		return *f.Etag
	}
	return
}

func (f *FirewallPolicyRuleCollectionGroup) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

// FirewallPolicyRuleCollectionGroupListResult - Response for ListFirewallPolicyRuleCollectionGroups API service call.
type FirewallPolicyRuleCollectionGroupListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of FirewallPolicyRuleCollectionGroups in a FirewallPolicy.
	Value []*FirewallPolicyRuleCollectionGroup
}

func (f *FirewallPolicyRuleCollectionGroupListResult) GetNextLink() (rv string) {
	if f != nil && f.NextLink != nil {
		return *f.NextLink
	}
	return
}

func (f *FirewallPolicyRuleCollectionGroupListResult) GetValue() (rv []*FirewallPolicyRuleCollectionGroup) {
	if f != nil {
		return f.Value
	}
	return
}

// FirewallPolicyRuleCollectionGroupProperties - Properties of the rule collection group.
type FirewallPolicyRuleCollectionGroupProperties struct {
	// Priority of the Firewall Policy Rule Collection Group resource.
	Priority *int32

	// Group of Firewall Policy rule collections.
	RuleCollections []FirewallPolicyRuleCollectionClassification

	// READ-ONLY; The provisioning state of the firewall policy rule collection group resource.
	ProvisioningState *ProvisioningState
}

func (f *FirewallPolicyRuleCollectionGroupProperties) GetPriority() (rv int32) {
	if f != nil && f.Priority != nil {
		return *f.Priority
	}
	return
}

func (f *FirewallPolicyRuleCollectionGroupProperties) GetRuleCollections() (rv []FirewallPolicyRuleCollectionClassification) {
	if f != nil {
		return f.RuleCollections
	}
	return
}

func (f *FirewallPolicyRuleCollectionGroupProperties) GetProvisioningState() (rv *ProvisioningState) {
	if f != nil {
		return f.ProvisioningState
	}
	return
}

// FirewallPolicySKU - SKU of Firewall policy.
type FirewallPolicySKU struct {
	// Tier of Firewall Policy.
	Tier *FirewallPolicySKUTier
}

func (f *FirewallPolicySKU) GetTier() (rv *FirewallPolicySKUTier) {
	if f != nil {
		return f.Tier
	}
	return
}

// FirewallPolicySNAT - The private IP addresses/IP ranges to which traffic will not be SNAT.
type FirewallPolicySNAT struct {
	// The operation mode for automatically learning private ranges to not be SNAT
	AutoLearnPrivateRanges *AutoLearnPrivateRangesMode

	// List of private IP addresses/IP address ranges to not be SNAT.
	PrivateRanges []*string
}

func (f *FirewallPolicySNAT) GetAutoLearnPrivateRanges() (rv *AutoLearnPrivateRangesMode) {
	if f != nil {
		return f.AutoLearnPrivateRanges
	}
	return
}

func (f *FirewallPolicySNAT) GetPrivateRanges() (rv []*string) {
	if f != nil {
		return f.PrivateRanges
	}
	return
}

// FirewallPolicySQL - SQL Settings in Firewall Policy.
type FirewallPolicySQL struct {
	// A flag to indicate if SQL Redirect traffic filtering is enabled. Turning on the flag requires no rule using port 11000-11999.
	AllowSQLRedirect *bool
}

func (f *FirewallPolicySQL) GetAllowSQLRedirect() (rv bool) {
	if f != nil && f.AllowSQLRedirect != nil {
		return *f.AllowSQLRedirect
	}
	return
}

// FirewallPolicyThreatIntelWhitelist - ThreatIntel Whitelist for Firewall Policy.
type FirewallPolicyThreatIntelWhitelist struct {
	// List of FQDNs for the ThreatIntel Whitelist.
	Fqdns []*string

	// List of IP addresses for the ThreatIntel Whitelist.
	IPAddresses []*string
}

func (f *FirewallPolicyThreatIntelWhitelist) GetFqdns() (rv []*string) {
	if f != nil {
		return f.Fqdns
	}
	return
}

func (f *FirewallPolicyThreatIntelWhitelist) GetIPAddresses() (rv []*string) {
	if f != nil {
		return f.IPAddresses
	}
	return
}

// FirewallPolicyTransportSecurity - Configuration needed to perform TLS termination & initiation.
type FirewallPolicyTransportSecurity struct {
	// The CA used for intermediate CA generation.
	CertificateAuthority *FirewallPolicyCertificateAuthority
}

func (f *FirewallPolicyTransportSecurity) GetCertificateAuthority() (rv *FirewallPolicyCertificateAuthority) {
	if f != nil {
		return f.CertificateAuthority
	}
	return
}

// FlowLog - A flow log resource.
type FlowLog struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the flow log.
	Properties *FlowLogPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (f *FlowLog) GetID() (rv string) {
	if f != nil && f.ID != nil {
		return *f.ID
	}
	return
}

func (f *FlowLog) GetLocation() (rv string) {
	if f != nil && f.Location != nil {
		return *f.Location
	}
	return
}

func (f *FlowLog) GetProperties() (rv *FlowLogPropertiesFormat) {
	if f != nil {
		return f.Properties
	}
	return
}

func (f *FlowLog) GetTags() (rv map[string]*string) {
	if f != nil {
		return f.Tags
	}
	return
}

func (f *FlowLog) GetEtag() (rv string) {
	if f != nil && f.Etag != nil {
		return *f.Etag
	}
	return
}

func (f *FlowLog) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

func (f *FlowLog) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

// FlowLogFormatParameters - Parameters that define the flow log format.
type FlowLogFormatParameters struct {
	// The file type of flow log.
	Type *FlowLogFormatType

	// The version (revision) of the flow log.
	Version *int32
}

func (f *FlowLogFormatParameters) GetType() (rv *FlowLogFormatType) {
	if f != nil {
		return f.Type
	}
	return
}

func (f *FlowLogFormatParameters) GetVersion() (rv int32) {
	if f != nil && f.Version != nil {
		return *f.Version
	}
	return
}

// FlowLogInformation - Information on the configuration of flow log and traffic analytics (optional) .
type FlowLogInformation struct {
	// REQUIRED; Properties of the flow log.
	Properties *FlowLogProperties

	// REQUIRED; The ID of the resource to configure for flow log and traffic analytics (optional) .
	TargetResourceID *string

	// Parameters that define the configuration of traffic analytics.
	FlowAnalyticsConfiguration *TrafficAnalyticsProperties
}

func (f *FlowLogInformation) GetProperties() (rv *FlowLogProperties) {
	if f != nil {
		return f.Properties
	}
	return
}

func (f *FlowLogInformation) GetTargetResourceID() (rv string) {
	if f != nil && f.TargetResourceID != nil {
		return *f.TargetResourceID
	}
	return
}

func (f *FlowLogInformation) GetFlowAnalyticsConfiguration() (rv *TrafficAnalyticsProperties) {
	if f != nil {
		return f.FlowAnalyticsConfiguration
	}
	return
}

// FlowLogListResult - List of flow logs.
type FlowLogListResult struct {
	// Information about flow log resource.
	Value []*FlowLog

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (f *FlowLogListResult) GetValue() (rv []*FlowLog) {
	if f != nil {
		return f.Value
	}
	return
}

func (f *FlowLogListResult) GetNextLink() (rv string) {
	if f != nil && f.NextLink != nil {
		return *f.NextLink
	}
	return
}

// FlowLogProperties - Parameters that define the configuration of flow log.
type FlowLogProperties struct {
	// REQUIRED; Flag to enable/disable flow logging.
	Enabled *bool

	// REQUIRED; ID of the storage account which is used to store the flow log.
	StorageID *string

	// Parameters that define the flow log format.
	Format *FlowLogFormatParameters

	// Parameters that define the retention policy for flow log.
	RetentionPolicy *RetentionPolicyParameters
}

func (f *FlowLogProperties) GetEnabled() (rv bool) {
	if f != nil && f.Enabled != nil {
		return *f.Enabled
	}
	return
}

func (f *FlowLogProperties) GetStorageID() (rv string) {
	if f != nil && f.StorageID != nil {
		return *f.StorageID
	}
	return
}

func (f *FlowLogProperties) GetFormat() (rv *FlowLogFormatParameters) {
	if f != nil {
		return f.Format
	}
	return
}

func (f *FlowLogProperties) GetRetentionPolicy() (rv *RetentionPolicyParameters) {
	if f != nil {
		return f.RetentionPolicy
	}
	return
}

// FlowLogPropertiesFormat - Parameters that define the configuration of flow log.
type FlowLogPropertiesFormat struct {
	// REQUIRED; ID of the storage account which is used to store the flow log.
	StorageID *string

	// REQUIRED; ID of network security group to which flow log will be applied.
	TargetResourceID *string

	// Flag to enable/disable flow logging.
	Enabled *bool

	// Parameters that define the configuration of traffic analytics.
	FlowAnalyticsConfiguration *TrafficAnalyticsProperties

	// Parameters that define the flow log format.
	Format *FlowLogFormatParameters

	// Parameters that define the retention policy for flow log.
	RetentionPolicy *RetentionPolicyParameters

	// READ-ONLY; The provisioning state of the flow log.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Guid of network security group to which flow log will be applied.
	TargetResourceGUID *string
}

func (f *FlowLogPropertiesFormat) GetStorageID() (rv string) {
	if f != nil && f.StorageID != nil {
		return *f.StorageID
	}
	return
}

func (f *FlowLogPropertiesFormat) GetTargetResourceID() (rv string) {
	if f != nil && f.TargetResourceID != nil {
		return *f.TargetResourceID
	}
	return
}

func (f *FlowLogPropertiesFormat) GetEnabled() (rv bool) {
	if f != nil && f.Enabled != nil {
		return *f.Enabled
	}
	return
}

func (f *FlowLogPropertiesFormat) GetFlowAnalyticsConfiguration() (rv *TrafficAnalyticsProperties) {
	if f != nil {
		return f.FlowAnalyticsConfiguration
	}
	return
}

func (f *FlowLogPropertiesFormat) GetFormat() (rv *FlowLogFormatParameters) {
	if f != nil {
		return f.Format
	}
	return
}

func (f *FlowLogPropertiesFormat) GetRetentionPolicy() (rv *RetentionPolicyParameters) {
	if f != nil {
		return f.RetentionPolicy
	}
	return
}

func (f *FlowLogPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if f != nil {
		return f.ProvisioningState
	}
	return
}

func (f *FlowLogPropertiesFormat) GetTargetResourceGUID() (rv string) {
	if f != nil && f.TargetResourceGUID != nil {
		return *f.TargetResourceGUID
	}
	return
}

// FlowLogStatusParameters - Parameters that define a resource to query flow log and traffic analytics (optional) status.
type FlowLogStatusParameters struct {
	// REQUIRED; The target resource where getting the flow log and traffic analytics (optional) status.
	TargetResourceID *string
}

func (f *FlowLogStatusParameters) GetTargetResourceID() (rv string) {
	if f != nil && f.TargetResourceID != nil {
		return *f.TargetResourceID
	}
	return
}

// FrontendIPConfiguration - Frontend IP address of the load balancer.
type FrontendIPConfiguration struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within the set of frontend IP configurations used by the load balancer. This name
	// can be used to access the resource.
	Name *string

	// Properties of the load balancer probe.
	Properties *FrontendIPConfigurationPropertiesFormat

	// A list of availability zones denoting the IP allocated for the resource needs to come from.
	Zones []*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (f *FrontendIPConfiguration) GetID() (rv string) {
	if f != nil && f.ID != nil {
		return *f.ID
	}
	return
}

func (f *FrontendIPConfiguration) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

func (f *FrontendIPConfiguration) GetProperties() (rv *FrontendIPConfigurationPropertiesFormat) {
	if f != nil {
		return f.Properties
	}
	return
}

func (f *FrontendIPConfiguration) GetZones() (rv []*string) {
	if f != nil {
		return f.Zones
	}
	return
}

func (f *FrontendIPConfiguration) GetEtag() (rv string) {
	if f != nil && f.Etag != nil {
		return *f.Etag
	}
	return
}

func (f *FrontendIPConfiguration) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

// FrontendIPConfigurationPropertiesFormat - Properties of Frontend IP Configuration of the load balancer.
type FrontendIPConfigurationPropertiesFormat struct {
	// The reference to gateway load balancer frontend IP.
	GatewayLoadBalancer *SubResource

	// The private IP address of the IP configuration.
	PrivateIPAddress *string

	// Whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as IPv4.
	PrivateIPAddressVersion *IPVersion

	// The Private IP allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod

	// The reference to the Public IP resource.
	PublicIPAddress *PublicIPAddress

	// The reference to the Public IP Prefix resource.
	PublicIPPrefix *SubResource

	// The reference to the subnet resource.
	Subnet *Subnet

	// READ-ONLY; An array of references to inbound pools that use this frontend IP.
	InboundNatPools []*SubResource

	// READ-ONLY; An array of references to inbound rules that use this frontend IP.
	InboundNatRules []*SubResource

	// READ-ONLY; An array of references to load balancing rules that use this frontend IP.
	LoadBalancingRules []*SubResource

	// READ-ONLY; An array of references to outbound rules that use this frontend IP.
	OutboundRules []*SubResource

	// READ-ONLY; The provisioning state of the frontend IP configuration resource.
	ProvisioningState *ProvisioningState
}

func (f *FrontendIPConfigurationPropertiesFormat) GetGatewayLoadBalancer() (rv *SubResource) {
	if f != nil {
		return f.GatewayLoadBalancer
	}
	return
}

func (f *FrontendIPConfigurationPropertiesFormat) GetPrivateIPAddress() (rv string) {
	if f != nil && f.PrivateIPAddress != nil {
		return *f.PrivateIPAddress
	}
	return
}

func (f *FrontendIPConfigurationPropertiesFormat) GetPrivateIPAddressVersion() (rv *IPVersion) {
	if f != nil {
		return f.PrivateIPAddressVersion
	}
	return
}

func (f *FrontendIPConfigurationPropertiesFormat) GetPrivateIPAllocationMethod() (rv *IPAllocationMethod) {
	if f != nil {
		return f.PrivateIPAllocationMethod
	}
	return
}

func (f *FrontendIPConfigurationPropertiesFormat) GetPublicIPAddress() (rv *PublicIPAddress) {
	if f != nil {
		return f.PublicIPAddress
	}
	return
}

func (f *FrontendIPConfigurationPropertiesFormat) GetPublicIPPrefix() (rv *SubResource) {
	if f != nil {
		return f.PublicIPPrefix
	}
	return
}

func (f *FrontendIPConfigurationPropertiesFormat) GetSubnet() (rv *Subnet) {
	if f != nil {
		return f.Subnet
	}
	return
}

func (f *FrontendIPConfigurationPropertiesFormat) GetInboundNatPools() (rv []*SubResource) {
	if f != nil {
		return f.InboundNatPools
	}
	return
}

func (f *FrontendIPConfigurationPropertiesFormat) GetInboundNatRules() (rv []*SubResource) {
	if f != nil {
		return f.InboundNatRules
	}
	return
}

func (f *FrontendIPConfigurationPropertiesFormat) GetLoadBalancingRules() (rv []*SubResource) {
	if f != nil {
		return f.LoadBalancingRules
	}
	return
}

func (f *FrontendIPConfigurationPropertiesFormat) GetOutboundRules() (rv []*SubResource) {
	if f != nil {
		return f.OutboundRules
	}
	return
}

func (f *FrontendIPConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if f != nil {
		return f.ProvisioningState
	}
	return
}

// GatewayCustomBgpIPAddressIPConfiguration - GatewayCustomBgpIpAddressIpConfiguration for a virtual network gateway connection.
type GatewayCustomBgpIPAddressIPConfiguration struct {
	// REQUIRED; The custom BgpPeeringAddress which belongs to IpconfigurationId.
	CustomBgpIPAddress *string

	// REQUIRED; The IpconfigurationId of ipconfiguration which belongs to gateway.
	IPConfigurationID *string
}

func (g *GatewayCustomBgpIPAddressIPConfiguration) GetCustomBgpIPAddress() (rv string) {
	if g != nil && g.CustomBgpIPAddress != nil {
		return *g.CustomBgpIPAddress
	}
	return
}

func (g *GatewayCustomBgpIPAddressIPConfiguration) GetIPConfigurationID() (rv string) {
	if g != nil && g.IPConfigurationID != nil {
		return *g.IPConfigurationID
	}
	return
}

// GatewayLoadBalancerTunnelInterface - Gateway load balancer tunnel interface of a load balancer backend address pool.
type GatewayLoadBalancerTunnelInterface struct {
	// Identifier of gateway load balancer tunnel interface.
	Identifier *int32

	// Port of gateway load balancer tunnel interface.
	Port *int32

	// Protocol of gateway load balancer tunnel interface.
	Protocol *GatewayLoadBalancerTunnelProtocol

	// Traffic type of gateway load balancer tunnel interface.
	Type *GatewayLoadBalancerTunnelInterfaceType
}

func (g *GatewayLoadBalancerTunnelInterface) GetIdentifier() (rv int32) {
	if g != nil && g.Identifier != nil {
		return *g.Identifier
	}
	return
}

func (g *GatewayLoadBalancerTunnelInterface) GetPort() (rv int32) {
	if g != nil && g.Port != nil {
		return *g.Port
	}
	return
}

func (g *GatewayLoadBalancerTunnelInterface) GetProtocol() (rv *GatewayLoadBalancerTunnelProtocol) {
	if g != nil {
		return g.Protocol
	}
	return
}

func (g *GatewayLoadBalancerTunnelInterface) GetType() (rv *GatewayLoadBalancerTunnelInterfaceType) {
	if g != nil {
		return g.Type
	}
	return
}

// GatewayRoute - Gateway routing details.
type GatewayRoute struct {
	// READ-ONLY; The route's AS path sequence.
	AsPath *string

	// READ-ONLY; The gateway's local address.
	LocalAddress *string

	// READ-ONLY; The route's network prefix.
	Network *string

	// READ-ONLY; The route's next hop.
	NextHop *string

	// READ-ONLY; The source this route was learned from.
	Origin *string

	// READ-ONLY; The peer this route was learned from.
	SourcePeer *string

	// READ-ONLY; The route's weight.
	Weight *int32
}

func (g *GatewayRoute) GetAsPath() (rv string) {
	if g != nil && g.AsPath != nil {
		return *g.AsPath
	}
	return
}

func (g *GatewayRoute) GetLocalAddress() (rv string) {
	if g != nil && g.LocalAddress != nil {
		return *g.LocalAddress
	}
	return
}

func (g *GatewayRoute) GetNetwork() (rv string) {
	if g != nil && g.Network != nil {
		return *g.Network
	}
	return
}

func (g *GatewayRoute) GetNextHop() (rv string) {
	if g != nil && g.NextHop != nil {
		return *g.NextHop
	}
	return
}

func (g *GatewayRoute) GetOrigin() (rv string) {
	if g != nil && g.Origin != nil {
		return *g.Origin
	}
	return
}

func (g *GatewayRoute) GetSourcePeer() (rv string) {
	if g != nil && g.SourcePeer != nil {
		return *g.SourcePeer
	}
	return
}

func (g *GatewayRoute) GetWeight() (rv int32) {
	if g != nil && g.Weight != nil {
		return *g.Weight
	}
	return
}

// GatewayRouteListResult - List of virtual network gateway routes.
type GatewayRouteListResult struct {
	// List of gateway routes.
	Value []*GatewayRoute
}

func (g *GatewayRouteListResult) GetValue() (rv []*GatewayRoute) {
	if g != nil {
		return g.Value
	}
	return
}

// GenerateExpressRoutePortsLOARequest - The customer name to be printed on a letter of authorization.
type GenerateExpressRoutePortsLOARequest struct {
	// REQUIRED; The customer name.
	CustomerName *string
}

func (g *GenerateExpressRoutePortsLOARequest) GetCustomerName() (rv string) {
	if g != nil && g.CustomerName != nil {
		return *g.CustomerName
	}
	return
}

// GenerateExpressRoutePortsLOAResult - Response for GenerateExpressRoutePortsLOA API service call.
type GenerateExpressRoutePortsLOAResult struct {
	// The content as a base64 encoded string.
	EncodedContent *string
}

func (g *GenerateExpressRoutePortsLOAResult) GetEncodedContent() (rv string) {
	if g != nil && g.EncodedContent != nil {
		return *g.EncodedContent
	}
	return
}

// GetInboundRoutesParameters - The parameters specifying the connection resource whose inbound routes are being requested.
type GetInboundRoutesParameters struct {
	// The type of the specified connection resource like ExpressRouteConnection, HubVirtualNetworkConnection, VpnConnection and
	// P2SConnection.
	ConnectionType *string

	// The connection resource whose inbound routes are being requested.
	ResourceURI *string
}

func (g *GetInboundRoutesParameters) GetConnectionType() (rv string) {
	if g != nil && g.ConnectionType != nil {
		return *g.ConnectionType
	}
	return
}

func (g *GetInboundRoutesParameters) GetResourceURI() (rv string) {
	if g != nil && g.ResourceURI != nil {
		return *g.ResourceURI
	}
	return
}

// GetOutboundRoutesParameters - The parameters specifying the connection resource whose outbound routes are being requested.
type GetOutboundRoutesParameters struct {
	// The type of the specified connection resource like ExpressRouteConnection, HubVirtualNetworkConnection, VpnConnection and
	// P2SConnection.
	ConnectionType *string

	// The connection resource whose outbound routes are being requested.
	ResourceURI *string
}

func (g *GetOutboundRoutesParameters) GetConnectionType() (rv string) {
	if g != nil && g.ConnectionType != nil {
		return *g.ConnectionType
	}
	return
}

func (g *GetOutboundRoutesParameters) GetResourceURI() (rv string) {
	if g != nil && g.ResourceURI != nil {
		return *g.ResourceURI
	}
	return
}

// GetVPNSitesConfigurationRequest - List of Vpn-Sites.
type GetVPNSitesConfigurationRequest struct {
	// REQUIRED; The sas-url to download the configurations for vpn-sites.
	OutputBlobSasURL *string

	// List of resource-ids of the vpn-sites for which config is to be downloaded.
	VPNSites []*string
}

func (g *GetVPNSitesConfigurationRequest) GetOutputBlobSasURL() (rv string) {
	if g != nil && g.OutputBlobSasURL != nil {
		return *g.OutputBlobSasURL
	}
	return
}

func (g *GetVPNSitesConfigurationRequest) GetVPNSites() (rv []*string) {
	if g != nil {
		return g.VPNSites
	}
	return
}

// Group - The network group resource
type Group struct {
	// The Network Group properties
	Properties *GroupProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource ID.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; The system metadata related to this resource.
	SystemData *SystemData

	// READ-ONLY; Resource type.
	Type *string
}

func (g *Group) GetProperties() (rv *GroupProperties) {
	if g != nil {
		return g.Properties
	}
	return
}

func (g *Group) GetEtag() (rv string) {
	if g != nil && g.Etag != nil {
		return *g.Etag
	}
	return
}

func (g *Group) GetID() (rv string) {
	if g != nil && g.ID != nil {
		return *g.ID
	}
	return
}

func (g *Group) GetName() (rv string) {
	if g != nil && g.Name != nil {
		return *g.Name
	}
	return
}

func (g *Group) GetSystemData() (rv *SystemData) {
	if g != nil {
		return g.SystemData
	}
	return
}

func (g *Group) GetType() (rv string) {
	if g != nil && g.Type != nil {
		return *g.Type
	}
	return
}

// GroupListResult - Result of the request to list NetworkGroup. It contains a list of groups and a URL link to get the next
// set of results.
type GroupListResult struct {
	// Gets the URL to get the next set of results.
	NextLink *string

	// Gets a page of NetworkGroup
	Value []*Group
}

func (g *GroupListResult) GetNextLink() (rv string) {
	if g != nil && g.NextLink != nil {
		return *g.NextLink
	}
	return
}

func (g *GroupListResult) GetValue() (rv []*Group) {
	if g != nil {
		return g.Value
	}
	return
}

// GroupProperties - Properties of network group
type GroupProperties struct {
	// A description of the network group.
	Description *string

	// READ-ONLY; The provisioning state of the scope assignment resource.
	ProvisioningState *ProvisioningState
}

func (g *GroupProperties) GetDescription() (rv string) {
	if g != nil && g.Description != nil {
		return *g.Description
	}
	return
}

func (g *GroupProperties) GetProvisioningState() (rv *ProvisioningState) {
	if g != nil {
		return g.ProvisioningState
	}
	return
}

// HTTPConfiguration - HTTP configuration of the connectivity check.
type HTTPConfiguration struct {
	// List of HTTP headers.
	Headers []*HTTPHeader

	// HTTP method.
	Method *HTTPMethod

	// Valid status codes.
	ValidStatusCodes []*int32
}

func (h *HTTPConfiguration) GetHeaders() (rv []*HTTPHeader) {
	if h != nil {
		return h.Headers
	}
	return
}

func (h *HTTPConfiguration) GetMethod() (rv *HTTPMethod) {
	if h != nil {
		return h.Method
	}
	return
}

func (h *HTTPConfiguration) GetValidStatusCodes() (rv []*int32) {
	if h != nil {
		return h.ValidStatusCodes
	}
	return
}

// HTTPHeader - The HTTP header.
type HTTPHeader struct {
	// The name in HTTP header.
	Name *string

	// The value in HTTP header.
	Value *string
}

func (h *HTTPHeader) GetName() (rv string) {
	if h != nil && h.Name != nil {
		return *h.Name
	}
	return
}

func (h *HTTPHeader) GetValue() (rv string) {
	if h != nil && h.Value != nil {
		return *h.Value
	}
	return
}

// HopLink - Hop link.
type HopLink struct {
	// Hop link properties.
	Properties *HopLinkProperties

	// READ-ONLY; Provides additional context on links.
	Context map[string]*string

	// READ-ONLY; List of issues.
	Issues []*ConnectivityIssue

	// READ-ONLY; Link type.
	LinkType *string

	// READ-ONLY; The ID of the next hop.
	NextHopID *string

	// READ-ONLY; Resource ID.
	ResourceID *string
}

func (h *HopLink) GetProperties() (rv *HopLinkProperties) {
	if h != nil {
		return h.Properties
	}
	return
}

func (h *HopLink) GetContext() (rv map[string]*string) {
	if h != nil {
		return h.Context
	}
	return
}

func (h *HopLink) GetIssues() (rv []*ConnectivityIssue) {
	if h != nil {
		return h.Issues
	}
	return
}

func (h *HopLink) GetLinkType() (rv string) {
	if h != nil && h.LinkType != nil {
		return *h.LinkType
	}
	return
}

func (h *HopLink) GetNextHopID() (rv string) {
	if h != nil && h.NextHopID != nil {
		return *h.NextHopID
	}
	return
}

func (h *HopLink) GetResourceID() (rv string) {
	if h != nil && h.ResourceID != nil {
		return *h.ResourceID
	}
	return
}

// HopLinkProperties - Hop link properties.
type HopLinkProperties struct {
	// READ-ONLY; Average roundtrip time in milliseconds.
	RoundTripTimeAvg *int64

	// READ-ONLY; Maximum roundtrip time in milliseconds.
	RoundTripTimeMax *int64

	// READ-ONLY; Minimum roundtrip time in milliseconds.
	RoundTripTimeMin *int64
}

func (h *HopLinkProperties) GetRoundTripTimeAvg() (rv int64) {
	if h != nil && h.RoundTripTimeAvg != nil {
		return *h.RoundTripTimeAvg
	}
	return
}

func (h *HopLinkProperties) GetRoundTripTimeMax() (rv int64) {
	if h != nil && h.RoundTripTimeMax != nil {
		return *h.RoundTripTimeMax
	}
	return
}

func (h *HopLinkProperties) GetRoundTripTimeMin() (rv int64) {
	if h != nil && h.RoundTripTimeMin != nil {
		return *h.RoundTripTimeMin
	}
	return
}

// Hub Item.
type Hub struct {
	// Resource Id.
	ResourceID *string

	// Resource Type.
	ResourceType *string
}

func (h *Hub) GetResourceID() (rv string) {
	if h != nil && h.ResourceID != nil {
		return *h.ResourceID
	}
	return
}

func (h *Hub) GetResourceType() (rv string) {
	if h != nil && h.ResourceType != nil {
		return *h.ResourceType
	}
	return
}

// HubIPAddresses - IP addresses associated with azure firewall.
type HubIPAddresses struct {
	// Private IP Address associated with azure firewall.
	PrivateIPAddress *string

	// Public IP addresses associated with azure firewall.
	PublicIPs *HubPublicIPAddresses
}

func (h *HubIPAddresses) GetPrivateIPAddress() (rv string) {
	if h != nil && h.PrivateIPAddress != nil {
		return *h.PrivateIPAddress
	}
	return
}

func (h *HubIPAddresses) GetPublicIPs() (rv *HubPublicIPAddresses) {
	if h != nil {
		return h.PublicIPs
	}
	return
}

// HubIPConfiguration - IpConfigurations.
type HubIPConfiguration struct {
	// Resource ID.
	ID *string

	// Name of the Ip Configuration.
	Name *string

	// The properties of the Virtual Hub IPConfigurations.
	Properties *HubIPConfigurationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Ipconfiguration type.
	Type *string
}

func (h *HubIPConfiguration) GetID() (rv string) {
	if h != nil && h.ID != nil {
		return *h.ID
	}
	return
}

func (h *HubIPConfiguration) GetName() (rv string) {
	if h != nil && h.Name != nil {
		return *h.Name
	}
	return
}

func (h *HubIPConfiguration) GetProperties() (rv *HubIPConfigurationPropertiesFormat) {
	if h != nil {
		return h.Properties
	}
	return
}

func (h *HubIPConfiguration) GetEtag() (rv string) {
	if h != nil && h.Etag != nil {
		return *h.Etag
	}
	return
}

func (h *HubIPConfiguration) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

// HubIPConfigurationPropertiesFormat - Properties of IP configuration.
type HubIPConfigurationPropertiesFormat struct {
	// The private IP address of the IP configuration.
	PrivateIPAddress *string

	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod

	// The reference to the public IP resource.
	PublicIPAddress *PublicIPAddress

	// The reference to the subnet resource.
	Subnet *Subnet

	// READ-ONLY; The provisioning state of the IP configuration resource.
	ProvisioningState *ProvisioningState
}

func (h *HubIPConfigurationPropertiesFormat) GetPrivateIPAddress() (rv string) {
	if h != nil && h.PrivateIPAddress != nil {
		return *h.PrivateIPAddress
	}
	return
}

func (h *HubIPConfigurationPropertiesFormat) GetPrivateIPAllocationMethod() (rv *IPAllocationMethod) {
	if h != nil {
		return h.PrivateIPAllocationMethod
	}
	return
}

func (h *HubIPConfigurationPropertiesFormat) GetPublicIPAddress() (rv *PublicIPAddress) {
	if h != nil {
		return h.PublicIPAddress
	}
	return
}

func (h *HubIPConfigurationPropertiesFormat) GetSubnet() (rv *Subnet) {
	if h != nil {
		return h.Subnet
	}
	return
}

func (h *HubIPConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if h != nil {
		return h.ProvisioningState
	}
	return
}

// HubPublicIPAddresses - Public IP addresses associated with azure firewall.
type HubPublicIPAddresses struct {
	// The list of Public IP addresses associated with azure firewall or IP addresses to be retained.
	Addresses []*AzureFirewallPublicIPAddress

	// The number of Public IP addresses associated with azure firewall.
	Count *int32
}

func (h *HubPublicIPAddresses) GetAddresses() (rv []*AzureFirewallPublicIPAddress) {
	if h != nil {
		return h.Addresses
	}
	return
}

func (h *HubPublicIPAddresses) GetCount() (rv int32) {
	if h != nil && h.Count != nil {
		return *h.Count
	}
	return
}

// HubRoute - RouteTable route.
type HubRoute struct {
	// REQUIRED; The type of destinations (eg: CIDR, ResourceId, Service).
	DestinationType *string

	// REQUIRED; List of all destinations.
	Destinations []*string

	// REQUIRED; The name of the Route that is unique within a RouteTable. This name can be used to access this route.
	Name *string

	// REQUIRED; NextHop resource ID.
	NextHop *string

	// REQUIRED; The type of next hop (eg: ResourceId).
	NextHopType *string
}

func (h *HubRoute) GetDestinationType() (rv string) {
	if h != nil && h.DestinationType != nil {
		return *h.DestinationType
	}
	return
}

func (h *HubRoute) GetDestinations() (rv []*string) {
	if h != nil {
		return h.Destinations
	}
	return
}

func (h *HubRoute) GetName() (rv string) {
	if h != nil && h.Name != nil {
		return *h.Name
	}
	return
}

func (h *HubRoute) GetNextHop() (rv string) {
	if h != nil && h.NextHop != nil {
		return *h.NextHop
	}
	return
}

func (h *HubRoute) GetNextHopType() (rv string) {
	if h != nil && h.NextHopType != nil {
		return *h.NextHopType
	}
	return
}

// HubRouteTable - RouteTable resource in a virtual hub.
type HubRouteTable struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the RouteTable resource.
	Properties *HubRouteTableProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource type.
	Type *string
}

func (h *HubRouteTable) GetID() (rv string) {
	if h != nil && h.ID != nil {
		return *h.ID
	}
	return
}

func (h *HubRouteTable) GetName() (rv string) {
	if h != nil && h.Name != nil {
		return *h.Name
	}
	return
}

func (h *HubRouteTable) GetProperties() (rv *HubRouteTableProperties) {
	if h != nil {
		return h.Properties
	}
	return
}

func (h *HubRouteTable) GetEtag() (rv string) {
	if h != nil && h.Etag != nil {
		return *h.Etag
	}
	return
}

func (h *HubRouteTable) GetType() (rv string) {
	if h != nil && h.Type != nil {
		return *h.Type
	}
	return
}

// HubRouteTableProperties - Parameters for RouteTable.
type HubRouteTableProperties struct {
	// List of labels associated with this route table.
	Labels []*string

	// List of all routes.
	Routes []*HubRoute

	// READ-ONLY; List of all connections associated with this route table.
	AssociatedConnections []*string

	// READ-ONLY; List of all connections that advertise to this route table.
	PropagatingConnections []*string

	// READ-ONLY; The provisioning state of the RouteTable resource.
	ProvisioningState *ProvisioningState
}

func (h *HubRouteTableProperties) GetLabels() (rv []*string) {
	if h != nil {
		return h.Labels
	}
	return
}

func (h *HubRouteTableProperties) GetRoutes() (rv []*HubRoute) {
	if h != nil {
		return h.Routes
	}
	return
}

func (h *HubRouteTableProperties) GetAssociatedConnections() (rv []*string) {
	if h != nil {
		return h.AssociatedConnections
	}
	return
}

func (h *HubRouteTableProperties) GetPropagatingConnections() (rv []*string) {
	if h != nil {
		return h.PropagatingConnections
	}
	return
}

func (h *HubRouteTableProperties) GetProvisioningState() (rv *ProvisioningState) {
	if h != nil {
		return h.ProvisioningState
	}
	return
}

// HubVirtualNetworkConnection Resource.
type HubVirtualNetworkConnection struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the hub virtual network connection.
	Properties *HubVirtualNetworkConnectionProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (h *HubVirtualNetworkConnection) GetID() (rv string) {
	if h != nil && h.ID != nil {
		return *h.ID
	}
	return
}

func (h *HubVirtualNetworkConnection) GetName() (rv string) {
	if h != nil && h.Name != nil {
		return *h.Name
	}
	return
}

func (h *HubVirtualNetworkConnection) GetProperties() (rv *HubVirtualNetworkConnectionProperties) {
	if h != nil {
		return h.Properties
	}
	return
}

func (h *HubVirtualNetworkConnection) GetEtag() (rv string) {
	if h != nil && h.Etag != nil {
		return *h.Etag
	}
	return
}

// HubVirtualNetworkConnectionProperties - Parameters for HubVirtualNetworkConnection.
type HubVirtualNetworkConnectionProperties struct {
	// Deprecated: VirtualHub to RemoteVnet transit to enabled or not.
	AllowHubToRemoteVnetTransit *bool

	// Deprecated: Allow RemoteVnet to use Virtual Hub's gateways.
	AllowRemoteVnetToUseHubVnetGateways *bool

	// Enable internet security.
	EnableInternetSecurity *bool

	// Reference to the remote virtual network.
	RemoteVirtualNetwork *SubResource

	// The Routing Configuration indicating the associated and propagated route tables on this connection.
	RoutingConfiguration *RoutingConfiguration

	// READ-ONLY; The provisioning state of the hub virtual network connection resource.
	ProvisioningState *ProvisioningState
}

func (h *HubVirtualNetworkConnectionProperties) GetAllowHubToRemoteVnetTransit() (rv bool) {
	if h != nil && h.AllowHubToRemoteVnetTransit != nil {
		return *h.AllowHubToRemoteVnetTransit
	}
	return
}

func (h *HubVirtualNetworkConnectionProperties) GetAllowRemoteVnetToUseHubVnetGateways() (rv bool) {
	if h != nil && h.AllowRemoteVnetToUseHubVnetGateways != nil {
		return *h.AllowRemoteVnetToUseHubVnetGateways
	}
	return
}

func (h *HubVirtualNetworkConnectionProperties) GetEnableInternetSecurity() (rv bool) {
	if h != nil && h.EnableInternetSecurity != nil {
		return *h.EnableInternetSecurity
	}
	return
}

func (h *HubVirtualNetworkConnectionProperties) GetRemoteVirtualNetwork() (rv *SubResource) {
	if h != nil {
		return h.RemoteVirtualNetwork
	}
	return
}

func (h *HubVirtualNetworkConnectionProperties) GetRoutingConfiguration() (rv *RoutingConfiguration) {
	if h != nil {
		return h.RoutingConfiguration
	}
	return
}

func (h *HubVirtualNetworkConnectionProperties) GetProvisioningState() (rv *ProvisioningState) {
	if h != nil {
		return h.ProvisioningState
	}
	return
}

// IDPSQueryObject - Will describe the query to run against the IDPS signatures DB
type IDPSQueryObject struct {
	// Contain all filters names and values
	Filters []*FilterItems

	// Column to sort response by
	OrderBy *OrderBy

	// The number of the results to return in each page
	ResultsPerPage *int32

	// Search term in all columns
	Search *string

	// The number of records matching the filter to skip
	Skip *int32
}

func (i *IDPSQueryObject) GetFilters() (rv []*FilterItems) {
	if i != nil {
		return i.Filters
	}
	return
}

func (i *IDPSQueryObject) GetOrderBy() (rv *OrderBy) {
	if i != nil {
		return i.OrderBy
	}
	return
}

func (i *IDPSQueryObject) GetResultsPerPage() (rv int32) {
	if i != nil && i.ResultsPerPage != nil {
		return *i.ResultsPerPage
	}
	return
}

func (i *IDPSQueryObject) GetSearch() (rv string) {
	if i != nil && i.Search != nil {
		return *i.Search
	}
	return
}

func (i *IDPSQueryObject) GetSkip() (rv int32) {
	if i != nil && i.Skip != nil {
		return *i.Skip
	}
	return
}

// IPAddressAvailabilityResult - Response for CheckIPAddressAvailability API service call.
type IPAddressAvailabilityResult struct {
	// Private IP address availability.
	Available *bool

	// Contains other available private IP addresses if the asked for address is taken.
	AvailableIPAddresses []*string

	// Private IP address platform reserved.
	IsPlatformReserved *bool
}

func (i *IPAddressAvailabilityResult) GetAvailable() (rv bool) {
	if i != nil && i.Available != nil {
		return *i.Available
	}
	return
}

func (i *IPAddressAvailabilityResult) GetAvailableIPAddresses() (rv []*string) {
	if i != nil {
		return i.AvailableIPAddresses
	}
	return
}

func (i *IPAddressAvailabilityResult) GetIsPlatformReserved() (rv bool) {
	if i != nil && i.IsPlatformReserved != nil {
		return *i.IsPlatformReserved
	}
	return
}

// IPAllocation - IpAllocation resource.
type IPAllocation struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the IpAllocation.
	Properties *IPAllocationPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (i *IPAllocation) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *IPAllocation) GetLocation() (rv string) {
	if i != nil && i.Location != nil {
		return *i.Location
	}
	return
}

func (i *IPAllocation) GetProperties() (rv *IPAllocationPropertiesFormat) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *IPAllocation) GetTags() (rv map[string]*string) {
	if i != nil {
		return i.Tags
	}
	return
}

func (i *IPAllocation) GetEtag() (rv string) {
	if i != nil && i.Etag != nil {
		return *i.Etag
	}
	return
}

func (i *IPAllocation) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *IPAllocation) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

// IPAllocationListResult - Response for the ListIpAllocations API service call.
type IPAllocationListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of IpAllocation resources.
	Value []*IPAllocation
}

func (i *IPAllocationListResult) GetNextLink() (rv string) {
	if i != nil && i.NextLink != nil {
		return *i.NextLink
	}
	return
}

func (i *IPAllocationListResult) GetValue() (rv []*IPAllocation) {
	if i != nil {
		return i.Value
	}
	return
}

// IPAllocationPropertiesFormat - Properties of the IpAllocation.
type IPAllocationPropertiesFormat struct {
	// IpAllocation tags.
	AllocationTags map[string]*string

	// The IPAM allocation ID.
	IpamAllocationID *string

	// The address prefix for the IpAllocation.
	Prefix *string

	// The address prefix length for the IpAllocation.
	PrefixLength *int32

	// The address prefix Type for the IpAllocation.
	PrefixType *IPVersion

	// The type for the IpAllocation.
	Type *IPAllocationType

	// READ-ONLY; The Subnet that using the prefix of this IpAllocation resource.
	Subnet *SubResource

	// READ-ONLY; The VirtualNetwork that using the prefix of this IpAllocation resource.
	VirtualNetwork *SubResource
}

func (i *IPAllocationPropertiesFormat) GetAllocationTags() (rv map[string]*string) {
	if i != nil {
		return i.AllocationTags
	}
	return
}

func (i *IPAllocationPropertiesFormat) GetIpamAllocationID() (rv string) {
	if i != nil && i.IpamAllocationID != nil {
		return *i.IpamAllocationID
	}
	return
}

func (i *IPAllocationPropertiesFormat) GetPrefix() (rv string) {
	if i != nil && i.Prefix != nil {
		return *i.Prefix
	}
	return
}

func (i *IPAllocationPropertiesFormat) GetPrefixLength() (rv int32) {
	if i != nil && i.PrefixLength != nil {
		return *i.PrefixLength
	}
	return
}

func (i *IPAllocationPropertiesFormat) GetPrefixType() (rv *IPVersion) {
	if i != nil {
		return i.PrefixType
	}
	return
}

func (i *IPAllocationPropertiesFormat) GetType() (rv *IPAllocationType) {
	if i != nil {
		return i.Type
	}
	return
}

func (i *IPAllocationPropertiesFormat) GetSubnet() (rv *SubResource) {
	if i != nil {
		return i.Subnet
	}
	return
}

func (i *IPAllocationPropertiesFormat) GetVirtualNetwork() (rv *SubResource) {
	if i != nil {
		return i.VirtualNetwork
	}
	return
}

// IPConfiguration - IP configuration.
type IPConfiguration struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the IP configuration.
	Properties *IPConfigurationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (i *IPConfiguration) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *IPConfiguration) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *IPConfiguration) GetProperties() (rv *IPConfigurationPropertiesFormat) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *IPConfiguration) GetEtag() (rv string) {
	if i != nil && i.Etag != nil {
		return *i.Etag
	}
	return
}

// IPConfigurationBgpPeeringAddress - Properties of IPConfigurationBgpPeeringAddress.
type IPConfigurationBgpPeeringAddress struct {
	// The list of custom BGP peering addresses which belong to IP configuration.
	CustomBgpIPAddresses []*string

	// The ID of IP configuration which belongs to gateway.
	IPConfigurationID *string

	// READ-ONLY; The list of default BGP peering addresses which belong to IP configuration.
	DefaultBgpIPAddresses []*string

	// READ-ONLY; The list of tunnel public IP addresses which belong to IP configuration.
	TunnelIPAddresses []*string
}

func (i *IPConfigurationBgpPeeringAddress) GetCustomBgpIPAddresses() (rv []*string) {
	if i != nil {
		return i.CustomBgpIPAddresses
	}
	return
}

func (i *IPConfigurationBgpPeeringAddress) GetIPConfigurationID() (rv string) {
	if i != nil && i.IPConfigurationID != nil {
		return *i.IPConfigurationID
	}
	return
}

func (i *IPConfigurationBgpPeeringAddress) GetDefaultBgpIPAddresses() (rv []*string) {
	if i != nil {
		return i.DefaultBgpIPAddresses
	}
	return
}

func (i *IPConfigurationBgpPeeringAddress) GetTunnelIPAddresses() (rv []*string) {
	if i != nil {
		return i.TunnelIPAddresses
	}
	return
}

// IPConfigurationProfile - IP configuration profile child resource.
type IPConfigurationProfile struct {
	// Resource ID.
	ID *string

	// The name of the resource. This name can be used to access the resource.
	Name *string

	// Properties of the IP configuration profile.
	Properties *IPConfigurationProfilePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Sub Resource type.
	Type *string
}

func (i *IPConfigurationProfile) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *IPConfigurationProfile) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *IPConfigurationProfile) GetProperties() (rv *IPConfigurationProfilePropertiesFormat) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *IPConfigurationProfile) GetEtag() (rv string) {
	if i != nil && i.Etag != nil {
		return *i.Etag
	}
	return
}

func (i *IPConfigurationProfile) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

// IPConfigurationProfilePropertiesFormat - IP configuration profile properties.
type IPConfigurationProfilePropertiesFormat struct {
	// The reference to the subnet resource to create a container network interface ip configuration.
	Subnet *Subnet

	// READ-ONLY; The provisioning state of the IP configuration profile resource.
	ProvisioningState *ProvisioningState
}

func (i *IPConfigurationProfilePropertiesFormat) GetSubnet() (rv *Subnet) {
	if i != nil {
		return i.Subnet
	}
	return
}

func (i *IPConfigurationProfilePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if i != nil {
		return i.ProvisioningState
	}
	return
}

// IPConfigurationPropertiesFormat - Properties of IP configuration.
type IPConfigurationPropertiesFormat struct {
	// The private IP address of the IP configuration.
	PrivateIPAddress *string

	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod

	// The reference to the public IP resource.
	PublicIPAddress *PublicIPAddress

	// The reference to the subnet resource.
	Subnet *Subnet

	// READ-ONLY; The provisioning state of the IP configuration resource.
	ProvisioningState *ProvisioningState
}

func (i *IPConfigurationPropertiesFormat) GetPrivateIPAddress() (rv string) {
	if i != nil && i.PrivateIPAddress != nil {
		return *i.PrivateIPAddress
	}
	return
}

func (i *IPConfigurationPropertiesFormat) GetPrivateIPAllocationMethod() (rv *IPAllocationMethod) {
	if i != nil {
		return i.PrivateIPAllocationMethod
	}
	return
}

func (i *IPConfigurationPropertiesFormat) GetPublicIPAddress() (rv *PublicIPAddress) {
	if i != nil {
		return i.PublicIPAddress
	}
	return
}

func (i *IPConfigurationPropertiesFormat) GetSubnet() (rv *Subnet) {
	if i != nil {
		return i.Subnet
	}
	return
}

func (i *IPConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if i != nil {
		return i.ProvisioningState
	}
	return
}

// IPGroup - The IpGroups resource information.
type IPGroup struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the IpGroups.
	Properties *IPGroupPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (i *IPGroup) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *IPGroup) GetLocation() (rv string) {
	if i != nil && i.Location != nil {
		return *i.Location
	}
	return
}

func (i *IPGroup) GetProperties() (rv *IPGroupPropertiesFormat) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *IPGroup) GetTags() (rv map[string]*string) {
	if i != nil {
		return i.Tags
	}
	return
}

func (i *IPGroup) GetEtag() (rv string) {
	if i != nil && i.Etag != nil {
		return *i.Etag
	}
	return
}

func (i *IPGroup) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *IPGroup) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

// IPGroupListResult - Response for the ListIpGroups API service call.
type IPGroupListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// The list of IpGroups information resources.
	Value []*IPGroup
}

func (i *IPGroupListResult) GetNextLink() (rv string) {
	if i != nil && i.NextLink != nil {
		return *i.NextLink
	}
	return
}

func (i *IPGroupListResult) GetValue() (rv []*IPGroup) {
	if i != nil {
		return i.Value
	}
	return
}

// IPGroupPropertiesFormat - The IpGroups property information.
type IPGroupPropertiesFormat struct {
	// IpAddresses/IpAddressPrefixes in the IpGroups resource.
	IPAddresses []*string

	// READ-ONLY; List of references to Firewall Policies resources that this IpGroups is associated with.
	FirewallPolicies []*SubResource

	// READ-ONLY; List of references to Firewall resources that this IpGroups is associated with.
	Firewalls []*SubResource

	// READ-ONLY; The provisioning state of the IpGroups resource.
	ProvisioningState *ProvisioningState
}

func (i *IPGroupPropertiesFormat) GetIPAddresses() (rv []*string) {
	if i != nil {
		return i.IPAddresses
	}
	return
}

func (i *IPGroupPropertiesFormat) GetFirewallPolicies() (rv []*SubResource) {
	if i != nil {
		return i.FirewallPolicies
	}
	return
}

func (i *IPGroupPropertiesFormat) GetFirewalls() (rv []*SubResource) {
	if i != nil {
		return i.Firewalls
	}
	return
}

func (i *IPGroupPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if i != nil {
		return i.ProvisioningState
	}
	return
}

// IPPrefixesList - List of SNAT IP Prefixes learnt by firewall to not SNAT
type IPPrefixesList struct {
	// IP Prefix value.
	IPPrefixes []*string
}

func (i *IPPrefixesList) GetIPPrefixes() (rv []*string) {
	if i != nil {
		return i.IPPrefixes
	}
	return
}

// IPSecPolicy - An IPSec Policy configuration for a virtual network gateway connection.
type IPSecPolicy struct {
	// REQUIRED; The DH Group used in IKE Phase 1 for initial SA.
	DhGroup *DhGroup

	// REQUIRED; The IPSec encryption algorithm (IKE phase 1).
	IPSecEncryption *IPSecEncryption

	// REQUIRED; The IPSec integrity algorithm (IKE phase 1).
	IPSecIntegrity *IPSecIntegrity

	// REQUIRED; The IKE encryption algorithm (IKE phase 2).
	IkeEncryption *IkeEncryption

	// REQUIRED; The IKE integrity algorithm (IKE phase 2).
	IkeIntegrity *IkeIntegrity

	// REQUIRED; The Pfs Group used in IKE Phase 2 for new child SA.
	PfsGroup *PfsGroup

	// REQUIRED; The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN
	// tunnel.
	SaDataSizeKilobytes *int32

	// REQUIRED; The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site
	// VPN tunnel.
	SaLifeTimeSeconds *int32
}

func (i *IPSecPolicy) GetDhGroup() (rv *DhGroup) {
	if i != nil {
		return i.DhGroup
	}
	return
}

func (i *IPSecPolicy) GetIPSecEncryption() (rv *IPSecEncryption) {
	if i != nil {
		return i.IPSecEncryption
	}
	return
}

func (i *IPSecPolicy) GetIPSecIntegrity() (rv *IPSecIntegrity) {
	if i != nil {
		return i.IPSecIntegrity
	}
	return
}

func (i *IPSecPolicy) GetIkeEncryption() (rv *IkeEncryption) {
	if i != nil {
		return i.IkeEncryption
	}
	return
}

func (i *IPSecPolicy) GetIkeIntegrity() (rv *IkeIntegrity) {
	if i != nil {
		return i.IkeIntegrity
	}
	return
}

func (i *IPSecPolicy) GetPfsGroup() (rv *PfsGroup) {
	if i != nil {
		return i.PfsGroup
	}
	return
}

func (i *IPSecPolicy) GetSaDataSizeKilobytes() (rv int32) {
	if i != nil && i.SaDataSizeKilobytes != nil {
		return *i.SaDataSizeKilobytes
	}
	return
}

func (i *IPSecPolicy) GetSaLifeTimeSeconds() (rv int32) {
	if i != nil && i.SaLifeTimeSeconds != nil {
		return *i.SaLifeTimeSeconds
	}
	return
}

// IPTag - Contains the IpTag associated with the object.
type IPTag struct {
	// The IP tag type. Example: FirstPartyUsage.
	IPTagType *string

	// The value of the IP tag associated with the public IP. Example: SQL.
	Tag *string
}

func (i *IPTag) GetIPTagType() (rv string) {
	if i != nil && i.IPTagType != nil {
		return *i.IPTagType
	}
	return
}

func (i *IPTag) GetTag() (rv string) {
	if i != nil && i.Tag != nil {
		return *i.Tag
	}
	return
}

// IPv6CircuitConnectionConfig - IPv6 Circuit Connection properties for global reach.
type IPv6CircuitConnectionConfig struct {
	// /125 IP address space to carve out customer addresses for global reach.
	AddressPrefix *string

	// READ-ONLY; Express Route Circuit connection state.
	CircuitConnectionStatus *CircuitConnectionStatus
}

func (i *IPv6CircuitConnectionConfig) GetAddressPrefix() (rv string) {
	if i != nil && i.AddressPrefix != nil {
		return *i.AddressPrefix
	}
	return
}

func (i *IPv6CircuitConnectionConfig) GetCircuitConnectionStatus() (rv *CircuitConnectionStatus) {
	if i != nil {
		return i.CircuitConnectionStatus
	}
	return
}

// IPv6ExpressRouteCircuitPeeringConfig - Contains IPv6 peering config.
type IPv6ExpressRouteCircuitPeeringConfig struct {
	// The Microsoft peering configuration.
	MicrosoftPeeringConfig *ExpressRouteCircuitPeeringConfig

	// The primary address prefix.
	PrimaryPeerAddressPrefix *string

	// The reference to the RouteFilter resource.
	RouteFilter *SubResource

	// The secondary address prefix.
	SecondaryPeerAddressPrefix *string

	// The state of peering.
	State *ExpressRouteCircuitPeeringState
}

func (i *IPv6ExpressRouteCircuitPeeringConfig) GetMicrosoftPeeringConfig() (rv *ExpressRouteCircuitPeeringConfig) {
	if i != nil {
		return i.MicrosoftPeeringConfig
	}
	return
}

func (i *IPv6ExpressRouteCircuitPeeringConfig) GetPrimaryPeerAddressPrefix() (rv string) {
	if i != nil && i.PrimaryPeerAddressPrefix != nil {
		return *i.PrimaryPeerAddressPrefix
	}
	return
}

func (i *IPv6ExpressRouteCircuitPeeringConfig) GetRouteFilter() (rv *SubResource) {
	if i != nil {
		return i.RouteFilter
	}
	return
}

func (i *IPv6ExpressRouteCircuitPeeringConfig) GetSecondaryPeerAddressPrefix() (rv string) {
	if i != nil && i.SecondaryPeerAddressPrefix != nil {
		return *i.SecondaryPeerAddressPrefix
	}
	return
}

func (i *IPv6ExpressRouteCircuitPeeringConfig) GetState() (rv *ExpressRouteCircuitPeeringState) {
	if i != nil {
		return i.State
	}
	return
}

// InboundNatPool - Inbound NAT pool of the load balancer.
type InboundNatPool struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within the set of inbound NAT pools used by the load balancer. This name can be
	// used to access the resource.
	Name *string

	// Properties of load balancer inbound nat pool.
	Properties *InboundNatPoolPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (i *InboundNatPool) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *InboundNatPool) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *InboundNatPool) GetProperties() (rv *InboundNatPoolPropertiesFormat) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *InboundNatPool) GetEtag() (rv string) {
	if i != nil && i.Etag != nil {
		return *i.Etag
	}
	return
}

func (i *InboundNatPool) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

// InboundNatPoolPropertiesFormat - Properties of Inbound NAT pool.
type InboundNatPoolPropertiesFormat struct {
	// REQUIRED; The port used for internal connections on the endpoint. Acceptable values are between 1 and 65535.
	BackendPort *int32

	// REQUIRED; The last port number in the range of external ports that will be used to provide Inbound Nat to NICs associated
	// with a load balancer. Acceptable values range between 1 and 65535.
	FrontendPortRangeEnd *int32

	// REQUIRED; The first port number in the range of external ports that will be used to provide Inbound Nat to NICs associated
	// with a load balancer. Acceptable values range between 1 and 65534.
	FrontendPortRangeStart *int32

	// REQUIRED; The reference to the transport protocol used by the inbound NAT pool.
	Protocol *TransportProtocol

	// Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability
	// Group. This setting is required when using the SQL AlwaysOn Availability Groups
	// in SQL server. This setting can't be changed after you create the endpoint.
	EnableFloatingIP *bool

	// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used
	// when the protocol is set to TCP.
	EnableTCPReset *bool

	// A reference to frontend IP addresses.
	FrontendIPConfiguration *SubResource

	// The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes.
	// This element is only used when the protocol is set to TCP.
	IdleTimeoutInMinutes *int32

	// READ-ONLY; The provisioning state of the inbound NAT pool resource.
	ProvisioningState *ProvisioningState
}

func (i *InboundNatPoolPropertiesFormat) GetBackendPort() (rv int32) {
	if i != nil && i.BackendPort != nil {
		return *i.BackendPort
	}
	return
}

func (i *InboundNatPoolPropertiesFormat) GetFrontendPortRangeEnd() (rv int32) {
	if i != nil && i.FrontendPortRangeEnd != nil {
		return *i.FrontendPortRangeEnd
	}
	return
}

func (i *InboundNatPoolPropertiesFormat) GetFrontendPortRangeStart() (rv int32) {
	if i != nil && i.FrontendPortRangeStart != nil {
		return *i.FrontendPortRangeStart
	}
	return
}

func (i *InboundNatPoolPropertiesFormat) GetProtocol() (rv *TransportProtocol) {
	if i != nil {
		return i.Protocol
	}
	return
}

func (i *InboundNatPoolPropertiesFormat) GetEnableFloatingIP() (rv bool) {
	if i != nil && i.EnableFloatingIP != nil {
		return *i.EnableFloatingIP
	}
	return
}

func (i *InboundNatPoolPropertiesFormat) GetEnableTCPReset() (rv bool) {
	if i != nil && i.EnableTCPReset != nil {
		return *i.EnableTCPReset
	}
	return
}

func (i *InboundNatPoolPropertiesFormat) GetFrontendIPConfiguration() (rv *SubResource) {
	if i != nil {
		return i.FrontendIPConfiguration
	}
	return
}

func (i *InboundNatPoolPropertiesFormat) GetIdleTimeoutInMinutes() (rv int32) {
	if i != nil && i.IdleTimeoutInMinutes != nil {
		return *i.IdleTimeoutInMinutes
	}
	return
}

func (i *InboundNatPoolPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if i != nil {
		return i.ProvisioningState
	}
	return
}

// InboundNatRule - Inbound NAT rule of the load balancer.
type InboundNatRule struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within the set of inbound NAT rules used by the load balancer. This name can be
	// used to access the resource.
	Name *string

	// Properties of load balancer inbound NAT rule.
	Properties *InboundNatRulePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (i *InboundNatRule) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *InboundNatRule) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *InboundNatRule) GetProperties() (rv *InboundNatRulePropertiesFormat) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *InboundNatRule) GetEtag() (rv string) {
	if i != nil && i.Etag != nil {
		return *i.Etag
	}
	return
}

func (i *InboundNatRule) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

// InboundNatRuleListResult - Response for ListInboundNatRule API service call.
type InboundNatRuleListResult struct {
	// A list of inbound NAT rules in a load balancer.
	Value []*InboundNatRule

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (i *InboundNatRuleListResult) GetValue() (rv []*InboundNatRule) {
	if i != nil {
		return i.Value
	}
	return
}

func (i *InboundNatRuleListResult) GetNextLink() (rv string) {
	if i != nil && i.NextLink != nil {
		return *i.NextLink
	}
	return
}

// InboundNatRulePortMapping - Individual port mappings for inbound NAT rule created for backend pool.
type InboundNatRulePortMapping struct {
	// READ-ONLY; Backend port.
	BackendPort *int32

	// READ-ONLY; Frontend port.
	FrontendPort *int32

	// READ-ONLY; Name of inbound NAT rule.
	InboundNatRuleName *string

	// READ-ONLY; The reference to the transport protocol used by the inbound NAT rule.
	Protocol *TransportProtocol
}

func (i *InboundNatRulePortMapping) GetBackendPort() (rv int32) {
	if i != nil && i.BackendPort != nil {
		return *i.BackendPort
	}
	return
}

func (i *InboundNatRulePortMapping) GetFrontendPort() (rv int32) {
	if i != nil && i.FrontendPort != nil {
		return *i.FrontendPort
	}
	return
}

func (i *InboundNatRulePortMapping) GetInboundNatRuleName() (rv string) {
	if i != nil && i.InboundNatRuleName != nil {
		return *i.InboundNatRuleName
	}
	return
}

func (i *InboundNatRulePortMapping) GetProtocol() (rv *TransportProtocol) {
	if i != nil {
		return i.Protocol
	}
	return
}

// InboundNatRulePropertiesFormat - Properties of the inbound NAT rule.
type InboundNatRulePropertiesFormat struct {
	// A reference to backendAddressPool resource.
	BackendAddressPool *SubResource

	// The port used for the internal endpoint. Acceptable values range from 1 to 65535.
	BackendPort *int32

	// Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability
	// Group. This setting is required when using the SQL AlwaysOn Availability Groups
	// in SQL server. This setting can't be changed after you create the endpoint.
	EnableFloatingIP *bool

	// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used
	// when the protocol is set to TCP.
	EnableTCPReset *bool

	// A reference to frontend IP addresses.
	FrontendIPConfiguration *SubResource

	// The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable values
	// range from 1 to 65534.
	FrontendPort *int32

	// The port range end for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeStart.
	// Individual inbound NAT rule port mappings will be created for each
	// backend address from BackendAddressPool. Acceptable values range from 1 to 65534.
	FrontendPortRangeEnd *int32

	// The port range start for the external endpoint. This property is used together with BackendAddressPool and FrontendPortRangeEnd.
	// Individual inbound NAT rule port mappings will be created for each
	// backend address from BackendAddressPool. Acceptable values range from 1 to 65534.
	FrontendPortRangeStart *int32

	// The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes.
	// This element is only used when the protocol is set to TCP.
	IdleTimeoutInMinutes *int32

	// The reference to the transport protocol used by the load balancing rule.
	Protocol *TransportProtocol

	// READ-ONLY; A reference to a private IP address defined on a network interface of a VM. Traffic sent to the frontend port
	// of each of the frontend IP configurations is forwarded to the backend IP.
	BackendIPConfiguration *InterfaceIPConfiguration

	// READ-ONLY; The provisioning state of the inbound NAT rule resource.
	ProvisioningState *ProvisioningState
}

func (i *InboundNatRulePropertiesFormat) GetBackendAddressPool() (rv *SubResource) {
	if i != nil {
		return i.BackendAddressPool
	}
	return
}

func (i *InboundNatRulePropertiesFormat) GetBackendPort() (rv int32) {
	if i != nil && i.BackendPort != nil {
		return *i.BackendPort
	}
	return
}

func (i *InboundNatRulePropertiesFormat) GetEnableFloatingIP() (rv bool) {
	if i != nil && i.EnableFloatingIP != nil {
		return *i.EnableFloatingIP
	}
	return
}

func (i *InboundNatRulePropertiesFormat) GetEnableTCPReset() (rv bool) {
	if i != nil && i.EnableTCPReset != nil {
		return *i.EnableTCPReset
	}
	return
}

func (i *InboundNatRulePropertiesFormat) GetFrontendIPConfiguration() (rv *SubResource) {
	if i != nil {
		return i.FrontendIPConfiguration
	}
	return
}

func (i *InboundNatRulePropertiesFormat) GetFrontendPort() (rv int32) {
	if i != nil && i.FrontendPort != nil {
		return *i.FrontendPort
	}
	return
}

func (i *InboundNatRulePropertiesFormat) GetFrontendPortRangeEnd() (rv int32) {
	if i != nil && i.FrontendPortRangeEnd != nil {
		return *i.FrontendPortRangeEnd
	}
	return
}

func (i *InboundNatRulePropertiesFormat) GetFrontendPortRangeStart() (rv int32) {
	if i != nil && i.FrontendPortRangeStart != nil {
		return *i.FrontendPortRangeStart
	}
	return
}

func (i *InboundNatRulePropertiesFormat) GetIdleTimeoutInMinutes() (rv int32) {
	if i != nil && i.IdleTimeoutInMinutes != nil {
		return *i.IdleTimeoutInMinutes
	}
	return
}

func (i *InboundNatRulePropertiesFormat) GetProtocol() (rv *TransportProtocol) {
	if i != nil {
		return i.Protocol
	}
	return
}

func (i *InboundNatRulePropertiesFormat) GetBackendIPConfiguration() (rv *InterfaceIPConfiguration) {
	if i != nil {
		return i.BackendIPConfiguration
	}
	return
}

func (i *InboundNatRulePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if i != nil {
		return i.ProvisioningState
	}
	return
}

// InboundSecurityRule - NVA Inbound Security Rule resource.
type InboundSecurityRule struct {
	// Resource ID.
	ID *string

	// Name of security rule collection.
	Name *string

	// The properties of the Inbound Security Rules.
	Properties *InboundSecurityRuleProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; NVA inbound security rule type.
	Type *string
}

func (i *InboundSecurityRule) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *InboundSecurityRule) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *InboundSecurityRule) GetProperties() (rv *InboundSecurityRuleProperties) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *InboundSecurityRule) GetEtag() (rv string) {
	if i != nil && i.Etag != nil {
		return *i.Etag
	}
	return
}

func (i *InboundSecurityRule) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

// InboundSecurityRuleProperties - Properties of the Inbound Security Rules resource.
type InboundSecurityRuleProperties struct {
	// List of allowed rules.
	Rules []*InboundSecurityRules

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

func (i *InboundSecurityRuleProperties) GetRules() (rv []*InboundSecurityRules) {
	if i != nil {
		return i.Rules
	}
	return
}

func (i *InboundSecurityRuleProperties) GetProvisioningState() (rv *ProvisioningState) {
	if i != nil {
		return i.ProvisioningState
	}
	return
}

// InboundSecurityRules - Properties of the Inbound Security Rules resource.
type InboundSecurityRules struct {
	// NVA port ranges to be opened up. One needs to provide specific ports.
	DestinationPortRange *int32

	// Protocol. This should be either TCP or UDP.
	Protocol *InboundSecurityRulesProtocol

	// The CIDR or source IP range. Only /30, /31 and /32 Ip ranges are allowed.
	SourceAddressPrefix *string
}

func (i *InboundSecurityRules) GetDestinationPortRange() (rv int32) {
	if i != nil && i.DestinationPortRange != nil {
		return *i.DestinationPortRange
	}
	return
}

func (i *InboundSecurityRules) GetProtocol() (rv *InboundSecurityRulesProtocol) {
	if i != nil {
		return i.Protocol
	}
	return
}

func (i *InboundSecurityRules) GetSourceAddressPrefix() (rv string) {
	if i != nil && i.SourceAddressPrefix != nil {
		return *i.SourceAddressPrefix
	}
	return
}

// IntentPolicy - Network Intent Policy resource.
type IntentPolicy struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (i *IntentPolicy) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *IntentPolicy) GetLocation() (rv string) {
	if i != nil && i.Location != nil {
		return *i.Location
	}
	return
}

func (i *IntentPolicy) GetTags() (rv map[string]*string) {
	if i != nil {
		return i.Tags
	}
	return
}

func (i *IntentPolicy) GetEtag() (rv string) {
	if i != nil && i.Etag != nil {
		return *i.Etag
	}
	return
}

func (i *IntentPolicy) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *IntentPolicy) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

// IntentPolicyConfiguration - Details of NetworkIntentPolicyConfiguration for PrepareNetworkPoliciesRequest.
type IntentPolicyConfiguration struct {
	// The name of the Network Intent Policy for storing in target subscription.
	NetworkIntentPolicyName *string

	// Source network intent policy.
	SourceNetworkIntentPolicy *IntentPolicy
}

func (i *IntentPolicyConfiguration) GetNetworkIntentPolicyName() (rv string) {
	if i != nil && i.NetworkIntentPolicyName != nil {
		return *i.NetworkIntentPolicyName
	}
	return
}

func (i *IntentPolicyConfiguration) GetSourceNetworkIntentPolicy() (rv *IntentPolicy) {
	if i != nil {
		return i.SourceNetworkIntentPolicy
	}
	return
}

// Interface - A network interface in a resource group.
type Interface struct {
	// The extended location of the network interface.
	ExtendedLocation *ExtendedLocation

	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the network interface.
	Properties *InterfacePropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (i *Interface) GetExtendedLocation() (rv *ExtendedLocation) {
	if i != nil {
		return i.ExtendedLocation
	}
	return
}

func (i *Interface) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *Interface) GetLocation() (rv string) {
	if i != nil && i.Location != nil {
		return *i.Location
	}
	return
}

func (i *Interface) GetProperties() (rv *InterfacePropertiesFormat) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *Interface) GetTags() (rv map[string]*string) {
	if i != nil {
		return i.Tags
	}
	return
}

func (i *Interface) GetEtag() (rv string) {
	if i != nil && i.Etag != nil {
		return *i.Etag
	}
	return
}

func (i *Interface) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *Interface) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

// InterfaceAssociation - Network interface and its custom security rules.
type InterfaceAssociation struct {
	// Collection of custom security rules.
	SecurityRules []*SecurityRule

	// READ-ONLY; Network interface ID.
	ID *string
}

func (i *InterfaceAssociation) GetSecurityRules() (rv []*SecurityRule) {
	if i != nil {
		return i.SecurityRules
	}
	return
}

func (i *InterfaceAssociation) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

// InterfaceDNSSettings - DNS settings of a network interface.
type InterfaceDNSSettings struct {
	// List of DNS servers IP addresses. Use 'AzureProvidedDNS' to switch to azure provided DNS resolution. 'AzureProvidedDNS'
	// value cannot be combined with other IPs, it must be the only value in dnsServers
	// collection.
	DNSServers []*string

	// Relative DNS name for this NIC used for internal communications between VMs in the same virtual network.
	InternalDNSNameLabel *string

	// READ-ONLY; If the VM that uses this NIC is part of an Availability Set, then this list will have the union of all DNS servers
	// from all NICs that are part of the Availability Set. This property is what is
	// configured on each of those VMs.
	AppliedDNSServers []*string

	// READ-ONLY; Even if internalDnsNameLabel is not specified, a DNS entry is created for the primary NIC of the VM. This DNS
	// name can be constructed by concatenating the VM name with the value of
	// internalDomainNameSuffix.
	InternalDomainNameSuffix *string

	// READ-ONLY; Fully qualified DNS name supporting internal communications between VMs in the same virtual network.
	InternalFqdn *string
}

func (i *InterfaceDNSSettings) GetDNSServers() (rv []*string) {
	if i != nil {
		return i.DNSServers
	}
	return
}

func (i *InterfaceDNSSettings) GetInternalDNSNameLabel() (rv string) {
	if i != nil && i.InternalDNSNameLabel != nil {
		return *i.InternalDNSNameLabel
	}
	return
}

func (i *InterfaceDNSSettings) GetAppliedDNSServers() (rv []*string) {
	if i != nil {
		return i.AppliedDNSServers
	}
	return
}

func (i *InterfaceDNSSettings) GetInternalDomainNameSuffix() (rv string) {
	if i != nil && i.InternalDomainNameSuffix != nil {
		return *i.InternalDomainNameSuffix
	}
	return
}

func (i *InterfaceDNSSettings) GetInternalFqdn() (rv string) {
	if i != nil && i.InternalFqdn != nil {
		return *i.InternalFqdn
	}
	return
}

// InterfaceIPConfiguration - IPConfiguration in a network interface.
type InterfaceIPConfiguration struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Network interface IP configuration properties.
	Properties *InterfaceIPConfigurationPropertiesFormat

	// Resource type.
	Type *string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (i *InterfaceIPConfiguration) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *InterfaceIPConfiguration) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *InterfaceIPConfiguration) GetProperties() (rv *InterfaceIPConfigurationPropertiesFormat) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *InterfaceIPConfiguration) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

func (i *InterfaceIPConfiguration) GetEtag() (rv string) {
	if i != nil && i.Etag != nil {
		return *i.Etag
	}
	return
}

// InterfaceIPConfigurationListResult - Response for list ip configurations API service call.
type InterfaceIPConfigurationListResult struct {
	// A list of ip configurations.
	Value []*InterfaceIPConfiguration

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (i *InterfaceIPConfigurationListResult) GetValue() (rv []*InterfaceIPConfiguration) {
	if i != nil {
		return i.Value
	}
	return
}

func (i *InterfaceIPConfigurationListResult) GetNextLink() (rv string) {
	if i != nil && i.NextLink != nil {
		return *i.NextLink
	}
	return
}

// InterfaceIPConfigurationPrivateLinkConnectionProperties - PrivateLinkConnection properties for the network interface.
type InterfaceIPConfigurationPrivateLinkConnectionProperties struct {
	// READ-ONLY; List of FQDNs for current private link connection.
	Fqdns []*string

	// READ-ONLY; The group ID for current private link connection.
	GroupID *string

	// READ-ONLY; The required member name for current private link connection.
	RequiredMemberName *string
}

func (i *InterfaceIPConfigurationPrivateLinkConnectionProperties) GetFqdns() (rv []*string) {
	if i != nil {
		return i.Fqdns
	}
	return
}

func (i *InterfaceIPConfigurationPrivateLinkConnectionProperties) GetGroupID() (rv string) {
	if i != nil && i.GroupID != nil {
		return *i.GroupID
	}
	return
}

func (i *InterfaceIPConfigurationPrivateLinkConnectionProperties) GetRequiredMemberName() (rv string) {
	if i != nil && i.RequiredMemberName != nil {
		return *i.RequiredMemberName
	}
	return
}

// InterfaceIPConfigurationPropertiesFormat - Properties of IP configuration.
type InterfaceIPConfigurationPropertiesFormat struct {
	// The reference to ApplicationGatewayBackendAddressPool resource.
	ApplicationGatewayBackendAddressPools []*ApplicationGatewayBackendAddressPool

	// Application security groups in which the IP configuration is included.
	ApplicationSecurityGroups []*ApplicationSecurityGroup

	// The reference to gateway load balancer frontend IP.
	GatewayLoadBalancer *SubResource

	// The reference to LoadBalancerBackendAddressPool resource.
	LoadBalancerBackendAddressPools []*BackendAddressPool

	// A list of references of LoadBalancerInboundNatRules.
	LoadBalancerInboundNatRules []*InboundNatRule

	// Whether this is a primary customer address on the network interface.
	Primary *bool

	// Private IP address of the IP configuration.
	PrivateIPAddress *string

	// Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
	PrivateIPAddressVersion *IPVersion

	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod

	// Public IP address bound to the IP configuration.
	PublicIPAddress *PublicIPAddress

	// Subnet bound to the IP configuration.
	Subnet *Subnet

	// The reference to Virtual Network Taps.
	VirtualNetworkTaps []*VirtualNetworkTap

	// READ-ONLY; PrivateLinkConnection properties for the network interface.
	PrivateLinkConnectionProperties *InterfaceIPConfigurationPrivateLinkConnectionProperties

	// READ-ONLY; The provisioning state of the network interface IP configuration.
	ProvisioningState *ProvisioningState
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetApplicationGatewayBackendAddressPools() (rv []*ApplicationGatewayBackendAddressPool) {
	if i != nil {
		return i.ApplicationGatewayBackendAddressPools
	}
	return
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetApplicationSecurityGroups() (rv []*ApplicationSecurityGroup) {
	if i != nil {
		return i.ApplicationSecurityGroups
	}
	return
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetGatewayLoadBalancer() (rv *SubResource) {
	if i != nil {
		return i.GatewayLoadBalancer
	}
	return
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetLoadBalancerBackendAddressPools() (rv []*BackendAddressPool) {
	if i != nil {
		return i.LoadBalancerBackendAddressPools
	}
	return
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetLoadBalancerInboundNatRules() (rv []*InboundNatRule) {
	if i != nil {
		return i.LoadBalancerInboundNatRules
	}
	return
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetPrimary() (rv bool) {
	if i != nil && i.Primary != nil {
		return *i.Primary
	}
	return
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetPrivateIPAddress() (rv string) {
	if i != nil && i.PrivateIPAddress != nil {
		return *i.PrivateIPAddress
	}
	return
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetPrivateIPAddressVersion() (rv *IPVersion) {
	if i != nil {
		return i.PrivateIPAddressVersion
	}
	return
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetPrivateIPAllocationMethod() (rv *IPAllocationMethod) {
	if i != nil {
		return i.PrivateIPAllocationMethod
	}
	return
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetPublicIPAddress() (rv *PublicIPAddress) {
	if i != nil {
		return i.PublicIPAddress
	}
	return
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetSubnet() (rv *Subnet) {
	if i != nil {
		return i.Subnet
	}
	return
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetVirtualNetworkTaps() (rv []*VirtualNetworkTap) {
	if i != nil {
		return i.VirtualNetworkTaps
	}
	return
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetPrivateLinkConnectionProperties() (rv *InterfaceIPConfigurationPrivateLinkConnectionProperties) {
	if i != nil {
		return i.PrivateLinkConnectionProperties
	}
	return
}

func (i *InterfaceIPConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if i != nil {
		return i.ProvisioningState
	}
	return
}

// InterfaceListResult - Response for the ListNetworkInterface API service call.
type InterfaceListResult struct {
	// A list of network interfaces in a resource group.
	Value []*Interface

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (i *InterfaceListResult) GetValue() (rv []*Interface) {
	if i != nil {
		return i.Value
	}
	return
}

func (i *InterfaceListResult) GetNextLink() (rv string) {
	if i != nil && i.NextLink != nil {
		return *i.NextLink
	}
	return
}

// InterfaceLoadBalancerListResult - Response for list ip configurations API service call.
type InterfaceLoadBalancerListResult struct {
	// A list of load balancers.
	Value []*LoadBalancer

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (i *InterfaceLoadBalancerListResult) GetValue() (rv []*LoadBalancer) {
	if i != nil {
		return i.Value
	}
	return
}

func (i *InterfaceLoadBalancerListResult) GetNextLink() (rv string) {
	if i != nil && i.NextLink != nil {
		return *i.NextLink
	}
	return
}

// InterfacePropertiesFormat - NetworkInterface properties.
type InterfacePropertiesFormat struct {
	// Auxiliary mode of Network Interface resource.
	AuxiliaryMode *NetworkInterfaceAuxiliaryMode

	// The DNS settings in network interface.
	DNSSettings *InterfaceDNSSettings

	// Indicates whether to disable tcp state tracking.
	DisableTCPStateTracking *bool

	// If the network interface is configured for accelerated networking. Not applicable to VM sizes which require accelerated
	// networking.
	EnableAcceleratedNetworking *bool

	// Indicates whether IP forwarding is enabled on this network interface.
	EnableIPForwarding *bool

	// A list of IPConfigurations of the network interface.
	IPConfigurations []*InterfaceIPConfiguration

	// Migration phase of Network Interface resource.
	MigrationPhase *NetworkInterfaceMigrationPhase

	// The reference to the NetworkSecurityGroup resource.
	NetworkSecurityGroup *SecurityGroup

	// Type of Network Interface resource.
	NicType *NetworkInterfaceNicType

	// Privatelinkservice of the network interface resource.
	PrivateLinkService *PrivateLinkService

	// WorkloadType of the NetworkInterface for BareMetal resources
	WorkloadType *string

	// READ-ONLY; A reference to the dscp configuration to which the network interface is linked.
	DscpConfiguration *SubResource

	// READ-ONLY; A list of references to linked BareMetal resources.
	HostedWorkloads []*string

	// READ-ONLY; The MAC address of the network interface.
	MacAddress *string

	// READ-ONLY; Whether this is a primary network interface on a virtual machine.
	Primary *bool

	// READ-ONLY; A reference to the private endpoint to which the network interface is linked.
	PrivateEndpoint *PrivateEndpoint

	// READ-ONLY; The provisioning state of the network interface resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the network interface resource.
	ResourceGUID *string

	// READ-ONLY; A list of TapConfigurations of the network interface.
	TapConfigurations []*InterfaceTapConfiguration

	// READ-ONLY; The reference to a virtual machine.
	VirtualMachine *SubResource

	// READ-ONLY; Whether the virtual machine this nic is attached to supports encryption.
	VnetEncryptionSupported *bool
}

func (i *InterfacePropertiesFormat) GetAuxiliaryMode() (rv *NetworkInterfaceAuxiliaryMode) {
	if i != nil {
		return i.AuxiliaryMode
	}
	return
}

func (i *InterfacePropertiesFormat) GetDNSSettings() (rv *InterfaceDNSSettings) {
	if i != nil {
		return i.DNSSettings
	}
	return
}

func (i *InterfacePropertiesFormat) GetDisableTCPStateTracking() (rv bool) {
	if i != nil && i.DisableTCPStateTracking != nil {
		return *i.DisableTCPStateTracking
	}
	return
}

func (i *InterfacePropertiesFormat) GetEnableAcceleratedNetworking() (rv bool) {
	if i != nil && i.EnableAcceleratedNetworking != nil {
		return *i.EnableAcceleratedNetworking
	}
	return
}

func (i *InterfacePropertiesFormat) GetEnableIPForwarding() (rv bool) {
	if i != nil && i.EnableIPForwarding != nil {
		return *i.EnableIPForwarding
	}
	return
}

func (i *InterfacePropertiesFormat) GetIPConfigurations() (rv []*InterfaceIPConfiguration) {
	if i != nil {
		return i.IPConfigurations
	}
	return
}

func (i *InterfacePropertiesFormat) GetMigrationPhase() (rv *NetworkInterfaceMigrationPhase) {
	if i != nil {
		return i.MigrationPhase
	}
	return
}

func (i *InterfacePropertiesFormat) GetNetworkSecurityGroup() (rv *SecurityGroup) {
	if i != nil {
		return i.NetworkSecurityGroup
	}
	return
}

func (i *InterfacePropertiesFormat) GetNicType() (rv *NetworkInterfaceNicType) {
	if i != nil {
		return i.NicType
	}
	return
}

func (i *InterfacePropertiesFormat) GetPrivateLinkService() (rv *PrivateLinkService) {
	if i != nil {
		return i.PrivateLinkService
	}
	return
}

func (i *InterfacePropertiesFormat) GetWorkloadType() (rv string) {
	if i != nil && i.WorkloadType != nil {
		return *i.WorkloadType
	}
	return
}

func (i *InterfacePropertiesFormat) GetDscpConfiguration() (rv *SubResource) {
	if i != nil {
		return i.DscpConfiguration
	}
	return
}

func (i *InterfacePropertiesFormat) GetHostedWorkloads() (rv []*string) {
	if i != nil {
		return i.HostedWorkloads
	}
	return
}

func (i *InterfacePropertiesFormat) GetMacAddress() (rv string) {
	if i != nil && i.MacAddress != nil {
		return *i.MacAddress
	}
	return
}

func (i *InterfacePropertiesFormat) GetPrimary() (rv bool) {
	if i != nil && i.Primary != nil {
		return *i.Primary
	}
	return
}

func (i *InterfacePropertiesFormat) GetPrivateEndpoint() (rv *PrivateEndpoint) {
	if i != nil {
		return i.PrivateEndpoint
	}
	return
}

func (i *InterfacePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if i != nil {
		return i.ProvisioningState
	}
	return
}

func (i *InterfacePropertiesFormat) GetResourceGUID() (rv string) {
	if i != nil && i.ResourceGUID != nil {
		return *i.ResourceGUID
	}
	return
}

func (i *InterfacePropertiesFormat) GetTapConfigurations() (rv []*InterfaceTapConfiguration) {
	if i != nil {
		return i.TapConfigurations
	}
	return
}

func (i *InterfacePropertiesFormat) GetVirtualMachine() (rv *SubResource) {
	if i != nil {
		return i.VirtualMachine
	}
	return
}

func (i *InterfacePropertiesFormat) GetVnetEncryptionSupported() (rv bool) {
	if i != nil && i.VnetEncryptionSupported != nil {
		return *i.VnetEncryptionSupported
	}
	return
}

// InterfaceTapConfiguration - Tap configuration in a Network Interface.
type InterfaceTapConfiguration struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the Virtual Network Tap configuration.
	Properties *InterfaceTapConfigurationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Sub Resource type.
	Type *string
}

func (i *InterfaceTapConfiguration) GetID() (rv string) {
	if i != nil && i.ID != nil {
		return *i.ID
	}
	return
}

func (i *InterfaceTapConfiguration) GetName() (rv string) {
	if i != nil && i.Name != nil {
		return *i.Name
	}
	return
}

func (i *InterfaceTapConfiguration) GetProperties() (rv *InterfaceTapConfigurationPropertiesFormat) {
	if i != nil {
		return i.Properties
	}
	return
}

func (i *InterfaceTapConfiguration) GetEtag() (rv string) {
	if i != nil && i.Etag != nil {
		return *i.Etag
	}
	return
}

func (i *InterfaceTapConfiguration) GetType() (rv string) {
	if i != nil && i.Type != nil {
		return *i.Type
	}
	return
}

// InterfaceTapConfigurationListResult - Response for list tap configurations API service call.
type InterfaceTapConfigurationListResult struct {
	// A list of tap configurations.
	Value []*InterfaceTapConfiguration

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (i *InterfaceTapConfigurationListResult) GetValue() (rv []*InterfaceTapConfiguration) {
	if i != nil {
		return i.Value
	}
	return
}

func (i *InterfaceTapConfigurationListResult) GetNextLink() (rv string) {
	if i != nil && i.NextLink != nil {
		return *i.NextLink
	}
	return
}

// InterfaceTapConfigurationPropertiesFormat - Properties of Virtual Network Tap configuration.
type InterfaceTapConfigurationPropertiesFormat struct {
	// The reference to the Virtual Network Tap resource.
	VirtualNetworkTap *VirtualNetworkTap

	// READ-ONLY; The provisioning state of the network interface tap configuration resource.
	ProvisioningState *ProvisioningState
}

func (i *InterfaceTapConfigurationPropertiesFormat) GetVirtualNetworkTap() (rv *VirtualNetworkTap) {
	if i != nil {
		return i.VirtualNetworkTap
	}
	return
}

func (i *InterfaceTapConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if i != nil {
		return i.ProvisioningState
	}
	return
}

// ListHubRouteTablesResult - List of RouteTables and a URL nextLink to get the next set of results.
type ListHubRouteTablesResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of RouteTables.
	Value []*HubRouteTable
}

func (l *ListHubRouteTablesResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListHubRouteTablesResult) GetValue() (rv []*HubRouteTable) {
	if l != nil {
		return l.Value
	}
	return
}

// ListHubVirtualNetworkConnectionsResult - List of HubVirtualNetworkConnections and a URL nextLink to get the next set of
// results.
type ListHubVirtualNetworkConnectionsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of HubVirtualNetworkConnections.
	Value []*HubVirtualNetworkConnection
}

func (l *ListHubVirtualNetworkConnectionsResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListHubVirtualNetworkConnectionsResult) GetValue() (rv []*HubVirtualNetworkConnection) {
	if l != nil {
		return l.Value
	}
	return
}

// ListP2SVPNGatewaysResult - Result of the request to list P2SVpnGateways. It contains a list of P2SVpnGateways and a URL
// nextLink to get the next set of results.
type ListP2SVPNGatewaysResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of P2SVpnGateways.
	Value []*P2SVPNGateway
}

func (l *ListP2SVPNGatewaysResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListP2SVPNGatewaysResult) GetValue() (rv []*P2SVPNGateway) {
	if l != nil {
		return l.Value
	}
	return
}

// ListRouteMapsResult - List of RouteMaps and a URL nextLink to get the next set of results.
type ListRouteMapsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of RouteMaps.
	Value []*RouteMap
}

func (l *ListRouteMapsResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListRouteMapsResult) GetValue() (rv []*RouteMap) {
	if l != nil {
		return l.Value
	}
	return
}

// ListRoutingIntentResult - List of the routing intent result and a URL nextLink to get the next set of results.
type ListRoutingIntentResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of RoutingIntent resource.
	Value []*RoutingIntent
}

func (l *ListRoutingIntentResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListRoutingIntentResult) GetValue() (rv []*RoutingIntent) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVPNConnectionsResult - Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains
// a list of Vpn Connections and a URL nextLink to get the next set of results.
type ListVPNConnectionsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of Vpn Connections.
	Value []*VPNConnection
}

func (l *ListVPNConnectionsResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVPNConnectionsResult) GetValue() (rv []*VPNConnection) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVPNGatewayNatRulesResult - Result of the request to list all nat rules to a virtual wan vpn gateway. It contains a
// list of Nat rules and a URL nextLink to get the next set of results.
type ListVPNGatewayNatRulesResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of Nat Rules.
	Value []*VPNGatewayNatRule
}

func (l *ListVPNGatewayNatRulesResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVPNGatewayNatRulesResult) GetValue() (rv []*VPNGatewayNatRule) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVPNGatewaysResult - Result of the request to list VpnGateways. It contains a list of VpnGateways and a URL nextLink
// to get the next set of results.
type ListVPNGatewaysResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of VpnGateways.
	Value []*VPNGateway
}

func (l *ListVPNGatewaysResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVPNGatewaysResult) GetValue() (rv []*VPNGateway) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVPNServerConfigurationPolicyGroupsResult - Result of the request to list VpnServerConfigurationPolicyGroups. It contains
// a list of VpnServerConfigurationPolicyGroups and a URL nextLink to get the next set of results.
type ListVPNServerConfigurationPolicyGroupsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of VpnServerConfigurationPolicyGroups.
	Value []*VPNServerConfigurationPolicyGroup
}

func (l *ListVPNServerConfigurationPolicyGroupsResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVPNServerConfigurationPolicyGroupsResult) GetValue() (rv []*VPNServerConfigurationPolicyGroup) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVPNServerConfigurationsResult - Result of the request to list all VpnServerConfigurations. It contains a list of VpnServerConfigurations
// and a URL nextLink to get the next set of results.
type ListVPNServerConfigurationsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of VpnServerConfigurations.
	Value []*VPNServerConfiguration
}

func (l *ListVPNServerConfigurationsResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVPNServerConfigurationsResult) GetValue() (rv []*VPNServerConfiguration) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVPNSiteLinkConnectionsResult - Result of the request to list all vpn connections to a virtual wan vpn gateway. It contains
// a list of Vpn Connections and a URL nextLink to get the next set of results.
type ListVPNSiteLinkConnectionsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of VpnSiteLinkConnections.
	Value []*VPNSiteLinkConnection
}

func (l *ListVPNSiteLinkConnectionsResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVPNSiteLinkConnectionsResult) GetValue() (rv []*VPNSiteLinkConnection) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVPNSiteLinksResult - Result of the request to list VpnSiteLinks. It contains a list of VpnSiteLinks and a URL nextLink
// to get the next set of results.
type ListVPNSiteLinksResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of VpnSitesLinks.
	Value []*VPNSiteLink
}

func (l *ListVPNSiteLinksResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVPNSiteLinksResult) GetValue() (rv []*VPNSiteLink) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVPNSitesResult - Result of the request to list VpnSites. It contains a list of VpnSites and a URL nextLink to get the
// next set of results.
type ListVPNSitesResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of VpnSites.
	Value []*VPNSite
}

func (l *ListVPNSitesResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVPNSitesResult) GetValue() (rv []*VPNSite) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVirtualHubBgpConnectionResults - VirtualHubBgpConnections list.
type ListVirtualHubBgpConnectionResults struct {
	// URL to get the next set of results.
	NextLink *string

	// The list of VirtualHubBgpConnections.
	Value []*BgpConnection
}

func (l *ListVirtualHubBgpConnectionResults) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVirtualHubBgpConnectionResults) GetValue() (rv []*BgpConnection) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVirtualHubIPConfigurationResults - VirtualHubIpConfigurations list.
type ListVirtualHubIPConfigurationResults struct {
	// URL to get the next set of results.
	NextLink *string

	// The list of VirtualHubIpConfigurations.
	Value []*HubIPConfiguration
}

func (l *ListVirtualHubIPConfigurationResults) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVirtualHubIPConfigurationResults) GetValue() (rv []*HubIPConfiguration) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVirtualHubRouteTableV2SResult - List of VirtualHubRouteTableV2s and a URL nextLink to get the next set of results.
type ListVirtualHubRouteTableV2SResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of VirtualHubRouteTableV2s.
	Value []*VirtualHubRouteTableV2
}

func (l *ListVirtualHubRouteTableV2SResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVirtualHubRouteTableV2SResult) GetValue() (rv []*VirtualHubRouteTableV2) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVirtualHubsResult - Result of the request to list VirtualHubs. It contains a list of VirtualHubs and a URL nextLink
// to get the next set of results.
type ListVirtualHubsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of VirtualHubs.
	Value []*VirtualHub
}

func (l *ListVirtualHubsResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVirtualHubsResult) GetValue() (rv []*VirtualHub) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVirtualNetworkGatewayNatRulesResult - Result of the request to list all nat rules to a virtual network gateway. It
// contains a list of Nat rules and a URL nextLink to get the next set of results.
type ListVirtualNetworkGatewayNatRulesResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of Nat Rules.
	Value []*VirtualNetworkGatewayNatRule
}

func (l *ListVirtualNetworkGatewayNatRulesResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVirtualNetworkGatewayNatRulesResult) GetValue() (rv []*VirtualNetworkGatewayNatRule) {
	if l != nil {
		return l.Value
	}
	return
}

// ListVirtualWANsResult - Result of the request to list VirtualWANs. It contains a list of VirtualWANs and a URL nextLink
// to get the next set of results.
type ListVirtualWANsResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of VirtualWANs.
	Value []*VirtualWAN
}

func (l *ListVirtualWANsResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *ListVirtualWANsResult) GetValue() (rv []*VirtualWAN) {
	if l != nil {
		return l.Value
	}
	return
}

// LoadBalancer resource.
type LoadBalancer struct {
	// The extended location of the load balancer.
	ExtendedLocation *ExtendedLocation

	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of load balancer.
	Properties *LoadBalancerPropertiesFormat

	// The load balancer SKU.
	SKU *LoadBalancerSKU

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (l *LoadBalancer) GetExtendedLocation() (rv *ExtendedLocation) {
	if l != nil {
		return l.ExtendedLocation
	}
	return
}

func (l *LoadBalancer) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LoadBalancer) GetLocation() (rv string) {
	if l != nil && l.Location != nil {
		return *l.Location
	}
	return
}

func (l *LoadBalancer) GetProperties() (rv *LoadBalancerPropertiesFormat) {
	if l != nil {
		return l.Properties
	}
	return
}

func (l *LoadBalancer) GetSKU() (rv *LoadBalancerSKU) {
	if l != nil {
		return l.SKU
	}
	return
}

func (l *LoadBalancer) GetTags() (rv map[string]*string) {
	if l != nil {
		return l.Tags
	}
	return
}

func (l *LoadBalancer) GetEtag() (rv string) {
	if l != nil && l.Etag != nil {
		return *l.Etag
	}
	return
}

func (l *LoadBalancer) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LoadBalancer) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

// LoadBalancerBackendAddress - Load balancer backend addresses.
type LoadBalancerBackendAddress struct {
	// Name of the backend address.
	Name *string

	// Properties of load balancer backend address pool.
	Properties *LoadBalancerBackendAddressPropertiesFormat
}

func (l *LoadBalancerBackendAddress) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LoadBalancerBackendAddress) GetProperties() (rv *LoadBalancerBackendAddressPropertiesFormat) {
	if l != nil {
		return l.Properties
	}
	return
}

// LoadBalancerBackendAddressPoolListResult - Response for ListBackendAddressPool API service call.
type LoadBalancerBackendAddressPoolListResult struct {
	// A list of backend address pools in a load balancer.
	Value []*BackendAddressPool

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (l *LoadBalancerBackendAddressPoolListResult) GetValue() (rv []*BackendAddressPool) {
	if l != nil {
		return l.Value
	}
	return
}

func (l *LoadBalancerBackendAddressPoolListResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

// LoadBalancerBackendAddressPropertiesFormat - Properties of the load balancer backend addresses.
type LoadBalancerBackendAddressPropertiesFormat struct {
	// A list of administrative states which once set can override health probe so that Load Balancer will always forward new
	// connections to backend, or deny new connections and reset existing connections.
	AdminState *LoadBalancerBackendAddressAdminState

	// IP Address belonging to the referenced virtual network.
	IPAddress *string

	// Reference to the frontend ip address configuration defined in regional loadbalancer.
	LoadBalancerFrontendIPConfiguration *SubResource

	// Reference to an existing subnet.
	Subnet *SubResource

	// Reference to an existing virtual network.
	VirtualNetwork *SubResource

	// READ-ONLY; Collection of inbound NAT rule port mappings.
	InboundNatRulesPortMapping []*NatRulePortMapping

	// READ-ONLY; Reference to IP address defined in network interfaces.
	NetworkInterfaceIPConfiguration *SubResource
}

func (l *LoadBalancerBackendAddressPropertiesFormat) GetAdminState() (rv *LoadBalancerBackendAddressAdminState) {
	if l != nil {
		return l.AdminState
	}
	return
}

func (l *LoadBalancerBackendAddressPropertiesFormat) GetIPAddress() (rv string) {
	if l != nil && l.IPAddress != nil {
		return *l.IPAddress
	}
	return
}

func (l *LoadBalancerBackendAddressPropertiesFormat) GetLoadBalancerFrontendIPConfiguration() (rv *SubResource) {
	if l != nil {
		return l.LoadBalancerFrontendIPConfiguration
	}
	return
}

func (l *LoadBalancerBackendAddressPropertiesFormat) GetSubnet() (rv *SubResource) {
	if l != nil {
		return l.Subnet
	}
	return
}

func (l *LoadBalancerBackendAddressPropertiesFormat) GetVirtualNetwork() (rv *SubResource) {
	if l != nil {
		return l.VirtualNetwork
	}
	return
}

func (l *LoadBalancerBackendAddressPropertiesFormat) GetInboundNatRulesPortMapping() (rv []*NatRulePortMapping) {
	if l != nil {
		return l.InboundNatRulesPortMapping
	}
	return
}

func (l *LoadBalancerBackendAddressPropertiesFormat) GetNetworkInterfaceIPConfiguration() (rv *SubResource) {
	if l != nil {
		return l.NetworkInterfaceIPConfiguration
	}
	return
}

// LoadBalancerFrontendIPConfigurationListResult - Response for ListFrontendIPConfiguration API service call.
type LoadBalancerFrontendIPConfigurationListResult struct {
	// A list of frontend IP configurations in a load balancer.
	Value []*FrontendIPConfiguration

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (l *LoadBalancerFrontendIPConfigurationListResult) GetValue() (rv []*FrontendIPConfiguration) {
	if l != nil {
		return l.Value
	}
	return
}

func (l *LoadBalancerFrontendIPConfigurationListResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

// LoadBalancerListResult - Response for ListLoadBalancers API service call.
type LoadBalancerListResult struct {
	// A list of load balancers in a resource group.
	Value []*LoadBalancer

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (l *LoadBalancerListResult) GetValue() (rv []*LoadBalancer) {
	if l != nil {
		return l.Value
	}
	return
}

func (l *LoadBalancerListResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

// LoadBalancerLoadBalancingRuleListResult - Response for ListLoadBalancingRule API service call.
type LoadBalancerLoadBalancingRuleListResult struct {
	// A list of load balancing rules in a load balancer.
	Value []*LoadBalancingRule

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (l *LoadBalancerLoadBalancingRuleListResult) GetValue() (rv []*LoadBalancingRule) {
	if l != nil {
		return l.Value
	}
	return
}

func (l *LoadBalancerLoadBalancingRuleListResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

// LoadBalancerOutboundRuleListResult - Response for ListOutboundRule API service call.
type LoadBalancerOutboundRuleListResult struct {
	// A list of outbound rules in a load balancer.
	Value []*OutboundRule

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (l *LoadBalancerOutboundRuleListResult) GetValue() (rv []*OutboundRule) {
	if l != nil {
		return l.Value
	}
	return
}

func (l *LoadBalancerOutboundRuleListResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

// LoadBalancerProbeListResult - Response for ListProbe API service call.
type LoadBalancerProbeListResult struct {
	// A list of probes in a load balancer.
	Value []*Probe

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (l *LoadBalancerProbeListResult) GetValue() (rv []*Probe) {
	if l != nil {
		return l.Value
	}
	return
}

func (l *LoadBalancerProbeListResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

// LoadBalancerPropertiesFormat - Properties of the load balancer.
type LoadBalancerPropertiesFormat struct {
	// Collection of backend address pools used by a load balancer.
	BackendAddressPools []*BackendAddressPool

	// Object representing the frontend IPs to be used for the load balancer.
	FrontendIPConfigurations []*FrontendIPConfiguration

	// Defines an external port range for inbound NAT to a single backend port on NICs associated with a load balancer. Inbound
	// NAT rules are created automatically for each NIC associated with the Load
	// Balancer using an external port from this range. Defining an Inbound NAT pool on your Load Balancer is mutually exclusive
	// with defining inbound NAT rules. Inbound NAT pools are referenced from virtual
	// machine scale sets. NICs that are associated with individual virtual machines cannot reference an inbound NAT pool. They
	// have to reference individual inbound NAT rules.
	InboundNatPools []*InboundNatPool

	// Collection of inbound NAT Rules used by a load balancer. Defining inbound NAT rules on your load balancer is mutually exclusive
	// with defining an inbound NAT pool. Inbound NAT pools are referenced from
	// virtual machine scale sets. NICs that are associated with individual virtual machines cannot reference an Inbound NAT pool.
	// They have to reference individual inbound NAT rules.
	InboundNatRules []*InboundNatRule

	// Object collection representing the load balancing rules Gets the provisioning.
	LoadBalancingRules []*LoadBalancingRule

	// The outbound rules.
	OutboundRules []*OutboundRule

	// Collection of probe objects used in the load balancer.
	Probes []*Probe

	// READ-ONLY; The provisioning state of the load balancer resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the load balancer resource.
	ResourceGUID *string
}

func (l *LoadBalancerPropertiesFormat) GetBackendAddressPools() (rv []*BackendAddressPool) {
	if l != nil {
		return l.BackendAddressPools
	}
	return
}

func (l *LoadBalancerPropertiesFormat) GetFrontendIPConfigurations() (rv []*FrontendIPConfiguration) {
	if l != nil {
		return l.FrontendIPConfigurations
	}
	return
}

func (l *LoadBalancerPropertiesFormat) GetInboundNatPools() (rv []*InboundNatPool) {
	if l != nil {
		return l.InboundNatPools
	}
	return
}

func (l *LoadBalancerPropertiesFormat) GetInboundNatRules() (rv []*InboundNatRule) {
	if l != nil {
		return l.InboundNatRules
	}
	return
}

func (l *LoadBalancerPropertiesFormat) GetLoadBalancingRules() (rv []*LoadBalancingRule) {
	if l != nil {
		return l.LoadBalancingRules
	}
	return
}

func (l *LoadBalancerPropertiesFormat) GetOutboundRules() (rv []*OutboundRule) {
	if l != nil {
		return l.OutboundRules
	}
	return
}

func (l *LoadBalancerPropertiesFormat) GetProbes() (rv []*Probe) {
	if l != nil {
		return l.Probes
	}
	return
}

func (l *LoadBalancerPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if l != nil {
		return l.ProvisioningState
	}
	return
}

func (l *LoadBalancerPropertiesFormat) GetResourceGUID() (rv string) {
	if l != nil && l.ResourceGUID != nil {
		return *l.ResourceGUID
	}
	return
}

// LoadBalancerSKU - SKU of a load balancer.
type LoadBalancerSKU struct {
	// Name of a load balancer SKU.
	Name *LoadBalancerSKUName

	// Tier of a load balancer SKU.
	Tier *LoadBalancerSKUTier
}

func (l *LoadBalancerSKU) GetName() (rv *LoadBalancerSKUName) {
	if l != nil {
		return l.Name
	}
	return
}

func (l *LoadBalancerSKU) GetTier() (rv *LoadBalancerSKUTier) {
	if l != nil {
		return l.Tier
	}
	return
}

// LoadBalancerVipSwapRequest - The request for a VIP swap.
type LoadBalancerVipSwapRequest struct {
	// A list of frontend IP configuration resources that should swap VIPs.
	FrontendIPConfigurations []*LoadBalancerVipSwapRequestFrontendIPConfiguration
}

func (l *LoadBalancerVipSwapRequest) GetFrontendIPConfigurations() (rv []*LoadBalancerVipSwapRequestFrontendIPConfiguration) {
	if l != nil {
		return l.FrontendIPConfigurations
	}
	return
}

// LoadBalancerVipSwapRequestFrontendIPConfiguration - VIP swap request's frontend IP configuration object.
type LoadBalancerVipSwapRequestFrontendIPConfiguration struct {
	// The ID of frontend IP configuration resource.
	ID *string

	// The properties of VIP swap request's frontend IP configuration object.
	Properties *LoadBalancerVipSwapRequestFrontendIPConfigurationProperties
}

func (l *LoadBalancerVipSwapRequestFrontendIPConfiguration) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LoadBalancerVipSwapRequestFrontendIPConfiguration) GetProperties() (rv *LoadBalancerVipSwapRequestFrontendIPConfigurationProperties) {
	if l != nil {
		return l.Properties
	}
	return
}

// LoadBalancerVipSwapRequestFrontendIPConfigurationProperties - The properties of VIP swap request's frontend IP configuration
// object.
type LoadBalancerVipSwapRequestFrontendIPConfigurationProperties struct {
	// A reference to public IP address resource.
	PublicIPAddress *SubResource
}

func (l *LoadBalancerVipSwapRequestFrontendIPConfigurationProperties) GetPublicIPAddress() (rv *SubResource) {
	if l != nil {
		return l.PublicIPAddress
	}
	return
}

// LoadBalancingRule - A load balancing rule for a load balancer.
type LoadBalancingRule struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within the set of load balancing rules used by the load balancer. This name can
	// be used to access the resource.
	Name *string

	// Properties of load balancer load balancing rule.
	Properties *LoadBalancingRulePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (l *LoadBalancingRule) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LoadBalancingRule) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LoadBalancingRule) GetProperties() (rv *LoadBalancingRulePropertiesFormat) {
	if l != nil {
		return l.Properties
	}
	return
}

func (l *LoadBalancingRule) GetEtag() (rv string) {
	if l != nil && l.Etag != nil {
		return *l.Etag
	}
	return
}

func (l *LoadBalancingRule) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

// LoadBalancingRulePropertiesFormat - Properties of the load balancer.
type LoadBalancingRulePropertiesFormat struct {
	// REQUIRED; The port for the external endpoint. Port numbers for each rule must be unique within the Load Balancer. Acceptable
	// values are between 0 and 65534. Note that value 0 enables "Any Port".
	FrontendPort *int32

	// REQUIRED; The reference to the transport protocol used by the load balancing rule.
	Protocol *TransportProtocol

	// A reference to a pool of DIPs. Inbound traffic is randomly load balanced across IPs in the backend IPs.
	BackendAddressPool *SubResource

	// An array of references to pool of DIPs.
	BackendAddressPools []*SubResource

	// The port used for internal connections on the endpoint. Acceptable values are between 0 and 65535. Note that value 0 enables
	// "Any Port".
	BackendPort *int32

	// Configures SNAT for the VMs in the backend pool to use the publicIP address specified in the frontend of the load balancing
	// rule.
	DisableOutboundSnat *bool

	// Configures a virtual machine's endpoint for the floating IP capability required to configure a SQL AlwaysOn Availability
	// Group. This setting is required when using the SQL AlwaysOn Availability Groups
	// in SQL server. This setting can't be changed after you create the endpoint.
	EnableFloatingIP *bool

	// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used
	// when the protocol is set to TCP.
	EnableTCPReset *bool

	// A reference to frontend IP addresses.
	FrontendIPConfiguration *SubResource

	// The timeout for the TCP idle connection. The value can be set between 4 and 30 minutes. The default value is 4 minutes.
	// This element is only used when the protocol is set to TCP.
	IdleTimeoutInMinutes *int32

	// The load distribution policy for this rule.
	LoadDistribution *LoadDistribution

	// The reference to the load balancer probe used by the load balancing rule.
	Probe *SubResource

	// READ-ONLY; The provisioning state of the load balancing rule resource.
	ProvisioningState *ProvisioningState
}

func (l *LoadBalancingRulePropertiesFormat) GetFrontendPort() (rv int32) {
	if l != nil && l.FrontendPort != nil {
		return *l.FrontendPort
	}
	return
}

func (l *LoadBalancingRulePropertiesFormat) GetProtocol() (rv *TransportProtocol) {
	if l != nil {
		return l.Protocol
	}
	return
}

func (l *LoadBalancingRulePropertiesFormat) GetBackendAddressPool() (rv *SubResource) {
	if l != nil {
		return l.BackendAddressPool
	}
	return
}

func (l *LoadBalancingRulePropertiesFormat) GetBackendAddressPools() (rv []*SubResource) {
	if l != nil {
		return l.BackendAddressPools
	}
	return
}

func (l *LoadBalancingRulePropertiesFormat) GetBackendPort() (rv int32) {
	if l != nil && l.BackendPort != nil {
		return *l.BackendPort
	}
	return
}

func (l *LoadBalancingRulePropertiesFormat) GetDisableOutboundSnat() (rv bool) {
	if l != nil && l.DisableOutboundSnat != nil {
		return *l.DisableOutboundSnat
	}
	return
}

func (l *LoadBalancingRulePropertiesFormat) GetEnableFloatingIP() (rv bool) {
	if l != nil && l.EnableFloatingIP != nil {
		return *l.EnableFloatingIP
	}
	return
}

func (l *LoadBalancingRulePropertiesFormat) GetEnableTCPReset() (rv bool) {
	if l != nil && l.EnableTCPReset != nil {
		return *l.EnableTCPReset
	}
	return
}

func (l *LoadBalancingRulePropertiesFormat) GetFrontendIPConfiguration() (rv *SubResource) {
	if l != nil {
		return l.FrontendIPConfiguration
	}
	return
}

func (l *LoadBalancingRulePropertiesFormat) GetIdleTimeoutInMinutes() (rv int32) {
	if l != nil && l.IdleTimeoutInMinutes != nil {
		return *l.IdleTimeoutInMinutes
	}
	return
}

func (l *LoadBalancingRulePropertiesFormat) GetLoadDistribution() (rv *LoadDistribution) {
	if l != nil {
		return l.LoadDistribution
	}
	return
}

func (l *LoadBalancingRulePropertiesFormat) GetProbe() (rv *SubResource) {
	if l != nil {
		return l.Probe
	}
	return
}

func (l *LoadBalancingRulePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if l != nil {
		return l.ProvisioningState
	}
	return
}

// LocalNetworkGateway - A common class for general resource information.
type LocalNetworkGateway struct {
	// REQUIRED; Properties of the local network gateway.
	Properties *LocalNetworkGatewayPropertiesFormat

	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (l *LocalNetworkGateway) GetProperties() (rv *LocalNetworkGatewayPropertiesFormat) {
	if l != nil {
		return l.Properties
	}
	return
}

func (l *LocalNetworkGateway) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LocalNetworkGateway) GetLocation() (rv string) {
	if l != nil && l.Location != nil {
		return *l.Location
	}
	return
}

func (l *LocalNetworkGateway) GetTags() (rv map[string]*string) {
	if l != nil {
		return l.Tags
	}
	return
}

func (l *LocalNetworkGateway) GetEtag() (rv string) {
	if l != nil && l.Etag != nil {
		return *l.Etag
	}
	return
}

func (l *LocalNetworkGateway) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LocalNetworkGateway) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

// LocalNetworkGatewayListResult - Response for ListLocalNetworkGateways API service call.
type LocalNetworkGatewayListResult struct {
	// A list of local network gateways that exists in a resource group.
	Value []*LocalNetworkGateway

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (l *LocalNetworkGatewayListResult) GetValue() (rv []*LocalNetworkGateway) {
	if l != nil {
		return l.Value
	}
	return
}

func (l *LocalNetworkGatewayListResult) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

// LocalNetworkGatewayPropertiesFormat - LocalNetworkGateway properties.
type LocalNetworkGatewayPropertiesFormat struct {
	// Local network gateway's BGP speaker settings.
	BgpSettings *BgpSettings

	// FQDN of local network gateway.
	Fqdn *string

	// IP address of local network gateway.
	GatewayIPAddress *string

	// Local network site address space.
	LocalNetworkAddressSpace *AddressSpace

	// READ-ONLY; The provisioning state of the local network gateway resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the local network gateway resource.
	ResourceGUID *string
}

func (l *LocalNetworkGatewayPropertiesFormat) GetBgpSettings() (rv *BgpSettings) {
	if l != nil {
		return l.BgpSettings
	}
	return
}

func (l *LocalNetworkGatewayPropertiesFormat) GetFqdn() (rv string) {
	if l != nil && l.Fqdn != nil {
		return *l.Fqdn
	}
	return
}

func (l *LocalNetworkGatewayPropertiesFormat) GetGatewayIPAddress() (rv string) {
	if l != nil && l.GatewayIPAddress != nil {
		return *l.GatewayIPAddress
	}
	return
}

func (l *LocalNetworkGatewayPropertiesFormat) GetLocalNetworkAddressSpace() (rv *AddressSpace) {
	if l != nil {
		return l.LocalNetworkAddressSpace
	}
	return
}

func (l *LocalNetworkGatewayPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if l != nil {
		return l.ProvisioningState
	}
	return
}

func (l *LocalNetworkGatewayPropertiesFormat) GetResourceGUID() (rv string) {
	if l != nil && l.ResourceGUID != nil {
		return *l.ResourceGUID
	}
	return
}

// LogSpecification - Description of logging specification.
type LogSpecification struct {
	// Duration of the blob.
	BlobDuration *string

	// The display name of the specification.
	DisplayName *string

	// The name of the specification.
	Name *string
}

func (l *LogSpecification) GetBlobDuration() (rv string) {
	if l != nil && l.BlobDuration != nil {
		return *l.BlobDuration
	}
	return
}

func (l *LogSpecification) GetDisplayName() (rv string) {
	if l != nil && l.DisplayName != nil {
		return *l.DisplayName
	}
	return
}

func (l *LogSpecification) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

// ManagedRuleGroupOverride - Defines a managed rule group override setting.
type ManagedRuleGroupOverride struct {
	// REQUIRED; The managed rule group to override.
	RuleGroupName *string

	// List of rules that will be disabled. If none specified, all rules in the group will be disabled.
	Rules []*ManagedRuleOverride
}

func (m *ManagedRuleGroupOverride) GetRuleGroupName() (rv string) {
	if m != nil && m.RuleGroupName != nil {
		return *m.RuleGroupName
	}
	return
}

func (m *ManagedRuleGroupOverride) GetRules() (rv []*ManagedRuleOverride) {
	if m != nil {
		return m.Rules
	}
	return
}

// ManagedRuleOverride - Defines a managed rule group override setting.
type ManagedRuleOverride struct {
	// REQUIRED; Identifier for the managed rule.
	RuleID *string

	// Describes the override action to be applied when rule matches.
	Action *ActionType

	// The state of the managed rule. Defaults to Disabled if not specified.
	State *ManagedRuleEnabledState
}

func (m *ManagedRuleOverride) GetRuleID() (rv string) {
	if m != nil && m.RuleID != nil {
		return *m.RuleID
	}
	return
}

func (m *ManagedRuleOverride) GetAction() (rv *ActionType) {
	if m != nil {
		return m.Action
	}
	return
}

func (m *ManagedRuleOverride) GetState() (rv *ManagedRuleEnabledState) {
	if m != nil {
		return m.State
	}
	return
}

// ManagedRuleSet - Defines a managed rule set.
type ManagedRuleSet struct {
	// REQUIRED; Defines the rule set type to use.
	RuleSetType *string

	// REQUIRED; Defines the version of the rule set to use.
	RuleSetVersion *string

	// Defines the rule group overrides to apply to the rule set.
	RuleGroupOverrides []*ManagedRuleGroupOverride
}

func (m *ManagedRuleSet) GetRuleSetType() (rv string) {
	if m != nil && m.RuleSetType != nil {
		return *m.RuleSetType
	}
	return
}

func (m *ManagedRuleSet) GetRuleSetVersion() (rv string) {
	if m != nil && m.RuleSetVersion != nil {
		return *m.RuleSetVersion
	}
	return
}

func (m *ManagedRuleSet) GetRuleGroupOverrides() (rv []*ManagedRuleGroupOverride) {
	if m != nil {
		return m.RuleGroupOverrides
	}
	return
}

// ManagedRulesDefinition - Allow to exclude some variable satisfy the condition for the WAF check.
type ManagedRulesDefinition struct {
	// REQUIRED; The managed rule sets that are associated with the policy.
	ManagedRuleSets []*ManagedRuleSet

	// The Exclusions that are applied on the policy.
	Exclusions []*OwaspCrsExclusionEntry
}

func (m *ManagedRulesDefinition) GetManagedRuleSets() (rv []*ManagedRuleSet) {
	if m != nil {
		return m.ManagedRuleSets
	}
	return
}

func (m *ManagedRulesDefinition) GetExclusions() (rv []*OwaspCrsExclusionEntry) {
	if m != nil {
		return m.Exclusions
	}
	return
}

// ManagedServiceIdentity - Identity for the resource.
type ManagedServiceIdentity struct {
	// The type of identity used for the resource. The type 'SystemAssigned, UserAssigned' includes both an implicitly created
	// identity and a set of user assigned identities. The type 'None' will remove any
	// identities from the virtual machine.
	Type *ResourceIdentityType

	// The list of user identities associated with resource. The user identity dictionary key references will be ARM resource
	// ids in the form:
	// '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
	UserAssignedIdentities map[string]*Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties

	// READ-ONLY; The principal id of the system assigned identity. This property will only be provided for a system assigned
	// identity.
	PrincipalID *string

	// READ-ONLY; The tenant id of the system assigned identity. This property will only be provided for a system assigned identity.
	TenantID *string
}

func (m *ManagedServiceIdentity) GetType() (rv *ResourceIdentityType) {
	if m != nil {
		return m.Type
	}
	return
}

func (m *ManagedServiceIdentity) GetUserAssignedIdentities() (rv map[string]*Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties) {
	if m != nil {
		return m.UserAssignedIdentities
	}
	return
}

func (m *ManagedServiceIdentity) GetPrincipalID() (rv string) {
	if m != nil && m.PrincipalID != nil {
		return *m.PrincipalID
	}
	return
}

func (m *ManagedServiceIdentity) GetTenantID() (rv string) {
	if m != nil && m.TenantID != nil {
		return *m.TenantID
	}
	return
}

// Manager - The Managed Network resource
type Manager struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// The network manager properties
	Properties *ManagerProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; The system metadata related to this resource.
	SystemData *SystemData

	// READ-ONLY; Resource type.
	Type *string
}

func (m *Manager) GetID() (rv string) {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return
}

func (m *Manager) GetLocation() (rv string) {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return
}

func (m *Manager) GetProperties() (rv *ManagerProperties) {
	if m != nil {
		return m.Properties
	}
	return
}

func (m *Manager) GetTags() (rv map[string]*string) {
	if m != nil {
		return m.Tags
	}
	return
}

func (m *Manager) GetEtag() (rv string) {
	if m != nil && m.Etag != nil {
		return *m.Etag
	}
	return
}

func (m *Manager) GetName() (rv string) {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return
}

func (m *Manager) GetSystemData() (rv *SystemData) {
	if m != nil {
		return m.SystemData
	}
	return
}

func (m *Manager) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

// ManagerCommit - Network Manager Commit.
type ManagerCommit struct {
	// REQUIRED; Commit Type.
	CommitType *ConfigurationType

	// REQUIRED; List of target locations.
	TargetLocations []*string

	// List of configuration ids.
	ConfigurationIDs []*string

	// READ-ONLY; Commit Id.
	CommitID *string
}

func (m *ManagerCommit) GetCommitType() (rv *ConfigurationType) {
	if m != nil {
		return m.CommitType
	}
	return
}

func (m *ManagerCommit) GetTargetLocations() (rv []*string) {
	if m != nil {
		return m.TargetLocations
	}
	return
}

func (m *ManagerCommit) GetConfigurationIDs() (rv []*string) {
	if m != nil {
		return m.ConfigurationIDs
	}
	return
}

func (m *ManagerCommit) GetCommitID() (rv string) {
	if m != nil && m.CommitID != nil {
		return *m.CommitID
	}
	return
}

// ManagerConnection - The Network Manager Connection resource
type ManagerConnection struct {
	// The scope connection properties
	Properties *ManagerConnectionProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource ID.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; The system metadata related to this resource.
	SystemData *SystemData

	// READ-ONLY; Resource type.
	Type *string
}

func (m *ManagerConnection) GetProperties() (rv *ManagerConnectionProperties) {
	if m != nil {
		return m.Properties
	}
	return
}

func (m *ManagerConnection) GetEtag() (rv string) {
	if m != nil && m.Etag != nil {
		return *m.Etag
	}
	return
}

func (m *ManagerConnection) GetID() (rv string) {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return
}

func (m *ManagerConnection) GetName() (rv string) {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return
}

func (m *ManagerConnection) GetSystemData() (rv *SystemData) {
	if m != nil {
		return m.SystemData
	}
	return
}

func (m *ManagerConnection) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

// ManagerConnectionListResult - List of network manager connections.
type ManagerConnectionListResult struct {
	// Gets the URL to get the next page of results.
	NextLink *string

	// List of network manager connections.
	Value []*ManagerConnection
}

func (m *ManagerConnectionListResult) GetNextLink() (rv string) {
	if m != nil && m.NextLink != nil {
		return *m.NextLink
	}
	return
}

func (m *ManagerConnectionListResult) GetValue() (rv []*ManagerConnection) {
	if m != nil {
		return m.Value
	}
	return
}

// ManagerConnectionProperties - Information about the network manager connection.
type ManagerConnectionProperties struct {
	// A description of the network manager connection.
	Description *string

	// Network Manager Id.
	NetworkManagerID *string

	// READ-ONLY; Connection state.
	ConnectionState *ScopeConnectionState
}

func (m *ManagerConnectionProperties) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *ManagerConnectionProperties) GetNetworkManagerID() (rv string) {
	if m != nil && m.NetworkManagerID != nil {
		return *m.NetworkManagerID
	}
	return
}

func (m *ManagerConnectionProperties) GetConnectionState() (rv *ScopeConnectionState) {
	if m != nil {
		return m.ConnectionState
	}
	return
}

// ManagerDeploymentStatus - Network Manager Deployment Status.
type ManagerDeploymentStatus struct {
	// Commit Time.
	CommitTime *time.Time

	// List of configuration ids.
	ConfigurationIDs []*string

	// Deployment Status.
	DeploymentStatus *DeploymentStatus

	// Configuration Deployment Type.
	DeploymentType *ConfigurationType

	// Error Message.
	ErrorMessage *string

	// Region Name.
	Region *string
}

func (m *ManagerDeploymentStatus) GetCommitTime() (rv *time.Time) {
	if m != nil {
		return m.CommitTime
	}
	return
}

func (m *ManagerDeploymentStatus) GetConfigurationIDs() (rv []*string) {
	if m != nil {
		return m.ConfigurationIDs
	}
	return
}

func (m *ManagerDeploymentStatus) GetDeploymentStatus() (rv *DeploymentStatus) {
	if m != nil {
		return m.DeploymentStatus
	}
	return
}

func (m *ManagerDeploymentStatus) GetDeploymentType() (rv *ConfigurationType) {
	if m != nil {
		return m.DeploymentType
	}
	return
}

func (m *ManagerDeploymentStatus) GetErrorMessage() (rv string) {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return
}

func (m *ManagerDeploymentStatus) GetRegion() (rv string) {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return
}

// ManagerDeploymentStatusListResult - A list of Network Manager Deployment Status
type ManagerDeploymentStatusListResult struct {
	// When present, the value can be passed to a subsequent query call (together with the same query and scopes used in the current
	// request) to retrieve the next page of data.
	SkipToken *string

	// Gets a page of Network Manager Deployment Status
	Value []*ManagerDeploymentStatus
}

func (m *ManagerDeploymentStatusListResult) GetSkipToken() (rv string) {
	if m != nil && m.SkipToken != nil {
		return *m.SkipToken
	}
	return
}

func (m *ManagerDeploymentStatusListResult) GetValue() (rv []*ManagerDeploymentStatus) {
	if m != nil {
		return m.Value
	}
	return
}

// ManagerDeploymentStatusParameter - Network Manager Deployment Status Parameter.
type ManagerDeploymentStatusParameter struct {
	// List of deployment types.
	DeploymentTypes []*ConfigurationType

	// List of locations.
	Regions []*string

	// Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.
	SkipToken *string
}

func (m *ManagerDeploymentStatusParameter) GetDeploymentTypes() (rv []*ConfigurationType) {
	if m != nil {
		return m.DeploymentTypes
	}
	return
}

func (m *ManagerDeploymentStatusParameter) GetRegions() (rv []*string) {
	if m != nil {
		return m.Regions
	}
	return
}

func (m *ManagerDeploymentStatusParameter) GetSkipToken() (rv string) {
	if m != nil && m.SkipToken != nil {
		return *m.SkipToken
	}
	return
}

// ManagerEffectiveConnectivityConfigurationListResult - Result of the request to list networkManagerEffectiveConnectivityConfiguration.
// It contains a list of groups and a skiptoken to get the next set of results.
type ManagerEffectiveConnectivityConfigurationListResult struct {
	// When present, the value can be passed to a subsequent query call (together with the same query and scopes used in the current
	// request) to retrieve the next page of data.
	SkipToken *string

	// Gets a page of NetworkManagerEffectiveConnectivityConfiguration
	Value []*EffectiveConnectivityConfiguration
}

func (m *ManagerEffectiveConnectivityConfigurationListResult) GetSkipToken() (rv string) {
	if m != nil && m.SkipToken != nil {
		return *m.SkipToken
	}
	return
}

func (m *ManagerEffectiveConnectivityConfigurationListResult) GetValue() (rv []*EffectiveConnectivityConfiguration) {
	if m != nil {
		return m.Value
	}
	return
}

// ManagerEffectiveSecurityAdminRulesListResult - Result of the request to list networkManagerEffectiveSecurityAdminRules.
// It contains a list of groups and a skiptoken to get the next set of results.
type ManagerEffectiveSecurityAdminRulesListResult struct {
	// When present, the value can be passed to a subsequent query call (together with the same query and scopes used in the current
	// request) to retrieve the next page of data.
	SkipToken *string

	// Gets a page of NetworkManagerEffectiveSecurityAdminRules
	Value []EffectiveBaseSecurityAdminRuleClassification
}

func (m *ManagerEffectiveSecurityAdminRulesListResult) GetSkipToken() (rv string) {
	if m != nil && m.SkipToken != nil {
		return *m.SkipToken
	}
	return
}

func (m *ManagerEffectiveSecurityAdminRulesListResult) GetValue() (rv []EffectiveBaseSecurityAdminRuleClassification) {
	if m != nil {
		return m.Value
	}
	return
}

// ManagerListResult - Result of the request to list NetworkManager. It contains a list of network managers and a URL link
// to get the next set of results.
type ManagerListResult struct {
	// Gets the URL to get the next page of results.
	NextLink *string

	// Gets a page of NetworkManager
	Value []*Manager
}

func (m *ManagerListResult) GetNextLink() (rv string) {
	if m != nil && m.NextLink != nil {
		return *m.NextLink
	}
	return
}

func (m *ManagerListResult) GetValue() (rv []*Manager) {
	if m != nil {
		return m.Value
	}
	return
}

// ManagerProperties - Properties of Managed Network
type ManagerProperties struct {
	// REQUIRED; Scope Access.
	NetworkManagerScopeAccesses []*ConfigurationType

	// REQUIRED; Scope of Network Manager.
	NetworkManagerScopes *ManagerPropertiesNetworkManagerScopes

	// A description of the network manager.
	Description *string

	// READ-ONLY; The provisioning state of the network manager resource.
	ProvisioningState *ProvisioningState
}

func (m *ManagerProperties) GetNetworkManagerScopeAccesses() (rv []*ConfigurationType) {
	if m != nil {
		return m.NetworkManagerScopeAccesses
	}
	return
}

func (m *ManagerProperties) GetNetworkManagerScopes() (rv *ManagerPropertiesNetworkManagerScopes) {
	if m != nil {
		return m.NetworkManagerScopes
	}
	return
}

func (m *ManagerProperties) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *ManagerProperties) GetProvisioningState() (rv *ProvisioningState) {
	if m != nil {
		return m.ProvisioningState
	}
	return
}

// ManagerPropertiesNetworkManagerScopes - Scope of Network Manager.
type ManagerPropertiesNetworkManagerScopes struct {
	// List of management groups.
	ManagementGroups []*string

	// List of subscriptions.
	Subscriptions []*string

	// READ-ONLY; List of cross tenant scopes.
	CrossTenantScopes []*CrossTenantScopes
}

func (m *ManagerPropertiesNetworkManagerScopes) GetManagementGroups() (rv []*string) {
	if m != nil {
		return m.ManagementGroups
	}
	return
}

func (m *ManagerPropertiesNetworkManagerScopes) GetSubscriptions() (rv []*string) {
	if m != nil {
		return m.Subscriptions
	}
	return
}

func (m *ManagerPropertiesNetworkManagerScopes) GetCrossTenantScopes() (rv []*CrossTenantScopes) {
	if m != nil {
		return m.CrossTenantScopes
	}
	return
}

// ManagerSecurityGroupItem - Network manager security group item.
type ManagerSecurityGroupItem struct {
	// REQUIRED; Network manager group Id.
	NetworkGroupID *string
}

func (m *ManagerSecurityGroupItem) GetNetworkGroupID() (rv string) {
	if m != nil && m.NetworkGroupID != nil {
		return *m.NetworkGroupID
	}
	return
}

// MatchCondition - Define match conditions.
type MatchCondition struct {
	// REQUIRED; Match value.
	MatchValues []*string

	// REQUIRED; List of match variables.
	MatchVariables []*MatchVariable

	// REQUIRED; The operator to be matched.
	Operator *WebApplicationFirewallOperator

	// Whether this is negate condition or not.
	NegationConditon *bool

	// List of transforms.
	Transforms []*WebApplicationFirewallTransform
}

func (m *MatchCondition) GetMatchValues() (rv []*string) {
	if m != nil {
		return m.MatchValues
	}
	return
}

func (m *MatchCondition) GetMatchVariables() (rv []*MatchVariable) {
	if m != nil {
		return m.MatchVariables
	}
	return
}

func (m *MatchCondition) GetOperator() (rv *WebApplicationFirewallOperator) {
	if m != nil {
		return m.Operator
	}
	return
}

func (m *MatchCondition) GetNegationConditon() (rv bool) {
	if m != nil && m.NegationConditon != nil {
		return *m.NegationConditon
	}
	return
}

func (m *MatchCondition) GetTransforms() (rv []*WebApplicationFirewallTransform) {
	if m != nil {
		return m.Transforms
	}
	return
}

// MatchVariable - Define match variables.
type MatchVariable struct {
	// REQUIRED; Match Variable.
	VariableName *WebApplicationFirewallMatchVariable

	// The selector of match variable.
	Selector *string
}

func (m *MatchVariable) GetVariableName() (rv *WebApplicationFirewallMatchVariable) {
	if m != nil {
		return m.VariableName
	}
	return
}

func (m *MatchVariable) GetSelector() (rv string) {
	if m != nil && m.Selector != nil {
		return *m.Selector
	}
	return
}

// MatchedRule - Matched rule.
type MatchedRule struct {
	// The network traffic is allowed or denied. Possible values are 'Allow' and 'Deny'.
	Action *string

	// Name of the matched network security rule.
	RuleName *string
}

func (m *MatchedRule) GetAction() (rv string) {
	if m != nil && m.Action != nil {
		return *m.Action
	}
	return
}

func (m *MatchedRule) GetRuleName() (rv string) {
	if m != nil && m.RuleName != nil {
		return *m.RuleName
	}
	return
}

// MetricSpecification - Description of metrics specification.
type MetricSpecification struct {
	// The aggregation type.
	AggregationType *string

	// List of availability.
	Availabilities []*Availability

	// List of dimensions.
	Dimensions []*Dimension

	// The description of the metric.
	DisplayDescription *string

	// The display name of the metric.
	DisplayName *string

	// Whether regional MDM account enabled.
	EnableRegionalMdmAccount *bool

	// Whether gaps would be filled with zeros.
	FillGapWithZero *bool

	// Whether the metric is internal.
	IsInternal *bool

	// Pattern for the filter of the metric.
	MetricFilterPattern *string

	// The name of the metric.
	Name *string

	// The resource Id dimension name override.
	ResourceIDDimensionNameOverride *string

	// The source MDM account.
	SourceMdmAccount *string

	// The source MDM namespace.
	SourceMdmNamespace *string

	// Units the metric to be displayed in.
	Unit *string
}

func (m *MetricSpecification) GetAggregationType() (rv string) {
	if m != nil && m.AggregationType != nil {
		return *m.AggregationType
	}
	return
}

func (m *MetricSpecification) GetAvailabilities() (rv []*Availability) {
	if m != nil {
		return m.Availabilities
	}
	return
}

func (m *MetricSpecification) GetDimensions() (rv []*Dimension) {
	if m != nil {
		return m.Dimensions
	}
	return
}

func (m *MetricSpecification) GetDisplayDescription() (rv string) {
	if m != nil && m.DisplayDescription != nil {
		return *m.DisplayDescription
	}
	return
}

func (m *MetricSpecification) GetDisplayName() (rv string) {
	if m != nil && m.DisplayName != nil {
		return *m.DisplayName
	}
	return
}

func (m *MetricSpecification) GetEnableRegionalMdmAccount() (rv bool) {
	if m != nil && m.EnableRegionalMdmAccount != nil {
		return *m.EnableRegionalMdmAccount
	}
	return
}

func (m *MetricSpecification) GetFillGapWithZero() (rv bool) {
	if m != nil && m.FillGapWithZero != nil {
		return *m.FillGapWithZero
	}
	return
}

func (m *MetricSpecification) GetIsInternal() (rv bool) {
	if m != nil && m.IsInternal != nil {
		return *m.IsInternal
	}
	return
}

func (m *MetricSpecification) GetMetricFilterPattern() (rv string) {
	if m != nil && m.MetricFilterPattern != nil {
		return *m.MetricFilterPattern
	}
	return
}

func (m *MetricSpecification) GetName() (rv string) {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return
}

func (m *MetricSpecification) GetResourceIDDimensionNameOverride() (rv string) {
	if m != nil && m.ResourceIDDimensionNameOverride != nil {
		return *m.ResourceIDDimensionNameOverride
	}
	return
}

func (m *MetricSpecification) GetSourceMdmAccount() (rv string) {
	if m != nil && m.SourceMdmAccount != nil {
		return *m.SourceMdmAccount
	}
	return
}

func (m *MetricSpecification) GetSourceMdmNamespace() (rv string) {
	if m != nil && m.SourceMdmNamespace != nil {
		return *m.SourceMdmNamespace
	}
	return
}

func (m *MetricSpecification) GetUnit() (rv string) {
	if m != nil && m.Unit != nil {
		return *m.Unit
	}
	return
}

// NatGateway - Nat Gateway resource.
type NatGateway struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Nat Gateway properties.
	Properties *NatGatewayPropertiesFormat

	// The nat gateway SKU.
	SKU *NatGatewaySKU

	// Resource tags.
	Tags map[string]*string

	// A list of availability zones denoting the zone in which Nat Gateway should be deployed.
	Zones []*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (n *NatGateway) GetID() (rv string) {
	if n != nil && n.ID != nil {
		return *n.ID
	}
	return
}

func (n *NatGateway) GetLocation() (rv string) {
	if n != nil && n.Location != nil {
		return *n.Location
	}
	return
}

func (n *NatGateway) GetProperties() (rv *NatGatewayPropertiesFormat) {
	if n != nil {
		return n.Properties
	}
	return
}

func (n *NatGateway) GetSKU() (rv *NatGatewaySKU) {
	if n != nil {
		return n.SKU
	}
	return
}

func (n *NatGateway) GetTags() (rv map[string]*string) {
	if n != nil {
		return n.Tags
	}
	return
}

func (n *NatGateway) GetZones() (rv []*string) {
	if n != nil {
		return n.Zones
	}
	return
}

func (n *NatGateway) GetEtag() (rv string) {
	if n != nil && n.Etag != nil {
		return *n.Etag
	}
	return
}

func (n *NatGateway) GetName() (rv string) {
	if n != nil && n.Name != nil {
		return *n.Name
	}
	return
}

func (n *NatGateway) GetType() (rv string) {
	if n != nil && n.Type != nil {
		return *n.Type
	}
	return
}

// NatGatewayListResult - Response for ListNatGateways API service call.
type NatGatewayListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of Nat Gateways that exists in a resource group.
	Value []*NatGateway
}

func (n *NatGatewayListResult) GetNextLink() (rv string) {
	if n != nil && n.NextLink != nil {
		return *n.NextLink
	}
	return
}

func (n *NatGatewayListResult) GetValue() (rv []*NatGateway) {
	if n != nil {
		return n.Value
	}
	return
}

// NatGatewayPropertiesFormat - Nat Gateway properties.
type NatGatewayPropertiesFormat struct {
	// The idle timeout of the nat gateway.
	IdleTimeoutInMinutes *int32

	// An array of public ip addresses associated with the nat gateway resource.
	PublicIPAddresses []*SubResource

	// An array of public ip prefixes associated with the nat gateway resource.
	PublicIPPrefixes []*SubResource

	// READ-ONLY; The provisioning state of the NAT gateway resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the NAT gateway resource.
	ResourceGUID *string

	// READ-ONLY; An array of references to the subnets using this nat gateway resource.
	Subnets []*SubResource
}

func (n *NatGatewayPropertiesFormat) GetIdleTimeoutInMinutes() (rv int32) {
	if n != nil && n.IdleTimeoutInMinutes != nil {
		return *n.IdleTimeoutInMinutes
	}
	return
}

func (n *NatGatewayPropertiesFormat) GetPublicIPAddresses() (rv []*SubResource) {
	if n != nil {
		return n.PublicIPAddresses
	}
	return
}

func (n *NatGatewayPropertiesFormat) GetPublicIPPrefixes() (rv []*SubResource) {
	if n != nil {
		return n.PublicIPPrefixes
	}
	return
}

func (n *NatGatewayPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if n != nil {
		return n.ProvisioningState
	}
	return
}

func (n *NatGatewayPropertiesFormat) GetResourceGUID() (rv string) {
	if n != nil && n.ResourceGUID != nil {
		return *n.ResourceGUID
	}
	return
}

func (n *NatGatewayPropertiesFormat) GetSubnets() (rv []*SubResource) {
	if n != nil {
		return n.Subnets
	}
	return
}

// NatGatewaySKU - SKU of nat gateway.
type NatGatewaySKU struct {
	// Name of Nat Gateway SKU.
	Name *NatGatewaySKUName
}

func (n *NatGatewaySKU) GetName() (rv *NatGatewaySKUName) {
	if n != nil {
		return n.Name
	}
	return
}

// NatRule - Rule of type nat.
type NatRule struct {
	// REQUIRED; Rule Type.
	RuleType *FirewallPolicyRuleType

	// Description of the rule.
	Description *string

	// List of destination IP addresses or Service Tags.
	DestinationAddresses []*string

	// List of destination ports.
	DestinationPorts []*string

	// Array of FirewallPolicyRuleNetworkProtocols.
	IPProtocols []*FirewallPolicyRuleNetworkProtocol

	// Name of the rule.
	Name *string

	// List of source IP addresses for this rule.
	SourceAddresses []*string

	// List of source IpGroups for this rule.
	SourceIPGroups []*string

	// The translated address for this NAT rule.
	TranslatedAddress *string

	// The translated FQDN for this NAT rule.
	TranslatedFqdn *string

	// The translated port for this NAT rule.
	TranslatedPort *string
}

func (n *NatRule) GetRuleType() (rv *FirewallPolicyRuleType) {
	if n != nil {
		return n.RuleType
	}
	return
}

func (n *NatRule) GetDescription() (rv string) {
	if n != nil && n.Description != nil {
		return *n.Description
	}
	return
}

func (n *NatRule) GetDestinationAddresses() (rv []*string) {
	if n != nil {
		return n.DestinationAddresses
	}
	return
}

func (n *NatRule) GetDestinationPorts() (rv []*string) {
	if n != nil {
		return n.DestinationPorts
	}
	return
}

func (n *NatRule) GetIPProtocols() (rv []*FirewallPolicyRuleNetworkProtocol) {
	if n != nil {
		return n.IPProtocols
	}
	return
}

func (n *NatRule) GetName() (rv string) {
	if n != nil && n.Name != nil {
		return *n.Name
	}
	return
}

func (n *NatRule) GetSourceAddresses() (rv []*string) {
	if n != nil {
		return n.SourceAddresses
	}
	return
}

func (n *NatRule) GetSourceIPGroups() (rv []*string) {
	if n != nil {
		return n.SourceIPGroups
	}
	return
}

func (n *NatRule) GetTranslatedAddress() (rv string) {
	if n != nil && n.TranslatedAddress != nil {
		return *n.TranslatedAddress
	}
	return
}

func (n *NatRule) GetTranslatedFqdn() (rv string) {
	if n != nil && n.TranslatedFqdn != nil {
		return *n.TranslatedFqdn
	}
	return
}

func (n *NatRule) GetTranslatedPort() (rv string) {
	if n != nil && n.TranslatedPort != nil {
		return *n.TranslatedPort
	}
	return
}

// GetFirewallPolicyRule implements the FirewallPolicyRuleClassification interface for type NatRule.
func (n *NatRule) GetFirewallPolicyRule() *FirewallPolicyRule {
	return &FirewallPolicyRule{
		Description: n.Description,
		Name:        n.Name,
		RuleType:    n.RuleType,
	}
}

// NatRulePortMapping - Individual port mappings for inbound NAT rule created for backend pool.
type NatRulePortMapping struct {
	// Backend port.
	BackendPort *int32

	// Frontend port.
	FrontendPort *int32

	// Name of inbound NAT rule.
	InboundNatRuleName *string
}

func (n *NatRulePortMapping) GetBackendPort() (rv int32) {
	if n != nil && n.BackendPort != nil {
		return *n.BackendPort
	}
	return
}

func (n *NatRulePortMapping) GetFrontendPort() (rv int32) {
	if n != nil && n.FrontendPort != nil {
		return *n.FrontendPort
	}
	return
}

func (n *NatRulePortMapping) GetInboundNatRuleName() (rv string) {
	if n != nil && n.InboundNatRuleName != nil {
		return *n.InboundNatRuleName
	}
	return
}

// NextHopParameters - Parameters that define the source and destination endpoint.
type NextHopParameters struct {
	// REQUIRED; The destination IP address.
	DestinationIPAddress *string

	// REQUIRED; The source IP address.
	SourceIPAddress *string

	// REQUIRED; The resource identifier of the target resource against which the action is to be performed.
	TargetResourceID *string

	// The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of the nics, then this parameter must be specified.
	// Otherwise optional).
	TargetNicResourceID *string
}

func (n *NextHopParameters) GetDestinationIPAddress() (rv string) {
	if n != nil && n.DestinationIPAddress != nil {
		return *n.DestinationIPAddress
	}
	return
}

func (n *NextHopParameters) GetSourceIPAddress() (rv string) {
	if n != nil && n.SourceIPAddress != nil {
		return *n.SourceIPAddress
	}
	return
}

func (n *NextHopParameters) GetTargetResourceID() (rv string) {
	if n != nil && n.TargetResourceID != nil {
		return *n.TargetResourceID
	}
	return
}

func (n *NextHopParameters) GetTargetNicResourceID() (rv string) {
	if n != nil && n.TargetNicResourceID != nil {
		return *n.TargetNicResourceID
	}
	return
}

// NextHopResult - The information about next hop from the specified VM.
type NextHopResult struct {
	// Next hop IP Address.
	NextHopIPAddress *string

	// Next hop type.
	NextHopType *NextHopType

	// The resource identifier for the route table associated with the route being returned. If the route being returned does
	// not correspond to any user created routes then this field will be the string
	// 'System Route'.
	RouteTableID *string
}

func (n *NextHopResult) GetNextHopIPAddress() (rv string) {
	if n != nil && n.NextHopIPAddress != nil {
		return *n.NextHopIPAddress
	}
	return
}

func (n *NextHopResult) GetNextHopType() (rv *NextHopType) {
	if n != nil {
		return n.NextHopType
	}
	return
}

func (n *NextHopResult) GetRouteTableID() (rv string) {
	if n != nil && n.RouteTableID != nil {
		return *n.RouteTableID
	}
	return
}

// O365BreakOutCategoryPolicies - Office365 breakout categories.
type O365BreakOutCategoryPolicies struct {
	// Flag to control allow category.
	Allow *bool

	// Flag to control default category.
	Default *bool

	// Flag to control optimize category.
	Optimize *bool
}

func (o *O365BreakOutCategoryPolicies) GetAllow() (rv bool) {
	if o != nil && o.Allow != nil {
		return *o.Allow
	}
	return
}

func (o *O365BreakOutCategoryPolicies) GetDefault() (rv bool) {
	if o != nil && o.Default != nil {
		return *o.Default
	}
	return
}

func (o *O365BreakOutCategoryPolicies) GetOptimize() (rv bool) {
	if o != nil && o.Optimize != nil {
		return *o.Optimize
	}
	return
}

// O365PolicyProperties - The Office365 breakout policy.
type O365PolicyProperties struct {
	// Office365 breakout categories.
	BreakOutCategories *O365BreakOutCategoryPolicies
}

func (o *O365PolicyProperties) GetBreakOutCategories() (rv *O365BreakOutCategoryPolicies) {
	if o != nil {
		return o.BreakOutCategories
	}
	return
}

// Office365PolicyProperties - Network Virtual Appliance Sku Properties.
type Office365PolicyProperties struct {
	// Office 365 breakout categories.
	BreakOutCategories *BreakOutCategoryPolicies
}

func (o *Office365PolicyProperties) GetBreakOutCategories() (rv *BreakOutCategoryPolicies) {
	if o != nil {
		return o.BreakOutCategories
	}
	return
}

// Operation - Network REST API operation definition.
type Operation struct {
	// Display metadata associated with the operation.
	Display *OperationDisplay

	// Operation name: {provider}/{resource}/{operation}.
	Name *string

	// Origin of the operation.
	Origin *string

	// Operation properties format.
	Properties *OperationPropertiesFormat
}

func (o *Operation) GetDisplay() (rv *OperationDisplay) {
	if o != nil {
		return o.Display
	}
	return
}

func (o *Operation) GetName() (rv string) {
	if o != nil && o.Name != nil {
		return *o.Name
	}
	return
}

func (o *Operation) GetOrigin() (rv string) {
	if o != nil && o.Origin != nil {
		return *o.Origin
	}
	return
}

func (o *Operation) GetProperties() (rv *OperationPropertiesFormat) {
	if o != nil {
		return o.Properties
	}
	return
}

// OperationDisplay - Display metadata associated with the operation.
type OperationDisplay struct {
	// Description of the operation.
	Description *string

	// Type of the operation: get, read, delete, etc.
	Operation *string

	// Service provider: Microsoft Network.
	Provider *string

	// Resource on which the operation is performed.
	Resource *string
}

func (o *OperationDisplay) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *OperationDisplay) GetOperation() (rv string) {
	if o != nil && o.Operation != nil {
		return *o.Operation
	}
	return
}

func (o *OperationDisplay) GetProvider() (rv string) {
	if o != nil && o.Provider != nil {
		return *o.Provider
	}
	return
}

func (o *OperationDisplay) GetResource() (rv string) {
	if o != nil && o.Resource != nil {
		return *o.Resource
	}
	return
}

// OperationListResult - Result of the request to list Network operations. It contains a list of operations and a URL link
// to get the next set of results.
type OperationListResult struct {
	// URL to get the next set of operation list results if there are any.
	NextLink *string

	// List of Network operations supported by the Network resource provider.
	Value []*Operation
}

func (o *OperationListResult) GetNextLink() (rv string) {
	if o != nil && o.NextLink != nil {
		return *o.NextLink
	}
	return
}

func (o *OperationListResult) GetValue() (rv []*Operation) {
	if o != nil {
		return o.Value
	}
	return
}

// OperationPropertiesFormat - Description of operation properties format.
type OperationPropertiesFormat struct {
	// Specification of the service.
	ServiceSpecification *OperationPropertiesFormatServiceSpecification
}

func (o *OperationPropertiesFormat) GetServiceSpecification() (rv *OperationPropertiesFormatServiceSpecification) {
	if o != nil {
		return o.ServiceSpecification
	}
	return
}

// OperationPropertiesFormatServiceSpecification - Specification of the service.
type OperationPropertiesFormatServiceSpecification struct {
	// Operation log specification.
	LogSpecifications []*LogSpecification

	// Operation service specification.
	MetricSpecifications []*MetricSpecification
}

func (o *OperationPropertiesFormatServiceSpecification) GetLogSpecifications() (rv []*LogSpecification) {
	if o != nil {
		return o.LogSpecifications
	}
	return
}

func (o *OperationPropertiesFormatServiceSpecification) GetMetricSpecifications() (rv []*MetricSpecification) {
	if o != nil {
		return o.MetricSpecifications
	}
	return
}

// OrderBy - Describes a column to sort
type OrderBy struct {
	// Describes the actual column name to sort by
	Field *string

	// Describes if results should be in ascending/descending order
	Order *FirewallPolicyIDPSQuerySortOrder
}

func (o *OrderBy) GetField() (rv string) {
	if o != nil && o.Field != nil {
		return *o.Field
	}
	return
}

func (o *OrderBy) GetOrder() (rv *FirewallPolicyIDPSQuerySortOrder) {
	if o != nil {
		return o.Order
	}
	return
}

// OutboundRule - Outbound rule of the load balancer.
type OutboundRule struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within the set of outbound rules used by the load balancer. This name can be used
	// to access the resource.
	Name *string

	// Properties of load balancer outbound rule.
	Properties *OutboundRulePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (o *OutboundRule) GetID() (rv string) {
	if o != nil && o.ID != nil {
		return *o.ID
	}
	return
}

func (o *OutboundRule) GetName() (rv string) {
	if o != nil && o.Name != nil {
		return *o.Name
	}
	return
}

func (o *OutboundRule) GetProperties() (rv *OutboundRulePropertiesFormat) {
	if o != nil {
		return o.Properties
	}
	return
}

func (o *OutboundRule) GetEtag() (rv string) {
	if o != nil && o.Etag != nil {
		return *o.Etag
	}
	return
}

func (o *OutboundRule) GetType() (rv string) {
	if o != nil && o.Type != nil {
		return *o.Type
	}
	return
}

// OutboundRulePropertiesFormat - Outbound rule of the load balancer.
type OutboundRulePropertiesFormat struct {
	// REQUIRED; A reference to a pool of DIPs. Outbound traffic is randomly load balanced across IPs in the backend IPs.
	BackendAddressPool *SubResource

	// REQUIRED; The Frontend IP addresses of the load balancer.
	FrontendIPConfigurations []*SubResource

	// REQUIRED; The protocol for the outbound rule in load balancer.
	Protocol *LoadBalancerOutboundRuleProtocol

	// The number of outbound ports to be used for NAT.
	AllocatedOutboundPorts *int32

	// Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected connection termination. This element is only used
	// when the protocol is set to TCP.
	EnableTCPReset *bool

	// The timeout for the TCP idle connection.
	IdleTimeoutInMinutes *int32

	// READ-ONLY; The provisioning state of the outbound rule resource.
	ProvisioningState *ProvisioningState
}

func (o *OutboundRulePropertiesFormat) GetBackendAddressPool() (rv *SubResource) {
	if o != nil {
		return o.BackendAddressPool
	}
	return
}

func (o *OutboundRulePropertiesFormat) GetFrontendIPConfigurations() (rv []*SubResource) {
	if o != nil {
		return o.FrontendIPConfigurations
	}
	return
}

func (o *OutboundRulePropertiesFormat) GetProtocol() (rv *LoadBalancerOutboundRuleProtocol) {
	if o != nil {
		return o.Protocol
	}
	return
}

func (o *OutboundRulePropertiesFormat) GetAllocatedOutboundPorts() (rv int32) {
	if o != nil && o.AllocatedOutboundPorts != nil {
		return *o.AllocatedOutboundPorts
	}
	return
}

func (o *OutboundRulePropertiesFormat) GetEnableTCPReset() (rv bool) {
	if o != nil && o.EnableTCPReset != nil {
		return *o.EnableTCPReset
	}
	return
}

func (o *OutboundRulePropertiesFormat) GetIdleTimeoutInMinutes() (rv int32) {
	if o != nil && o.IdleTimeoutInMinutes != nil {
		return *o.IdleTimeoutInMinutes
	}
	return
}

func (o *OutboundRulePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if o != nil {
		return o.ProvisioningState
	}
	return
}

// OwaspCrsExclusionEntry - Allow to exclude some variable satisfy the condition for the WAF check.
type OwaspCrsExclusionEntry struct {
	// REQUIRED; The variable to be excluded.
	MatchVariable *OwaspCrsExclusionEntryMatchVariable

	// REQUIRED; When matchVariable is a collection, operator used to specify which elements in the collection this exclusion
	// applies to.
	Selector *string

	// REQUIRED; When matchVariable is a collection, operate on the selector to specify which elements in the collection this
	// exclusion applies to.
	SelectorMatchOperator *OwaspCrsExclusionEntrySelectorMatchOperator

	// The managed rule sets that are associated with the exclusion.
	ExclusionManagedRuleSets []*ExclusionManagedRuleSet
}

func (o *OwaspCrsExclusionEntry) GetMatchVariable() (rv *OwaspCrsExclusionEntryMatchVariable) {
	if o != nil {
		return o.MatchVariable
	}
	return
}

func (o *OwaspCrsExclusionEntry) GetSelector() (rv string) {
	if o != nil && o.Selector != nil {
		return *o.Selector
	}
	return
}

func (o *OwaspCrsExclusionEntry) GetSelectorMatchOperator() (rv *OwaspCrsExclusionEntrySelectorMatchOperator) {
	if o != nil {
		return o.SelectorMatchOperator
	}
	return
}

func (o *OwaspCrsExclusionEntry) GetExclusionManagedRuleSets() (rv []*ExclusionManagedRuleSet) {
	if o != nil {
		return o.ExclusionManagedRuleSets
	}
	return
}

// P2SConnectionConfiguration Resource.
type P2SConnectionConfiguration struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the P2S connection configuration.
	Properties *P2SConnectionConfigurationProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (p *P2SConnectionConfiguration) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *P2SConnectionConfiguration) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *P2SConnectionConfiguration) GetProperties() (rv *P2SConnectionConfigurationProperties) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *P2SConnectionConfiguration) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

// P2SConnectionConfigurationProperties - Parameters for P2SConnectionConfiguration.
type P2SConnectionConfigurationProperties struct {
	// Flag indicating whether the enable internet security flag is turned on for the P2S Connections or not.
	EnableInternetSecurity *bool

	// The Routing Configuration indicating the associated and propagated route tables on this connection.
	RoutingConfiguration *RoutingConfiguration

	// The reference to the address space resource which represents Address space for P2S VpnClient.
	VPNClientAddressPool *AddressSpace

	// READ-ONLY; List of Configuration Policy Groups that this P2SConnectionConfiguration is attached to.
	ConfigurationPolicyGroupAssociations []*SubResource

	// READ-ONLY; List of previous Configuration Policy Groups that this P2SConnectionConfiguration was attached to.
	PreviousConfigurationPolicyGroupAssociations []*VPNServerConfigurationPolicyGroup

	// READ-ONLY; The provisioning state of the P2SConnectionConfiguration resource.
	ProvisioningState *ProvisioningState
}

func (p *P2SConnectionConfigurationProperties) GetEnableInternetSecurity() (rv bool) {
	if p != nil && p.EnableInternetSecurity != nil {
		return *p.EnableInternetSecurity
	}
	return
}

func (p *P2SConnectionConfigurationProperties) GetRoutingConfiguration() (rv *RoutingConfiguration) {
	if p != nil {
		return p.RoutingConfiguration
	}
	return
}

func (p *P2SConnectionConfigurationProperties) GetVPNClientAddressPool() (rv *AddressSpace) {
	if p != nil {
		return p.VPNClientAddressPool
	}
	return
}

func (p *P2SConnectionConfigurationProperties) GetConfigurationPolicyGroupAssociations() (rv []*SubResource) {
	if p != nil {
		return p.ConfigurationPolicyGroupAssociations
	}
	return
}

func (p *P2SConnectionConfigurationProperties) GetPreviousConfigurationPolicyGroupAssociations() (rv []*VPNServerConfigurationPolicyGroup) {
	if p != nil {
		return p.PreviousConfigurationPolicyGroupAssociations
	}
	return
}

func (p *P2SConnectionConfigurationProperties) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

// P2SVPNConnectionHealth - P2S Vpn connection detailed health written to sas url.
type P2SVPNConnectionHealth struct {
	// Returned sas url of the blob to which the p2s vpn connection detailed health will be written.
	SasURL *string
}

func (p *P2SVPNConnectionHealth) GetSasURL() (rv string) {
	if p != nil && p.SasURL != nil {
		return *p.SasURL
	}
	return
}

// P2SVPNConnectionHealthRequest - List of P2S Vpn connection health request.
type P2SVPNConnectionHealthRequest struct {
	// The sas-url to download the P2S Vpn connection health detail.
	OutputBlobSasURL *string

	// The list of p2s vpn user names whose p2s vpn connection detailed health to retrieve for.
	VPNUserNamesFilter []*string
}

func (p *P2SVPNConnectionHealthRequest) GetOutputBlobSasURL() (rv string) {
	if p != nil && p.OutputBlobSasURL != nil {
		return *p.OutputBlobSasURL
	}
	return
}

func (p *P2SVPNConnectionHealthRequest) GetVPNUserNamesFilter() (rv []*string) {
	if p != nil {
		return p.VPNUserNamesFilter
	}
	return
}

// P2SVPNConnectionRequest - List of p2s vpn connections to be disconnected.
type P2SVPNConnectionRequest struct {
	// List of p2s vpn connection Ids.
	VPNConnectionIDs []*string
}

func (p *P2SVPNConnectionRequest) GetVPNConnectionIDs() (rv []*string) {
	if p != nil {
		return p.VPNConnectionIDs
	}
	return
}

// P2SVPNGateway - P2SVpnGateway Resource.
type P2SVPNGateway struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the P2SVpnGateway.
	Properties *P2SVPNGatewayProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (p *P2SVPNGateway) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *P2SVPNGateway) GetLocation() (rv string) {
	if p != nil && p.Location != nil {
		return *p.Location
	}
	return
}

func (p *P2SVPNGateway) GetProperties() (rv *P2SVPNGatewayProperties) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *P2SVPNGateway) GetTags() (rv map[string]*string) {
	if p != nil {
		return p.Tags
	}
	return
}

func (p *P2SVPNGateway) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *P2SVPNGateway) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *P2SVPNGateway) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// P2SVPNGatewayProperties - Parameters for P2SVpnGateway.
type P2SVPNGatewayProperties struct {
	// List of all customer specified DNS servers IP addresses.
	CustomDNSServers []*string

	// Enable Routing Preference property for the Public IP Interface of the P2SVpnGateway.
	IsRoutingPreferenceInternet *bool

	// List of all p2s connection configurations of the gateway.
	P2SConnectionConfigurations []*P2SConnectionConfiguration

	// The scale unit for this p2s vpn gateway.
	VPNGatewayScaleUnit *int32

	// The VpnServerConfiguration to which the p2sVpnGateway is attached to.
	VPNServerConfiguration *SubResource

	// The VirtualHub to which the gateway belongs.
	VirtualHub *SubResource

	// READ-ONLY; The provisioning state of the P2S VPN gateway resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; All P2S VPN clients' connection health status.
	VPNClientConnectionHealth *VPNClientConnectionHealth
}

func (p *P2SVPNGatewayProperties) GetCustomDNSServers() (rv []*string) {
	if p != nil {
		return p.CustomDNSServers
	}
	return
}

func (p *P2SVPNGatewayProperties) GetIsRoutingPreferenceInternet() (rv bool) {
	if p != nil && p.IsRoutingPreferenceInternet != nil {
		return *p.IsRoutingPreferenceInternet
	}
	return
}

func (p *P2SVPNGatewayProperties) GetP2SConnectionConfigurations() (rv []*P2SConnectionConfiguration) {
	if p != nil {
		return p.P2SConnectionConfigurations
	}
	return
}

func (p *P2SVPNGatewayProperties) GetVPNGatewayScaleUnit() (rv int32) {
	if p != nil && p.VPNGatewayScaleUnit != nil {
		return *p.VPNGatewayScaleUnit
	}
	return
}

func (p *P2SVPNGatewayProperties) GetVPNServerConfiguration() (rv *SubResource) {
	if p != nil {
		return p.VPNServerConfiguration
	}
	return
}

func (p *P2SVPNGatewayProperties) GetVirtualHub() (rv *SubResource) {
	if p != nil {
		return p.VirtualHub
	}
	return
}

func (p *P2SVPNGatewayProperties) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

func (p *P2SVPNGatewayProperties) GetVPNClientConnectionHealth() (rv *VPNClientConnectionHealth) {
	if p != nil {
		return p.VPNClientConnectionHealth
	}
	return
}

// P2SVPNProfileParameters - Vpn Client Parameters for package generation.
type P2SVPNProfileParameters struct {
	// VPN client authentication method.
	AuthenticationMethod *AuthenticationMethod
}

func (p *P2SVPNProfileParameters) GetAuthenticationMethod() (rv *AuthenticationMethod) {
	if p != nil {
		return p.AuthenticationMethod
	}
	return
}

// PacketCapture - Parameters that define the create packet capture operation.
type PacketCapture struct {
	// REQUIRED; Properties of the packet capture.
	Properties *PacketCaptureParameters
}

func (p *PacketCapture) GetProperties() (rv *PacketCaptureParameters) {
	if p != nil {
		return p.Properties
	}
	return
}

// PacketCaptureFilter - Filter that is applied to packet capture request. Multiple filters can be applied.
type PacketCaptureFilter struct {
	// Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range.
	// "127.0.0.1;127.0.0.5"? for multiple entries. Multiple ranges not currently
	// supported. Mixing ranges with multiple entries not currently supported. Default = null.
	LocalIPAddress *string

	// Local port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries. Multiple
	// ranges not currently supported. Mixing ranges with multiple entries not
	// currently supported. Default = null.
	LocalPort *string

	// Protocol to be filtered on.
	Protocol *PcProtocol

	// Local IP Address to be filtered on. Notation: "127.0.0.1" for single address entry. "127.0.0.1-127.0.0.255" for range.
	// "127.0.0.1;127.0.0.5;" for multiple entries. Multiple ranges not currently
	// supported. Mixing ranges with multiple entries not currently supported. Default = null.
	RemoteIPAddress *string

	// Remote port to be filtered on. Notation: "80" for single port entry."80-85" for range. "80;443;" for multiple entries.
	// Multiple ranges not currently supported. Mixing ranges with multiple entries not
	// currently supported. Default = null.
	RemotePort *string
}

func (p *PacketCaptureFilter) GetLocalIPAddress() (rv string) {
	if p != nil && p.LocalIPAddress != nil {
		return *p.LocalIPAddress
	}
	return
}

func (p *PacketCaptureFilter) GetLocalPort() (rv string) {
	if p != nil && p.LocalPort != nil {
		return *p.LocalPort
	}
	return
}

func (p *PacketCaptureFilter) GetProtocol() (rv *PcProtocol) {
	if p != nil {
		return p.Protocol
	}
	return
}

func (p *PacketCaptureFilter) GetRemoteIPAddress() (rv string) {
	if p != nil && p.RemoteIPAddress != nil {
		return *p.RemoteIPAddress
	}
	return
}

func (p *PacketCaptureFilter) GetRemotePort() (rv string) {
	if p != nil && p.RemotePort != nil {
		return *p.RemotePort
	}
	return
}

// PacketCaptureListResult - List of packet capture sessions.
type PacketCaptureListResult struct {
	// Information about packet capture sessions.
	Value []*PacketCaptureResult
}

func (p *PacketCaptureListResult) GetValue() (rv []*PacketCaptureResult) {
	if p != nil {
		return p.Value
	}
	return
}

// PacketCaptureMachineScope - A list of AzureVMSS instances which can be included or excluded to run packet capture. If both
// included and excluded are empty, then the packet capture will run on all instances of AzureVMSS.
type PacketCaptureMachineScope struct {
	// List of AzureVMSS instances which has to be excluded from the AzureVMSS from running packet capture.
	Exclude []*string

	// List of AzureVMSS instances to run packet capture on.
	Include []*string
}

func (p *PacketCaptureMachineScope) GetExclude() (rv []*string) {
	if p != nil {
		return p.Exclude
	}
	return
}

func (p *PacketCaptureMachineScope) GetInclude() (rv []*string) {
	if p != nil {
		return p.Include
	}
	return
}

// PacketCaptureParameters - Parameters that define the create packet capture operation.
type PacketCaptureParameters struct {
	// REQUIRED; The storage location for a packet capture session.
	StorageLocation *PacketCaptureStorageLocation

	// REQUIRED; The ID of the targeted resource, only AzureVM and AzureVMSS as target type are currently supported.
	Target *string

	// Number of bytes captured per packet, the remaining bytes are truncated.
	BytesToCapturePerPacket *int64

	// A list of packet capture filters.
	Filters []*PacketCaptureFilter

	// A list of AzureVMSS instances which can be included or excluded to run packet capture. If both included and excluded are
	// empty, then the packet capture will run on all instances of AzureVMSS.
	Scope *PacketCaptureMachineScope

	// Target type of the resource provided.
	TargetType *PacketCaptureTargetType

	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds *int32

	// Maximum size of the capture output.
	TotalBytesPerSession *int64
}

func (p *PacketCaptureParameters) GetStorageLocation() (rv *PacketCaptureStorageLocation) {
	if p != nil {
		return p.StorageLocation
	}
	return
}

func (p *PacketCaptureParameters) GetTarget() (rv string) {
	if p != nil && p.Target != nil {
		return *p.Target
	}
	return
}

func (p *PacketCaptureParameters) GetBytesToCapturePerPacket() (rv int64) {
	if p != nil && p.BytesToCapturePerPacket != nil {
		return *p.BytesToCapturePerPacket
	}
	return
}

func (p *PacketCaptureParameters) GetFilters() (rv []*PacketCaptureFilter) {
	if p != nil {
		return p.Filters
	}
	return
}

func (p *PacketCaptureParameters) GetScope() (rv *PacketCaptureMachineScope) {
	if p != nil {
		return p.Scope
	}
	return
}

func (p *PacketCaptureParameters) GetTargetType() (rv *PacketCaptureTargetType) {
	if p != nil {
		return p.TargetType
	}
	return
}

func (p *PacketCaptureParameters) GetTimeLimitInSeconds() (rv int32) {
	if p != nil && p.TimeLimitInSeconds != nil {
		return *p.TimeLimitInSeconds
	}
	return
}

func (p *PacketCaptureParameters) GetTotalBytesPerSession() (rv int64) {
	if p != nil && p.TotalBytesPerSession != nil {
		return *p.TotalBytesPerSession
	}
	return
}

// PacketCaptureQueryStatusResult - Status of packet capture session.
type PacketCaptureQueryStatusResult struct {
	// The start time of the packet capture session.
	CaptureStartTime *time.Time

	// The ID of the packet capture resource.
	ID *string

	// The name of the packet capture resource.
	Name *string

	// List of errors of packet capture session.
	PacketCaptureError []*PcError

	// The status of the packet capture session.
	PacketCaptureStatus *PcStatus

	// The reason the current packet capture session was stopped.
	StopReason *string
}

func (p *PacketCaptureQueryStatusResult) GetCaptureStartTime() (rv *time.Time) {
	if p != nil {
		return p.CaptureStartTime
	}
	return
}

func (p *PacketCaptureQueryStatusResult) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PacketCaptureQueryStatusResult) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PacketCaptureQueryStatusResult) GetPacketCaptureError() (rv []*PcError) {
	if p != nil {
		return p.PacketCaptureError
	}
	return
}

func (p *PacketCaptureQueryStatusResult) GetPacketCaptureStatus() (rv *PcStatus) {
	if p != nil {
		return p.PacketCaptureStatus
	}
	return
}

func (p *PacketCaptureQueryStatusResult) GetStopReason() (rv string) {
	if p != nil && p.StopReason != nil {
		return *p.StopReason
	}
	return
}

// PacketCaptureResult - Information about packet capture session.
type PacketCaptureResult struct {
	// Properties of the packet capture result.
	Properties *PacketCaptureResultProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; ID of the packet capture operation.
	ID *string

	// READ-ONLY; Name of the packet capture session.
	Name *string
}

func (p *PacketCaptureResult) GetProperties() (rv *PacketCaptureResultProperties) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PacketCaptureResult) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *PacketCaptureResult) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PacketCaptureResult) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

// PacketCaptureResultProperties - The properties of a packet capture session.
type PacketCaptureResultProperties struct {
	// REQUIRED; The storage location for a packet capture session.
	StorageLocation *PacketCaptureStorageLocation

	// REQUIRED; The ID of the targeted resource, only AzureVM and AzureVMSS as target type are currently supported.
	Target *string

	// Number of bytes captured per packet, the remaining bytes are truncated.
	BytesToCapturePerPacket *int64

	// A list of packet capture filters.
	Filters []*PacketCaptureFilter

	// A list of AzureVMSS instances which can be included or excluded to run packet capture. If both included and excluded are
	// empty, then the packet capture will run on all instances of AzureVMSS.
	Scope *PacketCaptureMachineScope

	// Target type of the resource provided.
	TargetType *PacketCaptureTargetType

	// Maximum duration of the capture session in seconds.
	TimeLimitInSeconds *int32

	// Maximum size of the capture output.
	TotalBytesPerSession *int64

	// READ-ONLY; The provisioning state of the packet capture session.
	ProvisioningState *ProvisioningState
}

func (p *PacketCaptureResultProperties) GetStorageLocation() (rv *PacketCaptureStorageLocation) {
	if p != nil {
		return p.StorageLocation
	}
	return
}

func (p *PacketCaptureResultProperties) GetTarget() (rv string) {
	if p != nil && p.Target != nil {
		return *p.Target
	}
	return
}

func (p *PacketCaptureResultProperties) GetBytesToCapturePerPacket() (rv int64) {
	if p != nil && p.BytesToCapturePerPacket != nil {
		return *p.BytesToCapturePerPacket
	}
	return
}

func (p *PacketCaptureResultProperties) GetFilters() (rv []*PacketCaptureFilter) {
	if p != nil {
		return p.Filters
	}
	return
}

func (p *PacketCaptureResultProperties) GetScope() (rv *PacketCaptureMachineScope) {
	if p != nil {
		return p.Scope
	}
	return
}

func (p *PacketCaptureResultProperties) GetTargetType() (rv *PacketCaptureTargetType) {
	if p != nil {
		return p.TargetType
	}
	return
}

func (p *PacketCaptureResultProperties) GetTimeLimitInSeconds() (rv int32) {
	if p != nil && p.TimeLimitInSeconds != nil {
		return *p.TimeLimitInSeconds
	}
	return
}

func (p *PacketCaptureResultProperties) GetTotalBytesPerSession() (rv int64) {
	if p != nil && p.TotalBytesPerSession != nil {
		return *p.TotalBytesPerSession
	}
	return
}

func (p *PacketCaptureResultProperties) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

// PacketCaptureStorageLocation - The storage location for a packet capture session.
type PacketCaptureStorageLocation struct {
	// A valid local path on the targeting VM. Must include the name of the capture file (*.cap). For linux virtual machine it
	// must start with /var/captures. Required if no storage ID is provided, otherwise
	// optional.
	FilePath *string

	// The ID of the storage account to save the packet capture session. Required if no local file path is provided.
	StorageID *string

	// The URI of the storage path to save the packet capture. Must be a well-formed URI describing the location to save the packet
	// capture.
	StoragePath *string
}

func (p *PacketCaptureStorageLocation) GetFilePath() (rv string) {
	if p != nil && p.FilePath != nil {
		return *p.FilePath
	}
	return
}

func (p *PacketCaptureStorageLocation) GetStorageID() (rv string) {
	if p != nil && p.StorageID != nil {
		return *p.StorageID
	}
	return
}

func (p *PacketCaptureStorageLocation) GetStoragePath() (rv string) {
	if p != nil && p.StoragePath != nil {
		return *p.StoragePath
	}
	return
}

// Parameters for an Action.
type Parameter struct {
	// List of AS paths.
	AsPath []*string

	// List of BGP communities.
	Community []*string

	// List of route prefixes.
	RoutePrefix []*string
}

func (p *Parameter) GetAsPath() (rv []*string) {
	if p != nil {
		return p.AsPath
	}
	return
}

func (p *Parameter) GetCommunity() (rv []*string) {
	if p != nil {
		return p.Community
	}
	return
}

func (p *Parameter) GetRoutePrefix() (rv []*string) {
	if p != nil {
		return p.RoutePrefix
	}
	return
}

// PartnerManagedResourceProperties - Properties of the partner managed resource.
type PartnerManagedResourceProperties struct {
	// READ-ONLY; The partner managed resource id.
	ID *string

	// READ-ONLY; The partner managed ILB resource id
	InternalLoadBalancerID *string

	// READ-ONLY; The partner managed SLB resource id
	StandardLoadBalancerID *string
}

func (p *PartnerManagedResourceProperties) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PartnerManagedResourceProperties) GetInternalLoadBalancerID() (rv string) {
	if p != nil && p.InternalLoadBalancerID != nil {
		return *p.InternalLoadBalancerID
	}
	return
}

func (p *PartnerManagedResourceProperties) GetStandardLoadBalancerID() (rv string) {
	if p != nil && p.StandardLoadBalancerID != nil {
		return *p.StandardLoadBalancerID
	}
	return
}

// PatchObject - Object for patch operations.
type PatchObject struct {
	// Resource tags.
	Tags map[string]*string
}

func (p *PatchObject) GetTags() (rv map[string]*string) {
	if p != nil {
		return p.Tags
	}
	return
}

// PeerExpressRouteCircuitConnection - Peer Express Route Circuit Connection in an ExpressRouteCircuitPeering resource.
type PeerExpressRouteCircuitConnection struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the peer express route circuit connection.
	Properties *PeerExpressRouteCircuitConnectionPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (p *PeerExpressRouteCircuitConnection) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PeerExpressRouteCircuitConnection) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PeerExpressRouteCircuitConnection) GetProperties() (rv *PeerExpressRouteCircuitConnectionPropertiesFormat) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PeerExpressRouteCircuitConnection) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *PeerExpressRouteCircuitConnection) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PeerExpressRouteCircuitConnectionListResult - Response for ListPeeredConnections API service call retrieves all global
// reach peer circuit connections that belongs to a Private Peering for an ExpressRouteCircuit.
type PeerExpressRouteCircuitConnectionListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// The global reach peer circuit connection associated with Private Peering in an ExpressRoute Circuit.
	Value []*PeerExpressRouteCircuitConnection
}

func (p *PeerExpressRouteCircuitConnectionListResult) GetNextLink() (rv string) {
	if p != nil && p.NextLink != nil {
		return *p.NextLink
	}
	return
}

func (p *PeerExpressRouteCircuitConnectionListResult) GetValue() (rv []*PeerExpressRouteCircuitConnection) {
	if p != nil {
		return p.Value
	}
	return
}

// PeerExpressRouteCircuitConnectionPropertiesFormat - Properties of the peer express route circuit connection.
type PeerExpressRouteCircuitConnectionPropertiesFormat struct {
	// /29 IP address space to carve out Customer addresses for tunnels.
	AddressPrefix *string

	// The resource guid of the authorization used for the express route circuit connection.
	AuthResourceGUID *string

	// The name of the express route circuit connection resource.
	ConnectionName *string

	// Reference to Express Route Circuit Private Peering Resource of the circuit.
	ExpressRouteCircuitPeering *SubResource

	// Reference to Express Route Circuit Private Peering Resource of the peered circuit.
	PeerExpressRouteCircuitPeering *SubResource

	// READ-ONLY; Express Route Circuit connection state.
	CircuitConnectionStatus *CircuitConnectionStatus

	// READ-ONLY; The provisioning state of the peer express route circuit connection resource.
	ProvisioningState *ProvisioningState
}

func (p *PeerExpressRouteCircuitConnectionPropertiesFormat) GetAddressPrefix() (rv string) {
	if p != nil && p.AddressPrefix != nil {
		return *p.AddressPrefix
	}
	return
}

func (p *PeerExpressRouteCircuitConnectionPropertiesFormat) GetAuthResourceGUID() (rv string) {
	if p != nil && p.AuthResourceGUID != nil {
		return *p.AuthResourceGUID
	}
	return
}

func (p *PeerExpressRouteCircuitConnectionPropertiesFormat) GetConnectionName() (rv string) {
	if p != nil && p.ConnectionName != nil {
		return *p.ConnectionName
	}
	return
}

func (p *PeerExpressRouteCircuitConnectionPropertiesFormat) GetExpressRouteCircuitPeering() (rv *SubResource) {
	if p != nil {
		return p.ExpressRouteCircuitPeering
	}
	return
}

func (p *PeerExpressRouteCircuitConnectionPropertiesFormat) GetPeerExpressRouteCircuitPeering() (rv *SubResource) {
	if p != nil {
		return p.PeerExpressRouteCircuitPeering
	}
	return
}

func (p *PeerExpressRouteCircuitConnectionPropertiesFormat) GetCircuitConnectionStatus() (rv *CircuitConnectionStatus) {
	if p != nil {
		return p.CircuitConnectionStatus
	}
	return
}

func (p *PeerExpressRouteCircuitConnectionPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

// PeerRoute - Peer routing details.
type PeerRoute struct {
	// READ-ONLY; The route's AS path sequence.
	AsPath *string

	// READ-ONLY; The peer's local address.
	LocalAddress *string

	// READ-ONLY; The route's network prefix.
	Network *string

	// READ-ONLY; The route's next hop.
	NextHop *string

	// READ-ONLY; The source this route was learned from.
	Origin *string

	// READ-ONLY; The peer this route was learned from.
	SourcePeer *string

	// READ-ONLY; The route's weight.
	Weight *int32
}

func (p *PeerRoute) GetAsPath() (rv string) {
	if p != nil && p.AsPath != nil {
		return *p.AsPath
	}
	return
}

func (p *PeerRoute) GetLocalAddress() (rv string) {
	if p != nil && p.LocalAddress != nil {
		return *p.LocalAddress
	}
	return
}

func (p *PeerRoute) GetNetwork() (rv string) {
	if p != nil && p.Network != nil {
		return *p.Network
	}
	return
}

func (p *PeerRoute) GetNextHop() (rv string) {
	if p != nil && p.NextHop != nil {
		return *p.NextHop
	}
	return
}

func (p *PeerRoute) GetOrigin() (rv string) {
	if p != nil && p.Origin != nil {
		return *p.Origin
	}
	return
}

func (p *PeerRoute) GetSourcePeer() (rv string) {
	if p != nil && p.SourcePeer != nil {
		return *p.SourcePeer
	}
	return
}

func (p *PeerRoute) GetWeight() (rv int32) {
	if p != nil && p.Weight != nil {
		return *p.Weight
	}
	return
}

// PeerRouteList - List of virtual router peer routes.
type PeerRouteList struct {
	// List of peer routes.
	Value []*PeerRoute
}

func (p *PeerRouteList) GetValue() (rv []*PeerRoute) {
	if p != nil {
		return p.Value
	}
	return
}

// PolicySettings - Defines contents of a web application firewall global configuration.
type PolicySettings struct {
	// If the action type is block, customer can override the response body. The body must be specified in base64 encoding.
	CustomBlockResponseBody *string

	// If the action type is block, customer can override the response status code.
	CustomBlockResponseStatusCode *int32

	// Maximum file upload size in Mb for WAF.
	FileUploadLimitInMb *int32

	// Maximum request body size in Kb for WAF.
	MaxRequestBodySizeInKb *int32

	// The mode of the policy.
	Mode *WebApplicationFirewallMode

	// Whether to allow WAF to check request Body.
	RequestBodyCheck *bool

	// The state of the policy.
	State *WebApplicationFirewallEnabledState
}

func (p *PolicySettings) GetCustomBlockResponseBody() (rv string) {
	if p != nil && p.CustomBlockResponseBody != nil {
		return *p.CustomBlockResponseBody
	}
	return
}

func (p *PolicySettings) GetCustomBlockResponseStatusCode() (rv int32) {
	if p != nil && p.CustomBlockResponseStatusCode != nil {
		return *p.CustomBlockResponseStatusCode
	}
	return
}

func (p *PolicySettings) GetFileUploadLimitInMb() (rv int32) {
	if p != nil && p.FileUploadLimitInMb != nil {
		return *p.FileUploadLimitInMb
	}
	return
}

func (p *PolicySettings) GetMaxRequestBodySizeInKb() (rv int32) {
	if p != nil && p.MaxRequestBodySizeInKb != nil {
		return *p.MaxRequestBodySizeInKb
	}
	return
}

func (p *PolicySettings) GetMode() (rv *WebApplicationFirewallMode) {
	if p != nil {
		return p.Mode
	}
	return
}

func (p *PolicySettings) GetRequestBodyCheck() (rv bool) {
	if p != nil && p.RequestBodyCheck != nil {
		return *p.RequestBodyCheck
	}
	return
}

func (p *PolicySettings) GetState() (rv *WebApplicationFirewallEnabledState) {
	if p != nil {
		return p.State
	}
	return
}

// PrepareNetworkPoliciesRequest - Details of PrepareNetworkPolicies for Subnet.
type PrepareNetworkPoliciesRequest struct {
	// A list of NetworkIntentPolicyConfiguration.
	NetworkIntentPolicyConfigurations []*IntentPolicyConfiguration

	// The name of the service for which subnet is being prepared for.
	ServiceName *string
}

func (p *PrepareNetworkPoliciesRequest) GetNetworkIntentPolicyConfigurations() (rv []*IntentPolicyConfiguration) {
	if p != nil {
		return p.NetworkIntentPolicyConfigurations
	}
	return
}

func (p *PrepareNetworkPoliciesRequest) GetServiceName() (rv string) {
	if p != nil && p.ServiceName != nil {
		return *p.ServiceName
	}
	return
}

// PrivateDNSZoneConfig - PrivateDnsZoneConfig resource.
type PrivateDNSZoneConfig struct {
	// Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the private dns zone configuration.
	Properties *PrivateDNSZonePropertiesFormat
}

func (p *PrivateDNSZoneConfig) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PrivateDNSZoneConfig) GetProperties() (rv *PrivateDNSZonePropertiesFormat) {
	if p != nil {
		return p.Properties
	}
	return
}

// PrivateDNSZoneGroup - Private dns zone group resource.
type PrivateDNSZoneGroup struct {
	// Resource ID.
	ID *string

	// Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the private dns zone group.
	Properties *PrivateDNSZoneGroupPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (p *PrivateDNSZoneGroup) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PrivateDNSZoneGroup) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PrivateDNSZoneGroup) GetProperties() (rv *PrivateDNSZoneGroupPropertiesFormat) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PrivateDNSZoneGroup) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

// PrivateDNSZoneGroupListResult - Response for the ListPrivateDnsZoneGroups API service call.
type PrivateDNSZoneGroupListResult struct {
	// A list of private dns zone group resources in a private endpoint.
	Value []*PrivateDNSZoneGroup

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (p *PrivateDNSZoneGroupListResult) GetValue() (rv []*PrivateDNSZoneGroup) {
	if p != nil {
		return p.Value
	}
	return
}

func (p *PrivateDNSZoneGroupListResult) GetNextLink() (rv string) {
	if p != nil && p.NextLink != nil {
		return *p.NextLink
	}
	return
}

// PrivateDNSZoneGroupPropertiesFormat - Properties of the private dns zone group.
type PrivateDNSZoneGroupPropertiesFormat struct {
	// A collection of private dns zone configurations of the private dns zone group.
	PrivateDNSZoneConfigs []*PrivateDNSZoneConfig

	// READ-ONLY; The provisioning state of the private dns zone group resource.
	ProvisioningState *ProvisioningState
}

func (p *PrivateDNSZoneGroupPropertiesFormat) GetPrivateDNSZoneConfigs() (rv []*PrivateDNSZoneConfig) {
	if p != nil {
		return p.PrivateDNSZoneConfigs
	}
	return
}

func (p *PrivateDNSZoneGroupPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

// PrivateDNSZonePropertiesFormat - Properties of the private dns zone configuration resource.
type PrivateDNSZonePropertiesFormat struct {
	// The resource id of the private dns zone.
	PrivateDNSZoneID *string

	// READ-ONLY; A collection of information regarding a recordSet, holding information to identify private resources.
	RecordSets []*RecordSet
}

func (p *PrivateDNSZonePropertiesFormat) GetPrivateDNSZoneID() (rv string) {
	if p != nil && p.PrivateDNSZoneID != nil {
		return *p.PrivateDNSZoneID
	}
	return
}

func (p *PrivateDNSZonePropertiesFormat) GetRecordSets() (rv []*RecordSet) {
	if p != nil {
		return p.RecordSets
	}
	return
}

// PrivateEndpoint - Private endpoint resource.
type PrivateEndpoint struct {
	// The extended location of the load balancer.
	ExtendedLocation *ExtendedLocation

	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the private endpoint.
	Properties *PrivateEndpointProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (p *PrivateEndpoint) GetExtendedLocation() (rv *ExtendedLocation) {
	if p != nil {
		return p.ExtendedLocation
	}
	return
}

func (p *PrivateEndpoint) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PrivateEndpoint) GetLocation() (rv string) {
	if p != nil && p.Location != nil {
		return *p.Location
	}
	return
}

func (p *PrivateEndpoint) GetProperties() (rv *PrivateEndpointProperties) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PrivateEndpoint) GetTags() (rv map[string]*string) {
	if p != nil {
		return p.Tags
	}
	return
}

func (p *PrivateEndpoint) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *PrivateEndpoint) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PrivateEndpoint) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PrivateEndpointConnection resource.
type PrivateEndpointConnection struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the private end point connection.
	Properties *PrivateEndpointConnectionProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; The resource type.
	Type *string
}

func (p *PrivateEndpointConnection) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PrivateEndpointConnection) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PrivateEndpointConnection) GetProperties() (rv *PrivateEndpointConnectionProperties) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PrivateEndpointConnection) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *PrivateEndpointConnection) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PrivateEndpointConnectionListResult - Response for the ListPrivateEndpointConnection API service call.
type PrivateEndpointConnectionListResult struct {
	// A list of PrivateEndpointConnection resources for a specific private link service.
	Value []*PrivateEndpointConnection

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (p *PrivateEndpointConnectionListResult) GetValue() (rv []*PrivateEndpointConnection) {
	if p != nil {
		return p.Value
	}
	return
}

func (p *PrivateEndpointConnectionListResult) GetNextLink() (rv string) {
	if p != nil && p.NextLink != nil {
		return *p.NextLink
	}
	return
}

// PrivateEndpointConnectionProperties - Properties of the PrivateEndpointConnectProperties.
type PrivateEndpointConnectionProperties struct {
	// A collection of information about the state of the connection between service consumer and provider.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState

	// READ-ONLY; The consumer link id.
	LinkIdentifier *string

	// READ-ONLY; The resource of private end point.
	PrivateEndpoint *PrivateEndpoint

	// READ-ONLY; The provisioning state of the private endpoint connection resource.
	ProvisioningState *ProvisioningState
}

func (p *PrivateEndpointConnectionProperties) GetPrivateLinkServiceConnectionState() (rv *PrivateLinkServiceConnectionState) {
	if p != nil {
		return p.PrivateLinkServiceConnectionState
	}
	return
}

func (p *PrivateEndpointConnectionProperties) GetLinkIdentifier() (rv string) {
	if p != nil && p.LinkIdentifier != nil {
		return *p.LinkIdentifier
	}
	return
}

func (p *PrivateEndpointConnectionProperties) GetPrivateEndpoint() (rv *PrivateEndpoint) {
	if p != nil {
		return p.PrivateEndpoint
	}
	return
}

func (p *PrivateEndpointConnectionProperties) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

// PrivateEndpointIPConfiguration - An IP Configuration of the private endpoint.
type PrivateEndpointIPConfiguration struct {
	// The name of the resource that is unique within a resource group.
	Name *string

	// Properties of private endpoint IP configurations.
	Properties *PrivateEndpointIPConfigurationProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; The resource type.
	Type *string
}

func (p *PrivateEndpointIPConfiguration) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PrivateEndpointIPConfiguration) GetProperties() (rv *PrivateEndpointIPConfigurationProperties) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PrivateEndpointIPConfiguration) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *PrivateEndpointIPConfiguration) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PrivateEndpointIPConfigurationProperties - Properties of an IP Configuration of the private endpoint.
type PrivateEndpointIPConfigurationProperties struct {
	// The ID of a group obtained from the remote resource that this private endpoint should connect to.
	GroupID *string

	// The member name of a group obtained from the remote resource that this private endpoint should connect to.
	MemberName *string

	// A private ip address obtained from the private endpoint's subnet.
	PrivateIPAddress *string
}

func (p *PrivateEndpointIPConfigurationProperties) GetGroupID() (rv string) {
	if p != nil && p.GroupID != nil {
		return *p.GroupID
	}
	return
}

func (p *PrivateEndpointIPConfigurationProperties) GetMemberName() (rv string) {
	if p != nil && p.MemberName != nil {
		return *p.MemberName
	}
	return
}

func (p *PrivateEndpointIPConfigurationProperties) GetPrivateIPAddress() (rv string) {
	if p != nil && p.PrivateIPAddress != nil {
		return *p.PrivateIPAddress
	}
	return
}

// PrivateEndpointListResult - Response for the ListPrivateEndpoints API service call.
type PrivateEndpointListResult struct {
	// A list of private endpoint resources in a resource group.
	Value []*PrivateEndpoint

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (p *PrivateEndpointListResult) GetValue() (rv []*PrivateEndpoint) {
	if p != nil {
		return p.Value
	}
	return
}

func (p *PrivateEndpointListResult) GetNextLink() (rv string) {
	if p != nil && p.NextLink != nil {
		return *p.NextLink
	}
	return
}

// PrivateEndpointProperties - Properties of the private endpoint.
type PrivateEndpointProperties struct {
	// Application security groups in which the private endpoint IP configuration is included.
	ApplicationSecurityGroups []*ApplicationSecurityGroup

	// An array of custom dns configurations.
	CustomDNSConfigs []*CustomDNSConfigPropertiesFormat

	// The custom name of the network interface attached to the private endpoint.
	CustomNetworkInterfaceName *string

	// A list of IP configurations of the private endpoint. This will be used to map to the First Party Service's endpoints.
	IPConfigurations []*PrivateEndpointIPConfiguration

	// A grouping of information about the connection to the remote resource. Used when the network admin does not have access
	// to approve connections to the remote resource.
	ManualPrivateLinkServiceConnections []*PrivateLinkServiceConnection

	// A grouping of information about the connection to the remote resource.
	PrivateLinkServiceConnections []*PrivateLinkServiceConnection

	// The ID of the subnet from which the private IP will be allocated.
	Subnet *Subnet

	// READ-ONLY; An array of references to the network interfaces created for this private endpoint.
	NetworkInterfaces []*Interface

	// READ-ONLY; The provisioning state of the private endpoint resource.
	ProvisioningState *ProvisioningState
}

func (p *PrivateEndpointProperties) GetApplicationSecurityGroups() (rv []*ApplicationSecurityGroup) {
	if p != nil {
		return p.ApplicationSecurityGroups
	}
	return
}

func (p *PrivateEndpointProperties) GetCustomDNSConfigs() (rv []*CustomDNSConfigPropertiesFormat) {
	if p != nil {
		return p.CustomDNSConfigs
	}
	return
}

func (p *PrivateEndpointProperties) GetCustomNetworkInterfaceName() (rv string) {
	if p != nil && p.CustomNetworkInterfaceName != nil {
		return *p.CustomNetworkInterfaceName
	}
	return
}

func (p *PrivateEndpointProperties) GetIPConfigurations() (rv []*PrivateEndpointIPConfiguration) {
	if p != nil {
		return p.IPConfigurations
	}
	return
}

func (p *PrivateEndpointProperties) GetManualPrivateLinkServiceConnections() (rv []*PrivateLinkServiceConnection) {
	if p != nil {
		return p.ManualPrivateLinkServiceConnections
	}
	return
}

func (p *PrivateEndpointProperties) GetPrivateLinkServiceConnections() (rv []*PrivateLinkServiceConnection) {
	if p != nil {
		return p.PrivateLinkServiceConnections
	}
	return
}

func (p *PrivateEndpointProperties) GetSubnet() (rv *Subnet) {
	if p != nil {
		return p.Subnet
	}
	return
}

func (p *PrivateEndpointProperties) GetNetworkInterfaces() (rv []*Interface) {
	if p != nil {
		return p.NetworkInterfaces
	}
	return
}

func (p *PrivateEndpointProperties) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

// PrivateLinkService - Private link service resource.
type PrivateLinkService struct {
	// The extended location of the load balancer.
	ExtendedLocation *ExtendedLocation

	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the private link service.
	Properties *PrivateLinkServiceProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (p *PrivateLinkService) GetExtendedLocation() (rv *ExtendedLocation) {
	if p != nil {
		return p.ExtendedLocation
	}
	return
}

func (p *PrivateLinkService) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PrivateLinkService) GetLocation() (rv string) {
	if p != nil && p.Location != nil {
		return *p.Location
	}
	return
}

func (p *PrivateLinkService) GetProperties() (rv *PrivateLinkServiceProperties) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PrivateLinkService) GetTags() (rv map[string]*string) {
	if p != nil {
		return p.Tags
	}
	return
}

func (p *PrivateLinkService) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *PrivateLinkService) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PrivateLinkService) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PrivateLinkServiceConnection resource.
type PrivateLinkServiceConnection struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the private link service connection.
	Properties *PrivateLinkServiceConnectionProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; The resource type.
	Type *string
}

func (p *PrivateLinkServiceConnection) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PrivateLinkServiceConnection) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PrivateLinkServiceConnection) GetProperties() (rv *PrivateLinkServiceConnectionProperties) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PrivateLinkServiceConnection) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *PrivateLinkServiceConnection) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PrivateLinkServiceConnectionProperties - Properties of the PrivateLinkServiceConnection.
type PrivateLinkServiceConnectionProperties struct {
	// The ID(s) of the group(s) obtained from the remote resource that this private endpoint should connect to.
	GroupIDs []*string

	// A collection of read-only information about the state of the connection to the remote resource.
	PrivateLinkServiceConnectionState *PrivateLinkServiceConnectionState

	// The resource id of private link service.
	PrivateLinkServiceID *string

	// A message passed to the owner of the remote resource with this connection request. Restricted to 140 chars.
	RequestMessage *string

	// READ-ONLY; The provisioning state of the private link service connection resource.
	ProvisioningState *ProvisioningState
}

func (p *PrivateLinkServiceConnectionProperties) GetGroupIDs() (rv []*string) {
	if p != nil {
		return p.GroupIDs
	}
	return
}

func (p *PrivateLinkServiceConnectionProperties) GetPrivateLinkServiceConnectionState() (rv *PrivateLinkServiceConnectionState) {
	if p != nil {
		return p.PrivateLinkServiceConnectionState
	}
	return
}

func (p *PrivateLinkServiceConnectionProperties) GetPrivateLinkServiceID() (rv string) {
	if p != nil && p.PrivateLinkServiceID != nil {
		return *p.PrivateLinkServiceID
	}
	return
}

func (p *PrivateLinkServiceConnectionProperties) GetRequestMessage() (rv string) {
	if p != nil && p.RequestMessage != nil {
		return *p.RequestMessage
	}
	return
}

func (p *PrivateLinkServiceConnectionProperties) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

// PrivateLinkServiceConnectionState - A collection of information about the state of the connection between service consumer
// and provider.
type PrivateLinkServiceConnectionState struct {
	// A message indicating if changes on the service provider require any updates on the consumer.
	ActionsRequired *string

	// The reason for approval/rejection of the connection.
	Description *string

	// Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
	Status *string
}

func (p *PrivateLinkServiceConnectionState) GetActionsRequired() (rv string) {
	if p != nil && p.ActionsRequired != nil {
		return *p.ActionsRequired
	}
	return
}

func (p *PrivateLinkServiceConnectionState) GetDescription() (rv string) {
	if p != nil && p.Description != nil {
		return *p.Description
	}
	return
}

func (p *PrivateLinkServiceConnectionState) GetStatus() (rv string) {
	if p != nil && p.Status != nil {
		return *p.Status
	}
	return
}

// PrivateLinkServiceIPConfiguration - The private link service ip configuration.
type PrivateLinkServiceIPConfiguration struct {
	// Resource ID.
	ID *string

	// The name of private link service ip configuration.
	Name *string

	// Properties of the private link service ip configuration.
	Properties *PrivateLinkServiceIPConfigurationProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; The resource type.
	Type *string
}

func (p *PrivateLinkServiceIPConfiguration) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PrivateLinkServiceIPConfiguration) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PrivateLinkServiceIPConfiguration) GetProperties() (rv *PrivateLinkServiceIPConfigurationProperties) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PrivateLinkServiceIPConfiguration) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *PrivateLinkServiceIPConfiguration) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PrivateLinkServiceIPConfigurationProperties - Properties of private link service IP configuration.
type PrivateLinkServiceIPConfigurationProperties struct {
	// Whether the ip configuration is primary or not.
	Primary *bool

	// The private IP address of the IP configuration.
	PrivateIPAddress *string

	// Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
	PrivateIPAddressVersion *IPVersion

	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod

	// The reference to the subnet resource.
	Subnet *Subnet

	// READ-ONLY; The provisioning state of the private link service IP configuration resource.
	ProvisioningState *ProvisioningState
}

func (p *PrivateLinkServiceIPConfigurationProperties) GetPrimary() (rv bool) {
	if p != nil && p.Primary != nil {
		return *p.Primary
	}
	return
}

func (p *PrivateLinkServiceIPConfigurationProperties) GetPrivateIPAddress() (rv string) {
	if p != nil && p.PrivateIPAddress != nil {
		return *p.PrivateIPAddress
	}
	return
}

func (p *PrivateLinkServiceIPConfigurationProperties) GetPrivateIPAddressVersion() (rv *IPVersion) {
	if p != nil {
		return p.PrivateIPAddressVersion
	}
	return
}

func (p *PrivateLinkServiceIPConfigurationProperties) GetPrivateIPAllocationMethod() (rv *IPAllocationMethod) {
	if p != nil {
		return p.PrivateIPAllocationMethod
	}
	return
}

func (p *PrivateLinkServiceIPConfigurationProperties) GetSubnet() (rv *Subnet) {
	if p != nil {
		return p.Subnet
	}
	return
}

func (p *PrivateLinkServiceIPConfigurationProperties) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

// PrivateLinkServiceListResult - Response for the ListPrivateLinkService API service call.
type PrivateLinkServiceListResult struct {
	// A list of PrivateLinkService resources in a resource group.
	Value []*PrivateLinkService

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (p *PrivateLinkServiceListResult) GetValue() (rv []*PrivateLinkService) {
	if p != nil {
		return p.Value
	}
	return
}

func (p *PrivateLinkServiceListResult) GetNextLink() (rv string) {
	if p != nil && p.NextLink != nil {
		return *p.NextLink
	}
	return
}

// PrivateLinkServiceProperties - Properties of the private link service.
type PrivateLinkServiceProperties struct {
	// The auto-approval list of the private link service.
	AutoApproval *PrivateLinkServicePropertiesAutoApproval

	// Whether the private link service is enabled for proxy protocol or not.
	EnableProxyProtocol *bool

	// The list of Fqdn.
	Fqdns []*string

	// An array of private link service IP configurations.
	IPConfigurations []*PrivateLinkServiceIPConfiguration

	// An array of references to the load balancer IP configurations.
	LoadBalancerFrontendIPConfigurations []*FrontendIPConfiguration

	// The visibility list of the private link service.
	Visibility *PrivateLinkServicePropertiesVisibility

	// READ-ONLY; The alias of the private link service.
	Alias *string

	// READ-ONLY; An array of references to the network interfaces created for this private link service.
	NetworkInterfaces []*Interface

	// READ-ONLY; An array of list about connections to the private endpoint.
	PrivateEndpointConnections []*PrivateEndpointConnection

	// READ-ONLY; The provisioning state of the private link service resource.
	ProvisioningState *ProvisioningState
}

func (p *PrivateLinkServiceProperties) GetAutoApproval() (rv *PrivateLinkServicePropertiesAutoApproval) {
	if p != nil {
		return p.AutoApproval
	}
	return
}

func (p *PrivateLinkServiceProperties) GetEnableProxyProtocol() (rv bool) {
	if p != nil && p.EnableProxyProtocol != nil {
		return *p.EnableProxyProtocol
	}
	return
}

func (p *PrivateLinkServiceProperties) GetFqdns() (rv []*string) {
	if p != nil {
		return p.Fqdns
	}
	return
}

func (p *PrivateLinkServiceProperties) GetIPConfigurations() (rv []*PrivateLinkServiceIPConfiguration) {
	if p != nil {
		return p.IPConfigurations
	}
	return
}

func (p *PrivateLinkServiceProperties) GetLoadBalancerFrontendIPConfigurations() (rv []*FrontendIPConfiguration) {
	if p != nil {
		return p.LoadBalancerFrontendIPConfigurations
	}
	return
}

func (p *PrivateLinkServiceProperties) GetVisibility() (rv *PrivateLinkServicePropertiesVisibility) {
	if p != nil {
		return p.Visibility
	}
	return
}

func (p *PrivateLinkServiceProperties) GetAlias() (rv string) {
	if p != nil && p.Alias != nil {
		return *p.Alias
	}
	return
}

func (p *PrivateLinkServiceProperties) GetNetworkInterfaces() (rv []*Interface) {
	if p != nil {
		return p.NetworkInterfaces
	}
	return
}

func (p *PrivateLinkServiceProperties) GetPrivateEndpointConnections() (rv []*PrivateEndpointConnection) {
	if p != nil {
		return p.PrivateEndpointConnections
	}
	return
}

func (p *PrivateLinkServiceProperties) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

// PrivateLinkServicePropertiesAutoApproval - The auto-approval list of the private link service.
type PrivateLinkServicePropertiesAutoApproval struct {
	// The list of subscriptions.
	Subscriptions []*string
}

func (p *PrivateLinkServicePropertiesAutoApproval) GetSubscriptions() (rv []*string) {
	if p != nil {
		return p.Subscriptions
	}
	return
}

// PrivateLinkServicePropertiesVisibility - The visibility list of the private link service.
type PrivateLinkServicePropertiesVisibility struct {
	// The list of subscriptions.
	Subscriptions []*string
}

func (p *PrivateLinkServicePropertiesVisibility) GetSubscriptions() (rv []*string) {
	if p != nil {
		return p.Subscriptions
	}
	return
}

// PrivateLinkServiceVisibility - Response for the CheckPrivateLinkServiceVisibility API service call.
type PrivateLinkServiceVisibility struct {
	// Private Link Service Visibility (True/False).
	Visible *bool
}

func (p *PrivateLinkServiceVisibility) GetVisible() (rv bool) {
	if p != nil && p.Visible != nil {
		return *p.Visible
	}
	return
}

// Probe - A load balancer probe.
type Probe struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within the set of probes used by the load balancer. This name can be used to access
	// the resource.
	Name *string

	// Properties of load balancer probe.
	Properties *ProbePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Type of the resource.
	Type *string
}

func (p *Probe) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *Probe) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *Probe) GetProperties() (rv *ProbePropertiesFormat) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *Probe) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *Probe) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// ProbePropertiesFormat - Load balancer probe resource.
type ProbePropertiesFormat struct {
	// REQUIRED; The port for communicating the probe. Possible values range from 1 to 65535, inclusive.
	Port *int32

	// REQUIRED; The protocol of the end point. If 'Tcp' is specified, a received ACK is required for the probe to be successful.
	// If 'Http' or 'Https' is specified, a 200 OK response from the specifies URI is required
	// for the probe to be successful.
	Protocol *ProbeProtocol

	// The interval, in seconds, for how frequently to probe the endpoint for health status. Typically, the interval is slightly
	// less than half the allocated timeout period (in seconds) which allows two full
	// probes before taking the instance out of rotation. The default value is 15, the minimum value is 5.
	IntervalInSeconds *int32

	// The number of probes where if no response, will result in stopping further traffic from being delivered to the endpoint.
	// This values allows endpoints to be taken out of rotation faster or slower than
	// the typical times used in Azure.
	NumberOfProbes *int32

	// The number of consecutive successful or failed probes in order to allow or deny traffic from being delivered to this endpoint.
	// After failing the number of consecutive probes equal to this value, the
	// endpoint will be taken out of rotation and require the same number of successful consecutive probes to be placed back in
	// rotation.
	ProbeThreshold *int32

	// The URI used for requesting health status from the VM. Path is required if a protocol is set to http. Otherwise, it is
	// not allowed. There is no default value.
	RequestPath *string

	// READ-ONLY; The load balancer rules that use this probe.
	LoadBalancingRules []*SubResource

	// READ-ONLY; The provisioning state of the probe resource.
	ProvisioningState *ProvisioningState
}

func (p *ProbePropertiesFormat) GetPort() (rv int32) {
	if p != nil && p.Port != nil {
		return *p.Port
	}
	return
}

func (p *ProbePropertiesFormat) GetProtocol() (rv *ProbeProtocol) {
	if p != nil {
		return p.Protocol
	}
	return
}

func (p *ProbePropertiesFormat) GetIntervalInSeconds() (rv int32) {
	if p != nil && p.IntervalInSeconds != nil {
		return *p.IntervalInSeconds
	}
	return
}

func (p *ProbePropertiesFormat) GetNumberOfProbes() (rv int32) {
	if p != nil && p.NumberOfProbes != nil {
		return *p.NumberOfProbes
	}
	return
}

func (p *ProbePropertiesFormat) GetProbeThreshold() (rv int32) {
	if p != nil && p.ProbeThreshold != nil {
		return *p.ProbeThreshold
	}
	return
}

func (p *ProbePropertiesFormat) GetRequestPath() (rv string) {
	if p != nil && p.RequestPath != nil {
		return *p.RequestPath
	}
	return
}

func (p *ProbePropertiesFormat) GetLoadBalancingRules() (rv []*SubResource) {
	if p != nil {
		return p.LoadBalancingRules
	}
	return
}

func (p *ProbePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

// Profile - Network profile resource.
type Profile struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Network profile properties.
	Properties *ProfilePropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (p *Profile) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *Profile) GetLocation() (rv string) {
	if p != nil && p.Location != nil {
		return *p.Location
	}
	return
}

func (p *Profile) GetProperties() (rv *ProfilePropertiesFormat) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *Profile) GetTags() (rv map[string]*string) {
	if p != nil {
		return p.Tags
	}
	return
}

func (p *Profile) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *Profile) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *Profile) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// ProfileListResult - Response for ListNetworkProfiles API service call.
type ProfileListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of network profiles that exist in a resource group.
	Value []*Profile
}

func (p *ProfileListResult) GetNextLink() (rv string) {
	if p != nil && p.NextLink != nil {
		return *p.NextLink
	}
	return
}

func (p *ProfileListResult) GetValue() (rv []*Profile) {
	if p != nil {
		return p.Value
	}
	return
}

// ProfilePropertiesFormat - Network profile properties.
type ProfilePropertiesFormat struct {
	// List of chid container network interface configurations.
	ContainerNetworkInterfaceConfigurations []*ContainerNetworkInterfaceConfiguration

	// READ-ONLY; List of child container network interfaces.
	ContainerNetworkInterfaces []*ContainerNetworkInterface

	// READ-ONLY; The provisioning state of the network profile resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the network profile resource.
	ResourceGUID *string
}

func (p *ProfilePropertiesFormat) GetContainerNetworkInterfaceConfigurations() (rv []*ContainerNetworkInterfaceConfiguration) {
	if p != nil {
		return p.ContainerNetworkInterfaceConfigurations
	}
	return
}

func (p *ProfilePropertiesFormat) GetContainerNetworkInterfaces() (rv []*ContainerNetworkInterface) {
	if p != nil {
		return p.ContainerNetworkInterfaces
	}
	return
}

func (p *ProfilePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

func (p *ProfilePropertiesFormat) GetResourceGUID() (rv string) {
	if p != nil && p.ResourceGUID != nil {
		return *p.ResourceGUID
	}
	return
}

// PropagatedRouteTable - The list of RouteTables to advertise the routes to.
type PropagatedRouteTable struct {
	// The list of resource ids of all the RouteTables.
	IDs []*SubResource

	// The list of labels.
	Labels []*string
}

func (p *PropagatedRouteTable) GetIDs() (rv []*SubResource) {
	if p != nil {
		return p.IDs
	}
	return
}

func (p *PropagatedRouteTable) GetLabels() (rv []*string) {
	if p != nil {
		return p.Labels
	}
	return
}

// ProtocolConfiguration - Configuration of the protocol.
type ProtocolConfiguration struct {
	// HTTP configuration of the connectivity check.
	HTTPConfiguration *HTTPConfiguration
}

func (p *ProtocolConfiguration) GetHTTPConfiguration() (rv *HTTPConfiguration) {
	if p != nil {
		return p.HTTPConfiguration
	}
	return
}

// PublicIPAddress - Public IP address resource.
type PublicIPAddress struct {
	// The extended location of the public ip address.
	ExtendedLocation *ExtendedLocation

	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Public IP address properties.
	Properties *PublicIPAddressPropertiesFormat

	// The public IP address SKU.
	SKU *PublicIPAddressSKU

	// Resource tags.
	Tags map[string]*string

	// A list of availability zones denoting the IP allocated for the resource needs to come from.
	Zones []*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (p *PublicIPAddress) GetExtendedLocation() (rv *ExtendedLocation) {
	if p != nil {
		return p.ExtendedLocation
	}
	return
}

func (p *PublicIPAddress) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PublicIPAddress) GetLocation() (rv string) {
	if p != nil && p.Location != nil {
		return *p.Location
	}
	return
}

func (p *PublicIPAddress) GetProperties() (rv *PublicIPAddressPropertiesFormat) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PublicIPAddress) GetSKU() (rv *PublicIPAddressSKU) {
	if p != nil {
		return p.SKU
	}
	return
}

func (p *PublicIPAddress) GetTags() (rv map[string]*string) {
	if p != nil {
		return p.Tags
	}
	return
}

func (p *PublicIPAddress) GetZones() (rv []*string) {
	if p != nil {
		return p.Zones
	}
	return
}

func (p *PublicIPAddress) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *PublicIPAddress) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PublicIPAddress) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PublicIPAddressDNSSettings - Contains FQDN of the DNS record associated with the public IP address.
type PublicIPAddressDNSSettings struct {
	// The domain name label. The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified
	// domain name associated with the public IP address. If a domain name label is
	// specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system.
	DomainNameLabel *string

	// The Fully Qualified Domain Name of the A DNS record associated with the public IP. This is the concatenation of the domainNameLabel
	// and the regionalized DNS zone.
	Fqdn *string

	// The reverse FQDN. A user-visible, fully qualified domain name that resolves to this public IP address. If the reverseFqdn
	// is specified, then a PTR DNS record is created pointing from the IP address in
	// the in-addr.arpa domain to the reverse FQDN.
	ReverseFqdn *string
}

func (p *PublicIPAddressDNSSettings) GetDomainNameLabel() (rv string) {
	if p != nil && p.DomainNameLabel != nil {
		return *p.DomainNameLabel
	}
	return
}

func (p *PublicIPAddressDNSSettings) GetFqdn() (rv string) {
	if p != nil && p.Fqdn != nil {
		return *p.Fqdn
	}
	return
}

func (p *PublicIPAddressDNSSettings) GetReverseFqdn() (rv string) {
	if p != nil && p.ReverseFqdn != nil {
		return *p.ReverseFqdn
	}
	return
}

// PublicIPAddressListResult - Response for ListPublicIpAddresses API service call.
type PublicIPAddressListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of public IP addresses that exists in a resource group.
	Value []*PublicIPAddress
}

func (p *PublicIPAddressListResult) GetNextLink() (rv string) {
	if p != nil && p.NextLink != nil {
		return *p.NextLink
	}
	return
}

func (p *PublicIPAddressListResult) GetValue() (rv []*PublicIPAddress) {
	if p != nil {
		return p.Value
	}
	return
}

// PublicIPAddressPropertiesFormat - Public IP address properties.
type PublicIPAddressPropertiesFormat struct {
	// The FQDN of the DNS record associated with the public IP address.
	DNSSettings *PublicIPAddressDNSSettings

	// The DDoS protection custom policy associated with the public IP address.
	DdosSettings *DdosSettings

	// Specify what happens to the public IP address when the VM using it is deleted
	DeleteOption *DeleteOptions

	// The IP address associated with the public IP address resource.
	IPAddress *string

	// The list of tags associated with the public IP address.
	IPTags []*IPTag

	// The idle timeout of the public IP address.
	IdleTimeoutInMinutes *int32

	// The linked public IP address of the public IP address resource.
	LinkedPublicIPAddress *PublicIPAddress

	// Migration phase of Public IP Address.
	MigrationPhase *PublicIPAddressMigrationPhase

	// The NatGateway for the Public IP address.
	NatGateway *NatGateway

	// The public IP address version.
	PublicIPAddressVersion *IPVersion

	// The public IP address allocation method.
	PublicIPAllocationMethod *IPAllocationMethod

	// The Public IP Prefix this Public IP Address should be allocated from.
	PublicIPPrefix *SubResource

	// The service public IP address of the public IP address resource.
	ServicePublicIPAddress *PublicIPAddress

	// READ-ONLY; The IP configuration associated with the public IP address.
	IPConfiguration *IPConfiguration

	// READ-ONLY; The provisioning state of the public IP address resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the public IP address resource.
	ResourceGUID *string
}

func (p *PublicIPAddressPropertiesFormat) GetDNSSettings() (rv *PublicIPAddressDNSSettings) {
	if p != nil {
		return p.DNSSettings
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetDdosSettings() (rv *DdosSettings) {
	if p != nil {
		return p.DdosSettings
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetDeleteOption() (rv *DeleteOptions) {
	if p != nil {
		return p.DeleteOption
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetIPAddress() (rv string) {
	if p != nil && p.IPAddress != nil {
		return *p.IPAddress
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetIPTags() (rv []*IPTag) {
	if p != nil {
		return p.IPTags
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetIdleTimeoutInMinutes() (rv int32) {
	if p != nil && p.IdleTimeoutInMinutes != nil {
		return *p.IdleTimeoutInMinutes
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetLinkedPublicIPAddress() (rv *PublicIPAddress) {
	if p != nil {
		return p.LinkedPublicIPAddress
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetMigrationPhase() (rv *PublicIPAddressMigrationPhase) {
	if p != nil {
		return p.MigrationPhase
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetNatGateway() (rv *NatGateway) {
	if p != nil {
		return p.NatGateway
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetPublicIPAddressVersion() (rv *IPVersion) {
	if p != nil {
		return p.PublicIPAddressVersion
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetPublicIPAllocationMethod() (rv *IPAllocationMethod) {
	if p != nil {
		return p.PublicIPAllocationMethod
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetPublicIPPrefix() (rv *SubResource) {
	if p != nil {
		return p.PublicIPPrefix
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetServicePublicIPAddress() (rv *PublicIPAddress) {
	if p != nil {
		return p.ServicePublicIPAddress
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetIPConfiguration() (rv *IPConfiguration) {
	if p != nil {
		return p.IPConfiguration
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

func (p *PublicIPAddressPropertiesFormat) GetResourceGUID() (rv string) {
	if p != nil && p.ResourceGUID != nil {
		return *p.ResourceGUID
	}
	return
}

// PublicIPAddressSKU - SKU of a public IP address.
type PublicIPAddressSKU struct {
	// Name of a public IP address SKU.
	Name *PublicIPAddressSKUName

	// Tier of a public IP address SKU.
	Tier *PublicIPAddressSKUTier
}

func (p *PublicIPAddressSKU) GetName() (rv *PublicIPAddressSKUName) {
	if p != nil {
		return p.Name
	}
	return
}

func (p *PublicIPAddressSKU) GetTier() (rv *PublicIPAddressSKUTier) {
	if p != nil {
		return p.Tier
	}
	return
}

// PublicIPDdosProtectionStatusResult - Response for GetPublicIpAddressDdosProtectionStatusOperation API service call.
type PublicIPDdosProtectionStatusResult struct {
	// DDoS protection plan Resource Id of a if IP address is protected through a plan.
	DdosProtectionPlanID *string

	// Value indicating whether the IP address is DDoS workload protected or not.
	IsWorkloadProtected *IsWorkloadProtected

	// IP Address of the Public IP Resource
	PublicIPAddress *string

	// Public IP ARM resource ID
	PublicIPAddressID *string
}

func (p *PublicIPDdosProtectionStatusResult) GetDdosProtectionPlanID() (rv string) {
	if p != nil && p.DdosProtectionPlanID != nil {
		return *p.DdosProtectionPlanID
	}
	return
}

func (p *PublicIPDdosProtectionStatusResult) GetIsWorkloadProtected() (rv *IsWorkloadProtected) {
	if p != nil {
		return p.IsWorkloadProtected
	}
	return
}

func (p *PublicIPDdosProtectionStatusResult) GetPublicIPAddress() (rv string) {
	if p != nil && p.PublicIPAddress != nil {
		return *p.PublicIPAddress
	}
	return
}

func (p *PublicIPDdosProtectionStatusResult) GetPublicIPAddressID() (rv string) {
	if p != nil && p.PublicIPAddressID != nil {
		return *p.PublicIPAddressID
	}
	return
}

// PublicIPPrefix - Public IP prefix resource.
type PublicIPPrefix struct {
	// The extended location of the public ip address.
	ExtendedLocation *ExtendedLocation

	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Public IP prefix properties.
	Properties *PublicIPPrefixPropertiesFormat

	// The public IP prefix SKU.
	SKU *PublicIPPrefixSKU

	// Resource tags.
	Tags map[string]*string

	// A list of availability zones denoting the IP allocated for the resource needs to come from.
	Zones []*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (p *PublicIPPrefix) GetExtendedLocation() (rv *ExtendedLocation) {
	if p != nil {
		return p.ExtendedLocation
	}
	return
}

func (p *PublicIPPrefix) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PublicIPPrefix) GetLocation() (rv string) {
	if p != nil && p.Location != nil {
		return *p.Location
	}
	return
}

func (p *PublicIPPrefix) GetProperties() (rv *PublicIPPrefixPropertiesFormat) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PublicIPPrefix) GetSKU() (rv *PublicIPPrefixSKU) {
	if p != nil {
		return p.SKU
	}
	return
}

func (p *PublicIPPrefix) GetTags() (rv map[string]*string) {
	if p != nil {
		return p.Tags
	}
	return
}

func (p *PublicIPPrefix) GetZones() (rv []*string) {
	if p != nil {
		return p.Zones
	}
	return
}

func (p *PublicIPPrefix) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *PublicIPPrefix) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PublicIPPrefix) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// PublicIPPrefixListResult - Response for ListPublicIpPrefixes API service call.
type PublicIPPrefixListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of public IP prefixes that exists in a resource group.
	Value []*PublicIPPrefix
}

func (p *PublicIPPrefixListResult) GetNextLink() (rv string) {
	if p != nil && p.NextLink != nil {
		return *p.NextLink
	}
	return
}

func (p *PublicIPPrefixListResult) GetValue() (rv []*PublicIPPrefix) {
	if p != nil {
		return p.Value
	}
	return
}

// PublicIPPrefixPropertiesFormat - Public IP prefix properties.
type PublicIPPrefixPropertiesFormat struct {
	// The customIpPrefix that this prefix is associated with.
	CustomIPPrefix *SubResource

	// The list of tags associated with the public IP prefix.
	IPTags []*IPTag

	// NatGateway of Public IP Prefix.
	NatGateway *NatGateway

	// The Length of the Public IP Prefix.
	PrefixLength *int32

	// The public IP address version.
	PublicIPAddressVersion *IPVersion

	// READ-ONLY; The allocated Prefix.
	IPPrefix *string

	// READ-ONLY; The reference to load balancer frontend IP configuration associated with the public IP prefix.
	LoadBalancerFrontendIPConfiguration *SubResource

	// READ-ONLY; The provisioning state of the public IP prefix resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The list of all referenced PublicIPAddresses.
	PublicIPAddresses []*ReferencedPublicIPAddress

	// READ-ONLY; The resource GUID property of the public IP prefix resource.
	ResourceGUID *string
}

func (p *PublicIPPrefixPropertiesFormat) GetCustomIPPrefix() (rv *SubResource) {
	if p != nil {
		return p.CustomIPPrefix
	}
	return
}

func (p *PublicIPPrefixPropertiesFormat) GetIPTags() (rv []*IPTag) {
	if p != nil {
		return p.IPTags
	}
	return
}

func (p *PublicIPPrefixPropertiesFormat) GetNatGateway() (rv *NatGateway) {
	if p != nil {
		return p.NatGateway
	}
	return
}

func (p *PublicIPPrefixPropertiesFormat) GetPrefixLength() (rv int32) {
	if p != nil && p.PrefixLength != nil {
		return *p.PrefixLength
	}
	return
}

func (p *PublicIPPrefixPropertiesFormat) GetPublicIPAddressVersion() (rv *IPVersion) {
	if p != nil {
		return p.PublicIPAddressVersion
	}
	return
}

func (p *PublicIPPrefixPropertiesFormat) GetIPPrefix() (rv string) {
	if p != nil && p.IPPrefix != nil {
		return *p.IPPrefix
	}
	return
}

func (p *PublicIPPrefixPropertiesFormat) GetLoadBalancerFrontendIPConfiguration() (rv *SubResource) {
	if p != nil {
		return p.LoadBalancerFrontendIPConfiguration
	}
	return
}

func (p *PublicIPPrefixPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if p != nil {
		return p.ProvisioningState
	}
	return
}

func (p *PublicIPPrefixPropertiesFormat) GetPublicIPAddresses() (rv []*ReferencedPublicIPAddress) {
	if p != nil {
		return p.PublicIPAddresses
	}
	return
}

func (p *PublicIPPrefixPropertiesFormat) GetResourceGUID() (rv string) {
	if p != nil && p.ResourceGUID != nil {
		return *p.ResourceGUID
	}
	return
}

// PublicIPPrefixSKU - SKU of a public IP prefix.
type PublicIPPrefixSKU struct {
	// Name of a public IP prefix SKU.
	Name *PublicIPPrefixSKUName

	// Tier of a public IP prefix SKU.
	Tier *PublicIPPrefixSKUTier
}

func (p *PublicIPPrefixSKU) GetName() (rv *PublicIPPrefixSKUName) {
	if p != nil {
		return p.Name
	}
	return
}

func (p *PublicIPPrefixSKU) GetTier() (rv *PublicIPPrefixSKUTier) {
	if p != nil {
		return p.Tier
	}
	return
}

// QosDefinition - Quality of Service defines the traffic configuration between endpoints. Mandatory to have one marking.
type QosDefinition struct {
	// Destination IP ranges.
	DestinationIPRanges []*QosIPRange

	// Destination port ranges.
	DestinationPortRanges []*QosPortRange

	// List of markings to be used in the configuration.
	Markings []*int32

	// RNM supported protocol types.
	Protocol *ProtocolType

	// Source IP ranges.
	SourceIPRanges []*QosIPRange

	// Sources port ranges.
	SourcePortRanges []*QosPortRange
}

func (q *QosDefinition) GetDestinationIPRanges() (rv []*QosIPRange) {
	if q != nil {
		return q.DestinationIPRanges
	}
	return
}

func (q *QosDefinition) GetDestinationPortRanges() (rv []*QosPortRange) {
	if q != nil {
		return q.DestinationPortRanges
	}
	return
}

func (q *QosDefinition) GetMarkings() (rv []*int32) {
	if q != nil {
		return q.Markings
	}
	return
}

func (q *QosDefinition) GetProtocol() (rv *ProtocolType) {
	if q != nil {
		return q.Protocol
	}
	return
}

func (q *QosDefinition) GetSourceIPRanges() (rv []*QosIPRange) {
	if q != nil {
		return q.SourceIPRanges
	}
	return
}

func (q *QosDefinition) GetSourcePortRanges() (rv []*QosPortRange) {
	if q != nil {
		return q.SourcePortRanges
	}
	return
}

// QosIPRange - Qos Traffic Profiler IP Range properties.
type QosIPRange struct {
	// End IP Address.
	EndIP *string

	// Start IP Address.
	StartIP *string
}

func (q *QosIPRange) GetEndIP() (rv string) {
	if q != nil && q.EndIP != nil {
		return *q.EndIP
	}
	return
}

func (q *QosIPRange) GetStartIP() (rv string) {
	if q != nil && q.StartIP != nil {
		return *q.StartIP
	}
	return
}

// QosPortRange - Qos Traffic Profiler Port range properties.
type QosPortRange struct {
	// Qos Port Range end.
	End *int32

	// Qos Port Range start.
	Start *int32
}

func (q *QosPortRange) GetEnd() (rv int32) {
	if q != nil && q.End != nil {
		return *q.End
	}
	return
}

func (q *QosPortRange) GetStart() (rv int32) {
	if q != nil && q.Start != nil {
		return *q.Start
	}
	return
}

// QueryInboundNatRulePortMappingRequest - The request for a QueryInboundNatRulePortMapping API. Either IpConfiguration or
// IpAddress should be set
type QueryInboundNatRulePortMappingRequest struct {
	// IP address set in load balancer backend address.
	IPAddress *string

	// NetworkInterfaceIPConfiguration set in load balancer backend address.
	IPConfiguration *SubResource
}

func (q *QueryInboundNatRulePortMappingRequest) GetIPAddress() (rv string) {
	if q != nil && q.IPAddress != nil {
		return *q.IPAddress
	}
	return
}

func (q *QueryInboundNatRulePortMappingRequest) GetIPConfiguration() (rv *SubResource) {
	if q != nil {
		return q.IPConfiguration
	}
	return
}

// QueryRequestOptions - Query Request Options
type QueryRequestOptions struct {
	// When present, the value can be passed to a subsequent query call (together with the same query and scopes used in the current
	// request) to retrieve the next page of data.
	SkipToken *string
}

func (q *QueryRequestOptions) GetSkipToken() (rv string) {
	if q != nil && q.SkipToken != nil {
		return *q.SkipToken
	}
	return
}

// QueryResults - Query result
type QueryResults struct {
	// Number of total records matching the query.
	MatchingRecordsCount *int64

	// Array containing the results of the query
	Signatures []*SingleQueryResult
}

func (q *QueryResults) GetMatchingRecordsCount() (rv int64) {
	if q != nil && q.MatchingRecordsCount != nil {
		return *q.MatchingRecordsCount
	}
	return
}

func (q *QueryResults) GetSignatures() (rv []*SingleQueryResult) {
	if q != nil {
		return q.Signatures
	}
	return
}

// QueryTroubleshootingParameters - Parameters that define the resource to query the troubleshooting result.
type QueryTroubleshootingParameters struct {
	// REQUIRED; The target resource ID to query the troubleshooting result.
	TargetResourceID *string
}

func (q *QueryTroubleshootingParameters) GetTargetResourceID() (rv string) {
	if q != nil && q.TargetResourceID != nil {
		return *q.TargetResourceID
	}
	return
}

// RadiusServer - Radius Server Settings.
type RadiusServer struct {
	// REQUIRED; The address of this radius server.
	RadiusServerAddress *string

	// The initial score assigned to this radius server.
	RadiusServerScore *int64

	// The secret used for this radius server.
	RadiusServerSecret *string
}

func (r *RadiusServer) GetRadiusServerAddress() (rv string) {
	if r != nil && r.RadiusServerAddress != nil {
		return *r.RadiusServerAddress
	}
	return
}

func (r *RadiusServer) GetRadiusServerScore() (rv int64) {
	if r != nil && r.RadiusServerScore != nil {
		return *r.RadiusServerScore
	}
	return
}

func (r *RadiusServer) GetRadiusServerSecret() (rv string) {
	if r != nil && r.RadiusServerSecret != nil {
		return *r.RadiusServerSecret
	}
	return
}

// RecordSet - A collective group of information about the record set information.
type RecordSet struct {
	// Fqdn that resolves to private endpoint ip address.
	Fqdn *string

	// The private ip address of the private endpoint.
	IPAddresses []*string

	// Recordset name.
	RecordSetName *string

	// Resource record type.
	RecordType *string

	// Recordset time to live.
	TTL *int32

	// READ-ONLY; The provisioning state of the recordset.
	ProvisioningState *ProvisioningState
}

func (r *RecordSet) GetFqdn() (rv string) {
	if r != nil && r.Fqdn != nil {
		return *r.Fqdn
	}
	return
}

func (r *RecordSet) GetIPAddresses() (rv []*string) {
	if r != nil {
		return r.IPAddresses
	}
	return
}

func (r *RecordSet) GetRecordSetName() (rv string) {
	if r != nil && r.RecordSetName != nil {
		return *r.RecordSetName
	}
	return
}

func (r *RecordSet) GetRecordType() (rv string) {
	if r != nil && r.RecordType != nil {
		return *r.RecordType
	}
	return
}

func (r *RecordSet) GetTTL() (rv int32) {
	if r != nil && r.TTL != nil {
		return *r.TTL
	}
	return
}

func (r *RecordSet) GetProvisioningState() (rv *ProvisioningState) {
	if r != nil {
		return r.ProvisioningState
	}
	return
}

// ReferencedPublicIPAddress - Reference to a public IP address.
type ReferencedPublicIPAddress struct {
	// The PublicIPAddress Reference.
	ID *string
}

func (r *ReferencedPublicIPAddress) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

// ResourceNavigationLink resource.
type ResourceNavigationLink struct {
	// Resource ID.
	ID *string

	// Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Resource navigation link properties format.
	Properties *ResourceNavigationLinkFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource type.
	Type *string
}

func (r *ResourceNavigationLink) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *ResourceNavigationLink) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *ResourceNavigationLink) GetProperties() (rv *ResourceNavigationLinkFormat) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *ResourceNavigationLink) GetEtag() (rv string) {
	if r != nil && r.Etag != nil {
		return *r.Etag
	}
	return
}

func (r *ResourceNavigationLink) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// ResourceNavigationLinkFormat - Properties of ResourceNavigationLink.
type ResourceNavigationLinkFormat struct {
	// Link to the external resource.
	Link *string

	// Resource type of the linked resource.
	LinkedResourceType *string

	// READ-ONLY; The provisioning state of the resource navigation link resource.
	ProvisioningState *ProvisioningState
}

func (r *ResourceNavigationLinkFormat) GetLink() (rv string) {
	if r != nil && r.Link != nil {
		return *r.Link
	}
	return
}

func (r *ResourceNavigationLinkFormat) GetLinkedResourceType() (rv string) {
	if r != nil && r.LinkedResourceType != nil {
		return *r.LinkedResourceType
	}
	return
}

func (r *ResourceNavigationLinkFormat) GetProvisioningState() (rv *ProvisioningState) {
	if r != nil {
		return r.ProvisioningState
	}
	return
}

// ResourceNavigationLinksListResult - Response for ResourceNavigationLinks_List operation.
type ResourceNavigationLinksListResult struct {
	// The resource navigation links in a subnet.
	Value []*ResourceNavigationLink

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (r *ResourceNavigationLinksListResult) GetValue() (rv []*ResourceNavigationLink) {
	if r != nil {
		return r.Value
	}
	return
}

func (r *ResourceNavigationLinksListResult) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

// RetentionPolicyParameters - Parameters that define the retention policy for flow log.
type RetentionPolicyParameters struct {
	// Number of days to retain flow log records.
	Days *int32

	// Flag to enable/disable retention.
	Enabled *bool
}

func (r *RetentionPolicyParameters) GetDays() (rv int32) {
	if r != nil && r.Days != nil {
		return *r.Days
	}
	return
}

func (r *RetentionPolicyParameters) GetEnabled() (rv bool) {
	if r != nil && r.Enabled != nil {
		return *r.Enabled
	}
	return
}

// Route resource.
type Route struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the route.
	Properties *RoutePropertiesFormat

	// The type of the resource.
	Type *string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (r *Route) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *Route) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *Route) GetProperties() (rv *RoutePropertiesFormat) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *Route) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

func (r *Route) GetEtag() (rv string) {
	if r != nil && r.Etag != nil {
		return *r.Etag
	}
	return
}

// RouteFilter - Route Filter Resource.
type RouteFilter struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the route filter.
	Properties *RouteFilterPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (r *RouteFilter) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *RouteFilter) GetLocation() (rv string) {
	if r != nil && r.Location != nil {
		return *r.Location
	}
	return
}

func (r *RouteFilter) GetProperties() (rv *RouteFilterPropertiesFormat) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *RouteFilter) GetTags() (rv map[string]*string) {
	if r != nil {
		return r.Tags
	}
	return
}

func (r *RouteFilter) GetEtag() (rv string) {
	if r != nil && r.Etag != nil {
		return *r.Etag
	}
	return
}

func (r *RouteFilter) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RouteFilter) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// RouteFilterListResult - Response for the ListRouteFilters API service call.
type RouteFilterListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of route filters in a resource group.
	Value []*RouteFilter
}

func (r *RouteFilterListResult) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

func (r *RouteFilterListResult) GetValue() (rv []*RouteFilter) {
	if r != nil {
		return r.Value
	}
	return
}

// RouteFilterPropertiesFormat - Route Filter Resource.
type RouteFilterPropertiesFormat struct {
	// Collection of RouteFilterRules contained within a route filter.
	Rules []*RouteFilterRule

	// READ-ONLY; A collection of references to express route circuit ipv6 peerings.
	IPv6Peerings []*ExpressRouteCircuitPeering

	// READ-ONLY; A collection of references to express route circuit peerings.
	Peerings []*ExpressRouteCircuitPeering

	// READ-ONLY; The provisioning state of the route filter resource.
	ProvisioningState *ProvisioningState
}

func (r *RouteFilterPropertiesFormat) GetRules() (rv []*RouteFilterRule) {
	if r != nil {
		return r.Rules
	}
	return
}

func (r *RouteFilterPropertiesFormat) GetIPv6Peerings() (rv []*ExpressRouteCircuitPeering) {
	if r != nil {
		return r.IPv6Peerings
	}
	return
}

func (r *RouteFilterPropertiesFormat) GetPeerings() (rv []*ExpressRouteCircuitPeering) {
	if r != nil {
		return r.Peerings
	}
	return
}

func (r *RouteFilterPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if r != nil {
		return r.ProvisioningState
	}
	return
}

// RouteFilterRule - Route Filter Rule Resource.
type RouteFilterRule struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the route filter rule.
	Properties *RouteFilterRulePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (r *RouteFilterRule) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *RouteFilterRule) GetLocation() (rv string) {
	if r != nil && r.Location != nil {
		return *r.Location
	}
	return
}

func (r *RouteFilterRule) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RouteFilterRule) GetProperties() (rv *RouteFilterRulePropertiesFormat) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *RouteFilterRule) GetEtag() (rv string) {
	if r != nil && r.Etag != nil {
		return *r.Etag
	}
	return
}

// RouteFilterRuleListResult - Response for the ListRouteFilterRules API service call.
type RouteFilterRuleListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of RouteFilterRules in a resource group.
	Value []*RouteFilterRule
}

func (r *RouteFilterRuleListResult) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

func (r *RouteFilterRuleListResult) GetValue() (rv []*RouteFilterRule) {
	if r != nil {
		return r.Value
	}
	return
}

// RouteFilterRulePropertiesFormat - Route Filter Rule Resource.
type RouteFilterRulePropertiesFormat struct {
	// REQUIRED; The access type of the rule.
	Access *Access

	// REQUIRED; The collection for bgp community values to filter on. e.g. ['12076:5010','12076:5020'].
	Communities []*string

	// REQUIRED; The rule type of the rule.
	RouteFilterRuleType *RouteFilterRuleType

	// READ-ONLY; The provisioning state of the route filter rule resource.
	ProvisioningState *ProvisioningState
}

func (r *RouteFilterRulePropertiesFormat) GetAccess() (rv *Access) {
	if r != nil {
		return r.Access
	}
	return
}

func (r *RouteFilterRulePropertiesFormat) GetCommunities() (rv []*string) {
	if r != nil {
		return r.Communities
	}
	return
}

func (r *RouteFilterRulePropertiesFormat) GetRouteFilterRuleType() (rv *RouteFilterRuleType) {
	if r != nil {
		return r.RouteFilterRuleType
	}
	return
}

func (r *RouteFilterRulePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if r != nil {
		return r.ProvisioningState
	}
	return
}

// RouteListResult - Response for the ListRoute API service call.
type RouteListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of routes in a resource group.
	Value []*Route
}

func (r *RouteListResult) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

func (r *RouteListResult) GetValue() (rv []*Route) {
	if r != nil {
		return r.Value
	}
	return
}

// RouteMap - The RouteMap child resource of a Virtual hub.
type RouteMap struct {
	// Resource ID.
	ID *string

	// Properties of the RouteMap resource.
	Properties *RouteMapProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (r *RouteMap) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *RouteMap) GetProperties() (rv *RouteMapProperties) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *RouteMap) GetEtag() (rv string) {
	if r != nil && r.Etag != nil {
		return *r.Etag
	}
	return
}

func (r *RouteMap) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RouteMap) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// RouteMapProperties - Properties of RouteMap resource
type RouteMapProperties struct {
	// List of connections which have this RoutMap associated for inbound traffic.
	AssociatedInboundConnections []*string

	// List of connections which have this RoutMap associated for outbound traffic.
	AssociatedOutboundConnections []*string

	// List of RouteMap rules to be applied.
	Rules []*RouteMapRule

	// READ-ONLY; The provisioning state of the RouteMap resource.
	ProvisioningState *ProvisioningState
}

func (r *RouteMapProperties) GetAssociatedInboundConnections() (rv []*string) {
	if r != nil {
		return r.AssociatedInboundConnections
	}
	return
}

func (r *RouteMapProperties) GetAssociatedOutboundConnections() (rv []*string) {
	if r != nil {
		return r.AssociatedOutboundConnections
	}
	return
}

func (r *RouteMapProperties) GetRules() (rv []*RouteMapRule) {
	if r != nil {
		return r.Rules
	}
	return
}

func (r *RouteMapProperties) GetProvisioningState() (rv *ProvisioningState) {
	if r != nil {
		return r.ProvisioningState
	}
	return
}

// RouteMapRule - A RouteMap Rule.
type RouteMapRule struct {
	// List of actions which will be applied on a match.
	Actions []*Action

	// List of matching criterion which will be applied to traffic.
	MatchCriteria []*Criterion

	// The unique name for the rule.
	Name *string

	// Next step after rule is evaluated. Current supported behaviors are 'Continue'(to next rule) and 'Terminate'.
	NextStepIfMatched *NextStep
}

func (r *RouteMapRule) GetActions() (rv []*Action) {
	if r != nil {
		return r.Actions
	}
	return
}

func (r *RouteMapRule) GetMatchCriteria() (rv []*Criterion) {
	if r != nil {
		return r.MatchCriteria
	}
	return
}

func (r *RouteMapRule) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RouteMapRule) GetNextStepIfMatched() (rv *NextStep) {
	if r != nil {
		return r.NextStepIfMatched
	}
	return
}

// RoutePropertiesFormat - Route resource.
type RoutePropertiesFormat struct {
	// REQUIRED; The type of Azure hop the packet should be sent to.
	NextHopType *RouteNextHopType

	// The destination CIDR to which the route applies.
	AddressPrefix *string

	// A value indicating whether this route overrides overlapping BGP routes regardless of LPM.
	HasBgpOverride *bool

	// The IP address packets should be forwarded to. Next hop values are only allowed in routes where the next hop type is VirtualAppliance.
	NextHopIPAddress *string

	// READ-ONLY; The provisioning state of the route resource.
	ProvisioningState *ProvisioningState
}

func (r *RoutePropertiesFormat) GetNextHopType() (rv *RouteNextHopType) {
	if r != nil {
		return r.NextHopType
	}
	return
}

func (r *RoutePropertiesFormat) GetAddressPrefix() (rv string) {
	if r != nil && r.AddressPrefix != nil {
		return *r.AddressPrefix
	}
	return
}

func (r *RoutePropertiesFormat) GetHasBgpOverride() (rv bool) {
	if r != nil && r.HasBgpOverride != nil {
		return *r.HasBgpOverride
	}
	return
}

func (r *RoutePropertiesFormat) GetNextHopIPAddress() (rv string) {
	if r != nil && r.NextHopIPAddress != nil {
		return *r.NextHopIPAddress
	}
	return
}

func (r *RoutePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if r != nil {
		return r.ProvisioningState
	}
	return
}

// RouteTable - Route table resource.
type RouteTable struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the route table.
	Properties *RouteTablePropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (r *RouteTable) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *RouteTable) GetLocation() (rv string) {
	if r != nil && r.Location != nil {
		return *r.Location
	}
	return
}

func (r *RouteTable) GetProperties() (rv *RouteTablePropertiesFormat) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *RouteTable) GetTags() (rv map[string]*string) {
	if r != nil {
		return r.Tags
	}
	return
}

func (r *RouteTable) GetEtag() (rv string) {
	if r != nil && r.Etag != nil {
		return *r.Etag
	}
	return
}

func (r *RouteTable) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RouteTable) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// RouteTableListResult - Response for the ListRouteTable API service call.
type RouteTableListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of route tables in a resource group.
	Value []*RouteTable
}

func (r *RouteTableListResult) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

func (r *RouteTableListResult) GetValue() (rv []*RouteTable) {
	if r != nil {
		return r.Value
	}
	return
}

// RouteTablePropertiesFormat - Route Table resource.
type RouteTablePropertiesFormat struct {
	// Whether to disable the routes learned by BGP on that route table. True means disable.
	DisableBgpRoutePropagation *bool

	// Collection of routes contained within a route table.
	Routes []*Route

	// READ-ONLY; The provisioning state of the route table resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the route table.
	ResourceGUID *string

	// READ-ONLY; A collection of references to subnets.
	Subnets []*Subnet
}

func (r *RouteTablePropertiesFormat) GetDisableBgpRoutePropagation() (rv bool) {
	if r != nil && r.DisableBgpRoutePropagation != nil {
		return *r.DisableBgpRoutePropagation
	}
	return
}

func (r *RouteTablePropertiesFormat) GetRoutes() (rv []*Route) {
	if r != nil {
		return r.Routes
	}
	return
}

func (r *RouteTablePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if r != nil {
		return r.ProvisioningState
	}
	return
}

func (r *RouteTablePropertiesFormat) GetResourceGUID() (rv string) {
	if r != nil && r.ResourceGUID != nil {
		return *r.ResourceGUID
	}
	return
}

func (r *RouteTablePropertiesFormat) GetSubnets() (rv []*Subnet) {
	if r != nil {
		return r.Subnets
	}
	return
}

// RoutingConfiguration - Routing Configuration indicating the associated and propagated route tables for this connection.
type RoutingConfiguration struct {
	// The resource id RouteTable associated with this RoutingConfiguration.
	AssociatedRouteTable *SubResource

	// The resource id of the RouteMap associated with this RoutingConfiguration for inbound learned routes.
	InboundRouteMap *SubResource

	// The resource id of theRouteMap associated with this RoutingConfiguration for outbound advertised routes.
	OutboundRouteMap *SubResource

	// The list of RouteTables to advertise the routes to.
	PropagatedRouteTables *PropagatedRouteTable

	// List of routes that control routing from VirtualHub into a virtual network connection.
	VnetRoutes *VnetRoute
}

func (r *RoutingConfiguration) GetAssociatedRouteTable() (rv *SubResource) {
	if r != nil {
		return r.AssociatedRouteTable
	}
	return
}

func (r *RoutingConfiguration) GetInboundRouteMap() (rv *SubResource) {
	if r != nil {
		return r.InboundRouteMap
	}
	return
}

func (r *RoutingConfiguration) GetOutboundRouteMap() (rv *SubResource) {
	if r != nil {
		return r.OutboundRouteMap
	}
	return
}

func (r *RoutingConfiguration) GetPropagatedRouteTables() (rv *PropagatedRouteTable) {
	if r != nil {
		return r.PropagatedRouteTables
	}
	return
}

func (r *RoutingConfiguration) GetVnetRoutes() (rv *VnetRoute) {
	if r != nil {
		return r.VnetRoutes
	}
	return
}

// RoutingIntent - The routing intent child resource of a Virtual hub.
type RoutingIntent struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the RoutingIntent resource.
	Properties *RoutingIntentProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource type.
	Type *string
}

func (r *RoutingIntent) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *RoutingIntent) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RoutingIntent) GetProperties() (rv *RoutingIntentProperties) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *RoutingIntent) GetEtag() (rv string) {
	if r != nil && r.Etag != nil {
		return *r.Etag
	}
	return
}

func (r *RoutingIntent) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// RoutingIntentProperties - The properties of a RoutingIntent resource.
type RoutingIntentProperties struct {
	// List of routing policies.
	RoutingPolicies []*RoutingPolicy

	// READ-ONLY; The provisioning state of the RoutingIntent resource.
	ProvisioningState *ProvisioningState
}

func (r *RoutingIntentProperties) GetRoutingPolicies() (rv []*RoutingPolicy) {
	if r != nil {
		return r.RoutingPolicies
	}
	return
}

func (r *RoutingIntentProperties) GetProvisioningState() (rv *ProvisioningState) {
	if r != nil {
		return r.ProvisioningState
	}
	return
}

// RoutingPolicy - The routing policy object used in a RoutingIntent resource.
type RoutingPolicy struct {
	// REQUIRED; List of all destinations which this routing policy is applicable to (for example: Internet, PrivateTraffic).
	Destinations []*string

	// REQUIRED; The unique name for the routing policy.
	Name *string

	// REQUIRED; The next hop resource id on which this routing policy is applicable to.
	NextHop *string
}

func (r *RoutingPolicy) GetDestinations() (rv []*string) {
	if r != nil {
		return r.Destinations
	}
	return
}

func (r *RoutingPolicy) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *RoutingPolicy) GetNextHop() (rv string) {
	if r != nil && r.NextHop != nil {
		return *r.NextHop
	}
	return
}

// Rule of type network.
type Rule struct {
	// REQUIRED; Rule Type.
	RuleType *FirewallPolicyRuleType

	// Description of the rule.
	Description *string

	// List of destination IP addresses or Service Tags.
	DestinationAddresses []*string

	// List of destination FQDNs.
	DestinationFqdns []*string

	// List of destination IpGroups for this rule.
	DestinationIPGroups []*string

	// List of destination ports.
	DestinationPorts []*string

	// Array of FirewallPolicyRuleNetworkProtocols.
	IPProtocols []*FirewallPolicyRuleNetworkProtocol

	// Name of the rule.
	Name *string

	// List of source IP addresses for this rule.
	SourceAddresses []*string

	// List of source IpGroups for this rule.
	SourceIPGroups []*string
}

func (r *Rule) GetRuleType() (rv *FirewallPolicyRuleType) {
	if r != nil {
		return r.RuleType
	}
	return
}

func (r *Rule) GetDescription() (rv string) {
	if r != nil && r.Description != nil {
		return *r.Description
	}
	return
}

func (r *Rule) GetDestinationAddresses() (rv []*string) {
	if r != nil {
		return r.DestinationAddresses
	}
	return
}

func (r *Rule) GetDestinationFqdns() (rv []*string) {
	if r != nil {
		return r.DestinationFqdns
	}
	return
}

func (r *Rule) GetDestinationIPGroups() (rv []*string) {
	if r != nil {
		return r.DestinationIPGroups
	}
	return
}

func (r *Rule) GetDestinationPorts() (rv []*string) {
	if r != nil {
		return r.DestinationPorts
	}
	return
}

func (r *Rule) GetIPProtocols() (rv []*FirewallPolicyRuleNetworkProtocol) {
	if r != nil {
		return r.IPProtocols
	}
	return
}

func (r *Rule) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *Rule) GetSourceAddresses() (rv []*string) {
	if r != nil {
		return r.SourceAddresses
	}
	return
}

func (r *Rule) GetSourceIPGroups() (rv []*string) {
	if r != nil {
		return r.SourceIPGroups
	}
	return
}

// GetFirewallPolicyRule implements the FirewallPolicyRuleClassification interface for type Rule.
func (r *Rule) GetFirewallPolicyRule() *FirewallPolicyRule {
	return &FirewallPolicyRule{
		Description: r.Description,
		Name:        r.Name,
		RuleType:    r.RuleType,
	}
}

// SKU - The sku of this Bastion Host.
type SKU struct {
	// The name of this Bastion Host.
	Name *BastionHostSKUName
}

func (s *SKU) GetName() (rv *BastionHostSKUName) {
	if s != nil {
		return s.Name
	}
	return
}

// ScopeConnection - The Scope Connections resource
type ScopeConnection struct {
	// The scope connection properties
	Properties *ScopeConnectionProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource ID.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; The system metadata related to this resource.
	SystemData *SystemData

	// READ-ONLY; Resource type.
	Type *string
}

func (s *ScopeConnection) GetProperties() (rv *ScopeConnectionProperties) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *ScopeConnection) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

func (s *ScopeConnection) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *ScopeConnection) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *ScopeConnection) GetSystemData() (rv *SystemData) {
	if s != nil {
		return s.SystemData
	}
	return
}

func (s *ScopeConnection) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// ScopeConnectionListResult - List of scope connections.
type ScopeConnectionListResult struct {
	// Gets the URL to get the next page of results.
	NextLink *string

	// List of scope connections.
	Value []*ScopeConnection
}

func (s *ScopeConnectionListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

func (s *ScopeConnectionListResult) GetValue() (rv []*ScopeConnection) {
	if s != nil {
		return s.Value
	}
	return
}

// ScopeConnectionProperties - Scope connection.
type ScopeConnectionProperties struct {
	// A description of the scope connection.
	Description *string

	// Resource ID.
	ResourceID *string

	// Tenant ID.
	TenantID *string

	// READ-ONLY; Connection State
	ConnectionState *ScopeConnectionState
}

func (s *ScopeConnectionProperties) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *ScopeConnectionProperties) GetResourceID() (rv string) {
	if s != nil && s.ResourceID != nil {
		return *s.ResourceID
	}
	return
}

func (s *ScopeConnectionProperties) GetTenantID() (rv string) {
	if s != nil && s.TenantID != nil {
		return *s.TenantID
	}
	return
}

func (s *ScopeConnectionProperties) GetConnectionState() (rv *ScopeConnectionState) {
	if s != nil {
		return s.ConnectionState
	}
	return
}

// SecurityAdminConfiguration - Defines the security admin configuration
type SecurityAdminConfiguration struct {
	// Indicates the properties for the network manager security admin configuration.
	Properties *SecurityAdminConfigurationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource ID.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; The system metadata related to this resource.
	SystemData *SystemData

	// READ-ONLY; Resource type.
	Type *string
}

func (s *SecurityAdminConfiguration) GetProperties() (rv *SecurityAdminConfigurationPropertiesFormat) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SecurityAdminConfiguration) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

func (s *SecurityAdminConfiguration) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SecurityAdminConfiguration) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SecurityAdminConfiguration) GetSystemData() (rv *SystemData) {
	if s != nil {
		return s.SystemData
	}
	return
}

func (s *SecurityAdminConfiguration) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// SecurityAdminConfigurationListResult - A list of network manager security admin configurations
type SecurityAdminConfigurationListResult struct {
	// Gets the URL to get the next page of results.
	NextLink *string

	// Gets a page of security admin configurations
	Value []*SecurityAdminConfiguration
}

func (s *SecurityAdminConfigurationListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

func (s *SecurityAdminConfigurationListResult) GetValue() (rv []*SecurityAdminConfiguration) {
	if s != nil {
		return s.Value
	}
	return
}

// SecurityAdminConfigurationPropertiesFormat - Defines the security admin configuration properties.
type SecurityAdminConfigurationPropertiesFormat struct {
	// Enum list of network intent policy based services.
	ApplyOnNetworkIntentPolicyBasedServices []*NetworkIntentPolicyBasedService

	// A description of the security configuration.
	Description *string

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

func (s *SecurityAdminConfigurationPropertiesFormat) GetApplyOnNetworkIntentPolicyBasedServices() (rv []*NetworkIntentPolicyBasedService) {
	if s != nil {
		return s.ApplyOnNetworkIntentPolicyBasedServices
	}
	return
}

func (s *SecurityAdminConfigurationPropertiesFormat) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SecurityAdminConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if s != nil {
		return s.ProvisioningState
	}
	return
}

// SecurityGroup - NetworkSecurityGroup resource.
type SecurityGroup struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the network security group.
	Properties *SecurityGroupPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (s *SecurityGroup) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SecurityGroup) GetLocation() (rv string) {
	if s != nil && s.Location != nil {
		return *s.Location
	}
	return
}

func (s *SecurityGroup) GetProperties() (rv *SecurityGroupPropertiesFormat) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SecurityGroup) GetTags() (rv map[string]*string) {
	if s != nil {
		return s.Tags
	}
	return
}

func (s *SecurityGroup) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

func (s *SecurityGroup) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SecurityGroup) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// SecurityGroupListResult - Response for ListNetworkSecurityGroups API service call.
type SecurityGroupListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of NetworkSecurityGroup resources.
	Value []*SecurityGroup
}

func (s *SecurityGroupListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

func (s *SecurityGroupListResult) GetValue() (rv []*SecurityGroup) {
	if s != nil {
		return s.Value
	}
	return
}

// SecurityGroupNetworkInterface - Network interface and all its associated security rules.
type SecurityGroupNetworkInterface struct {
	// ID of the network interface.
	ID *string

	// All security rules associated with the network interface.
	SecurityRuleAssociations *SecurityRuleAssociations
}

func (s *SecurityGroupNetworkInterface) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SecurityGroupNetworkInterface) GetSecurityRuleAssociations() (rv *SecurityRuleAssociations) {
	if s != nil {
		return s.SecurityRuleAssociations
	}
	return
}

// SecurityGroupPropertiesFormat - Network Security Group resource.
type SecurityGroupPropertiesFormat struct {
	// When enabled, flows created from Network Security Group connections will be re-evaluated when rules are updates. Initial
	// enablement will trigger re-evaluation.
	FlushConnection *bool

	// A collection of security rules of the network security group.
	SecurityRules []*SecurityRule

	// READ-ONLY; The default security rules of network security group.
	DefaultSecurityRules []*SecurityRule

	// READ-ONLY; A collection of references to flow log resources.
	FlowLogs []*FlowLog

	// READ-ONLY; A collection of references to network interfaces.
	NetworkInterfaces []*Interface

	// READ-ONLY; The provisioning state of the network security group resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the network security group resource.
	ResourceGUID *string

	// READ-ONLY; A collection of references to subnets.
	Subnets []*Subnet
}

func (s *SecurityGroupPropertiesFormat) GetFlushConnection() (rv bool) {
	if s != nil && s.FlushConnection != nil {
		return *s.FlushConnection
	}
	return
}

func (s *SecurityGroupPropertiesFormat) GetSecurityRules() (rv []*SecurityRule) {
	if s != nil {
		return s.SecurityRules
	}
	return
}

func (s *SecurityGroupPropertiesFormat) GetDefaultSecurityRules() (rv []*SecurityRule) {
	if s != nil {
		return s.DefaultSecurityRules
	}
	return
}

func (s *SecurityGroupPropertiesFormat) GetFlowLogs() (rv []*FlowLog) {
	if s != nil {
		return s.FlowLogs
	}
	return
}

func (s *SecurityGroupPropertiesFormat) GetNetworkInterfaces() (rv []*Interface) {
	if s != nil {
		return s.NetworkInterfaces
	}
	return
}

func (s *SecurityGroupPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if s != nil {
		return s.ProvisioningState
	}
	return
}

func (s *SecurityGroupPropertiesFormat) GetResourceGUID() (rv string) {
	if s != nil && s.ResourceGUID != nil {
		return *s.ResourceGUID
	}
	return
}

func (s *SecurityGroupPropertiesFormat) GetSubnets() (rv []*Subnet) {
	if s != nil {
		return s.Subnets
	}
	return
}

// SecurityGroupResult - Network configuration diagnostic result corresponded provided traffic query.
type SecurityGroupResult struct {
	// The network traffic is allowed or denied.
	SecurityRuleAccessResult *SecurityRuleAccess

	// READ-ONLY; List of results network security groups diagnostic.
	EvaluatedNetworkSecurityGroups []*EvaluatedNetworkSecurityGroup
}

func (s *SecurityGroupResult) GetSecurityRuleAccessResult() (rv *SecurityRuleAccess) {
	if s != nil {
		return s.SecurityRuleAccessResult
	}
	return
}

func (s *SecurityGroupResult) GetEvaluatedNetworkSecurityGroups() (rv []*EvaluatedNetworkSecurityGroup) {
	if s != nil {
		return s.EvaluatedNetworkSecurityGroups
	}
	return
}

// SecurityGroupViewParameters - Parameters that define the VM to check security groups for.
type SecurityGroupViewParameters struct {
	// REQUIRED; ID of the target VM.
	TargetResourceID *string
}

func (s *SecurityGroupViewParameters) GetTargetResourceID() (rv string) {
	if s != nil && s.TargetResourceID != nil {
		return *s.TargetResourceID
	}
	return
}

// SecurityGroupViewResult - The information about security rules applied to the specified VM.
type SecurityGroupViewResult struct {
	// List of network interfaces on the specified VM.
	NetworkInterfaces []*SecurityGroupNetworkInterface
}

func (s *SecurityGroupViewResult) GetNetworkInterfaces() (rv []*SecurityGroupNetworkInterface) {
	if s != nil {
		return s.NetworkInterfaces
	}
	return
}

// SecurityPartnerProvider - Security Partner Provider resource.
type SecurityPartnerProvider struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the Security Partner Provider.
	Properties *SecurityPartnerProviderPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (s *SecurityPartnerProvider) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SecurityPartnerProvider) GetLocation() (rv string) {
	if s != nil && s.Location != nil {
		return *s.Location
	}
	return
}

func (s *SecurityPartnerProvider) GetProperties() (rv *SecurityPartnerProviderPropertiesFormat) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SecurityPartnerProvider) GetTags() (rv map[string]*string) {
	if s != nil {
		return s.Tags
	}
	return
}

func (s *SecurityPartnerProvider) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

func (s *SecurityPartnerProvider) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SecurityPartnerProvider) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// SecurityPartnerProviderListResult - Response for ListSecurityPartnerProviders API service call.
type SecurityPartnerProviderListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of Security Partner Providers in a resource group.
	Value []*SecurityPartnerProvider
}

func (s *SecurityPartnerProviderListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

func (s *SecurityPartnerProviderListResult) GetValue() (rv []*SecurityPartnerProvider) {
	if s != nil {
		return s.Value
	}
	return
}

// SecurityPartnerProviderPropertiesFormat - Properties of the Security Partner Provider.
type SecurityPartnerProviderPropertiesFormat struct {
	// The security provider name.
	SecurityProviderName *SecurityProviderName

	// The virtualHub to which the Security Partner Provider belongs.
	VirtualHub *SubResource

	// READ-ONLY; The connection status with the Security Partner Provider.
	ConnectionStatus *SecurityPartnerProviderConnectionStatus

	// READ-ONLY; The provisioning state of the Security Partner Provider resource.
	ProvisioningState *ProvisioningState
}

func (s *SecurityPartnerProviderPropertiesFormat) GetSecurityProviderName() (rv *SecurityProviderName) {
	if s != nil {
		return s.SecurityProviderName
	}
	return
}

func (s *SecurityPartnerProviderPropertiesFormat) GetVirtualHub() (rv *SubResource) {
	if s != nil {
		return s.VirtualHub
	}
	return
}

func (s *SecurityPartnerProviderPropertiesFormat) GetConnectionStatus() (rv *SecurityPartnerProviderConnectionStatus) {
	if s != nil {
		return s.ConnectionStatus
	}
	return
}

func (s *SecurityPartnerProviderPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if s != nil {
		return s.ProvisioningState
	}
	return
}

// SecurityRule - Network security rule.
type SecurityRule struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the security rule.
	Properties *SecurityRulePropertiesFormat

	// The type of the resource.
	Type *string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (s *SecurityRule) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SecurityRule) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SecurityRule) GetProperties() (rv *SecurityRulePropertiesFormat) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SecurityRule) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *SecurityRule) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

// SecurityRuleAssociations - All security rules associated with the network interface.
type SecurityRuleAssociations struct {
	// Collection of default security rules of the network security group.
	DefaultSecurityRules []*SecurityRule

	// Collection of effective security rules.
	EffectiveSecurityRules []*EffectiveNetworkSecurityRule

	// Network interface and it's custom security rules.
	NetworkInterfaceAssociation *InterfaceAssociation

	// Subnet and it's custom security rules.
	SubnetAssociation *SubnetAssociation
}

func (s *SecurityRuleAssociations) GetDefaultSecurityRules() (rv []*SecurityRule) {
	if s != nil {
		return s.DefaultSecurityRules
	}
	return
}

func (s *SecurityRuleAssociations) GetEffectiveSecurityRules() (rv []*EffectiveNetworkSecurityRule) {
	if s != nil {
		return s.EffectiveSecurityRules
	}
	return
}

func (s *SecurityRuleAssociations) GetNetworkInterfaceAssociation() (rv *InterfaceAssociation) {
	if s != nil {
		return s.NetworkInterfaceAssociation
	}
	return
}

func (s *SecurityRuleAssociations) GetSubnetAssociation() (rv *SubnetAssociation) {
	if s != nil {
		return s.SubnetAssociation
	}
	return
}

// SecurityRuleListResult - Response for ListSecurityRule API service call. Retrieves all security rules that belongs to a
// network security group.
type SecurityRuleListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// The security rules in a network security group.
	Value []*SecurityRule
}

func (s *SecurityRuleListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

func (s *SecurityRuleListResult) GetValue() (rv []*SecurityRule) {
	if s != nil {
		return s.Value
	}
	return
}

// SecurityRulePropertiesFormat - Security rule resource.
type SecurityRulePropertiesFormat struct {
	// REQUIRED; The network traffic is allowed or denied.
	Access *SecurityRuleAccess

	// REQUIRED; The direction of the rule. The direction specifies if rule will be evaluated on incoming or outgoing traffic.
	Direction *SecurityRuleDirection

	// REQUIRED; The priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each
	// rule in the collection. The lower the priority number, the higher the priority of the rule.
	Priority *int32

	// REQUIRED; Network protocol this rule applies to.
	Protocol *SecurityRuleProtocol

	// A description for this rule. Restricted to 140 chars.
	Description *string

	// The destination address prefix. CIDR or destination IP range. Asterisk '*' can also be used to match all source IPs. Default
	// tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also
	// be used.
	DestinationAddressPrefix *string

	// The destination address prefixes. CIDR or destination IP ranges.
	DestinationAddressPrefixes []*string

	// The application security group specified as destination.
	DestinationApplicationSecurityGroups []*ApplicationSecurityGroup

	// The destination port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
	DestinationPortRange *string

	// The destination port ranges.
	DestinationPortRanges []*string

	// The CIDR or source IP range. Asterisk '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork',
	// 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress
	// rule, specifies where network traffic originates from.
	SourceAddressPrefix *string

	// The CIDR or source IP ranges.
	SourceAddressPrefixes []*string

	// The application security group specified as source.
	SourceApplicationSecurityGroups []*ApplicationSecurityGroup

	// The source port or range. Integer or range between 0 and 65535. Asterisk '*' can also be used to match all ports.
	SourcePortRange *string

	// The source port ranges.
	SourcePortRanges []*string

	// READ-ONLY; The provisioning state of the security rule resource.
	ProvisioningState *ProvisioningState
}

func (s *SecurityRulePropertiesFormat) GetAccess() (rv *SecurityRuleAccess) {
	if s != nil {
		return s.Access
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetDirection() (rv *SecurityRuleDirection) {
	if s != nil {
		return s.Direction
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetPriority() (rv int32) {
	if s != nil && s.Priority != nil {
		return *s.Priority
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetProtocol() (rv *SecurityRuleProtocol) {
	if s != nil {
		return s.Protocol
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetDestinationAddressPrefix() (rv string) {
	if s != nil && s.DestinationAddressPrefix != nil {
		return *s.DestinationAddressPrefix
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetDestinationAddressPrefixes() (rv []*string) {
	if s != nil {
		return s.DestinationAddressPrefixes
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetDestinationApplicationSecurityGroups() (rv []*ApplicationSecurityGroup) {
	if s != nil {
		return s.DestinationApplicationSecurityGroups
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetDestinationPortRange() (rv string) {
	if s != nil && s.DestinationPortRange != nil {
		return *s.DestinationPortRange
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetDestinationPortRanges() (rv []*string) {
	if s != nil {
		return s.DestinationPortRanges
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetSourceAddressPrefix() (rv string) {
	if s != nil && s.SourceAddressPrefix != nil {
		return *s.SourceAddressPrefix
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetSourceAddressPrefixes() (rv []*string) {
	if s != nil {
		return s.SourceAddressPrefixes
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetSourceApplicationSecurityGroups() (rv []*ApplicationSecurityGroup) {
	if s != nil {
		return s.SourceApplicationSecurityGroups
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetSourcePortRange() (rv string) {
	if s != nil && s.SourcePortRange != nil {
		return *s.SourcePortRange
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetSourcePortRanges() (rv []*string) {
	if s != nil {
		return s.SourcePortRanges
	}
	return
}

func (s *SecurityRulePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if s != nil {
		return s.ProvisioningState
	}
	return
}

// SecurityRulesEvaluationResult - Network security rules evaluation result.
type SecurityRulesEvaluationResult struct {
	// Value indicating whether destination is matched.
	DestinationMatched *bool

	// Value indicating whether destination port is matched.
	DestinationPortMatched *bool

	// Name of the network security rule.
	Name *string

	// Value indicating whether protocol is matched.
	ProtocolMatched *bool

	// Value indicating whether source is matched.
	SourceMatched *bool

	// Value indicating whether source port is matched.
	SourcePortMatched *bool
}

func (s *SecurityRulesEvaluationResult) GetDestinationMatched() (rv bool) {
	if s != nil && s.DestinationMatched != nil {
		return *s.DestinationMatched
	}
	return
}

func (s *SecurityRulesEvaluationResult) GetDestinationPortMatched() (rv bool) {
	if s != nil && s.DestinationPortMatched != nil {
		return *s.DestinationPortMatched
	}
	return
}

func (s *SecurityRulesEvaluationResult) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SecurityRulesEvaluationResult) GetProtocolMatched() (rv bool) {
	if s != nil && s.ProtocolMatched != nil {
		return *s.ProtocolMatched
	}
	return
}

func (s *SecurityRulesEvaluationResult) GetSourceMatched() (rv bool) {
	if s != nil && s.SourceMatched != nil {
		return *s.SourceMatched
	}
	return
}

func (s *SecurityRulesEvaluationResult) GetSourcePortMatched() (rv bool) {
	if s != nil && s.SourcePortMatched != nil {
		return *s.SourcePortMatched
	}
	return
}

// ServiceAssociationLink resource.
type ServiceAssociationLink struct {
	// Resource ID.
	ID *string

	// Name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Resource navigation link properties format.
	Properties *ServiceAssociationLinkPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource type.
	Type *string
}

func (s *ServiceAssociationLink) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *ServiceAssociationLink) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *ServiceAssociationLink) GetProperties() (rv *ServiceAssociationLinkPropertiesFormat) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *ServiceAssociationLink) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

func (s *ServiceAssociationLink) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// ServiceAssociationLinkPropertiesFormat - Properties of ServiceAssociationLink.
type ServiceAssociationLinkPropertiesFormat struct {
	// If true, the resource can be deleted.
	AllowDelete *bool

	// Link to the external resource.
	Link *string

	// Resource type of the linked resource.
	LinkedResourceType *string

	// A list of locations.
	Locations []*string

	// READ-ONLY; The provisioning state of the service association link resource.
	ProvisioningState *ProvisioningState
}

func (s *ServiceAssociationLinkPropertiesFormat) GetAllowDelete() (rv bool) {
	if s != nil && s.AllowDelete != nil {
		return *s.AllowDelete
	}
	return
}

func (s *ServiceAssociationLinkPropertiesFormat) GetLink() (rv string) {
	if s != nil && s.Link != nil {
		return *s.Link
	}
	return
}

func (s *ServiceAssociationLinkPropertiesFormat) GetLinkedResourceType() (rv string) {
	if s != nil && s.LinkedResourceType != nil {
		return *s.LinkedResourceType
	}
	return
}

func (s *ServiceAssociationLinkPropertiesFormat) GetLocations() (rv []*string) {
	if s != nil {
		return s.Locations
	}
	return
}

func (s *ServiceAssociationLinkPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if s != nil {
		return s.ProvisioningState
	}
	return
}

// ServiceAssociationLinksListResult - Response for ServiceAssociationLinks_List operation.
type ServiceAssociationLinksListResult struct {
	// The service association links in a subnet.
	Value []*ServiceAssociationLink

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (s *ServiceAssociationLinksListResult) GetValue() (rv []*ServiceAssociationLink) {
	if s != nil {
		return s.Value
	}
	return
}

func (s *ServiceAssociationLinksListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

// ServiceDelegationPropertiesFormat - Properties of a service delegation.
type ServiceDelegationPropertiesFormat struct {
	// The name of the service to whom the subnet should be delegated (e.g. Microsoft.Sql/servers).
	ServiceName *string

	// READ-ONLY; The actions permitted to the service upon delegation.
	Actions []*string

	// READ-ONLY; The provisioning state of the service delegation resource.
	ProvisioningState *ProvisioningState
}

func (s *ServiceDelegationPropertiesFormat) GetServiceName() (rv string) {
	if s != nil && s.ServiceName != nil {
		return *s.ServiceName
	}
	return
}

func (s *ServiceDelegationPropertiesFormat) GetActions() (rv []*string) {
	if s != nil {
		return s.Actions
	}
	return
}

func (s *ServiceDelegationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if s != nil {
		return s.ProvisioningState
	}
	return
}

// ServiceEndpointPolicy - Service End point policy resource.
type ServiceEndpointPolicy struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the service end point policy.
	Properties *ServiceEndpointPolicyPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Kind of service endpoint policy. This is metadata used for the Azure portal experience.
	Kind *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (s *ServiceEndpointPolicy) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *ServiceEndpointPolicy) GetLocation() (rv string) {
	if s != nil && s.Location != nil {
		return *s.Location
	}
	return
}

func (s *ServiceEndpointPolicy) GetProperties() (rv *ServiceEndpointPolicyPropertiesFormat) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *ServiceEndpointPolicy) GetTags() (rv map[string]*string) {
	if s != nil {
		return s.Tags
	}
	return
}

func (s *ServiceEndpointPolicy) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

func (s *ServiceEndpointPolicy) GetKind() (rv string) {
	if s != nil && s.Kind != nil {
		return *s.Kind
	}
	return
}

func (s *ServiceEndpointPolicy) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *ServiceEndpointPolicy) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// ServiceEndpointPolicyDefinition - Service Endpoint policy definitions.
type ServiceEndpointPolicyDefinition struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the service endpoint policy definition.
	Properties *ServiceEndpointPolicyDefinitionPropertiesFormat

	// The type of the resource.
	Type *string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (s *ServiceEndpointPolicyDefinition) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *ServiceEndpointPolicyDefinition) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *ServiceEndpointPolicyDefinition) GetProperties() (rv *ServiceEndpointPolicyDefinitionPropertiesFormat) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *ServiceEndpointPolicyDefinition) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *ServiceEndpointPolicyDefinition) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

// ServiceEndpointPolicyDefinitionListResult - Response for ListServiceEndpointPolicyDefinition API service call. Retrieves
// all service endpoint policy definition that belongs to a service endpoint policy.
type ServiceEndpointPolicyDefinitionListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// The service endpoint policy definition in a service endpoint policy.
	Value []*ServiceEndpointPolicyDefinition
}

func (s *ServiceEndpointPolicyDefinitionListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

func (s *ServiceEndpointPolicyDefinitionListResult) GetValue() (rv []*ServiceEndpointPolicyDefinition) {
	if s != nil {
		return s.Value
	}
	return
}

// ServiceEndpointPolicyDefinitionPropertiesFormat - Service Endpoint policy definition resource.
type ServiceEndpointPolicyDefinitionPropertiesFormat struct {
	// A description for this rule. Restricted to 140 chars.
	Description *string

	// Service endpoint name.
	Service *string

	// A list of service resources.
	ServiceResources []*string

	// READ-ONLY; The provisioning state of the service endpoint policy definition resource.
	ProvisioningState *ProvisioningState
}

func (s *ServiceEndpointPolicyDefinitionPropertiesFormat) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *ServiceEndpointPolicyDefinitionPropertiesFormat) GetService() (rv string) {
	if s != nil && s.Service != nil {
		return *s.Service
	}
	return
}

func (s *ServiceEndpointPolicyDefinitionPropertiesFormat) GetServiceResources() (rv []*string) {
	if s != nil {
		return s.ServiceResources
	}
	return
}

func (s *ServiceEndpointPolicyDefinitionPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if s != nil {
		return s.ProvisioningState
	}
	return
}

// ServiceEndpointPolicyListResult - Response for ListServiceEndpointPolicies API service call.
type ServiceEndpointPolicyListResult struct {
	// A list of ServiceEndpointPolicy resources.
	Value []*ServiceEndpointPolicy

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (s *ServiceEndpointPolicyListResult) GetValue() (rv []*ServiceEndpointPolicy) {
	if s != nil {
		return s.Value
	}
	return
}

func (s *ServiceEndpointPolicyListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

// ServiceEndpointPolicyPropertiesFormat - Service Endpoint Policy resource.
type ServiceEndpointPolicyPropertiesFormat struct {
	// A collection of contextual service endpoint policy.
	ContextualServiceEndpointPolicies []*string

	// The alias indicating if the policy belongs to a service
	ServiceAlias *string

	// A collection of service endpoint policy definitions of the service endpoint policy.
	ServiceEndpointPolicyDefinitions []*ServiceEndpointPolicyDefinition

	// READ-ONLY; The provisioning state of the service endpoint policy resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the service endpoint policy resource.
	ResourceGUID *string

	// READ-ONLY; A collection of references to subnets.
	Subnets []*Subnet
}

func (s *ServiceEndpointPolicyPropertiesFormat) GetContextualServiceEndpointPolicies() (rv []*string) {
	if s != nil {
		return s.ContextualServiceEndpointPolicies
	}
	return
}

func (s *ServiceEndpointPolicyPropertiesFormat) GetServiceAlias() (rv string) {
	if s != nil && s.ServiceAlias != nil {
		return *s.ServiceAlias
	}
	return
}

func (s *ServiceEndpointPolicyPropertiesFormat) GetServiceEndpointPolicyDefinitions() (rv []*ServiceEndpointPolicyDefinition) {
	if s != nil {
		return s.ServiceEndpointPolicyDefinitions
	}
	return
}

func (s *ServiceEndpointPolicyPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if s != nil {
		return s.ProvisioningState
	}
	return
}

func (s *ServiceEndpointPolicyPropertiesFormat) GetResourceGUID() (rv string) {
	if s != nil && s.ResourceGUID != nil {
		return *s.ResourceGUID
	}
	return
}

func (s *ServiceEndpointPolicyPropertiesFormat) GetSubnets() (rv []*Subnet) {
	if s != nil {
		return s.Subnets
	}
	return
}

// ServiceEndpointPropertiesFormat - The service endpoint properties.
type ServiceEndpointPropertiesFormat struct {
	// A list of locations.
	Locations []*string

	// The type of the endpoint service.
	Service *string

	// READ-ONLY; The provisioning state of the service endpoint resource.
	ProvisioningState *ProvisioningState
}

func (s *ServiceEndpointPropertiesFormat) GetLocations() (rv []*string) {
	if s != nil {
		return s.Locations
	}
	return
}

func (s *ServiceEndpointPropertiesFormat) GetService() (rv string) {
	if s != nil && s.Service != nil {
		return *s.Service
	}
	return
}

func (s *ServiceEndpointPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if s != nil {
		return s.ProvisioningState
	}
	return
}

// ServiceTagInformation - The service tag information.
type ServiceTagInformation struct {
	// READ-ONLY; The ID of service tag.
	ID *string

	// READ-ONLY; The name of service tag.
	Name *string

	// READ-ONLY; Properties of the service tag information.
	Properties *ServiceTagInformationPropertiesFormat

	// READ-ONLY; The iteration number of service tag object for region.
	ServiceTagChangeNumber *string
}

func (s *ServiceTagInformation) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *ServiceTagInformation) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *ServiceTagInformation) GetProperties() (rv *ServiceTagInformationPropertiesFormat) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *ServiceTagInformation) GetServiceTagChangeNumber() (rv string) {
	if s != nil && s.ServiceTagChangeNumber != nil {
		return *s.ServiceTagChangeNumber
	}
	return
}

// ServiceTagInformationListResult - Response for Get ServiceTagInformation API service call. Retrieves the list of service
// tag information resources.
type ServiceTagInformationListResult struct {
	// The list of service tag information resources.
	Value []*ServiceTagInformation

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (s *ServiceTagInformationListResult) GetValue() (rv []*ServiceTagInformation) {
	if s != nil {
		return s.Value
	}
	return
}

func (s *ServiceTagInformationListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

// ServiceTagInformationPropertiesFormat - Properties of the service tag information.
type ServiceTagInformationPropertiesFormat struct {
	// READ-ONLY; The list of IP address prefixes.
	AddressPrefixes []*string

	// READ-ONLY; The iteration number of service tag.
	ChangeNumber *string

	// READ-ONLY; The region of service tag.
	Region *string

	// READ-ONLY; The state of the service tag.
	State *string

	// READ-ONLY; The name of system service.
	SystemService *string
}

func (s *ServiceTagInformationPropertiesFormat) GetAddressPrefixes() (rv []*string) {
	if s != nil {
		return s.AddressPrefixes
	}
	return
}

func (s *ServiceTagInformationPropertiesFormat) GetChangeNumber() (rv string) {
	if s != nil && s.ChangeNumber != nil {
		return *s.ChangeNumber
	}
	return
}

func (s *ServiceTagInformationPropertiesFormat) GetRegion() (rv string) {
	if s != nil && s.Region != nil {
		return *s.Region
	}
	return
}

func (s *ServiceTagInformationPropertiesFormat) GetState() (rv string) {
	if s != nil && s.State != nil {
		return *s.State
	}
	return
}

func (s *ServiceTagInformationPropertiesFormat) GetSystemService() (rv string) {
	if s != nil && s.SystemService != nil {
		return *s.SystemService
	}
	return
}

// ServiceTagsListResult - Response for the ListServiceTags API service call.
type ServiceTagsListResult struct {
	// READ-ONLY; The iteration number.
	ChangeNumber *string

	// READ-ONLY; The name of the cloud.
	Cloud *string

	// READ-ONLY; The ID of the cloud.
	ID *string

	// READ-ONLY; The name of the cloud.
	Name *string

	// READ-ONLY; The URL to get next page of service tag information resources.
	NextLink *string

	// READ-ONLY; The azure resource type.
	Type *string

	// READ-ONLY; The list of service tag information resources.
	Values []*ServiceTagInformation
}

func (s *ServiceTagsListResult) GetChangeNumber() (rv string) {
	if s != nil && s.ChangeNumber != nil {
		return *s.ChangeNumber
	}
	return
}

func (s *ServiceTagsListResult) GetCloud() (rv string) {
	if s != nil && s.Cloud != nil {
		return *s.Cloud
	}
	return
}

func (s *ServiceTagsListResult) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *ServiceTagsListResult) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *ServiceTagsListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

func (s *ServiceTagsListResult) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *ServiceTagsListResult) GetValues() (rv []*ServiceTagInformation) {
	if s != nil {
		return s.Values
	}
	return
}

// SessionIDs - List of session IDs.
type SessionIDs struct {
	// List of session IDs.
	SessionIDs []*string
}

func (s *SessionIDs) GetSessionIDs() (rv []*string) {
	if s != nil {
		return s.SessionIDs
	}
	return
}

// SignatureOverridesFilterValuesQuery - Describes the filter values possibles for a given column
type SignatureOverridesFilterValuesQuery struct {
	// Describes the name of the column which values will be returned
	FilterName *string
}

func (s *SignatureOverridesFilterValuesQuery) GetFilterName() (rv string) {
	if s != nil && s.FilterName != nil {
		return *s.FilterName
	}
	return
}

// SignatureOverridesFilterValuesResponse - Describes the list of all possible values for a specific filter value
type SignatureOverridesFilterValuesResponse struct {
	// Describes the possible values
	FilterValues []*string
}

func (s *SignatureOverridesFilterValuesResponse) GetFilterValues() (rv []*string) {
	if s != nil {
		return s.FilterValues
	}
	return
}

// SignaturesOverrides - Contains all specific policy signatures overrides for the IDPS
type SignaturesOverrides struct {
	// Will contain the resource id of the signature override resource
	ID *string

	// Contains the name of the resource (default)
	Name *string

	// Will contain the properties of the resource (the actual signature overrides)
	Properties *SignaturesOverridesProperties

	// Will contain the type of the resource: Microsoft.Network/firewallPolicies/intrusionDetectionSignaturesOverrides
	Type *string
}

func (s *SignaturesOverrides) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SignaturesOverrides) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SignaturesOverrides) GetProperties() (rv *SignaturesOverridesProperties) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SignaturesOverrides) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// SignaturesOverridesList - Describes an object containing an array with a single item
type SignaturesOverridesList struct {
	// Describes a list consisting exactly one item describing the policy's signature override status
	Value []*SignaturesOverrides
}

func (s *SignaturesOverridesList) GetValue() (rv []*SignaturesOverrides) {
	if s != nil {
		return s.Value
	}
	return
}

// SignaturesOverridesProperties - Will contain the properties of the resource (the actual signature overrides)
type SignaturesOverridesProperties struct {
	// Dictionary of
	Signatures map[string]*string
}

func (s *SignaturesOverridesProperties) GetSignatures() (rv map[string]*string) {
	if s != nil {
		return s.Signatures
	}
	return
}

type SingleQueryResult struct {
	// Describes what is the signature enforces
	Description *string

	// Describes the list of destination ports related to this signature
	DestinationPorts []*string

	// Describes in which direction signature is being enforced: 0 - Inbound, 1 - OutBound, 2 - Bidirectional
	Direction *FirewallPolicyIDPSSignatureDirection

	// Describes the groups the signature belongs to
	Group *string

	// Describes if this override is inherited from base policy or not
	InheritedFromParentPolicy *bool

	// Describes the last updated time of the signature (provided from 3rd party vendor)
	LastUpdated *string

	// The current mode enforced, 0 - Disabled, 1 - Alert, 2 -Deny
	Mode *FirewallPolicyIDPSSignatureMode

	// Describes the protocol the signatures is being enforced in
	Protocol *string

	// Describes the severity of signature: 1 - Low, 2 - Medium, 3 - High
	Severity *FirewallPolicyIDPSSignatureSeverity

	// The ID of the signature
	SignatureID *int32

	// Describes the list of source ports related to this signature
	SourcePorts []*string
}

func (s *SingleQueryResult) GetDescription() (rv string) {
	if s != nil && s.Description != nil {
		return *s.Description
	}
	return
}

func (s *SingleQueryResult) GetDestinationPorts() (rv []*string) {
	if s != nil {
		return s.DestinationPorts
	}
	return
}

func (s *SingleQueryResult) GetDirection() (rv *FirewallPolicyIDPSSignatureDirection) {
	if s != nil {
		return s.Direction
	}
	return
}

func (s *SingleQueryResult) GetGroup() (rv string) {
	if s != nil && s.Group != nil {
		return *s.Group
	}
	return
}

func (s *SingleQueryResult) GetInheritedFromParentPolicy() (rv bool) {
	if s != nil && s.InheritedFromParentPolicy != nil {
		return *s.InheritedFromParentPolicy
	}
	return
}

func (s *SingleQueryResult) GetLastUpdated() (rv string) {
	if s != nil && s.LastUpdated != nil {
		return *s.LastUpdated
	}
	return
}

func (s *SingleQueryResult) GetMode() (rv *FirewallPolicyIDPSSignatureMode) {
	if s != nil {
		return s.Mode
	}
	return
}

func (s *SingleQueryResult) GetProtocol() (rv string) {
	if s != nil && s.Protocol != nil {
		return *s.Protocol
	}
	return
}

func (s *SingleQueryResult) GetSeverity() (rv *FirewallPolicyIDPSSignatureSeverity) {
	if s != nil {
		return s.Severity
	}
	return
}

func (s *SingleQueryResult) GetSignatureID() (rv int32) {
	if s != nil && s.SignatureID != nil {
		return *s.SignatureID
	}
	return
}

func (s *SingleQueryResult) GetSourcePorts() (rv []*string) {
	if s != nil {
		return s.SourcePorts
	}
	return
}

// StaticMember Item.
type StaticMember struct {
	// The Static Member properties
	Properties *StaticMemberProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource ID.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; The system metadata related to this resource.
	SystemData *SystemData

	// READ-ONLY; Resource type.
	Type *string
}

func (s *StaticMember) GetProperties() (rv *StaticMemberProperties) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *StaticMember) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

func (s *StaticMember) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *StaticMember) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *StaticMember) GetSystemData() (rv *SystemData) {
	if s != nil {
		return s.SystemData
	}
	return
}

func (s *StaticMember) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// StaticMemberListResult - Result of the request to list StaticMember. It contains a list of groups and a URL link to get
// the next set of results.
type StaticMemberListResult struct {
	// Gets the URL to get the next set of results.
	NextLink *string

	// Gets a page of StaticMember
	Value []*StaticMember
}

func (s *StaticMemberListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

func (s *StaticMemberListResult) GetValue() (rv []*StaticMember) {
	if s != nil {
		return s.Value
	}
	return
}

// StaticMemberProperties - Properties of static member.
type StaticMemberProperties struct {
	// Resource Id.
	ResourceID *string

	// READ-ONLY; The provisioning state of the scope assignment resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Resource region.
	Region *string
}

func (s *StaticMemberProperties) GetResourceID() (rv string) {
	if s != nil && s.ResourceID != nil {
		return *s.ResourceID
	}
	return
}

func (s *StaticMemberProperties) GetProvisioningState() (rv *ProvisioningState) {
	if s != nil {
		return s.ProvisioningState
	}
	return
}

func (s *StaticMemberProperties) GetRegion() (rv string) {
	if s != nil && s.Region != nil {
		return *s.Region
	}
	return
}

// StaticRoute - List of all Static Routes.
type StaticRoute struct {
	// List of all address prefixes.
	AddressPrefixes []*string

	// The name of the StaticRoute that is unique within a VnetRoute.
	Name *string

	// The ip address of the next hop.
	NextHopIPAddress *string
}

func (s *StaticRoute) GetAddressPrefixes() (rv []*string) {
	if s != nil {
		return s.AddressPrefixes
	}
	return
}

func (s *StaticRoute) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *StaticRoute) GetNextHopIPAddress() (rv string) {
	if s != nil && s.NextHopIPAddress != nil {
		return *s.NextHopIPAddress
	}
	return
}

// StaticRoutesConfig - Configuration for static routes on this HubVnetConnectionConfiguration for static routes on this HubVnetConnection.
type StaticRoutesConfig struct {
	// Parameter determining whether NVA in spoke vnet is bypassed for traffic with destination in spoke.
	VnetLocalRouteOverrideCriteria *VnetLocalRouteOverrideCriteria

	// READ-ONLY; Boolean indicating whether static routes on this connection are automatically propagate to route tables which
	// this connection propagates to.
	PropagateStaticRoutes *bool
}

func (s *StaticRoutesConfig) GetVnetLocalRouteOverrideCriteria() (rv *VnetLocalRouteOverrideCriteria) {
	if s != nil {
		return s.VnetLocalRouteOverrideCriteria
	}
	return
}

func (s *StaticRoutesConfig) GetPropagateStaticRoutes() (rv bool) {
	if s != nil && s.PropagateStaticRoutes != nil {
		return *s.PropagateStaticRoutes
	}
	return
}

// SubResource - Reference to another subresource.
type SubResource struct {
	// Resource ID.
	ID *string
}

func (s *SubResource) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

// Subnet in a virtual network resource.
type Subnet struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the subnet.
	Properties *SubnetPropertiesFormat

	// Resource type.
	Type *string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (s *Subnet) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *Subnet) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *Subnet) GetProperties() (rv *SubnetPropertiesFormat) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *Subnet) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

func (s *Subnet) GetEtag() (rv string) {
	if s != nil && s.Etag != nil {
		return *s.Etag
	}
	return
}

// SubnetAssociation - Subnet and it's custom security rules.
type SubnetAssociation struct {
	// Collection of custom security rules.
	SecurityRules []*SecurityRule

	// READ-ONLY; Subnet ID.
	ID *string
}

func (s *SubnetAssociation) GetSecurityRules() (rv []*SecurityRule) {
	if s != nil {
		return s.SecurityRules
	}
	return
}

func (s *SubnetAssociation) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

// SubnetListResult - Response for ListSubnets API service callRetrieves all subnet that belongs to a virtual network.
type SubnetListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// The subnets in a virtual network.
	Value []*Subnet
}

func (s *SubnetListResult) GetNextLink() (rv string) {
	if s != nil && s.NextLink != nil {
		return *s.NextLink
	}
	return
}

func (s *SubnetListResult) GetValue() (rv []*Subnet) {
	if s != nil {
		return s.Value
	}
	return
}

// SubnetPropertiesFormat - Properties of the subnet.
type SubnetPropertiesFormat struct {
	// The address prefix for the subnet.
	AddressPrefix *string

	// List of address prefixes for the subnet.
	AddressPrefixes []*string

	// Application gateway IP configurations of virtual network resource.
	ApplicationGatewayIPConfigurations []*ApplicationGatewayIPConfiguration

	// An array of references to the delegations on the subnet.
	Delegations []*Delegation

	// Array of IpAllocation which reference this subnet.
	IPAllocations []*SubResource

	// Nat gateway associated with this subnet.
	NatGateway *SubResource

	// The reference to the NetworkSecurityGroup resource.
	NetworkSecurityGroup *SecurityGroup

	// Enable or Disable apply network policies on private end point in the subnet.
	PrivateEndpointNetworkPolicies *VirtualNetworkPrivateEndpointNetworkPolicies

	// Enable or Disable apply network policies on private link service in the subnet.
	PrivateLinkServiceNetworkPolicies *VirtualNetworkPrivateLinkServiceNetworkPolicies

	// The reference to the RouteTable resource.
	RouteTable *RouteTable

	// An array of service endpoint policies.
	ServiceEndpointPolicies []*ServiceEndpointPolicy

	// An array of service endpoints.
	ServiceEndpoints []*ServiceEndpointPropertiesFormat

	// READ-ONLY; Array of IP configuration profiles which reference this subnet.
	IPConfigurationProfiles []*IPConfigurationProfile

	// READ-ONLY; An array of references to the network interface IP configurations using subnet.
	IPConfigurations []*IPConfiguration

	// READ-ONLY; An array of references to private endpoints.
	PrivateEndpoints []*PrivateEndpoint

	// READ-ONLY; The provisioning state of the subnet resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; A read-only string identifying the intention of use for this subnet based on delegations and other user-defined
	// properties.
	Purpose *string

	// READ-ONLY; An array of references to the external resources using subnet.
	ResourceNavigationLinks []*ResourceNavigationLink

	// READ-ONLY; An array of references to services injecting into this subnet.
	ServiceAssociationLinks []*ServiceAssociationLink
}

func (s *SubnetPropertiesFormat) GetAddressPrefix() (rv string) {
	if s != nil && s.AddressPrefix != nil {
		return *s.AddressPrefix
	}
	return
}

func (s *SubnetPropertiesFormat) GetAddressPrefixes() (rv []*string) {
	if s != nil {
		return s.AddressPrefixes
	}
	return
}

func (s *SubnetPropertiesFormat) GetApplicationGatewayIPConfigurations() (rv []*ApplicationGatewayIPConfiguration) {
	if s != nil {
		return s.ApplicationGatewayIPConfigurations
	}
	return
}

func (s *SubnetPropertiesFormat) GetDelegations() (rv []*Delegation) {
	if s != nil {
		return s.Delegations
	}
	return
}

func (s *SubnetPropertiesFormat) GetIPAllocations() (rv []*SubResource) {
	if s != nil {
		return s.IPAllocations
	}
	return
}

func (s *SubnetPropertiesFormat) GetNatGateway() (rv *SubResource) {
	if s != nil {
		return s.NatGateway
	}
	return
}

func (s *SubnetPropertiesFormat) GetNetworkSecurityGroup() (rv *SecurityGroup) {
	if s != nil {
		return s.NetworkSecurityGroup
	}
	return
}

func (s *SubnetPropertiesFormat) GetPrivateEndpointNetworkPolicies() (rv *VirtualNetworkPrivateEndpointNetworkPolicies) {
	if s != nil {
		return s.PrivateEndpointNetworkPolicies
	}
	return
}

func (s *SubnetPropertiesFormat) GetPrivateLinkServiceNetworkPolicies() (rv *VirtualNetworkPrivateLinkServiceNetworkPolicies) {
	if s != nil {
		return s.PrivateLinkServiceNetworkPolicies
	}
	return
}

func (s *SubnetPropertiesFormat) GetRouteTable() (rv *RouteTable) {
	if s != nil {
		return s.RouteTable
	}
	return
}

func (s *SubnetPropertiesFormat) GetServiceEndpointPolicies() (rv []*ServiceEndpointPolicy) {
	if s != nil {
		return s.ServiceEndpointPolicies
	}
	return
}

func (s *SubnetPropertiesFormat) GetServiceEndpoints() (rv []*ServiceEndpointPropertiesFormat) {
	if s != nil {
		return s.ServiceEndpoints
	}
	return
}

func (s *SubnetPropertiesFormat) GetIPConfigurationProfiles() (rv []*IPConfigurationProfile) {
	if s != nil {
		return s.IPConfigurationProfiles
	}
	return
}

func (s *SubnetPropertiesFormat) GetIPConfigurations() (rv []*IPConfiguration) {
	if s != nil {
		return s.IPConfigurations
	}
	return
}

func (s *SubnetPropertiesFormat) GetPrivateEndpoints() (rv []*PrivateEndpoint) {
	if s != nil {
		return s.PrivateEndpoints
	}
	return
}

func (s *SubnetPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if s != nil {
		return s.ProvisioningState
	}
	return
}

func (s *SubnetPropertiesFormat) GetPurpose() (rv string) {
	if s != nil && s.Purpose != nil {
		return *s.Purpose
	}
	return
}

func (s *SubnetPropertiesFormat) GetResourceNavigationLinks() (rv []*ResourceNavigationLink) {
	if s != nil {
		return s.ResourceNavigationLinks
	}
	return
}

func (s *SubnetPropertiesFormat) GetServiceAssociationLinks() (rv []*ServiceAssociationLink) {
	if s != nil {
		return s.ServiceAssociationLinks
	}
	return
}

// SwapResource to represent slot type on the specified cloud service.
type SwapResource struct {
	// Swap resource properties
	Properties *SwapResourceProperties

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (s *SwapResource) GetProperties() (rv *SwapResourceProperties) {
	if s != nil {
		return s.Properties
	}
	return
}

func (s *SwapResource) GetID() (rv string) {
	if s != nil && s.ID != nil {
		return *s.ID
	}
	return
}

func (s *SwapResource) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SwapResource) GetType() (rv string) {
	if s != nil && s.Type != nil {
		return *s.Type
	}
	return
}

// SwapResourceListResult - SwapResource List with single entry to represent slot type on the specified cloud service.
type SwapResourceListResult struct {
	Value []*SwapResource
}

func (s *SwapResourceListResult) GetValue() (rv []*SwapResource) {
	if s != nil {
		return s.Value
	}
	return
}

// SwapResourceProperties - Swap resource properties
type SwapResourceProperties struct {
	// Specifies slot info on a cloud service
	SlotType *SlotType
}

func (s *SwapResourceProperties) GetSlotType() (rv *SlotType) {
	if s != nil {
		return s.SlotType
	}
	return
}

// SystemData - Metadata pertaining to creation and last modification of the resource.
type SystemData struct {
	// The timestamp of resource creation (UTC).
	CreatedAt *time.Time

	// The identity that created the resource.
	CreatedBy *string

	// The type of identity that created the resource.
	CreatedByType *CreatedByType

	// The type of identity that last modified the resource.
	LastModifiedAt *time.Time

	// The identity that last modified the resource.
	LastModifiedBy *string

	// The type of identity that last modified the resource.
	LastModifiedByType *CreatedByType
}

func (s *SystemData) GetCreatedAt() (rv *time.Time) {
	if s != nil {
		return s.CreatedAt
	}
	return
}

func (s *SystemData) GetCreatedBy() (rv string) {
	if s != nil && s.CreatedBy != nil {
		return *s.CreatedBy
	}
	return
}

func (s *SystemData) GetCreatedByType() (rv *CreatedByType) {
	if s != nil {
		return s.CreatedByType
	}
	return
}

func (s *SystemData) GetLastModifiedAt() (rv *time.Time) {
	if s != nil {
		return s.LastModifiedAt
	}
	return
}

func (s *SystemData) GetLastModifiedBy() (rv string) {
	if s != nil && s.LastModifiedBy != nil {
		return *s.LastModifiedBy
	}
	return
}

func (s *SystemData) GetLastModifiedByType() (rv *CreatedByType) {
	if s != nil {
		return s.LastModifiedByType
	}
	return
}

// TagsObject - Tags object for patch operations.
type TagsObject struct {
	// Resource tags.
	Tags map[string]*string
}

func (t *TagsObject) GetTags() (rv map[string]*string) {
	if t != nil {
		return t.Tags
	}
	return
}

// Topology of the specified resource group.
type Topology struct {
	// A list of topology resources.
	Resources []*TopologyResource

	// READ-ONLY; The datetime when the topology was initially created for the resource group.
	CreatedDateTime *time.Time

	// READ-ONLY; GUID representing the operation id.
	ID *string

	// READ-ONLY; The datetime when the topology was last modified.
	LastModified *time.Time
}

func (t *Topology) GetResources() (rv []*TopologyResource) {
	if t != nil {
		return t.Resources
	}
	return
}

func (t *Topology) GetCreatedDateTime() (rv *time.Time) {
	if t != nil {
		return t.CreatedDateTime
	}
	return
}

func (t *Topology) GetID() (rv string) {
	if t != nil && t.ID != nil {
		return *t.ID
	}
	return
}

func (t *Topology) GetLastModified() (rv *time.Time) {
	if t != nil {
		return t.LastModified
	}
	return
}

// TopologyAssociation - Resources that have an association with the parent resource.
type TopologyAssociation struct {
	// The association type of the child resource to the parent resource.
	AssociationType *AssociationType

	// The name of the resource that is associated with the parent resource.
	Name *string

	// The ID of the resource that is associated with the parent resource.
	ResourceID *string
}

func (t *TopologyAssociation) GetAssociationType() (rv *AssociationType) {
	if t != nil {
		return t.AssociationType
	}
	return
}

func (t *TopologyAssociation) GetName() (rv string) {
	if t != nil && t.Name != nil {
		return *t.Name
	}
	return
}

func (t *TopologyAssociation) GetResourceID() (rv string) {
	if t != nil && t.ResourceID != nil {
		return *t.ResourceID
	}
	return
}

// TopologyParameters - Parameters that define the representation of topology.
type TopologyParameters struct {
	// The name of the target resource group to perform topology on.
	TargetResourceGroupName *string

	// The reference to the Subnet resource.
	TargetSubnet *SubResource

	// The reference to the Virtual Network resource.
	TargetVirtualNetwork *SubResource
}

func (t *TopologyParameters) GetTargetResourceGroupName() (rv string) {
	if t != nil && t.TargetResourceGroupName != nil {
		return *t.TargetResourceGroupName
	}
	return
}

func (t *TopologyParameters) GetTargetSubnet() (rv *SubResource) {
	if t != nil {
		return t.TargetSubnet
	}
	return
}

func (t *TopologyParameters) GetTargetVirtualNetwork() (rv *SubResource) {
	if t != nil {
		return t.TargetVirtualNetwork
	}
	return
}

// TopologyResource - The network resource topology information for the given resource group.
type TopologyResource struct {
	// Holds the associations the resource has with other resources in the resource group.
	Associations []*TopologyAssociation

	// ID of the resource.
	ID *string

	// Resource location.
	Location *string

	// Name of the resource.
	Name *string
}

func (t *TopologyResource) GetAssociations() (rv []*TopologyAssociation) {
	if t != nil {
		return t.Associations
	}
	return
}

func (t *TopologyResource) GetID() (rv string) {
	if t != nil && t.ID != nil {
		return *t.ID
	}
	return
}

func (t *TopologyResource) GetLocation() (rv string) {
	if t != nil && t.Location != nil {
		return *t.Location
	}
	return
}

func (t *TopologyResource) GetName() (rv string) {
	if t != nil && t.Name != nil {
		return *t.Name
	}
	return
}

// TrafficAnalyticsConfigurationProperties - Parameters that define the configuration of traffic analytics.
type TrafficAnalyticsConfigurationProperties struct {
	// Flag to enable/disable traffic analytics.
	Enabled *bool

	// The interval in minutes which would decide how frequently TA service should do flow analytics.
	TrafficAnalyticsInterval *int32

	// The resource guid of the attached workspace.
	WorkspaceID *string

	// The location of the attached workspace.
	WorkspaceRegion *string

	// Resource Id of the attached workspace.
	WorkspaceResourceID *string
}

func (t *TrafficAnalyticsConfigurationProperties) GetEnabled() (rv bool) {
	if t != nil && t.Enabled != nil {
		return *t.Enabled
	}
	return
}

func (t *TrafficAnalyticsConfigurationProperties) GetTrafficAnalyticsInterval() (rv int32) {
	if t != nil && t.TrafficAnalyticsInterval != nil {
		return *t.TrafficAnalyticsInterval
	}
	return
}

func (t *TrafficAnalyticsConfigurationProperties) GetWorkspaceID() (rv string) {
	if t != nil && t.WorkspaceID != nil {
		return *t.WorkspaceID
	}
	return
}

func (t *TrafficAnalyticsConfigurationProperties) GetWorkspaceRegion() (rv string) {
	if t != nil && t.WorkspaceRegion != nil {
		return *t.WorkspaceRegion
	}
	return
}

func (t *TrafficAnalyticsConfigurationProperties) GetWorkspaceResourceID() (rv string) {
	if t != nil && t.WorkspaceResourceID != nil {
		return *t.WorkspaceResourceID
	}
	return
}

// TrafficAnalyticsProperties - Parameters that define the configuration of traffic analytics.
type TrafficAnalyticsProperties struct {
	// Parameters that define the configuration of traffic analytics.
	NetworkWatcherFlowAnalyticsConfiguration *TrafficAnalyticsConfigurationProperties
}

func (t *TrafficAnalyticsProperties) GetNetworkWatcherFlowAnalyticsConfiguration() (rv *TrafficAnalyticsConfigurationProperties) {
	if t != nil {
		return t.NetworkWatcherFlowAnalyticsConfiguration
	}
	return
}

// TrafficSelectorPolicy - An traffic selector policy for a virtual network gateway connection.
type TrafficSelectorPolicy struct {
	// REQUIRED; A collection of local address spaces in CIDR format.
	LocalAddressRanges []*string

	// REQUIRED; A collection of remote address spaces in CIDR format.
	RemoteAddressRanges []*string
}

func (t *TrafficSelectorPolicy) GetLocalAddressRanges() (rv []*string) {
	if t != nil {
		return t.LocalAddressRanges
	}
	return
}

func (t *TrafficSelectorPolicy) GetRemoteAddressRanges() (rv []*string) {
	if t != nil {
		return t.RemoteAddressRanges
	}
	return
}

// TroubleshootingDetails - Information gained from troubleshooting of specified resource.
type TroubleshootingDetails struct {
	// Details on troubleshooting results.
	Detail *string

	// The id of the get troubleshoot operation.
	ID *string

	// Reason type of failure.
	ReasonType *string

	// List of recommended actions.
	RecommendedActions []*TroubleshootingRecommendedActions

	// A summary of troubleshooting.
	Summary *string
}

func (t *TroubleshootingDetails) GetDetail() (rv string) {
	if t != nil && t.Detail != nil {
		return *t.Detail
	}
	return
}

func (t *TroubleshootingDetails) GetID() (rv string) {
	if t != nil && t.ID != nil {
		return *t.ID
	}
	return
}

func (t *TroubleshootingDetails) GetReasonType() (rv string) {
	if t != nil && t.ReasonType != nil {
		return *t.ReasonType
	}
	return
}

func (t *TroubleshootingDetails) GetRecommendedActions() (rv []*TroubleshootingRecommendedActions) {
	if t != nil {
		return t.RecommendedActions
	}
	return
}

func (t *TroubleshootingDetails) GetSummary() (rv string) {
	if t != nil && t.Summary != nil {
		return *t.Summary
	}
	return
}

// TroubleshootingParameters - Parameters that define the resource to troubleshoot.
type TroubleshootingParameters struct {
	// REQUIRED; Properties of the troubleshooting resource.
	Properties *TroubleshootingProperties

	// REQUIRED; The target resource to troubleshoot.
	TargetResourceID *string
}

func (t *TroubleshootingParameters) GetProperties() (rv *TroubleshootingProperties) {
	if t != nil {
		return t.Properties
	}
	return
}

func (t *TroubleshootingParameters) GetTargetResourceID() (rv string) {
	if t != nil && t.TargetResourceID != nil {
		return *t.TargetResourceID
	}
	return
}

// TroubleshootingProperties - Storage location provided for troubleshoot.
type TroubleshootingProperties struct {
	// REQUIRED; The ID for the storage account to save the troubleshoot result.
	StorageID *string

	// REQUIRED; The path to the blob to save the troubleshoot result in.
	StoragePath *string
}

func (t *TroubleshootingProperties) GetStorageID() (rv string) {
	if t != nil && t.StorageID != nil {
		return *t.StorageID
	}
	return
}

func (t *TroubleshootingProperties) GetStoragePath() (rv string) {
	if t != nil && t.StoragePath != nil {
		return *t.StoragePath
	}
	return
}

// TroubleshootingRecommendedActions - Recommended actions based on discovered issues.
type TroubleshootingRecommendedActions struct {
	// ID of the recommended action.
	ActionID *string

	// Description of recommended actions.
	ActionText *string

	// The uri linking to a documentation for the recommended troubleshooting actions.
	ActionURI *string

	// The information from the URI for the recommended troubleshooting actions.
	ActionURIText *string
}

func (t *TroubleshootingRecommendedActions) GetActionID() (rv string) {
	if t != nil && t.ActionID != nil {
		return *t.ActionID
	}
	return
}

func (t *TroubleshootingRecommendedActions) GetActionText() (rv string) {
	if t != nil && t.ActionText != nil {
		return *t.ActionText
	}
	return
}

func (t *TroubleshootingRecommendedActions) GetActionURI() (rv string) {
	if t != nil && t.ActionURI != nil {
		return *t.ActionURI
	}
	return
}

func (t *TroubleshootingRecommendedActions) GetActionURIText() (rv string) {
	if t != nil && t.ActionURIText != nil {
		return *t.ActionURIText
	}
	return
}

// TroubleshootingResult - Troubleshooting information gained from specified resource.
type TroubleshootingResult struct {
	// The result code of the troubleshooting.
	Code *string

	// The end time of the troubleshooting.
	EndTime *time.Time

	// Information from troubleshooting.
	Results []*TroubleshootingDetails

	// The start time of the troubleshooting.
	StartTime *time.Time
}

func (t *TroubleshootingResult) GetCode() (rv string) {
	if t != nil && t.Code != nil {
		return *t.Code
	}
	return
}

func (t *TroubleshootingResult) GetEndTime() (rv *time.Time) {
	if t != nil {
		return t.EndTime
	}
	return
}

func (t *TroubleshootingResult) GetResults() (rv []*TroubleshootingDetails) {
	if t != nil {
		return t.Results
	}
	return
}

func (t *TroubleshootingResult) GetStartTime() (rv *time.Time) {
	if t != nil {
		return t.StartTime
	}
	return
}

// TunnelConnectionHealth - VirtualNetworkGatewayConnection properties.
type TunnelConnectionHealth struct {
	// READ-ONLY; Virtual Network Gateway connection status.
	ConnectionStatus *VirtualNetworkGatewayConnectionStatus

	// READ-ONLY; The Egress Bytes Transferred in this connection.
	EgressBytesTransferred *int64

	// READ-ONLY; The Ingress Bytes Transferred in this connection.
	IngressBytesTransferred *int64

	// READ-ONLY; The time at which connection was established in Utc format.
	LastConnectionEstablishedUTCTime *string

	// READ-ONLY; Tunnel name.
	Tunnel *string
}

func (t *TunnelConnectionHealth) GetConnectionStatus() (rv *VirtualNetworkGatewayConnectionStatus) {
	if t != nil {
		return t.ConnectionStatus
	}
	return
}

func (t *TunnelConnectionHealth) GetEgressBytesTransferred() (rv int64) {
	if t != nil && t.EgressBytesTransferred != nil {
		return *t.EgressBytesTransferred
	}
	return
}

func (t *TunnelConnectionHealth) GetIngressBytesTransferred() (rv int64) {
	if t != nil && t.IngressBytesTransferred != nil {
		return *t.IngressBytesTransferred
	}
	return
}

func (t *TunnelConnectionHealth) GetLastConnectionEstablishedUTCTime() (rv string) {
	if t != nil && t.LastConnectionEstablishedUTCTime != nil {
		return *t.LastConnectionEstablishedUTCTime
	}
	return
}

func (t *TunnelConnectionHealth) GetTunnel() (rv string) {
	if t != nil && t.Tunnel != nil {
		return *t.Tunnel
	}
	return
}

// UnprepareNetworkPoliciesRequest - Details of UnprepareNetworkPolicies for Subnet.
type UnprepareNetworkPoliciesRequest struct {
	// The name of the service for which subnet is being unprepared for.
	ServiceName *string
}

func (u *UnprepareNetworkPoliciesRequest) GetServiceName() (rv string) {
	if u != nil && u.ServiceName != nil {
		return *u.ServiceName
	}
	return
}

// Usage - The network resource usage.
type Usage struct {
	// REQUIRED; The current value of the usage.
	CurrentValue *int64

	// REQUIRED; The limit of usage.
	Limit *int64

	// REQUIRED; The name of the type of usage.
	Name *UsageName

	// REQUIRED; An enum describing the unit of measurement.
	Unit *UsageUnit

	// READ-ONLY; Resource identifier.
	ID *string
}

func (u *Usage) GetCurrentValue() (rv int64) {
	if u != nil && u.CurrentValue != nil {
		return *u.CurrentValue
	}
	return
}

func (u *Usage) GetLimit() (rv int64) {
	if u != nil && u.Limit != nil {
		return *u.Limit
	}
	return
}

func (u *Usage) GetName() (rv *UsageName) {
	if u != nil {
		return u.Name
	}
	return
}

func (u *Usage) GetUnit() (rv *UsageUnit) {
	if u != nil {
		return u.Unit
	}
	return
}

func (u *Usage) GetID() (rv string) {
	if u != nil && u.ID != nil {
		return *u.ID
	}
	return
}

// UsageName - The usage names.
type UsageName struct {
	// A localized string describing the resource name.
	LocalizedValue *string

	// A string describing the resource name.
	Value *string
}

func (u *UsageName) GetLocalizedValue() (rv string) {
	if u != nil && u.LocalizedValue != nil {
		return *u.LocalizedValue
	}
	return
}

func (u *UsageName) GetValue() (rv string) {
	if u != nil && u.Value != nil {
		return *u.Value
	}
	return
}

// UsagesListResult - The list usages operation response.
type UsagesListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// The list network resource usages.
	Value []*Usage
}

func (u *UsagesListResult) GetNextLink() (rv string) {
	if u != nil && u.NextLink != nil {
		return *u.NextLink
	}
	return
}

func (u *UsagesListResult) GetValue() (rv []*Usage) {
	if u != nil {
		return u.Value
	}
	return
}

// VM - Describes a Virtual Machine.
type VM struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VM) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VM) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VM) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VM) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VM) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VPNClientConfiguration - VpnClientConfiguration for P2S client.
type VPNClientConfiguration struct {
	// The AADAudience property of the VirtualNetworkGateway resource for vpn client connection used for AAD authentication.
	AADAudience *string

	// The AADIssuer property of the VirtualNetworkGateway resource for vpn client connection used for AAD authentication.
	AADIssuer *string

	// The AADTenant property of the VirtualNetworkGateway resource for vpn client connection used for AAD authentication.
	AADTenant *string

	// The radius server address property of the VirtualNetworkGateway resource for vpn client connection.
	RadiusServerAddress *string

	// The radius secret property of the VirtualNetworkGateway resource for vpn client connection.
	RadiusServerSecret *string

	// The radiusServers property for multiple radius server configuration.
	RadiusServers []*RadiusServer

	// VPN authentication types for the virtual network gateway..
	VPNAuthenticationTypes []*VPNAuthenticationType

	// The reference to the address space resource which represents Address space for P2S VpnClient.
	VPNClientAddressPool *AddressSpace

	// VpnClientIpsecPolicies for virtual network gateway P2S client.
	VPNClientIPSecPolicies []*IPSecPolicy

	// VpnClientProtocols for Virtual network gateway.
	VPNClientProtocols []*VPNClientProtocol

	// VpnClientRevokedCertificate for Virtual network gateway.
	VPNClientRevokedCertificates []*VPNClientRevokedCertificate

	// VpnClientRootCertificate for virtual network gateway.
	VPNClientRootCertificates []*VPNClientRootCertificate

	// per ip address pool connection policy for virtual network gateway P2S client.
	VngClientConnectionConfigurations []*VngClientConnectionConfiguration
}

func (v *VPNClientConfiguration) GetAADAudience() (rv string) {
	if v != nil && v.AADAudience != nil {
		return *v.AADAudience
	}
	return
}

func (v *VPNClientConfiguration) GetAADIssuer() (rv string) {
	if v != nil && v.AADIssuer != nil {
		return *v.AADIssuer
	}
	return
}

func (v *VPNClientConfiguration) GetAADTenant() (rv string) {
	if v != nil && v.AADTenant != nil {
		return *v.AADTenant
	}
	return
}

func (v *VPNClientConfiguration) GetRadiusServerAddress() (rv string) {
	if v != nil && v.RadiusServerAddress != nil {
		return *v.RadiusServerAddress
	}
	return
}

func (v *VPNClientConfiguration) GetRadiusServerSecret() (rv string) {
	if v != nil && v.RadiusServerSecret != nil {
		return *v.RadiusServerSecret
	}
	return
}

func (v *VPNClientConfiguration) GetRadiusServers() (rv []*RadiusServer) {
	if v != nil {
		return v.RadiusServers
	}
	return
}

func (v *VPNClientConfiguration) GetVPNAuthenticationTypes() (rv []*VPNAuthenticationType) {
	if v != nil {
		return v.VPNAuthenticationTypes
	}
	return
}

func (v *VPNClientConfiguration) GetVPNClientAddressPool() (rv *AddressSpace) {
	if v != nil {
		return v.VPNClientAddressPool
	}
	return
}

func (v *VPNClientConfiguration) GetVPNClientIPSecPolicies() (rv []*IPSecPolicy) {
	if v != nil {
		return v.VPNClientIPSecPolicies
	}
	return
}

func (v *VPNClientConfiguration) GetVPNClientProtocols() (rv []*VPNClientProtocol) {
	if v != nil {
		return v.VPNClientProtocols
	}
	return
}

func (v *VPNClientConfiguration) GetVPNClientRevokedCertificates() (rv []*VPNClientRevokedCertificate) {
	if v != nil {
		return v.VPNClientRevokedCertificates
	}
	return
}

func (v *VPNClientConfiguration) GetVPNClientRootCertificates() (rv []*VPNClientRootCertificate) {
	if v != nil {
		return v.VPNClientRootCertificates
	}
	return
}

func (v *VPNClientConfiguration) GetVngClientConnectionConfigurations() (rv []*VngClientConnectionConfiguration) {
	if v != nil {
		return v.VngClientConnectionConfigurations
	}
	return
}

// VPNClientConnectionHealth - VpnClientConnectionHealth properties.
type VPNClientConnectionHealth struct {
	// List of allocated ip addresses to the connected p2s vpn clients.
	AllocatedIPAddresses []*string

	// The total of p2s vpn clients connected at this time to this P2SVpnGateway.
	VPNClientConnectionsCount *int32

	// READ-ONLY; Total of the Egress Bytes Transferred in this connection.
	TotalEgressBytesTransferred *int64

	// READ-ONLY; Total of the Ingress Bytes Transferred in this P2S Vpn connection.
	TotalIngressBytesTransferred *int64
}

func (v *VPNClientConnectionHealth) GetAllocatedIPAddresses() (rv []*string) {
	if v != nil {
		return v.AllocatedIPAddresses
	}
	return
}

func (v *VPNClientConnectionHealth) GetVPNClientConnectionsCount() (rv int32) {
	if v != nil && v.VPNClientConnectionsCount != nil {
		return *v.VPNClientConnectionsCount
	}
	return
}

func (v *VPNClientConnectionHealth) GetTotalEgressBytesTransferred() (rv int64) {
	if v != nil && v.TotalEgressBytesTransferred != nil {
		return *v.TotalEgressBytesTransferred
	}
	return
}

func (v *VPNClientConnectionHealth) GetTotalIngressBytesTransferred() (rv int64) {
	if v != nil && v.TotalIngressBytesTransferred != nil {
		return *v.TotalIngressBytesTransferred
	}
	return
}

// VPNClientConnectionHealthDetail - VPN client connection health detail.
type VPNClientConnectionHealthDetail struct {
	// READ-ONLY; The egress bytes per second.
	EgressBytesTransferred *int64

	// READ-ONLY; The egress packets per second.
	EgressPacketsTransferred *int64

	// READ-ONLY; The ingress bytes per second.
	IngressBytesTransferred *int64

	// READ-ONLY; The ingress packets per second.
	IngressPacketsTransferred *int64

	// READ-ONLY; The max band width.
	MaxBandwidth *int64

	// READ-ONLY; The max packets transferred per second.
	MaxPacketsPerSecond *int64

	// READ-ONLY; The assigned private Ip of a connected vpn client.
	PrivateIPAddress *string

	// READ-ONLY; The public Ip of a connected vpn client.
	PublicIPAddress *string

	// READ-ONLY; The duration time of a connected vpn client.
	VPNConnectionDuration *int64

	// READ-ONLY; The vpn client Id.
	VPNConnectionID *string

	// READ-ONLY; The start time of a connected vpn client.
	VPNConnectionTime *string

	// READ-ONLY; The user name of a connected vpn client.
	VPNUserName *string
}

func (v *VPNClientConnectionHealthDetail) GetEgressBytesTransferred() (rv int64) {
	if v != nil && v.EgressBytesTransferred != nil {
		return *v.EgressBytesTransferred
	}
	return
}

func (v *VPNClientConnectionHealthDetail) GetEgressPacketsTransferred() (rv int64) {
	if v != nil && v.EgressPacketsTransferred != nil {
		return *v.EgressPacketsTransferred
	}
	return
}

func (v *VPNClientConnectionHealthDetail) GetIngressBytesTransferred() (rv int64) {
	if v != nil && v.IngressBytesTransferred != nil {
		return *v.IngressBytesTransferred
	}
	return
}

func (v *VPNClientConnectionHealthDetail) GetIngressPacketsTransferred() (rv int64) {
	if v != nil && v.IngressPacketsTransferred != nil {
		return *v.IngressPacketsTransferred
	}
	return
}

func (v *VPNClientConnectionHealthDetail) GetMaxBandwidth() (rv int64) {
	if v != nil && v.MaxBandwidth != nil {
		return *v.MaxBandwidth
	}
	return
}

func (v *VPNClientConnectionHealthDetail) GetMaxPacketsPerSecond() (rv int64) {
	if v != nil && v.MaxPacketsPerSecond != nil {
		return *v.MaxPacketsPerSecond
	}
	return
}

func (v *VPNClientConnectionHealthDetail) GetPrivateIPAddress() (rv string) {
	if v != nil && v.PrivateIPAddress != nil {
		return *v.PrivateIPAddress
	}
	return
}

func (v *VPNClientConnectionHealthDetail) GetPublicIPAddress() (rv string) {
	if v != nil && v.PublicIPAddress != nil {
		return *v.PublicIPAddress
	}
	return
}

func (v *VPNClientConnectionHealthDetail) GetVPNConnectionDuration() (rv int64) {
	if v != nil && v.VPNConnectionDuration != nil {
		return *v.VPNConnectionDuration
	}
	return
}

func (v *VPNClientConnectionHealthDetail) GetVPNConnectionID() (rv string) {
	if v != nil && v.VPNConnectionID != nil {
		return *v.VPNConnectionID
	}
	return
}

func (v *VPNClientConnectionHealthDetail) GetVPNConnectionTime() (rv string) {
	if v != nil && v.VPNConnectionTime != nil {
		return *v.VPNConnectionTime
	}
	return
}

func (v *VPNClientConnectionHealthDetail) GetVPNUserName() (rv string) {
	if v != nil && v.VPNUserName != nil {
		return *v.VPNUserName
	}
	return
}

// VPNClientConnectionHealthDetailListResult - List of virtual network gateway vpn client connection health.
type VPNClientConnectionHealthDetailListResult struct {
	// List of vpn client connection health.
	Value []*VPNClientConnectionHealthDetail
}

func (v *VPNClientConnectionHealthDetailListResult) GetValue() (rv []*VPNClientConnectionHealthDetail) {
	if v != nil {
		return v.Value
	}
	return
}

// VPNClientIPsecParameters - An IPSec parameters for a virtual network gateway P2S connection.
type VPNClientIPsecParameters struct {
	// REQUIRED; The DH Group used in IKE Phase 1 for initial SA.
	DhGroup *DhGroup

	// REQUIRED; The IPSec encryption algorithm (IKE phase 1).
	IPSecEncryption *IPSecEncryption

	// REQUIRED; The IPSec integrity algorithm (IKE phase 1).
	IPSecIntegrity *IPSecIntegrity

	// REQUIRED; The IKE encryption algorithm (IKE phase 2).
	IkeEncryption *IkeEncryption

	// REQUIRED; The IKE integrity algorithm (IKE phase 2).
	IkeIntegrity *IkeIntegrity

	// REQUIRED; The Pfs Group used in IKE Phase 2 for new child SA.
	PfsGroup *PfsGroup

	// REQUIRED; The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for P2S client..
	SaDataSizeKilobytes *int32

	// REQUIRED; The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for P2S client.
	SaLifeTimeSeconds *int32
}

func (v *VPNClientIPsecParameters) GetDhGroup() (rv *DhGroup) {
	if v != nil {
		return v.DhGroup
	}
	return
}

func (v *VPNClientIPsecParameters) GetIPSecEncryption() (rv *IPSecEncryption) {
	if v != nil {
		return v.IPSecEncryption
	}
	return
}

func (v *VPNClientIPsecParameters) GetIPSecIntegrity() (rv *IPSecIntegrity) {
	if v != nil {
		return v.IPSecIntegrity
	}
	return
}

func (v *VPNClientIPsecParameters) GetIkeEncryption() (rv *IkeEncryption) {
	if v != nil {
		return v.IkeEncryption
	}
	return
}

func (v *VPNClientIPsecParameters) GetIkeIntegrity() (rv *IkeIntegrity) {
	if v != nil {
		return v.IkeIntegrity
	}
	return
}

func (v *VPNClientIPsecParameters) GetPfsGroup() (rv *PfsGroup) {
	if v != nil {
		return v.PfsGroup
	}
	return
}

func (v *VPNClientIPsecParameters) GetSaDataSizeKilobytes() (rv int32) {
	if v != nil && v.SaDataSizeKilobytes != nil {
		return *v.SaDataSizeKilobytes
	}
	return
}

func (v *VPNClientIPsecParameters) GetSaLifeTimeSeconds() (rv int32) {
	if v != nil && v.SaLifeTimeSeconds != nil {
		return *v.SaLifeTimeSeconds
	}
	return
}

// VPNClientParameters - Vpn Client Parameters for package generation.
type VPNClientParameters struct {
	// VPN client authentication method.
	AuthenticationMethod *AuthenticationMethod

	// A list of client root certificates public certificate data encoded as Base-64 strings. Optional parameter for external
	// radius based authentication with EAPTLS.
	ClientRootCertificates []*string

	// VPN client Processor Architecture.
	ProcessorArchitecture *ProcessorArchitecture

	// The public certificate data for the radius server authentication certificate as a Base-64 encoded string. Required only
	// if external radius authentication has been configured with EAPTLS
	// authentication.
	RadiusServerAuthCertificate *string
}

func (v *VPNClientParameters) GetAuthenticationMethod() (rv *AuthenticationMethod) {
	if v != nil {
		return v.AuthenticationMethod
	}
	return
}

func (v *VPNClientParameters) GetClientRootCertificates() (rv []*string) {
	if v != nil {
		return v.ClientRootCertificates
	}
	return
}

func (v *VPNClientParameters) GetProcessorArchitecture() (rv *ProcessorArchitecture) {
	if v != nil {
		return v.ProcessorArchitecture
	}
	return
}

func (v *VPNClientParameters) GetRadiusServerAuthCertificate() (rv string) {
	if v != nil && v.RadiusServerAuthCertificate != nil {
		return *v.RadiusServerAuthCertificate
	}
	return
}

// VPNClientRevokedCertificate - VPN client revoked certificate of virtual network gateway.
type VPNClientRevokedCertificate struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the vpn client revoked certificate.
	Properties *VPNClientRevokedCertificatePropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (v *VPNClientRevokedCertificate) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VPNClientRevokedCertificate) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNClientRevokedCertificate) GetProperties() (rv *VPNClientRevokedCertificatePropertiesFormat) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VPNClientRevokedCertificate) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

// VPNClientRevokedCertificatePropertiesFormat - Properties of the revoked VPN client certificate of virtual network gateway.
type VPNClientRevokedCertificatePropertiesFormat struct {
	// The revoked VPN client certificate thumbprint.
	Thumbprint *string

	// READ-ONLY; The provisioning state of the VPN client revoked certificate resource.
	ProvisioningState *ProvisioningState
}

func (v *VPNClientRevokedCertificatePropertiesFormat) GetThumbprint() (rv string) {
	if v != nil && v.Thumbprint != nil {
		return *v.Thumbprint
	}
	return
}

func (v *VPNClientRevokedCertificatePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VPNClientRootCertificate - VPN client root certificate of virtual network gateway.
type VPNClientRootCertificate struct {
	// REQUIRED; Properties of the vpn client root certificate.
	Properties *VPNClientRootCertificatePropertiesFormat

	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (v *VPNClientRootCertificate) GetProperties() (rv *VPNClientRootCertificatePropertiesFormat) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VPNClientRootCertificate) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VPNClientRootCertificate) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNClientRootCertificate) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

// VPNClientRootCertificatePropertiesFormat - Properties of SSL certificates of application gateway.
type VPNClientRootCertificatePropertiesFormat struct {
	// REQUIRED; The certificate public data.
	PublicCertData *string

	// READ-ONLY; The provisioning state of the VPN client root certificate resource.
	ProvisioningState *ProvisioningState
}

func (v *VPNClientRootCertificatePropertiesFormat) GetPublicCertData() (rv string) {
	if v != nil && v.PublicCertData != nil {
		return *v.PublicCertData
	}
	return
}

func (v *VPNClientRootCertificatePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VPNConnection - VpnConnection Resource.
type VPNConnection struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the VPN connection.
	Properties *VPNConnectionProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (v *VPNConnection) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VPNConnection) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNConnection) GetProperties() (rv *VPNConnectionProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VPNConnection) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

// VPNConnectionPacketCaptureStartParameters - Vpn Connection packet capture parameters supplied to start packet capture on
// gateway connection.
type VPNConnectionPacketCaptureStartParameters struct {
	// Start Packet capture parameters on vpn connection.
	FilterData *string

	// List of site link connection names.
	LinkConnectionNames []*string
}

func (v *VPNConnectionPacketCaptureStartParameters) GetFilterData() (rv string) {
	if v != nil && v.FilterData != nil {
		return *v.FilterData
	}
	return
}

func (v *VPNConnectionPacketCaptureStartParameters) GetLinkConnectionNames() (rv []*string) {
	if v != nil {
		return v.LinkConnectionNames
	}
	return
}

// VPNConnectionPacketCaptureStopParameters - Vpn Connection packet capture parameters supplied to stop packet capture on
// gateway connection.
type VPNConnectionPacketCaptureStopParameters struct {
	// List of site link connection names.
	LinkConnectionNames []*string

	// SAS url for packet capture on vpn connection.
	SasURL *string
}

func (v *VPNConnectionPacketCaptureStopParameters) GetLinkConnectionNames() (rv []*string) {
	if v != nil {
		return v.LinkConnectionNames
	}
	return
}

func (v *VPNConnectionPacketCaptureStopParameters) GetSasURL() (rv string) {
	if v != nil && v.SasURL != nil {
		return *v.SasURL
	}
	return
}

// VPNConnectionProperties - Parameters for VpnConnection.
type VPNConnectionProperties struct {
	// Expected bandwidth in MBPS.
	ConnectionBandwidth *int32

	// DPD timeout in seconds for vpn connection.
	DpdTimeoutSeconds *int32

	// EnableBgp flag.
	EnableBgp *bool

	// Enable internet security.
	EnableInternetSecurity *bool

	// EnableBgp flag.
	EnableRateLimiting *bool

	// The IPSec Policies to be considered by this connection.
	IPSecPolicies []*IPSecPolicy

	// Id of the connected vpn site.
	RemoteVPNSite *SubResource

	// The Routing Configuration indicating the associated and propagated route tables on this connection.
	RoutingConfiguration *RoutingConfiguration

	// Routing weight for vpn connection.
	RoutingWeight *int32

	// SharedKey for the vpn connection.
	SharedKey *string

	// The Traffic Selector Policies to be considered by this connection.
	TrafficSelectorPolicies []*TrafficSelectorPolicy

	// Use local azure ip to initiate connection.
	UseLocalAzureIPAddress *bool

	// Enable policy-based traffic selectors.
	UsePolicyBasedTrafficSelectors *bool

	// Connection protocol used for this connection.
	VPNConnectionProtocolType *VirtualNetworkGatewayConnectionProtocol

	// List of all vpn site link connections to the gateway.
	VPNLinkConnections []*VPNSiteLinkConnection

	// READ-ONLY; The connection status.
	ConnectionStatus *VPNConnectionStatus

	// READ-ONLY; Egress bytes transferred.
	EgressBytesTransferred *int64

	// READ-ONLY; Ingress bytes transferred.
	IngressBytesTransferred *int64

	// READ-ONLY; The provisioning state of the VPN connection resource.
	ProvisioningState *ProvisioningState
}

func (v *VPNConnectionProperties) GetConnectionBandwidth() (rv int32) {
	if v != nil && v.ConnectionBandwidth != nil {
		return *v.ConnectionBandwidth
	}
	return
}

func (v *VPNConnectionProperties) GetDpdTimeoutSeconds() (rv int32) {
	if v != nil && v.DpdTimeoutSeconds != nil {
		return *v.DpdTimeoutSeconds
	}
	return
}

func (v *VPNConnectionProperties) GetEnableBgp() (rv bool) {
	if v != nil && v.EnableBgp != nil {
		return *v.EnableBgp
	}
	return
}

func (v *VPNConnectionProperties) GetEnableInternetSecurity() (rv bool) {
	if v != nil && v.EnableInternetSecurity != nil {
		return *v.EnableInternetSecurity
	}
	return
}

func (v *VPNConnectionProperties) GetEnableRateLimiting() (rv bool) {
	if v != nil && v.EnableRateLimiting != nil {
		return *v.EnableRateLimiting
	}
	return
}

func (v *VPNConnectionProperties) GetIPSecPolicies() (rv []*IPSecPolicy) {
	if v != nil {
		return v.IPSecPolicies
	}
	return
}

func (v *VPNConnectionProperties) GetRemoteVPNSite() (rv *SubResource) {
	if v != nil {
		return v.RemoteVPNSite
	}
	return
}

func (v *VPNConnectionProperties) GetRoutingConfiguration() (rv *RoutingConfiguration) {
	if v != nil {
		return v.RoutingConfiguration
	}
	return
}

func (v *VPNConnectionProperties) GetRoutingWeight() (rv int32) {
	if v != nil && v.RoutingWeight != nil {
		return *v.RoutingWeight
	}
	return
}

func (v *VPNConnectionProperties) GetSharedKey() (rv string) {
	if v != nil && v.SharedKey != nil {
		return *v.SharedKey
	}
	return
}

func (v *VPNConnectionProperties) GetTrafficSelectorPolicies() (rv []*TrafficSelectorPolicy) {
	if v != nil {
		return v.TrafficSelectorPolicies
	}
	return
}

func (v *VPNConnectionProperties) GetUseLocalAzureIPAddress() (rv bool) {
	if v != nil && v.UseLocalAzureIPAddress != nil {
		return *v.UseLocalAzureIPAddress
	}
	return
}

func (v *VPNConnectionProperties) GetUsePolicyBasedTrafficSelectors() (rv bool) {
	if v != nil && v.UsePolicyBasedTrafficSelectors != nil {
		return *v.UsePolicyBasedTrafficSelectors
	}
	return
}

func (v *VPNConnectionProperties) GetVPNConnectionProtocolType() (rv *VirtualNetworkGatewayConnectionProtocol) {
	if v != nil {
		return v.VPNConnectionProtocolType
	}
	return
}

func (v *VPNConnectionProperties) GetVPNLinkConnections() (rv []*VPNSiteLinkConnection) {
	if v != nil {
		return v.VPNLinkConnections
	}
	return
}

func (v *VPNConnectionProperties) GetConnectionStatus() (rv *VPNConnectionStatus) {
	if v != nil {
		return v.ConnectionStatus
	}
	return
}

func (v *VPNConnectionProperties) GetEgressBytesTransferred() (rv int64) {
	if v != nil && v.EgressBytesTransferred != nil {
		return *v.EgressBytesTransferred
	}
	return
}

func (v *VPNConnectionProperties) GetIngressBytesTransferred() (rv int64) {
	if v != nil && v.IngressBytesTransferred != nil {
		return *v.IngressBytesTransferred
	}
	return
}

func (v *VPNConnectionProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VPNDeviceScriptParameters - Vpn device configuration script generation parameters.
type VPNDeviceScriptParameters struct {
	// The device family for the vpn device.
	DeviceFamily *string

	// The firmware version for the vpn device.
	FirmwareVersion *string

	// The vendor for the vpn device.
	Vendor *string
}

func (v *VPNDeviceScriptParameters) GetDeviceFamily() (rv string) {
	if v != nil && v.DeviceFamily != nil {
		return *v.DeviceFamily
	}
	return
}

func (v *VPNDeviceScriptParameters) GetFirmwareVersion() (rv string) {
	if v != nil && v.FirmwareVersion != nil {
		return *v.FirmwareVersion
	}
	return
}

func (v *VPNDeviceScriptParameters) GetVendor() (rv string) {
	if v != nil && v.Vendor != nil {
		return *v.Vendor
	}
	return
}

// VPNGateway - VpnGateway Resource.
type VPNGateway struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the VPN gateway.
	Properties *VPNGatewayProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VPNGateway) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VPNGateway) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VPNGateway) GetProperties() (rv *VPNGatewayProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VPNGateway) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VPNGateway) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VPNGateway) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNGateway) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VPNGatewayIPConfiguration - IP Configuration of a VPN Gateway Resource.
type VPNGatewayIPConfiguration struct {
	// The identifier of the IP configuration for a VPN Gateway.
	ID *string

	// The private IP address of this IP configuration.
	PrivateIPAddress *string

	// The public IP address of this IP configuration.
	PublicIPAddress *string
}

func (v *VPNGatewayIPConfiguration) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VPNGatewayIPConfiguration) GetPrivateIPAddress() (rv string) {
	if v != nil && v.PrivateIPAddress != nil {
		return *v.PrivateIPAddress
	}
	return
}

func (v *VPNGatewayIPConfiguration) GetPublicIPAddress() (rv string) {
	if v != nil && v.PublicIPAddress != nil {
		return *v.PublicIPAddress
	}
	return
}

// VPNGatewayNatRule - VpnGatewayNatRule Resource.
type VPNGatewayNatRule struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the VpnGateway NAT rule.
	Properties *VPNGatewayNatRuleProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VPNGatewayNatRule) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VPNGatewayNatRule) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNGatewayNatRule) GetProperties() (rv *VPNGatewayNatRuleProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VPNGatewayNatRule) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VPNGatewayNatRule) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VPNGatewayNatRuleProperties - Parameters for VpnGatewayNatRule.
type VPNGatewayNatRuleProperties struct {
	// The private IP address external mapping for NAT.
	ExternalMappings []*VPNNatRuleMapping

	// The IP Configuration ID this NAT rule applies to.
	IPConfigurationID *string

	// The private IP address internal mapping for NAT.
	InternalMappings []*VPNNatRuleMapping

	// The Source NAT direction of a VPN NAT.
	Mode *VPNNatRuleMode

	// The type of NAT rule for VPN NAT.
	Type *VPNNatRuleType

	// READ-ONLY; List of egress VpnSiteLinkConnections.
	EgressVPNSiteLinkConnections []*SubResource

	// READ-ONLY; List of ingress VpnSiteLinkConnections.
	IngressVPNSiteLinkConnections []*SubResource

	// READ-ONLY; The provisioning state of the NAT Rule resource.
	ProvisioningState *ProvisioningState
}

func (v *VPNGatewayNatRuleProperties) GetExternalMappings() (rv []*VPNNatRuleMapping) {
	if v != nil {
		return v.ExternalMappings
	}
	return
}

func (v *VPNGatewayNatRuleProperties) GetIPConfigurationID() (rv string) {
	if v != nil && v.IPConfigurationID != nil {
		return *v.IPConfigurationID
	}
	return
}

func (v *VPNGatewayNatRuleProperties) GetInternalMappings() (rv []*VPNNatRuleMapping) {
	if v != nil {
		return v.InternalMappings
	}
	return
}

func (v *VPNGatewayNatRuleProperties) GetMode() (rv *VPNNatRuleMode) {
	if v != nil {
		return v.Mode
	}
	return
}

func (v *VPNGatewayNatRuleProperties) GetType() (rv *VPNNatRuleType) {
	if v != nil {
		return v.Type
	}
	return
}

func (v *VPNGatewayNatRuleProperties) GetEgressVPNSiteLinkConnections() (rv []*SubResource) {
	if v != nil {
		return v.EgressVPNSiteLinkConnections
	}
	return
}

func (v *VPNGatewayNatRuleProperties) GetIngressVPNSiteLinkConnections() (rv []*SubResource) {
	if v != nil {
		return v.IngressVPNSiteLinkConnections
	}
	return
}

func (v *VPNGatewayNatRuleProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VPNGatewayPacketCaptureStartParameters - Start packet capture parameters.
type VPNGatewayPacketCaptureStartParameters struct {
	// Start Packet capture parameters on vpn gateway.
	FilterData *string
}

func (v *VPNGatewayPacketCaptureStartParameters) GetFilterData() (rv string) {
	if v != nil && v.FilterData != nil {
		return *v.FilterData
	}
	return
}

// VPNGatewayPacketCaptureStopParameters - Stop packet capture parameters.
type VPNGatewayPacketCaptureStopParameters struct {
	// SAS url for packet capture on vpn gateway.
	SasURL *string
}

func (v *VPNGatewayPacketCaptureStopParameters) GetSasURL() (rv string) {
	if v != nil && v.SasURL != nil {
		return *v.SasURL
	}
	return
}

// VPNGatewayProperties - Parameters for VpnGateway.
type VPNGatewayProperties struct {
	// Local network gateway's BGP speaker settings.
	BgpSettings *BgpSettings

	// List of all vpn connections to the gateway.
	Connections []*VPNConnection

	// Enable BGP routes translation for NAT on this VpnGateway.
	EnableBgpRouteTranslationForNat *bool

	// Enable Routing Preference property for the Public IP Interface of the VpnGateway.
	IsRoutingPreferenceInternet *bool

	// List of all the nat Rules associated with the gateway.
	NatRules []*VPNGatewayNatRule

	// The scale unit for this vpn gateway.
	VPNGatewayScaleUnit *int32

	// The VirtualHub to which the gateway belongs.
	VirtualHub *SubResource

	// READ-ONLY; List of all IPs configured on the gateway.
	IPConfigurations []*VPNGatewayIPConfiguration

	// READ-ONLY; The provisioning state of the VPN gateway resource.
	ProvisioningState *ProvisioningState
}

func (v *VPNGatewayProperties) GetBgpSettings() (rv *BgpSettings) {
	if v != nil {
		return v.BgpSettings
	}
	return
}

func (v *VPNGatewayProperties) GetConnections() (rv []*VPNConnection) {
	if v != nil {
		return v.Connections
	}
	return
}

func (v *VPNGatewayProperties) GetEnableBgpRouteTranslationForNat() (rv bool) {
	if v != nil && v.EnableBgpRouteTranslationForNat != nil {
		return *v.EnableBgpRouteTranslationForNat
	}
	return
}

func (v *VPNGatewayProperties) GetIsRoutingPreferenceInternet() (rv bool) {
	if v != nil && v.IsRoutingPreferenceInternet != nil {
		return *v.IsRoutingPreferenceInternet
	}
	return
}

func (v *VPNGatewayProperties) GetNatRules() (rv []*VPNGatewayNatRule) {
	if v != nil {
		return v.NatRules
	}
	return
}

func (v *VPNGatewayProperties) GetVPNGatewayScaleUnit() (rv int32) {
	if v != nil && v.VPNGatewayScaleUnit != nil {
		return *v.VPNGatewayScaleUnit
	}
	return
}

func (v *VPNGatewayProperties) GetVirtualHub() (rv *SubResource) {
	if v != nil {
		return v.VirtualHub
	}
	return
}

func (v *VPNGatewayProperties) GetIPConfigurations() (rv []*VPNGatewayIPConfiguration) {
	if v != nil {
		return v.IPConfigurations
	}
	return
}

func (v *VPNGatewayProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VPNLinkBgpSettings - BGP settings details for a link.
type VPNLinkBgpSettings struct {
	// The BGP speaker's ASN.
	Asn *int64

	// The BGP peering address and BGP identifier of this BGP speaker.
	BgpPeeringAddress *string
}

func (v *VPNLinkBgpSettings) GetAsn() (rv int64) {
	if v != nil && v.Asn != nil {
		return *v.Asn
	}
	return
}

func (v *VPNLinkBgpSettings) GetBgpPeeringAddress() (rv string) {
	if v != nil && v.BgpPeeringAddress != nil {
		return *v.BgpPeeringAddress
	}
	return
}

// VPNLinkProviderProperties - List of properties of a link provider.
type VPNLinkProviderProperties struct {
	// Name of the link provider.
	LinkProviderName *string

	// Link speed.
	LinkSpeedInMbps *int32
}

func (v *VPNLinkProviderProperties) GetLinkProviderName() (rv string) {
	if v != nil && v.LinkProviderName != nil {
		return *v.LinkProviderName
	}
	return
}

func (v *VPNLinkProviderProperties) GetLinkSpeedInMbps() (rv int32) {
	if v != nil && v.LinkSpeedInMbps != nil {
		return *v.LinkSpeedInMbps
	}
	return
}

// VPNNatRuleMapping - Vpn NatRule mapping.
type VPNNatRuleMapping struct {
	// Address space for Vpn NatRule mapping.
	AddressSpace *string

	// Port range for Vpn NatRule mapping.
	PortRange *string
}

func (v *VPNNatRuleMapping) GetAddressSpace() (rv string) {
	if v != nil && v.AddressSpace != nil {
		return *v.AddressSpace
	}
	return
}

func (v *VPNNatRuleMapping) GetPortRange() (rv string) {
	if v != nil && v.PortRange != nil {
		return *v.PortRange
	}
	return
}

// VPNPacketCaptureStartParameters - Start packet capture parameters on virtual network gateway.
type VPNPacketCaptureStartParameters struct {
	// Start Packet capture parameters.
	FilterData *string
}

func (v *VPNPacketCaptureStartParameters) GetFilterData() (rv string) {
	if v != nil && v.FilterData != nil {
		return *v.FilterData
	}
	return
}

// VPNPacketCaptureStopParameters - Stop packet capture parameters.
type VPNPacketCaptureStopParameters struct {
	// SAS url for packet capture on virtual network gateway.
	SasURL *string
}

func (v *VPNPacketCaptureStopParameters) GetSasURL() (rv string) {
	if v != nil && v.SasURL != nil {
		return *v.SasURL
	}
	return
}

// VPNProfileResponse - Vpn Profile Response for package generation.
type VPNProfileResponse struct {
	// URL to the VPN profile.
	ProfileURL *string
}

func (v *VPNProfileResponse) GetProfileURL() (rv string) {
	if v != nil && v.ProfileURL != nil {
		return *v.ProfileURL
	}
	return
}

// VPNServerConfigRadiusClientRootCertificate - Properties of the Radius client root certificate of VpnServerConfiguration.
type VPNServerConfigRadiusClientRootCertificate struct {
	// The certificate name.
	Name *string

	// The Radius client root certificate thumbprint.
	Thumbprint *string
}

func (v *VPNServerConfigRadiusClientRootCertificate) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNServerConfigRadiusClientRootCertificate) GetThumbprint() (rv string) {
	if v != nil && v.Thumbprint != nil {
		return *v.Thumbprint
	}
	return
}

// VPNServerConfigRadiusServerRootCertificate - Properties of Radius Server root certificate of VpnServerConfiguration.
type VPNServerConfigRadiusServerRootCertificate struct {
	// The certificate name.
	Name *string

	// The certificate public data.
	PublicCertData *string
}

func (v *VPNServerConfigRadiusServerRootCertificate) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNServerConfigRadiusServerRootCertificate) GetPublicCertData() (rv string) {
	if v != nil && v.PublicCertData != nil {
		return *v.PublicCertData
	}
	return
}

// VPNServerConfigVPNClientRevokedCertificate - Properties of the revoked VPN client certificate of VpnServerConfiguration.
type VPNServerConfigVPNClientRevokedCertificate struct {
	// The certificate name.
	Name *string

	// The revoked VPN client certificate thumbprint.
	Thumbprint *string
}

func (v *VPNServerConfigVPNClientRevokedCertificate) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNServerConfigVPNClientRevokedCertificate) GetThumbprint() (rv string) {
	if v != nil && v.Thumbprint != nil {
		return *v.Thumbprint
	}
	return
}

// VPNServerConfigVPNClientRootCertificate - Properties of VPN client root certificate of VpnServerConfiguration.
type VPNServerConfigVPNClientRootCertificate struct {
	// The certificate name.
	Name *string

	// The certificate public data.
	PublicCertData *string
}

func (v *VPNServerConfigVPNClientRootCertificate) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNServerConfigVPNClientRootCertificate) GetPublicCertData() (rv string) {
	if v != nil && v.PublicCertData != nil {
		return *v.PublicCertData
	}
	return
}

// VPNServerConfiguration - VpnServerConfiguration Resource.
type VPNServerConfiguration struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the P2SVpnServer configuration.
	Properties *VPNServerConfigurationProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VPNServerConfiguration) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VPNServerConfiguration) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VPNServerConfiguration) GetProperties() (rv *VPNServerConfigurationProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VPNServerConfiguration) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VPNServerConfiguration) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VPNServerConfiguration) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNServerConfiguration) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VPNServerConfigurationPolicyGroup - VpnServerConfigurationPolicyGroup Resource.
type VPNServerConfigurationPolicyGroup struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the VpnServerConfigurationPolicyGroup.
	Properties *VPNServerConfigurationPolicyGroupProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VPNServerConfigurationPolicyGroup) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VPNServerConfigurationPolicyGroup) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNServerConfigurationPolicyGroup) GetProperties() (rv *VPNServerConfigurationPolicyGroupProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VPNServerConfigurationPolicyGroup) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VPNServerConfigurationPolicyGroup) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VPNServerConfigurationPolicyGroupMember - VpnServerConfiguration PolicyGroup member
type VPNServerConfigurationPolicyGroupMember struct {
	// The Vpn Policy member attribute type.
	AttributeType *VPNPolicyMemberAttributeType

	// The value of Attribute used for this VpnServerConfigurationPolicyGroupMember.
	AttributeValue *string

	// Name of the VpnServerConfigurationPolicyGroupMember.
	Name *string
}

func (v *VPNServerConfigurationPolicyGroupMember) GetAttributeType() (rv *VPNPolicyMemberAttributeType) {
	if v != nil {
		return v.AttributeType
	}
	return
}

func (v *VPNServerConfigurationPolicyGroupMember) GetAttributeValue() (rv string) {
	if v != nil && v.AttributeValue != nil {
		return *v.AttributeValue
	}
	return
}

func (v *VPNServerConfigurationPolicyGroupMember) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

// VPNServerConfigurationPolicyGroupProperties - Parameters for VpnServerConfigurationPolicyGroup.
type VPNServerConfigurationPolicyGroupProperties struct {
	// Shows if this is a Default VpnServerConfigurationPolicyGroup or not.
	IsDefault *bool

	// Multiple PolicyMembers for VpnServerConfigurationPolicyGroup.
	PolicyMembers []*VPNServerConfigurationPolicyGroupMember

	// Priority for VpnServerConfigurationPolicyGroup.
	Priority *int32

	// READ-ONLY; List of references to P2SConnectionConfigurations.
	P2SConnectionConfigurations []*SubResource

	// READ-ONLY; The provisioning state of the VpnServerConfigurationPolicyGroup resource.
	ProvisioningState *ProvisioningState
}

func (v *VPNServerConfigurationPolicyGroupProperties) GetIsDefault() (rv bool) {
	if v != nil && v.IsDefault != nil {
		return *v.IsDefault
	}
	return
}

func (v *VPNServerConfigurationPolicyGroupProperties) GetPolicyMembers() (rv []*VPNServerConfigurationPolicyGroupMember) {
	if v != nil {
		return v.PolicyMembers
	}
	return
}

func (v *VPNServerConfigurationPolicyGroupProperties) GetPriority() (rv int32) {
	if v != nil && v.Priority != nil {
		return *v.Priority
	}
	return
}

func (v *VPNServerConfigurationPolicyGroupProperties) GetP2SConnectionConfigurations() (rv []*SubResource) {
	if v != nil {
		return v.P2SConnectionConfigurations
	}
	return
}

func (v *VPNServerConfigurationPolicyGroupProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VPNServerConfigurationProperties - Parameters for VpnServerConfiguration.
type VPNServerConfigurationProperties struct {
	// The set of aad vpn authentication parameters.
	AADAuthenticationParameters *AADAuthenticationParameters

	// List of all VpnServerConfigurationPolicyGroups.
	ConfigurationPolicyGroups []*VPNServerConfigurationPolicyGroup

	// The name of the VpnServerConfiguration that is unique within a resource group.
	Name *string

	// Radius client root certificate of VpnServerConfiguration.
	RadiusClientRootCertificates []*VPNServerConfigRadiusClientRootCertificate

	// The radius server address property of the VpnServerConfiguration resource for point to site client connection.
	RadiusServerAddress *string

	// Radius Server root certificate of VpnServerConfiguration.
	RadiusServerRootCertificates []*VPNServerConfigRadiusServerRootCertificate

	// The radius secret property of the VpnServerConfiguration resource for point to site client connection.
	RadiusServerSecret *string

	// Multiple Radius Server configuration for VpnServerConfiguration.
	RadiusServers []*RadiusServer

	// VPN authentication types for the VpnServerConfiguration.
	VPNAuthenticationTypes []*VPNAuthenticationType

	// VpnClientIpsecPolicies for VpnServerConfiguration.
	VPNClientIPSecPolicies []*IPSecPolicy

	// VPN client revoked certificate of VpnServerConfiguration.
	VPNClientRevokedCertificates []*VPNServerConfigVPNClientRevokedCertificate

	// VPN client root certificate of VpnServerConfiguration.
	VPNClientRootCertificates []*VPNServerConfigVPNClientRootCertificate

	// VPN protocols for the VpnServerConfiguration.
	VPNProtocols []*VPNGatewayTunnelingProtocol

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; List of references to P2SVpnGateways.
	P2SVPNGateways []*P2SVPNGateway

	// READ-ONLY; The provisioning state of the VpnServerConfiguration resource. Possible values are: 'Updating', 'Deleting',
	// and 'Failed'.
	ProvisioningState *string
}

func (v *VPNServerConfigurationProperties) GetAADAuthenticationParameters() (rv *AADAuthenticationParameters) {
	if v != nil {
		return v.AADAuthenticationParameters
	}
	return
}

func (v *VPNServerConfigurationProperties) GetConfigurationPolicyGroups() (rv []*VPNServerConfigurationPolicyGroup) {
	if v != nil {
		return v.ConfigurationPolicyGroups
	}
	return
}

func (v *VPNServerConfigurationProperties) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNServerConfigurationProperties) GetRadiusClientRootCertificates() (rv []*VPNServerConfigRadiusClientRootCertificate) {
	if v != nil {
		return v.RadiusClientRootCertificates
	}
	return
}

func (v *VPNServerConfigurationProperties) GetRadiusServerAddress() (rv string) {
	if v != nil && v.RadiusServerAddress != nil {
		return *v.RadiusServerAddress
	}
	return
}

func (v *VPNServerConfigurationProperties) GetRadiusServerRootCertificates() (rv []*VPNServerConfigRadiusServerRootCertificate) {
	if v != nil {
		return v.RadiusServerRootCertificates
	}
	return
}

func (v *VPNServerConfigurationProperties) GetRadiusServerSecret() (rv string) {
	if v != nil && v.RadiusServerSecret != nil {
		return *v.RadiusServerSecret
	}
	return
}

func (v *VPNServerConfigurationProperties) GetRadiusServers() (rv []*RadiusServer) {
	if v != nil {
		return v.RadiusServers
	}
	return
}

func (v *VPNServerConfigurationProperties) GetVPNAuthenticationTypes() (rv []*VPNAuthenticationType) {
	if v != nil {
		return v.VPNAuthenticationTypes
	}
	return
}

func (v *VPNServerConfigurationProperties) GetVPNClientIPSecPolicies() (rv []*IPSecPolicy) {
	if v != nil {
		return v.VPNClientIPSecPolicies
	}
	return
}

func (v *VPNServerConfigurationProperties) GetVPNClientRevokedCertificates() (rv []*VPNServerConfigVPNClientRevokedCertificate) {
	if v != nil {
		return v.VPNClientRevokedCertificates
	}
	return
}

func (v *VPNServerConfigurationProperties) GetVPNClientRootCertificates() (rv []*VPNServerConfigVPNClientRootCertificate) {
	if v != nil {
		return v.VPNClientRootCertificates
	}
	return
}

func (v *VPNServerConfigurationProperties) GetVPNProtocols() (rv []*VPNGatewayTunnelingProtocol) {
	if v != nil {
		return v.VPNProtocols
	}
	return
}

func (v *VPNServerConfigurationProperties) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VPNServerConfigurationProperties) GetP2SVPNGateways() (rv []*P2SVPNGateway) {
	if v != nil {
		return v.P2SVPNGateways
	}
	return
}

func (v *VPNServerConfigurationProperties) GetProvisioningState() (rv string) {
	if v != nil && v.ProvisioningState != nil {
		return *v.ProvisioningState
	}
	return
}

// VPNServerConfigurationsResponse - VpnServerConfigurations list associated with VirtualWan Response.
type VPNServerConfigurationsResponse struct {
	// List of VpnServerConfigurations associated with VirtualWan.
	VPNServerConfigurationResourceIDs []*string
}

func (v *VPNServerConfigurationsResponse) GetVPNServerConfigurationResourceIDs() (rv []*string) {
	if v != nil {
		return v.VPNServerConfigurationResourceIDs
	}
	return
}

// VPNSite - VpnSite Resource.
type VPNSite struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the VPN site.
	Properties *VPNSiteProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VPNSite) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VPNSite) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VPNSite) GetProperties() (rv *VPNSiteProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VPNSite) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VPNSite) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VPNSite) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNSite) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VPNSiteLink - VpnSiteLink Resource.
type VPNSiteLink struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the VPN site link.
	Properties *VPNSiteLinkProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VPNSiteLink) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VPNSiteLink) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNSiteLink) GetProperties() (rv *VPNSiteLinkProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VPNSiteLink) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VPNSiteLink) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VPNSiteLinkConnection - VpnSiteLinkConnection Resource.
type VPNSiteLinkConnection struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the VPN site link connection.
	Properties *VPNSiteLinkConnectionProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VPNSiteLinkConnection) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VPNSiteLinkConnection) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VPNSiteLinkConnection) GetProperties() (rv *VPNSiteLinkConnectionProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VPNSiteLinkConnection) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VPNSiteLinkConnection) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VPNSiteLinkConnectionProperties - Parameters for VpnConnection.
type VPNSiteLinkConnectionProperties struct {
	// Expected bandwidth in MBPS.
	ConnectionBandwidth *int32

	// List of egress NatRules.
	EgressNatRules []*SubResource

	// EnableBgp flag.
	EnableBgp *bool

	// EnableBgp flag.
	EnableRateLimiting *bool

	// The IPSec Policies to be considered by this connection.
	IPSecPolicies []*IPSecPolicy

	// List of ingress NatRules.
	IngressNatRules []*SubResource

	// Routing weight for vpn connection.
	RoutingWeight *int32

	// SharedKey for the vpn connection.
	SharedKey *string

	// Use local azure ip to initiate connection.
	UseLocalAzureIPAddress *bool

	// Enable policy-based traffic selectors.
	UsePolicyBasedTrafficSelectors *bool

	// Connection protocol used for this connection.
	VPNConnectionProtocolType *VirtualNetworkGatewayConnectionProtocol

	// vpnGatewayCustomBgpAddresses used by this connection.
	VPNGatewayCustomBgpAddresses []*GatewayCustomBgpIPAddressIPConfiguration

	// Vpn link connection mode.
	VPNLinkConnectionMode *VPNLinkConnectionMode

	// Id of the connected vpn site link.
	VPNSiteLink *SubResource

	// READ-ONLY; The connection status.
	ConnectionStatus *VPNConnectionStatus

	// READ-ONLY; Egress bytes transferred.
	EgressBytesTransferred *int64

	// READ-ONLY; Ingress bytes transferred.
	IngressBytesTransferred *int64

	// READ-ONLY; The provisioning state of the VPN site link connection resource.
	ProvisioningState *ProvisioningState
}

func (v *VPNSiteLinkConnectionProperties) GetConnectionBandwidth() (rv int32) {
	if v != nil && v.ConnectionBandwidth != nil {
		return *v.ConnectionBandwidth
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetEgressNatRules() (rv []*SubResource) {
	if v != nil {
		return v.EgressNatRules
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetEnableBgp() (rv bool) {
	if v != nil && v.EnableBgp != nil {
		return *v.EnableBgp
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetEnableRateLimiting() (rv bool) {
	if v != nil && v.EnableRateLimiting != nil {
		return *v.EnableRateLimiting
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetIPSecPolicies() (rv []*IPSecPolicy) {
	if v != nil {
		return v.IPSecPolicies
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetIngressNatRules() (rv []*SubResource) {
	if v != nil {
		return v.IngressNatRules
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetRoutingWeight() (rv int32) {
	if v != nil && v.RoutingWeight != nil {
		return *v.RoutingWeight
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetSharedKey() (rv string) {
	if v != nil && v.SharedKey != nil {
		return *v.SharedKey
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetUseLocalAzureIPAddress() (rv bool) {
	if v != nil && v.UseLocalAzureIPAddress != nil {
		return *v.UseLocalAzureIPAddress
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetUsePolicyBasedTrafficSelectors() (rv bool) {
	if v != nil && v.UsePolicyBasedTrafficSelectors != nil {
		return *v.UsePolicyBasedTrafficSelectors
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetVPNConnectionProtocolType() (rv *VirtualNetworkGatewayConnectionProtocol) {
	if v != nil {
		return v.VPNConnectionProtocolType
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetVPNGatewayCustomBgpAddresses() (rv []*GatewayCustomBgpIPAddressIPConfiguration) {
	if v != nil {
		return v.VPNGatewayCustomBgpAddresses
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetVPNLinkConnectionMode() (rv *VPNLinkConnectionMode) {
	if v != nil {
		return v.VPNLinkConnectionMode
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetVPNSiteLink() (rv *SubResource) {
	if v != nil {
		return v.VPNSiteLink
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetConnectionStatus() (rv *VPNConnectionStatus) {
	if v != nil {
		return v.ConnectionStatus
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetEgressBytesTransferred() (rv int64) {
	if v != nil && v.EgressBytesTransferred != nil {
		return *v.EgressBytesTransferred
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetIngressBytesTransferred() (rv int64) {
	if v != nil && v.IngressBytesTransferred != nil {
		return *v.IngressBytesTransferred
	}
	return
}

func (v *VPNSiteLinkConnectionProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VPNSiteLinkProperties - Parameters for VpnSite.
type VPNSiteLinkProperties struct {
	// The set of bgp properties.
	BgpProperties *VPNLinkBgpSettings

	// FQDN of vpn-site-link.
	Fqdn *string

	// The ip-address for the vpn-site-link.
	IPAddress *string

	// The link provider properties.
	LinkProperties *VPNLinkProviderProperties

	// READ-ONLY; The provisioning state of the VPN site link resource.
	ProvisioningState *ProvisioningState
}

func (v *VPNSiteLinkProperties) GetBgpProperties() (rv *VPNLinkBgpSettings) {
	if v != nil {
		return v.BgpProperties
	}
	return
}

func (v *VPNSiteLinkProperties) GetFqdn() (rv string) {
	if v != nil && v.Fqdn != nil {
		return *v.Fqdn
	}
	return
}

func (v *VPNSiteLinkProperties) GetIPAddress() (rv string) {
	if v != nil && v.IPAddress != nil {
		return *v.IPAddress
	}
	return
}

func (v *VPNSiteLinkProperties) GetLinkProperties() (rv *VPNLinkProviderProperties) {
	if v != nil {
		return v.LinkProperties
	}
	return
}

func (v *VPNSiteLinkProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VPNSiteProperties - Parameters for VpnSite.
type VPNSiteProperties struct {
	// The AddressSpace that contains an array of IP address ranges.
	AddressSpace *AddressSpace

	// The set of bgp properties.
	BgpProperties *BgpSettings

	// The device properties.
	DeviceProperties *DeviceProperties

	// The ip-address for the vpn-site.
	IPAddress *string

	// IsSecuritySite flag.
	IsSecuritySite *bool

	// Office365 Policy.
	O365Policy *O365PolicyProperties

	// The key for vpn-site that can be used for connections.
	SiteKey *string

	// List of all vpn site links.
	VPNSiteLinks []*VPNSiteLink

	// The VirtualWAN to which the vpnSite belongs.
	VirtualWan *SubResource

	// READ-ONLY; The provisioning state of the VPN site resource.
	ProvisioningState *ProvisioningState
}

func (v *VPNSiteProperties) GetAddressSpace() (rv *AddressSpace) {
	if v != nil {
		return v.AddressSpace
	}
	return
}

func (v *VPNSiteProperties) GetBgpProperties() (rv *BgpSettings) {
	if v != nil {
		return v.BgpProperties
	}
	return
}

func (v *VPNSiteProperties) GetDeviceProperties() (rv *DeviceProperties) {
	if v != nil {
		return v.DeviceProperties
	}
	return
}

func (v *VPNSiteProperties) GetIPAddress() (rv string) {
	if v != nil && v.IPAddress != nil {
		return *v.IPAddress
	}
	return
}

func (v *VPNSiteProperties) GetIsSecuritySite() (rv bool) {
	if v != nil && v.IsSecuritySite != nil {
		return *v.IsSecuritySite
	}
	return
}

func (v *VPNSiteProperties) GetO365Policy() (rv *O365PolicyProperties) {
	if v != nil {
		return v.O365Policy
	}
	return
}

func (v *VPNSiteProperties) GetSiteKey() (rv string) {
	if v != nil && v.SiteKey != nil {
		return *v.SiteKey
	}
	return
}

func (v *VPNSiteProperties) GetVPNSiteLinks() (rv []*VPNSiteLink) {
	if v != nil {
		return v.VPNSiteLinks
	}
	return
}

func (v *VPNSiteProperties) GetVirtualWan() (rv *SubResource) {
	if v != nil {
		return v.VirtualWan
	}
	return
}

func (v *VPNSiteProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VerificationIPFlowParameters - Parameters that define the IP flow to be verified.
type VerificationIPFlowParameters struct {
	// REQUIRED; The direction of the packet represented as a 5-tuple.
	Direction *Direction

	// REQUIRED; The local IP address. Acceptable values are valid IPv4 addresses.
	LocalIPAddress *string

	// REQUIRED; The local port. Acceptable values are a single integer in the range (0-65535). Support for * for the source port,
	// which depends on the direction.
	LocalPort *string

	// REQUIRED; Protocol to be verified on.
	Protocol *IPFlowProtocol

	// REQUIRED; The remote IP address. Acceptable values are valid IPv4 addresses.
	RemoteIPAddress *string

	// REQUIRED; The remote port. Acceptable values are a single integer in the range (0-65535). Support for * for the source
	// port, which depends on the direction.
	RemotePort *string

	// REQUIRED; The ID of the target resource to perform next-hop on.
	TargetResourceID *string

	// The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of them, then this parameter must be specified.
	// Otherwise optional).
	TargetNicResourceID *string
}

func (v *VerificationIPFlowParameters) GetDirection() (rv *Direction) {
	if v != nil {
		return v.Direction
	}
	return
}

func (v *VerificationIPFlowParameters) GetLocalIPAddress() (rv string) {
	if v != nil && v.LocalIPAddress != nil {
		return *v.LocalIPAddress
	}
	return
}

func (v *VerificationIPFlowParameters) GetLocalPort() (rv string) {
	if v != nil && v.LocalPort != nil {
		return *v.LocalPort
	}
	return
}

func (v *VerificationIPFlowParameters) GetProtocol() (rv *IPFlowProtocol) {
	if v != nil {
		return v.Protocol
	}
	return
}

func (v *VerificationIPFlowParameters) GetRemoteIPAddress() (rv string) {
	if v != nil && v.RemoteIPAddress != nil {
		return *v.RemoteIPAddress
	}
	return
}

func (v *VerificationIPFlowParameters) GetRemotePort() (rv string) {
	if v != nil && v.RemotePort != nil {
		return *v.RemotePort
	}
	return
}

func (v *VerificationIPFlowParameters) GetTargetResourceID() (rv string) {
	if v != nil && v.TargetResourceID != nil {
		return *v.TargetResourceID
	}
	return
}

func (v *VerificationIPFlowParameters) GetTargetNicResourceID() (rv string) {
	if v != nil && v.TargetNicResourceID != nil {
		return *v.TargetNicResourceID
	}
	return
}

// VerificationIPFlowResult - Results of IP flow verification on the target resource.
type VerificationIPFlowResult struct {
	// Indicates whether the traffic is allowed or denied.
	Access *Access

	// Name of the rule. If input is not matched against any security rule, it is not displayed.
	RuleName *string
}

func (v *VerificationIPFlowResult) GetAccess() (rv *Access) {
	if v != nil {
		return v.Access
	}
	return
}

func (v *VerificationIPFlowResult) GetRuleName() (rv string) {
	if v != nil && v.RuleName != nil {
		return *v.RuleName
	}
	return
}

// VirtualAppliance - NetworkVirtualAppliance Resource.
type VirtualAppliance struct {
	// Resource ID.
	ID *string

	// The service principal that has read access to cloud-init and config blob.
	Identity *ManagedServiceIdentity

	// Resource location.
	Location *string

	// Properties of the Network Virtual Appliance.
	Properties *VirtualAppliancePropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VirtualAppliance) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualAppliance) GetIdentity() (rv *ManagedServiceIdentity) {
	if v != nil {
		return v.Identity
	}
	return
}

func (v *VirtualAppliance) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualAppliance) GetProperties() (rv *VirtualAppliancePropertiesFormat) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualAppliance) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualAppliance) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VirtualAppliance) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualAppliance) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualApplianceListResult - Response for ListNetworkVirtualAppliances API service call.
type VirtualApplianceListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of Network Virtual Appliances.
	Value []*VirtualAppliance
}

func (v *VirtualApplianceListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

func (v *VirtualApplianceListResult) GetValue() (rv []*VirtualAppliance) {
	if v != nil {
		return v.Value
	}
	return
}

// VirtualApplianceNicProperties - Network Virtual Appliance NIC properties.
type VirtualApplianceNicProperties struct {
	// READ-ONLY; NIC name.
	Name *string

	// READ-ONLY; Private IP address.
	PrivateIPAddress *string

	// READ-ONLY; Public IP address.
	PublicIPAddress *string
}

func (v *VirtualApplianceNicProperties) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualApplianceNicProperties) GetPrivateIPAddress() (rv string) {
	if v != nil && v.PrivateIPAddress != nil {
		return *v.PrivateIPAddress
	}
	return
}

func (v *VirtualApplianceNicProperties) GetPublicIPAddress() (rv string) {
	if v != nil && v.PublicIPAddress != nil {
		return *v.PublicIPAddress
	}
	return
}

// VirtualAppliancePropertiesFormat - Network Virtual Appliance definition.
type VirtualAppliancePropertiesFormat struct {
	// BootStrapConfigurationBlobs storage URLs.
	BootStrapConfigurationBlobs []*string

	// CloudInitConfiguration string in plain text.
	CloudInitConfiguration *string

	// CloudInitConfigurationBlob storage URLs.
	CloudInitConfigurationBlobs []*string

	// The delegation for the Virtual Appliance
	Delegation *DelegationProperties

	// Network Virtual Appliance SKU.
	NvaSKU *VirtualApplianceSKUProperties

	// The delegation for the Virtual Appliance
	PartnerManagedResource *PartnerManagedResourceProperties

	// Public key for SSH login.
	SSHPublicKey *string

	// VirtualAppliance ASN. Microsoft private, public and IANA reserved ASN are not supported.
	VirtualApplianceAsn *int64

	// The Virtual Hub where Network Virtual Appliance is being deployed.
	VirtualHub *SubResource

	// READ-ONLY; Address Prefix.
	AddressPrefix *string

	// READ-ONLY; The deployment type. PartnerManaged for the SaaS NVA
	DeploymentType *string

	// READ-ONLY; List of references to InboundSecurityRules.
	InboundSecurityRules []*SubResource

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; List of Virtual Appliance Network Interfaces.
	VirtualApplianceNics []*VirtualApplianceNicProperties

	// READ-ONLY; List of references to VirtualApplianceSite.
	VirtualApplianceSites []*SubResource
}

func (v *VirtualAppliancePropertiesFormat) GetBootStrapConfigurationBlobs() (rv []*string) {
	if v != nil {
		return v.BootStrapConfigurationBlobs
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetCloudInitConfiguration() (rv string) {
	if v != nil && v.CloudInitConfiguration != nil {
		return *v.CloudInitConfiguration
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetCloudInitConfigurationBlobs() (rv []*string) {
	if v != nil {
		return v.CloudInitConfigurationBlobs
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetDelegation() (rv *DelegationProperties) {
	if v != nil {
		return v.Delegation
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetNvaSKU() (rv *VirtualApplianceSKUProperties) {
	if v != nil {
		return v.NvaSKU
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetPartnerManagedResource() (rv *PartnerManagedResourceProperties) {
	if v != nil {
		return v.PartnerManagedResource
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetSSHPublicKey() (rv string) {
	if v != nil && v.SSHPublicKey != nil {
		return *v.SSHPublicKey
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetVirtualApplianceAsn() (rv int64) {
	if v != nil && v.VirtualApplianceAsn != nil {
		return *v.VirtualApplianceAsn
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetVirtualHub() (rv *SubResource) {
	if v != nil {
		return v.VirtualHub
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetAddressPrefix() (rv string) {
	if v != nil && v.AddressPrefix != nil {
		return *v.AddressPrefix
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetDeploymentType() (rv string) {
	if v != nil && v.DeploymentType != nil {
		return *v.DeploymentType
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetInboundSecurityRules() (rv []*SubResource) {
	if v != nil {
		return v.InboundSecurityRules
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetVirtualApplianceNics() (rv []*VirtualApplianceNicProperties) {
	if v != nil {
		return v.VirtualApplianceNics
	}
	return
}

func (v *VirtualAppliancePropertiesFormat) GetVirtualApplianceSites() (rv []*SubResource) {
	if v != nil {
		return v.VirtualApplianceSites
	}
	return
}

// VirtualApplianceSKU - Definition of the NetworkVirtualApplianceSkus resource.
type VirtualApplianceSKU struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// NetworkVirtualApplianceSku properties.
	Properties *VirtualApplianceSKUPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VirtualApplianceSKU) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualApplianceSKU) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualApplianceSKU) GetProperties() (rv *VirtualApplianceSKUPropertiesFormat) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualApplianceSKU) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualApplianceSKU) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VirtualApplianceSKU) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualApplianceSKU) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualApplianceSKUInstances - List of available Sku and instances.
type VirtualApplianceSKUInstances struct {
	// READ-ONLY; Instance Count.
	InstanceCount *int32

	// READ-ONLY; Scale Unit.
	ScaleUnit *string
}

func (v *VirtualApplianceSKUInstances) GetInstanceCount() (rv int32) {
	if v != nil && v.InstanceCount != nil {
		return *v.InstanceCount
	}
	return
}

func (v *VirtualApplianceSKUInstances) GetScaleUnit() (rv string) {
	if v != nil && v.ScaleUnit != nil {
		return *v.ScaleUnit
	}
	return
}

// VirtualApplianceSKUListResult - Response for ListNetworkVirtualApplianceSkus API service call.
type VirtualApplianceSKUListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of Network Virtual Appliance Skus that are available.
	Value []*VirtualApplianceSKU
}

func (v *VirtualApplianceSKUListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

func (v *VirtualApplianceSKUListResult) GetValue() (rv []*VirtualApplianceSKU) {
	if v != nil {
		return v.Value
	}
	return
}

// VirtualApplianceSKUProperties - Network Virtual Appliance Sku Properties.
type VirtualApplianceSKUProperties struct {
	// Virtual Appliance Scale Unit.
	BundledScaleUnit *string

	// Virtual Appliance Version.
	MarketPlaceVersion *string

	// Virtual Appliance Vendor.
	Vendor *string
}

func (v *VirtualApplianceSKUProperties) GetBundledScaleUnit() (rv string) {
	if v != nil && v.BundledScaleUnit != nil {
		return *v.BundledScaleUnit
	}
	return
}

func (v *VirtualApplianceSKUProperties) GetMarketPlaceVersion() (rv string) {
	if v != nil && v.MarketPlaceVersion != nil {
		return *v.MarketPlaceVersion
	}
	return
}

func (v *VirtualApplianceSKUProperties) GetVendor() (rv string) {
	if v != nil && v.Vendor != nil {
		return *v.Vendor
	}
	return
}

// VirtualApplianceSKUPropertiesFormat - Properties specific to NetworkVirtualApplianceSkus.
type VirtualApplianceSKUPropertiesFormat struct {
	// The list of scale units available.
	AvailableScaleUnits []*VirtualApplianceSKUInstances

	// READ-ONLY; Available Network Virtual Appliance versions.
	AvailableVersions []*string

	// READ-ONLY; Network Virtual Appliance Sku vendor.
	Vendor *string
}

func (v *VirtualApplianceSKUPropertiesFormat) GetAvailableScaleUnits() (rv []*VirtualApplianceSKUInstances) {
	if v != nil {
		return v.AvailableScaleUnits
	}
	return
}

func (v *VirtualApplianceSKUPropertiesFormat) GetAvailableVersions() (rv []*string) {
	if v != nil {
		return v.AvailableVersions
	}
	return
}

func (v *VirtualApplianceSKUPropertiesFormat) GetVendor() (rv string) {
	if v != nil && v.Vendor != nil {
		return *v.Vendor
	}
	return
}

// VirtualApplianceSite - Virtual Appliance Site resource.
type VirtualApplianceSite struct {
	// Resource ID.
	ID *string

	// Name of the virtual appliance site.
	Name *string

	// The properties of the Virtual Appliance Sites.
	Properties *VirtualApplianceSiteProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Site type.
	Type *string
}

func (v *VirtualApplianceSite) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualApplianceSite) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualApplianceSite) GetProperties() (rv *VirtualApplianceSiteProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualApplianceSite) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VirtualApplianceSite) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualApplianceSiteListResult - Response for ListNetworkVirtualApplianceSites API service call.
type VirtualApplianceSiteListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of Network Virtual Appliance sites.
	Value []*VirtualApplianceSite
}

func (v *VirtualApplianceSiteListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

func (v *VirtualApplianceSiteListResult) GetValue() (rv []*VirtualApplianceSite) {
	if v != nil {
		return v.Value
	}
	return
}

// VirtualApplianceSiteProperties - Properties of the rule group.
type VirtualApplianceSiteProperties struct {
	// Address Prefix.
	AddressPrefix *string

	// Office 365 Policy.
	O365Policy *Office365PolicyProperties

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

func (v *VirtualApplianceSiteProperties) GetAddressPrefix() (rv string) {
	if v != nil && v.AddressPrefix != nil {
		return *v.AddressPrefix
	}
	return
}

func (v *VirtualApplianceSiteProperties) GetO365Policy() (rv *Office365PolicyProperties) {
	if v != nil {
		return v.O365Policy
	}
	return
}

func (v *VirtualApplianceSiteProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VirtualHub Resource.
type VirtualHub struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the virtual hub.
	Properties *VirtualHubProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Kind of service virtual hub. This is metadata used for the Azure portal experience for Route Server.
	Kind *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VirtualHub) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualHub) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualHub) GetProperties() (rv *VirtualHubProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualHub) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualHub) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VirtualHub) GetKind() (rv string) {
	if v != nil && v.Kind != nil {
		return *v.Kind
	}
	return
}

func (v *VirtualHub) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualHub) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualHubID - Virtual Hub identifier.
type VirtualHubID struct {
	// The resource URI for the Virtual Hub where the ExpressRoute gateway is or will be deployed. The Virtual Hub resource and
	// the ExpressRoute gateway resource reside in the same subscription.
	ID *string
}

func (v *VirtualHubID) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

// VirtualHubProperties - Parameters for VirtualHub.
type VirtualHubProperties struct {
	// Address-prefix for this VirtualHub.
	AddressPrefix *string

	// Flag to control transit for VirtualRouter hub.
	AllowBranchToBranchTraffic *bool

	// The azureFirewall associated with this VirtualHub.
	AzureFirewall *SubResource

	// The expressRouteGateway associated with this VirtualHub.
	ExpressRouteGateway *SubResource

	// The hubRoutingPreference of this VirtualHub.
	HubRoutingPreference *HubRoutingPreference

	// The P2SVpnGateway associated with this VirtualHub.
	P2SVPNGateway *SubResource

	// The preferred gateway to route on-prem traffic
	PreferredRoutingGateway *PreferredRoutingGateway

	// The routeTable associated with this virtual hub.
	RouteTable *VirtualHubRouteTable

	// The sku of this VirtualHub.
	SKU *string

	// The securityPartnerProvider associated with this VirtualHub.
	SecurityPartnerProvider *SubResource

	// The Security Provider name.
	SecurityProviderName *string

	// The VpnGateway associated with this VirtualHub.
	VPNGateway *SubResource

	// List of all virtual hub route table v2s associated with this VirtualHub.
	VirtualHubRouteTableV2S []*VirtualHubRouteTableV2

	// VirtualRouter ASN.
	VirtualRouterAsn *int64

	// The VirtualHub Router autoscale configuration.
	VirtualRouterAutoScaleConfiguration *VirtualRouterAutoScaleConfiguration

	// VirtualRouter IPs.
	VirtualRouterIPs []*string

	// The VirtualWAN to which the VirtualHub belongs.
	VirtualWan *SubResource

	// READ-ONLY; List of references to Bgp Connections.
	BgpConnections []*SubResource

	// READ-ONLY; List of references to IpConfigurations.
	IPConfigurations []*SubResource

	// READ-ONLY; The provisioning state of the virtual hub resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; List of references to RouteMaps.
	RouteMaps []*SubResource

	// READ-ONLY; The routing state.
	RoutingState *RoutingState
}

func (v *VirtualHubProperties) GetAddressPrefix() (rv string) {
	if v != nil && v.AddressPrefix != nil {
		return *v.AddressPrefix
	}
	return
}

func (v *VirtualHubProperties) GetAllowBranchToBranchTraffic() (rv bool) {
	if v != nil && v.AllowBranchToBranchTraffic != nil {
		return *v.AllowBranchToBranchTraffic
	}
	return
}

func (v *VirtualHubProperties) GetAzureFirewall() (rv *SubResource) {
	if v != nil {
		return v.AzureFirewall
	}
	return
}

func (v *VirtualHubProperties) GetExpressRouteGateway() (rv *SubResource) {
	if v != nil {
		return v.ExpressRouteGateway
	}
	return
}

func (v *VirtualHubProperties) GetHubRoutingPreference() (rv *HubRoutingPreference) {
	if v != nil {
		return v.HubRoutingPreference
	}
	return
}

func (v *VirtualHubProperties) GetP2SVPNGateway() (rv *SubResource) {
	if v != nil {
		return v.P2SVPNGateway
	}
	return
}

func (v *VirtualHubProperties) GetPreferredRoutingGateway() (rv *PreferredRoutingGateway) {
	if v != nil {
		return v.PreferredRoutingGateway
	}
	return
}

func (v *VirtualHubProperties) GetRouteTable() (rv *VirtualHubRouteTable) {
	if v != nil {
		return v.RouteTable
	}
	return
}

func (v *VirtualHubProperties) GetSKU() (rv string) {
	if v != nil && v.SKU != nil {
		return *v.SKU
	}
	return
}

func (v *VirtualHubProperties) GetSecurityPartnerProvider() (rv *SubResource) {
	if v != nil {
		return v.SecurityPartnerProvider
	}
	return
}

func (v *VirtualHubProperties) GetSecurityProviderName() (rv string) {
	if v != nil && v.SecurityProviderName != nil {
		return *v.SecurityProviderName
	}
	return
}

func (v *VirtualHubProperties) GetVPNGateway() (rv *SubResource) {
	if v != nil {
		return v.VPNGateway
	}
	return
}

func (v *VirtualHubProperties) GetVirtualHubRouteTableV2S() (rv []*VirtualHubRouteTableV2) {
	if v != nil {
		return v.VirtualHubRouteTableV2S
	}
	return
}

func (v *VirtualHubProperties) GetVirtualRouterAsn() (rv int64) {
	if v != nil && v.VirtualRouterAsn != nil {
		return *v.VirtualRouterAsn
	}
	return
}

func (v *VirtualHubProperties) GetVirtualRouterAutoScaleConfiguration() (rv *VirtualRouterAutoScaleConfiguration) {
	if v != nil {
		return v.VirtualRouterAutoScaleConfiguration
	}
	return
}

func (v *VirtualHubProperties) GetVirtualRouterIPs() (rv []*string) {
	if v != nil {
		return v.VirtualRouterIPs
	}
	return
}

func (v *VirtualHubProperties) GetVirtualWan() (rv *SubResource) {
	if v != nil {
		return v.VirtualWan
	}
	return
}

func (v *VirtualHubProperties) GetBgpConnections() (rv []*SubResource) {
	if v != nil {
		return v.BgpConnections
	}
	return
}

func (v *VirtualHubProperties) GetIPConfigurations() (rv []*SubResource) {
	if v != nil {
		return v.IPConfigurations
	}
	return
}

func (v *VirtualHubProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

func (v *VirtualHubProperties) GetRouteMaps() (rv []*SubResource) {
	if v != nil {
		return v.RouteMaps
	}
	return
}

func (v *VirtualHubProperties) GetRoutingState() (rv *RoutingState) {
	if v != nil {
		return v.RoutingState
	}
	return
}

// VirtualHubRoute - VirtualHub route.
type VirtualHubRoute struct {
	// List of all addressPrefixes.
	AddressPrefixes []*string

	// NextHop ip address.
	NextHopIPAddress *string
}

func (v *VirtualHubRoute) GetAddressPrefixes() (rv []*string) {
	if v != nil {
		return v.AddressPrefixes
	}
	return
}

func (v *VirtualHubRoute) GetNextHopIPAddress() (rv string) {
	if v != nil && v.NextHopIPAddress != nil {
		return *v.NextHopIPAddress
	}
	return
}

// VirtualHubRouteTable - VirtualHub route table.
type VirtualHubRouteTable struct {
	// List of all routes.
	Routes []*VirtualHubRoute
}

func (v *VirtualHubRouteTable) GetRoutes() (rv []*VirtualHubRoute) {
	if v != nil {
		return v.Routes
	}
	return
}

// VirtualHubRouteTableV2 Resource.
type VirtualHubRouteTableV2 struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the virtual hub route table v2.
	Properties *VirtualHubRouteTableV2Properties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (v *VirtualHubRouteTableV2) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualHubRouteTableV2) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualHubRouteTableV2) GetProperties() (rv *VirtualHubRouteTableV2Properties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualHubRouteTableV2) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

// VirtualHubRouteTableV2Properties - Parameters for VirtualHubRouteTableV2.
type VirtualHubRouteTableV2Properties struct {
	// List of all connections attached to this route table v2.
	AttachedConnections []*string

	// List of all routes.
	Routes []*VirtualHubRouteV2

	// READ-ONLY; The provisioning state of the virtual hub route table v2 resource.
	ProvisioningState *ProvisioningState
}

func (v *VirtualHubRouteTableV2Properties) GetAttachedConnections() (rv []*string) {
	if v != nil {
		return v.AttachedConnections
	}
	return
}

func (v *VirtualHubRouteTableV2Properties) GetRoutes() (rv []*VirtualHubRouteV2) {
	if v != nil {
		return v.Routes
	}
	return
}

func (v *VirtualHubRouteTableV2Properties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VirtualHubRouteV2 - VirtualHubRouteTableV2 route.
type VirtualHubRouteV2 struct {
	// The type of destinations.
	DestinationType *string

	// List of all destinations.
	Destinations []*string

	// The type of next hops.
	NextHopType *string

	// NextHops ip address.
	NextHops []*string
}

func (v *VirtualHubRouteV2) GetDestinationType() (rv string) {
	if v != nil && v.DestinationType != nil {
		return *v.DestinationType
	}
	return
}

func (v *VirtualHubRouteV2) GetDestinations() (rv []*string) {
	if v != nil {
		return v.Destinations
	}
	return
}

func (v *VirtualHubRouteV2) GetNextHopType() (rv string) {
	if v != nil && v.NextHopType != nil {
		return *v.NextHopType
	}
	return
}

func (v *VirtualHubRouteV2) GetNextHops() (rv []*string) {
	if v != nil {
		return v.NextHops
	}
	return
}

// VirtualNetwork - Virtual Network resource.
type VirtualNetwork struct {
	// The extended location of the virtual network.
	ExtendedLocation *ExtendedLocation

	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the virtual network.
	Properties *VirtualNetworkPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VirtualNetwork) GetExtendedLocation() (rv *ExtendedLocation) {
	if v != nil {
		return v.ExtendedLocation
	}
	return
}

func (v *VirtualNetwork) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualNetwork) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualNetwork) GetProperties() (rv *VirtualNetworkPropertiesFormat) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualNetwork) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualNetwork) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VirtualNetwork) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualNetwork) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualNetworkBgpCommunities - Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this
// VNET.
type VirtualNetworkBgpCommunities struct {
	// REQUIRED; The BGP community associated with the virtual network.
	VirtualNetworkCommunity *string

	// READ-ONLY; The BGP community associated with the region of the virtual network.
	RegionalCommunity *string
}

func (v *VirtualNetworkBgpCommunities) GetVirtualNetworkCommunity() (rv string) {
	if v != nil && v.VirtualNetworkCommunity != nil {
		return *v.VirtualNetworkCommunity
	}
	return
}

func (v *VirtualNetworkBgpCommunities) GetRegionalCommunity() (rv string) {
	if v != nil && v.RegionalCommunity != nil {
		return *v.RegionalCommunity
	}
	return
}

// VirtualNetworkConnectionGatewayReference - A reference to VirtualNetworkGateway or LocalNetworkGateway resource.
type VirtualNetworkConnectionGatewayReference struct {
	// REQUIRED; The ID of VirtualNetworkGateway or LocalNetworkGateway resource.
	ID *string
}

func (v *VirtualNetworkConnectionGatewayReference) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

// VirtualNetworkDdosProtectionStatusResult - Response for GetVirtualNetworkDdosProtectionStatusOperation.
type VirtualNetworkDdosProtectionStatusResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// The Ddos Protection Status Result for each public ip under a virtual network.
	Value []*PublicIPDdosProtectionStatusResult
}

func (v *VirtualNetworkDdosProtectionStatusResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

func (v *VirtualNetworkDdosProtectionStatusResult) GetValue() (rv []*PublicIPDdosProtectionStatusResult) {
	if v != nil {
		return v.Value
	}
	return
}

// VirtualNetworkEncryption - Indicates if encryption is enabled on virtual network and if VM without encryption is allowed
// in encrypted VNet.
type VirtualNetworkEncryption struct {
	// REQUIRED; Indicates if encryption is enabled on the virtual network.
	Enabled *bool

	// If the encrypted VNet allows VM that does not support encryption
	Enforcement *VirtualNetworkEncryptionEnforcement
}

func (v *VirtualNetworkEncryption) GetEnabled() (rv bool) {
	if v != nil && v.Enabled != nil {
		return *v.Enabled
	}
	return
}

func (v *VirtualNetworkEncryption) GetEnforcement() (rv *VirtualNetworkEncryptionEnforcement) {
	if v != nil {
		return v.Enforcement
	}
	return
}

// VirtualNetworkGateway - A common class for general resource information.
type VirtualNetworkGateway struct {
	// REQUIRED; Properties of the virtual network gateway.
	Properties *VirtualNetworkGatewayPropertiesFormat

	// The extended location of type local virtual network gateway.
	ExtendedLocation *ExtendedLocation

	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VirtualNetworkGateway) GetProperties() (rv *VirtualNetworkGatewayPropertiesFormat) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualNetworkGateway) GetExtendedLocation() (rv *ExtendedLocation) {
	if v != nil {
		return v.ExtendedLocation
	}
	return
}

func (v *VirtualNetworkGateway) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualNetworkGateway) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualNetworkGateway) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualNetworkGateway) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VirtualNetworkGateway) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualNetworkGateway) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualNetworkGatewayConnection - A common class for general resource information.
type VirtualNetworkGatewayConnection struct {
	// REQUIRED; Properties of the virtual network gateway connection.
	Properties *VirtualNetworkGatewayConnectionPropertiesFormat

	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VirtualNetworkGatewayConnection) GetProperties() (rv *VirtualNetworkGatewayConnectionPropertiesFormat) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualNetworkGatewayConnection) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualNetworkGatewayConnection) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualNetworkGatewayConnection) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualNetworkGatewayConnection) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VirtualNetworkGatewayConnection) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualNetworkGatewayConnection) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualNetworkGatewayConnectionListEntity - A common class for general resource information.
type VirtualNetworkGatewayConnectionListEntity struct {
	// REQUIRED; Properties of the virtual network gateway connection.
	Properties *VirtualNetworkGatewayConnectionListEntityPropertiesFormat

	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VirtualNetworkGatewayConnectionListEntity) GetProperties() (rv *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntity) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntity) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntity) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntity) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntity) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntity) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualNetworkGatewayConnectionListEntityPropertiesFormat - VirtualNetworkGatewayConnection properties.
type VirtualNetworkGatewayConnectionListEntityPropertiesFormat struct {
	// REQUIRED; Gateway connection type.
	ConnectionType *VirtualNetworkGatewayConnectionType

	// REQUIRED; The reference to virtual network gateway resource.
	VirtualNetworkGateway1 *VirtualNetworkConnectionGatewayReference

	// The authorizationKey.
	AuthorizationKey *string

	// The connection mode for this connection.
	ConnectionMode *VirtualNetworkGatewayConnectionMode

	// Connection protocol used for this connection.
	ConnectionProtocol *VirtualNetworkGatewayConnectionProtocol

	// EnableBgp flag.
	EnableBgp *bool

	// Bypass the ExpressRoute gateway when accessing private-links. ExpressRoute FastPath (expressRouteGatewayBypass) must be
	// enabled.
	EnablePrivateLinkFastPath *bool

	// Bypass ExpressRoute Gateway for data forwarding.
	ExpressRouteGatewayBypass *bool

	// GatewayCustomBgpIpAddresses to be used for virtual network gateway Connection.
	GatewayCustomBgpIPAddresses []*GatewayCustomBgpIPAddressIPConfiguration

	// The IPSec Policies to be considered by this connection.
	IPSecPolicies []*IPSecPolicy

	// The reference to local network gateway resource.
	LocalNetworkGateway2 *VirtualNetworkConnectionGatewayReference

	// The reference to peerings resource.
	Peer *SubResource

	// The routing weight.
	RoutingWeight *int32

	// The IPSec shared key.
	SharedKey *string

	// The Traffic Selector Policies to be considered by this connection.
	TrafficSelectorPolicies []*TrafficSelectorPolicy

	// Enable policy-based traffic selectors.
	UsePolicyBasedTrafficSelectors *bool

	// The reference to virtual network gateway resource.
	VirtualNetworkGateway2 *VirtualNetworkConnectionGatewayReference

	// READ-ONLY; Virtual Network Gateway connection status.
	ConnectionStatus *VirtualNetworkGatewayConnectionStatus

	// READ-ONLY; The egress bytes transferred in this connection.
	EgressBytesTransferred *int64

	// READ-ONLY; The ingress bytes transferred in this connection.
	IngressBytesTransferred *int64

	// READ-ONLY; The provisioning state of the virtual network gateway connection resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the virtual network gateway connection resource.
	ResourceGUID *string

	// READ-ONLY; Collection of all tunnels' connection health status.
	TunnelConnectionStatus []*TunnelConnectionHealth
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetConnectionType() (rv *VirtualNetworkGatewayConnectionType) {
	if v != nil {
		return v.ConnectionType
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetVirtualNetworkGateway1() (rv *VirtualNetworkConnectionGatewayReference) {
	if v != nil {
		return v.VirtualNetworkGateway1
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetAuthorizationKey() (rv string) {
	if v != nil && v.AuthorizationKey != nil {
		return *v.AuthorizationKey
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetConnectionMode() (rv *VirtualNetworkGatewayConnectionMode) {
	if v != nil {
		return v.ConnectionMode
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetConnectionProtocol() (rv *VirtualNetworkGatewayConnectionProtocol) {
	if v != nil {
		return v.ConnectionProtocol
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetEnableBgp() (rv bool) {
	if v != nil && v.EnableBgp != nil {
		return *v.EnableBgp
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetEnablePrivateLinkFastPath() (rv bool) {
	if v != nil && v.EnablePrivateLinkFastPath != nil {
		return *v.EnablePrivateLinkFastPath
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetExpressRouteGatewayBypass() (rv bool) {
	if v != nil && v.ExpressRouteGatewayBypass != nil {
		return *v.ExpressRouteGatewayBypass
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetGatewayCustomBgpIPAddresses() (rv []*GatewayCustomBgpIPAddressIPConfiguration) {
	if v != nil {
		return v.GatewayCustomBgpIPAddresses
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetIPSecPolicies() (rv []*IPSecPolicy) {
	if v != nil {
		return v.IPSecPolicies
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetLocalNetworkGateway2() (rv *VirtualNetworkConnectionGatewayReference) {
	if v != nil {
		return v.LocalNetworkGateway2
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetPeer() (rv *SubResource) {
	if v != nil {
		return v.Peer
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetRoutingWeight() (rv int32) {
	if v != nil && v.RoutingWeight != nil {
		return *v.RoutingWeight
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetSharedKey() (rv string) {
	if v != nil && v.SharedKey != nil {
		return *v.SharedKey
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetTrafficSelectorPolicies() (rv []*TrafficSelectorPolicy) {
	if v != nil {
		return v.TrafficSelectorPolicies
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetUsePolicyBasedTrafficSelectors() (rv bool) {
	if v != nil && v.UsePolicyBasedTrafficSelectors != nil {
		return *v.UsePolicyBasedTrafficSelectors
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetVirtualNetworkGateway2() (rv *VirtualNetworkConnectionGatewayReference) {
	if v != nil {
		return v.VirtualNetworkGateway2
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetConnectionStatus() (rv *VirtualNetworkGatewayConnectionStatus) {
	if v != nil {
		return v.ConnectionStatus
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetEgressBytesTransferred() (rv int64) {
	if v != nil && v.EgressBytesTransferred != nil {
		return *v.EgressBytesTransferred
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetIngressBytesTransferred() (rv int64) {
	if v != nil && v.IngressBytesTransferred != nil {
		return *v.IngressBytesTransferred
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetResourceGUID() (rv string) {
	if v != nil && v.ResourceGUID != nil {
		return *v.ResourceGUID
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListEntityPropertiesFormat) GetTunnelConnectionStatus() (rv []*TunnelConnectionHealth) {
	if v != nil {
		return v.TunnelConnectionStatus
	}
	return
}

// VirtualNetworkGatewayConnectionListResult - Response for the ListVirtualNetworkGatewayConnections API service call.
type VirtualNetworkGatewayConnectionListResult struct {
	// A list of VirtualNetworkGatewayConnection resources that exists in a resource group.
	Value []*VirtualNetworkGatewayConnection

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (v *VirtualNetworkGatewayConnectionListResult) GetValue() (rv []*VirtualNetworkGatewayConnection) {
	if v != nil {
		return v.Value
	}
	return
}

func (v *VirtualNetworkGatewayConnectionListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

// VirtualNetworkGatewayConnectionPropertiesFormat - VirtualNetworkGatewayConnection properties.
type VirtualNetworkGatewayConnectionPropertiesFormat struct {
	// REQUIRED; Gateway connection type.
	ConnectionType *VirtualNetworkGatewayConnectionType

	// REQUIRED; The reference to virtual network gateway resource.
	VirtualNetworkGateway1 *VirtualNetworkGateway

	// The authorizationKey.
	AuthorizationKey *string

	// The connection mode for this connection.
	ConnectionMode *VirtualNetworkGatewayConnectionMode

	// Connection protocol used for this connection.
	ConnectionProtocol *VirtualNetworkGatewayConnectionProtocol

	// The dead peer detection timeout of this connection in seconds.
	DpdTimeoutSeconds *int32

	// List of egress NatRules.
	EgressNatRules []*SubResource

	// EnableBgp flag.
	EnableBgp *bool

	// Bypass the ExpressRoute gateway when accessing private-links. ExpressRoute FastPath (expressRouteGatewayBypass) must be
	// enabled.
	EnablePrivateLinkFastPath *bool

	// Bypass ExpressRoute Gateway for data forwarding.
	ExpressRouteGatewayBypass *bool

	// GatewayCustomBgpIpAddresses to be used for virtual network gateway Connection.
	GatewayCustomBgpIPAddresses []*GatewayCustomBgpIPAddressIPConfiguration

	// The IPSec Policies to be considered by this connection.
	IPSecPolicies []*IPSecPolicy

	// List of ingress NatRules.
	IngressNatRules []*SubResource

	// The reference to local network gateway resource.
	LocalNetworkGateway2 *LocalNetworkGateway

	// The reference to peerings resource.
	Peer *SubResource

	// The routing weight.
	RoutingWeight *int32

	// The IPSec shared key.
	SharedKey *string

	// The Traffic Selector Policies to be considered by this connection.
	TrafficSelectorPolicies []*TrafficSelectorPolicy

	// Use private local Azure IP for the connection.
	UseLocalAzureIPAddress *bool

	// Enable policy-based traffic selectors.
	UsePolicyBasedTrafficSelectors *bool

	// The reference to virtual network gateway resource.
	VirtualNetworkGateway2 *VirtualNetworkGateway

	// READ-ONLY; Virtual Network Gateway connection status.
	ConnectionStatus *VirtualNetworkGatewayConnectionStatus

	// READ-ONLY; The egress bytes transferred in this connection.
	EgressBytesTransferred *int64

	// READ-ONLY; The ingress bytes transferred in this connection.
	IngressBytesTransferred *int64

	// READ-ONLY; The provisioning state of the virtual network gateway connection resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the virtual network gateway connection resource.
	ResourceGUID *string

	// READ-ONLY; Collection of all tunnels' connection health status.
	TunnelConnectionStatus []*TunnelConnectionHealth
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetConnectionType() (rv *VirtualNetworkGatewayConnectionType) {
	if v != nil {
		return v.ConnectionType
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetVirtualNetworkGateway1() (rv *VirtualNetworkGateway) {
	if v != nil {
		return v.VirtualNetworkGateway1
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetAuthorizationKey() (rv string) {
	if v != nil && v.AuthorizationKey != nil {
		return *v.AuthorizationKey
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetConnectionMode() (rv *VirtualNetworkGatewayConnectionMode) {
	if v != nil {
		return v.ConnectionMode
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetConnectionProtocol() (rv *VirtualNetworkGatewayConnectionProtocol) {
	if v != nil {
		return v.ConnectionProtocol
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetDpdTimeoutSeconds() (rv int32) {
	if v != nil && v.DpdTimeoutSeconds != nil {
		return *v.DpdTimeoutSeconds
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetEgressNatRules() (rv []*SubResource) {
	if v != nil {
		return v.EgressNatRules
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetEnableBgp() (rv bool) {
	if v != nil && v.EnableBgp != nil {
		return *v.EnableBgp
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetEnablePrivateLinkFastPath() (rv bool) {
	if v != nil && v.EnablePrivateLinkFastPath != nil {
		return *v.EnablePrivateLinkFastPath
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetExpressRouteGatewayBypass() (rv bool) {
	if v != nil && v.ExpressRouteGatewayBypass != nil {
		return *v.ExpressRouteGatewayBypass
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetGatewayCustomBgpIPAddresses() (rv []*GatewayCustomBgpIPAddressIPConfiguration) {
	if v != nil {
		return v.GatewayCustomBgpIPAddresses
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetIPSecPolicies() (rv []*IPSecPolicy) {
	if v != nil {
		return v.IPSecPolicies
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetIngressNatRules() (rv []*SubResource) {
	if v != nil {
		return v.IngressNatRules
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetLocalNetworkGateway2() (rv *LocalNetworkGateway) {
	if v != nil {
		return v.LocalNetworkGateway2
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetPeer() (rv *SubResource) {
	if v != nil {
		return v.Peer
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetRoutingWeight() (rv int32) {
	if v != nil && v.RoutingWeight != nil {
		return *v.RoutingWeight
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetSharedKey() (rv string) {
	if v != nil && v.SharedKey != nil {
		return *v.SharedKey
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetTrafficSelectorPolicies() (rv []*TrafficSelectorPolicy) {
	if v != nil {
		return v.TrafficSelectorPolicies
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetUseLocalAzureIPAddress() (rv bool) {
	if v != nil && v.UseLocalAzureIPAddress != nil {
		return *v.UseLocalAzureIPAddress
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetUsePolicyBasedTrafficSelectors() (rv bool) {
	if v != nil && v.UsePolicyBasedTrafficSelectors != nil {
		return *v.UsePolicyBasedTrafficSelectors
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetVirtualNetworkGateway2() (rv *VirtualNetworkGateway) {
	if v != nil {
		return v.VirtualNetworkGateway2
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetConnectionStatus() (rv *VirtualNetworkGatewayConnectionStatus) {
	if v != nil {
		return v.ConnectionStatus
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetEgressBytesTransferred() (rv int64) {
	if v != nil && v.EgressBytesTransferred != nil {
		return *v.EgressBytesTransferred
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetIngressBytesTransferred() (rv int64) {
	if v != nil && v.IngressBytesTransferred != nil {
		return *v.IngressBytesTransferred
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetResourceGUID() (rv string) {
	if v != nil && v.ResourceGUID != nil {
		return *v.ResourceGUID
	}
	return
}

func (v *VirtualNetworkGatewayConnectionPropertiesFormat) GetTunnelConnectionStatus() (rv []*TunnelConnectionHealth) {
	if v != nil {
		return v.TunnelConnectionStatus
	}
	return
}

// VirtualNetworkGatewayIPConfiguration - IP configuration for virtual network gateway.
type VirtualNetworkGatewayIPConfiguration struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the virtual network gateway ip configuration.
	Properties *VirtualNetworkGatewayIPConfigurationPropertiesFormat

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (v *VirtualNetworkGatewayIPConfiguration) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualNetworkGatewayIPConfiguration) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualNetworkGatewayIPConfiguration) GetProperties() (rv *VirtualNetworkGatewayIPConfigurationPropertiesFormat) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualNetworkGatewayIPConfiguration) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

// VirtualNetworkGatewayIPConfigurationPropertiesFormat - Properties of VirtualNetworkGatewayIPConfiguration.
type VirtualNetworkGatewayIPConfigurationPropertiesFormat struct {
	// The private IP address allocation method.
	PrivateIPAllocationMethod *IPAllocationMethod

	// The reference to the public IP resource.
	PublicIPAddress *SubResource

	// The reference to the subnet resource.
	Subnet *SubResource

	// READ-ONLY; Private IP Address for this gateway.
	PrivateIPAddress *string

	// READ-ONLY; The provisioning state of the virtual network gateway IP configuration resource.
	ProvisioningState *ProvisioningState
}

func (v *VirtualNetworkGatewayIPConfigurationPropertiesFormat) GetPrivateIPAllocationMethod() (rv *IPAllocationMethod) {
	if v != nil {
		return v.PrivateIPAllocationMethod
	}
	return
}

func (v *VirtualNetworkGatewayIPConfigurationPropertiesFormat) GetPublicIPAddress() (rv *SubResource) {
	if v != nil {
		return v.PublicIPAddress
	}
	return
}

func (v *VirtualNetworkGatewayIPConfigurationPropertiesFormat) GetSubnet() (rv *SubResource) {
	if v != nil {
		return v.Subnet
	}
	return
}

func (v *VirtualNetworkGatewayIPConfigurationPropertiesFormat) GetPrivateIPAddress() (rv string) {
	if v != nil && v.PrivateIPAddress != nil {
		return *v.PrivateIPAddress
	}
	return
}

func (v *VirtualNetworkGatewayIPConfigurationPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VirtualNetworkGatewayListConnectionsResult - Response for the VirtualNetworkGatewayListConnections API service call.
type VirtualNetworkGatewayListConnectionsResult struct {
	// A list of VirtualNetworkGatewayConnection resources that exists in a resource group.
	Value []*VirtualNetworkGatewayConnectionListEntity

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (v *VirtualNetworkGatewayListConnectionsResult) GetValue() (rv []*VirtualNetworkGatewayConnectionListEntity) {
	if v != nil {
		return v.Value
	}
	return
}

func (v *VirtualNetworkGatewayListConnectionsResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

// VirtualNetworkGatewayListResult - Response for the ListVirtualNetworkGateways API service call.
type VirtualNetworkGatewayListResult struct {
	// A list of VirtualNetworkGateway resources that exists in a resource group.
	Value []*VirtualNetworkGateway

	// READ-ONLY; The URL to get the next set of results.
	NextLink *string
}

func (v *VirtualNetworkGatewayListResult) GetValue() (rv []*VirtualNetworkGateway) {
	if v != nil {
		return v.Value
	}
	return
}

func (v *VirtualNetworkGatewayListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

// VirtualNetworkGatewayNatRule Resource.
type VirtualNetworkGatewayNatRule struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the Virtual Network Gateway NAT rule.
	Properties *VirtualNetworkGatewayNatRuleProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VirtualNetworkGatewayNatRule) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualNetworkGatewayNatRule) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualNetworkGatewayNatRule) GetProperties() (rv *VirtualNetworkGatewayNatRuleProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualNetworkGatewayNatRule) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VirtualNetworkGatewayNatRule) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualNetworkGatewayNatRuleProperties - Parameters for VirtualNetworkGatewayNatRule.
type VirtualNetworkGatewayNatRuleProperties struct {
	// The private IP address external mapping for NAT.
	ExternalMappings []*VPNNatRuleMapping

	// The IP Configuration ID this NAT rule applies to.
	IPConfigurationID *string

	// The private IP address internal mapping for NAT.
	InternalMappings []*VPNNatRuleMapping

	// The Source NAT direction of a VPN NAT.
	Mode *VPNNatRuleMode

	// The type of NAT rule for VPN NAT.
	Type *VPNNatRuleType

	// READ-ONLY; The provisioning state of the NAT Rule resource.
	ProvisioningState *ProvisioningState
}

func (v *VirtualNetworkGatewayNatRuleProperties) GetExternalMappings() (rv []*VPNNatRuleMapping) {
	if v != nil {
		return v.ExternalMappings
	}
	return
}

func (v *VirtualNetworkGatewayNatRuleProperties) GetIPConfigurationID() (rv string) {
	if v != nil && v.IPConfigurationID != nil {
		return *v.IPConfigurationID
	}
	return
}

func (v *VirtualNetworkGatewayNatRuleProperties) GetInternalMappings() (rv []*VPNNatRuleMapping) {
	if v != nil {
		return v.InternalMappings
	}
	return
}

func (v *VirtualNetworkGatewayNatRuleProperties) GetMode() (rv *VPNNatRuleMode) {
	if v != nil {
		return v.Mode
	}
	return
}

func (v *VirtualNetworkGatewayNatRuleProperties) GetType() (rv *VPNNatRuleType) {
	if v != nil {
		return v.Type
	}
	return
}

func (v *VirtualNetworkGatewayNatRuleProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VirtualNetworkGatewayPolicyGroup - Parameters for VirtualNetworkGatewayPolicyGroup.
type VirtualNetworkGatewayPolicyGroup struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of tVirtualNetworkGatewayPolicyGroup.
	Properties *VirtualNetworkGatewayPolicyGroupProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (v *VirtualNetworkGatewayPolicyGroup) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualNetworkGatewayPolicyGroup) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualNetworkGatewayPolicyGroup) GetProperties() (rv *VirtualNetworkGatewayPolicyGroupProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualNetworkGatewayPolicyGroup) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

// VirtualNetworkGatewayPolicyGroupMember - Vpn Client Connection configuration PolicyGroup member
type VirtualNetworkGatewayPolicyGroupMember struct {
	// The Vpn Policy member attribute type.
	AttributeType *VPNPolicyMemberAttributeType

	// The value of Attribute used for this VirtualNetworkGatewayPolicyGroupMember.
	AttributeValue *string

	// Name of the VirtualNetworkGatewayPolicyGroupMember.
	Name *string
}

func (v *VirtualNetworkGatewayPolicyGroupMember) GetAttributeType() (rv *VPNPolicyMemberAttributeType) {
	if v != nil {
		return v.AttributeType
	}
	return
}

func (v *VirtualNetworkGatewayPolicyGroupMember) GetAttributeValue() (rv string) {
	if v != nil && v.AttributeValue != nil {
		return *v.AttributeValue
	}
	return
}

func (v *VirtualNetworkGatewayPolicyGroupMember) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

// VirtualNetworkGatewayPolicyGroupProperties - Properties of VirtualNetworkGatewayPolicyGroup.
type VirtualNetworkGatewayPolicyGroupProperties struct {
	// REQUIRED; Shows if this is a Default VirtualNetworkGatewayPolicyGroup or not.
	IsDefault *bool

	// REQUIRED; Multiple PolicyMembers for VirtualNetworkGatewayPolicyGroup.
	PolicyMembers []*VirtualNetworkGatewayPolicyGroupMember

	// REQUIRED; Priority for VirtualNetworkGatewayPolicyGroup.
	Priority *int32

	// READ-ONLY; The provisioning state of the VirtualNetworkGatewayPolicyGroup resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; List of references to vngClientConnectionConfigurations.
	VngClientConnectionConfigurations []*SubResource
}

func (v *VirtualNetworkGatewayPolicyGroupProperties) GetIsDefault() (rv bool) {
	if v != nil && v.IsDefault != nil {
		return *v.IsDefault
	}
	return
}

func (v *VirtualNetworkGatewayPolicyGroupProperties) GetPolicyMembers() (rv []*VirtualNetworkGatewayPolicyGroupMember) {
	if v != nil {
		return v.PolicyMembers
	}
	return
}

func (v *VirtualNetworkGatewayPolicyGroupProperties) GetPriority() (rv int32) {
	if v != nil && v.Priority != nil {
		return *v.Priority
	}
	return
}

func (v *VirtualNetworkGatewayPolicyGroupProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

func (v *VirtualNetworkGatewayPolicyGroupProperties) GetVngClientConnectionConfigurations() (rv []*SubResource) {
	if v != nil {
		return v.VngClientConnectionConfigurations
	}
	return
}

// VirtualNetworkGatewayPropertiesFormat - VirtualNetworkGateway properties.
type VirtualNetworkGatewayPropertiesFormat struct {
	// ActiveActive flag.
	Active *bool

	// Configure this gateway to accept traffic from other Azure Virtual Networks. This configuration does not support connectivity
	// to Azure Virtual WAN.
	AllowRemoteVnetTraffic *bool

	// Configures this gateway to accept traffic from remote Virtual WAN networks.
	AllowVirtualWanTraffic *bool

	// Virtual network gateway's BGP speaker settings.
	BgpSettings *BgpSettings

	// The reference to the address space resource which represents the custom routes address space specified by the customer
	// for virtual network gateway and VpnClient.
	CustomRoutes *AddressSpace

	// disableIPSecReplayProtection flag.
	DisableIPSecReplayProtection *bool

	// Whether BGP is enabled for this virtual network gateway or not.
	EnableBgp *bool

	// EnableBgpRouteTranslationForNat flag.
	EnableBgpRouteTranslationForNat *bool

	// Whether dns forwarding is enabled or not.
	EnableDNSForwarding *bool

	// Whether private IP needs to be enabled on this gateway for connections or not.
	EnablePrivateIPAddress *bool

	// The reference to the LocalNetworkGateway resource which represents local network site having default routes. Assign Null
	// value in case of removing existing default site setting.
	GatewayDefaultSite *SubResource

	// The type of this virtual network gateway.
	GatewayType *VirtualNetworkGatewayType

	// IP configurations for virtual network gateway.
	IPConfigurations []*VirtualNetworkGatewayIPConfiguration

	// NatRules for virtual network gateway.
	NatRules []*VirtualNetworkGatewayNatRule

	// The reference to the VirtualNetworkGatewaySku resource which represents the SKU selected for Virtual network gateway.
	SKU *VirtualNetworkGatewaySKU

	// Customer vnet resource id. VirtualNetworkGateway of type local gateway is associated with the customer vnet.
	VNetExtendedLocationResourceID *string

	// The reference to the VpnClientConfiguration resource which represents the P2S VpnClient configurations.
	VPNClientConfiguration *VPNClientConfiguration

	// The generation for this VirtualNetworkGateway. Must be None if gatewayType is not VPN.
	VPNGatewayGeneration *VPNGatewayGeneration

	// The type of this virtual network gateway.
	VPNType *VPNType

	// The reference to the VirtualNetworkGatewayPolicyGroup resource which represents the available VirtualNetworkGatewayPolicyGroup
	// for the gateway.
	VirtualNetworkGatewayPolicyGroups []*VirtualNetworkGatewayPolicyGroup

	// READ-ONLY; The IP address allocated by the gateway to which dns requests can be sent.
	InboundDNSForwardingEndpoint *string

	// READ-ONLY; The provisioning state of the virtual network gateway resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the virtual network gateway resource.
	ResourceGUID *string
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetActive() (rv bool) {
	if v != nil && v.Active != nil {
		return *v.Active
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetAllowRemoteVnetTraffic() (rv bool) {
	if v != nil && v.AllowRemoteVnetTraffic != nil {
		return *v.AllowRemoteVnetTraffic
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetAllowVirtualWanTraffic() (rv bool) {
	if v != nil && v.AllowVirtualWanTraffic != nil {
		return *v.AllowVirtualWanTraffic
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetBgpSettings() (rv *BgpSettings) {
	if v != nil {
		return v.BgpSettings
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetCustomRoutes() (rv *AddressSpace) {
	if v != nil {
		return v.CustomRoutes
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetDisableIPSecReplayProtection() (rv bool) {
	if v != nil && v.DisableIPSecReplayProtection != nil {
		return *v.DisableIPSecReplayProtection
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetEnableBgp() (rv bool) {
	if v != nil && v.EnableBgp != nil {
		return *v.EnableBgp
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetEnableBgpRouteTranslationForNat() (rv bool) {
	if v != nil && v.EnableBgpRouteTranslationForNat != nil {
		return *v.EnableBgpRouteTranslationForNat
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetEnableDNSForwarding() (rv bool) {
	if v != nil && v.EnableDNSForwarding != nil {
		return *v.EnableDNSForwarding
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetEnablePrivateIPAddress() (rv bool) {
	if v != nil && v.EnablePrivateIPAddress != nil {
		return *v.EnablePrivateIPAddress
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetGatewayDefaultSite() (rv *SubResource) {
	if v != nil {
		return v.GatewayDefaultSite
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetGatewayType() (rv *VirtualNetworkGatewayType) {
	if v != nil {
		return v.GatewayType
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetIPConfigurations() (rv []*VirtualNetworkGatewayIPConfiguration) {
	if v != nil {
		return v.IPConfigurations
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetNatRules() (rv []*VirtualNetworkGatewayNatRule) {
	if v != nil {
		return v.NatRules
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetSKU() (rv *VirtualNetworkGatewaySKU) {
	if v != nil {
		return v.SKU
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetVNetExtendedLocationResourceID() (rv string) {
	if v != nil && v.VNetExtendedLocationResourceID != nil {
		return *v.VNetExtendedLocationResourceID
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetVPNClientConfiguration() (rv *VPNClientConfiguration) {
	if v != nil {
		return v.VPNClientConfiguration
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetVPNGatewayGeneration() (rv *VPNGatewayGeneration) {
	if v != nil {
		return v.VPNGatewayGeneration
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetVPNType() (rv *VPNType) {
	if v != nil {
		return v.VPNType
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetVirtualNetworkGatewayPolicyGroups() (rv []*VirtualNetworkGatewayPolicyGroup) {
	if v != nil {
		return v.VirtualNetworkGatewayPolicyGroups
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetInboundDNSForwardingEndpoint() (rv string) {
	if v != nil && v.InboundDNSForwardingEndpoint != nil {
		return *v.InboundDNSForwardingEndpoint
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

func (v *VirtualNetworkGatewayPropertiesFormat) GetResourceGUID() (rv string) {
	if v != nil && v.ResourceGUID != nil {
		return *v.ResourceGUID
	}
	return
}

// VirtualNetworkGatewaySKU - VirtualNetworkGatewaySku details.
type VirtualNetworkGatewaySKU struct {
	// Gateway SKU name.
	Name *VirtualNetworkGatewaySKUName

	// Gateway SKU tier.
	Tier *VirtualNetworkGatewaySKUTier

	// READ-ONLY; The capacity.
	Capacity *int32
}

func (v *VirtualNetworkGatewaySKU) GetName() (rv *VirtualNetworkGatewaySKUName) {
	if v != nil {
		return v.Name
	}
	return
}

func (v *VirtualNetworkGatewaySKU) GetTier() (rv *VirtualNetworkGatewaySKUTier) {
	if v != nil {
		return v.Tier
	}
	return
}

func (v *VirtualNetworkGatewaySKU) GetCapacity() (rv int32) {
	if v != nil && v.Capacity != nil {
		return *v.Capacity
	}
	return
}

// VirtualNetworkListResult - Response for the ListVirtualNetworks API service call.
type VirtualNetworkListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of VirtualNetwork resources in a resource group.
	Value []*VirtualNetwork
}

func (v *VirtualNetworkListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

func (v *VirtualNetworkListResult) GetValue() (rv []*VirtualNetwork) {
	if v != nil {
		return v.Value
	}
	return
}

// VirtualNetworkListUsageResult - Response for the virtual networks GetUsage API service call.
type VirtualNetworkListUsageResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// READ-ONLY; VirtualNetwork usage stats.
	Value []*VirtualNetworkUsage
}

func (v *VirtualNetworkListUsageResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

func (v *VirtualNetworkListUsageResult) GetValue() (rv []*VirtualNetworkUsage) {
	if v != nil {
		return v.Value
	}
	return
}

// VirtualNetworkPeering - Peerings in a virtual network resource.
type VirtualNetworkPeering struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the virtual network peering.
	Properties *VirtualNetworkPeeringPropertiesFormat

	// Resource type.
	Type *string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (v *VirtualNetworkPeering) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualNetworkPeering) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualNetworkPeering) GetProperties() (rv *VirtualNetworkPeeringPropertiesFormat) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualNetworkPeering) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

func (v *VirtualNetworkPeering) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

// VirtualNetworkPeeringListResult - Response for ListSubnets API service call. Retrieves all subnets that belong to a virtual
// network.
type VirtualNetworkPeeringListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// The peerings in a virtual network.
	Value []*VirtualNetworkPeering
}

func (v *VirtualNetworkPeeringListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

func (v *VirtualNetworkPeeringListResult) GetValue() (rv []*VirtualNetworkPeering) {
	if v != nil {
		return v.Value
	}
	return
}

// VirtualNetworkPeeringPropertiesFormat - Properties of the virtual network peering.
type VirtualNetworkPeeringPropertiesFormat struct {
	// Whether the forwarded traffic from the VMs in the local virtual network will be allowed/disallowed in remote virtual network.
	AllowForwardedTraffic *bool

	// If gateway links can be used in remote virtual networking to link to this virtual network.
	AllowGatewayTransit *bool

	// Whether the VMs in the local virtual network space would be able to access the VMs in remote virtual network space.
	AllowVirtualNetworkAccess *bool

	// If we need to verify the provisioning state of the remote gateway.
	DoNotVerifyRemoteGateways *bool

	// The status of the virtual network peering.
	PeeringState *VirtualNetworkPeeringState

	// The peering sync status of the virtual network peering.
	PeeringSyncLevel *VirtualNetworkPeeringLevel

	// The reference to the address space peered with the remote virtual network.
	RemoteAddressSpace *AddressSpace

	// The reference to the remote virtual network's Bgp Communities.
	RemoteBgpCommunities *VirtualNetworkBgpCommunities

	// The reference to the remote virtual network. The remote virtual network can be in the same or different region (preview).
	// See here to register for the preview and learn more
	// (https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-create-peering).
	RemoteVirtualNetwork *SubResource

	// The reference to the current address space of the remote virtual network.
	RemoteVirtualNetworkAddressSpace *AddressSpace

	// If remote gateways can be used on this virtual network. If the flag is set to true, and allowGatewayTransit on remote peering
	// is also true, virtual network will use gateways of remote virtual network
	// for transit. Only one peering can have this flag set to true. This flag cannot be set if virtual network already has a
	// gateway.
	UseRemoteGateways *bool

	// READ-ONLY; The provisioning state of the virtual network peering resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The reference to the remote virtual network's encryption
	RemoteVirtualNetworkEncryption *VirtualNetworkEncryption

	// READ-ONLY; The resourceGuid property of the Virtual Network peering resource.
	ResourceGUID *string
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetAllowForwardedTraffic() (rv bool) {
	if v != nil && v.AllowForwardedTraffic != nil {
		return *v.AllowForwardedTraffic
	}
	return
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetAllowGatewayTransit() (rv bool) {
	if v != nil && v.AllowGatewayTransit != nil {
		return *v.AllowGatewayTransit
	}
	return
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetAllowVirtualNetworkAccess() (rv bool) {
	if v != nil && v.AllowVirtualNetworkAccess != nil {
		return *v.AllowVirtualNetworkAccess
	}
	return
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetDoNotVerifyRemoteGateways() (rv bool) {
	if v != nil && v.DoNotVerifyRemoteGateways != nil {
		return *v.DoNotVerifyRemoteGateways
	}
	return
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetPeeringState() (rv *VirtualNetworkPeeringState) {
	if v != nil {
		return v.PeeringState
	}
	return
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetPeeringSyncLevel() (rv *VirtualNetworkPeeringLevel) {
	if v != nil {
		return v.PeeringSyncLevel
	}
	return
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetRemoteAddressSpace() (rv *AddressSpace) {
	if v != nil {
		return v.RemoteAddressSpace
	}
	return
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetRemoteBgpCommunities() (rv *VirtualNetworkBgpCommunities) {
	if v != nil {
		return v.RemoteBgpCommunities
	}
	return
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetRemoteVirtualNetwork() (rv *SubResource) {
	if v != nil {
		return v.RemoteVirtualNetwork
	}
	return
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetRemoteVirtualNetworkAddressSpace() (rv *AddressSpace) {
	if v != nil {
		return v.RemoteVirtualNetworkAddressSpace
	}
	return
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetUseRemoteGateways() (rv bool) {
	if v != nil && v.UseRemoteGateways != nil {
		return *v.UseRemoteGateways
	}
	return
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetRemoteVirtualNetworkEncryption() (rv *VirtualNetworkEncryption) {
	if v != nil {
		return v.RemoteVirtualNetworkEncryption
	}
	return
}

func (v *VirtualNetworkPeeringPropertiesFormat) GetResourceGUID() (rv string) {
	if v != nil && v.ResourceGUID != nil {
		return *v.ResourceGUID
	}
	return
}

// VirtualNetworkPropertiesFormat - Properties of the virtual network.
type VirtualNetworkPropertiesFormat struct {
	// The AddressSpace that contains an array of IP address ranges that can be used by subnets.
	AddressSpace *AddressSpace

	// Bgp Communities sent over ExpressRoute with each route corresponding to a prefix in this VNET.
	BgpCommunities *VirtualNetworkBgpCommunities

	// The DDoS protection plan associated with the virtual network.
	DdosProtectionPlan *SubResource

	// The dhcpOptions that contains an array of DNS servers available to VMs deployed in the virtual network.
	DhcpOptions *DhcpOptions

	// Indicates if DDoS protection is enabled for all the protected resources in the virtual network. It requires a DDoS protection
	// plan associated with the resource.
	EnableDdosProtection *bool

	// Indicates if VM protection is enabled for all the subnets in the virtual network.
	EnableVMProtection *bool

	// Indicates if encryption is enabled on virtual network and if VM without encryption is allowed in encrypted VNet.
	Encryption *VirtualNetworkEncryption

	// The FlowTimeout value (in minutes) for the Virtual Network
	FlowTimeoutInMinutes *int32

	// Array of IpAllocation which reference this VNET.
	IPAllocations []*SubResource

	// A list of subnets in a Virtual Network.
	Subnets []*Subnet

	// A list of peerings in a Virtual Network.
	VirtualNetworkPeerings []*VirtualNetworkPeering

	// READ-ONLY; A collection of references to flow log resources.
	FlowLogs []*FlowLog

	// READ-ONLY; The provisioning state of the virtual network resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resourceGuid property of the Virtual Network resource.
	ResourceGUID *string
}

func (v *VirtualNetworkPropertiesFormat) GetAddressSpace() (rv *AddressSpace) {
	if v != nil {
		return v.AddressSpace
	}
	return
}

func (v *VirtualNetworkPropertiesFormat) GetBgpCommunities() (rv *VirtualNetworkBgpCommunities) {
	if v != nil {
		return v.BgpCommunities
	}
	return
}

func (v *VirtualNetworkPropertiesFormat) GetDdosProtectionPlan() (rv *SubResource) {
	if v != nil {
		return v.DdosProtectionPlan
	}
	return
}

func (v *VirtualNetworkPropertiesFormat) GetDhcpOptions() (rv *DhcpOptions) {
	if v != nil {
		return v.DhcpOptions
	}
	return
}

func (v *VirtualNetworkPropertiesFormat) GetEnableDdosProtection() (rv bool) {
	if v != nil && v.EnableDdosProtection != nil {
		return *v.EnableDdosProtection
	}
	return
}

func (v *VirtualNetworkPropertiesFormat) GetEnableVMProtection() (rv bool) {
	if v != nil && v.EnableVMProtection != nil {
		return *v.EnableVMProtection
	}
	return
}

func (v *VirtualNetworkPropertiesFormat) GetEncryption() (rv *VirtualNetworkEncryption) {
	if v != nil {
		return v.Encryption
	}
	return
}

func (v *VirtualNetworkPropertiesFormat) GetFlowTimeoutInMinutes() (rv int32) {
	if v != nil && v.FlowTimeoutInMinutes != nil {
		return *v.FlowTimeoutInMinutes
	}
	return
}

func (v *VirtualNetworkPropertiesFormat) GetIPAllocations() (rv []*SubResource) {
	if v != nil {
		return v.IPAllocations
	}
	return
}

func (v *VirtualNetworkPropertiesFormat) GetSubnets() (rv []*Subnet) {
	if v != nil {
		return v.Subnets
	}
	return
}

func (v *VirtualNetworkPropertiesFormat) GetVirtualNetworkPeerings() (rv []*VirtualNetworkPeering) {
	if v != nil {
		return v.VirtualNetworkPeerings
	}
	return
}

func (v *VirtualNetworkPropertiesFormat) GetFlowLogs() (rv []*FlowLog) {
	if v != nil {
		return v.FlowLogs
	}
	return
}

func (v *VirtualNetworkPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

func (v *VirtualNetworkPropertiesFormat) GetResourceGUID() (rv string) {
	if v != nil && v.ResourceGUID != nil {
		return *v.ResourceGUID
	}
	return
}

// VirtualNetworkTap - Virtual Network Tap resource.
type VirtualNetworkTap struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Virtual Network Tap Properties.
	Properties *VirtualNetworkTapPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VirtualNetworkTap) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualNetworkTap) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualNetworkTap) GetProperties() (rv *VirtualNetworkTapPropertiesFormat) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualNetworkTap) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualNetworkTap) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VirtualNetworkTap) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualNetworkTap) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualNetworkTapListResult - Response for ListVirtualNetworkTap API service call.
type VirtualNetworkTapListResult struct {
	// The URL to get the next set of results.
	NextLink *string

	// A list of VirtualNetworkTaps in a resource group.
	Value []*VirtualNetworkTap
}

func (v *VirtualNetworkTapListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

func (v *VirtualNetworkTapListResult) GetValue() (rv []*VirtualNetworkTap) {
	if v != nil {
		return v.Value
	}
	return
}

// VirtualNetworkTapPropertiesFormat - Virtual Network Tap properties.
type VirtualNetworkTapPropertiesFormat struct {
	// The reference to the private IP address on the internal Load Balancer that will receive the tap.
	DestinationLoadBalancerFrontEndIPConfiguration *FrontendIPConfiguration

	// The reference to the private IP Address of the collector nic that will receive the tap.
	DestinationNetworkInterfaceIPConfiguration *InterfaceIPConfiguration

	// The VXLAN destination port that will receive the tapped traffic.
	DestinationPort *int32

	// READ-ONLY; Specifies the list of resource IDs for the network interface IP configuration that needs to be tapped.
	NetworkInterfaceTapConfigurations []*InterfaceTapConfiguration

	// READ-ONLY; The provisioning state of the virtual network tap resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; The resource GUID property of the virtual network tap resource.
	ResourceGUID *string
}

func (v *VirtualNetworkTapPropertiesFormat) GetDestinationLoadBalancerFrontEndIPConfiguration() (rv *FrontendIPConfiguration) {
	if v != nil {
		return v.DestinationLoadBalancerFrontEndIPConfiguration
	}
	return
}

func (v *VirtualNetworkTapPropertiesFormat) GetDestinationNetworkInterfaceIPConfiguration() (rv *InterfaceIPConfiguration) {
	if v != nil {
		return v.DestinationNetworkInterfaceIPConfiguration
	}
	return
}

func (v *VirtualNetworkTapPropertiesFormat) GetDestinationPort() (rv int32) {
	if v != nil && v.DestinationPort != nil {
		return *v.DestinationPort
	}
	return
}

func (v *VirtualNetworkTapPropertiesFormat) GetNetworkInterfaceTapConfigurations() (rv []*InterfaceTapConfiguration) {
	if v != nil {
		return v.NetworkInterfaceTapConfigurations
	}
	return
}

func (v *VirtualNetworkTapPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

func (v *VirtualNetworkTapPropertiesFormat) GetResourceGUID() (rv string) {
	if v != nil && v.ResourceGUID != nil {
		return *v.ResourceGUID
	}
	return
}

// VirtualNetworkUsage - Usage details for subnet.
type VirtualNetworkUsage struct {
	// READ-ONLY; Indicates number of IPs used from the Subnet.
	CurrentValue *float64

	// READ-ONLY; Subnet identifier.
	ID *string

	// READ-ONLY; Indicates the size of the subnet.
	Limit *float64

	// READ-ONLY; The name containing common and localized value for usage.
	Name *VirtualNetworkUsageName

	// READ-ONLY; Usage units. Returns 'Count'.
	Unit *string
}

func (v *VirtualNetworkUsage) GetCurrentValue() (rv float64) {
	if v != nil && v.CurrentValue != nil {
		return *v.CurrentValue
	}
	return
}

func (v *VirtualNetworkUsage) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualNetworkUsage) GetLimit() (rv float64) {
	if v != nil && v.Limit != nil {
		return *v.Limit
	}
	return
}

func (v *VirtualNetworkUsage) GetName() (rv *VirtualNetworkUsageName) {
	if v != nil {
		return v.Name
	}
	return
}

func (v *VirtualNetworkUsage) GetUnit() (rv string) {
	if v != nil && v.Unit != nil {
		return *v.Unit
	}
	return
}

// VirtualNetworkUsageName - Usage strings container.
type VirtualNetworkUsageName struct {
	// READ-ONLY; Localized subnet size and usage string.
	LocalizedValue *string

	// READ-ONLY; Subnet size and usage string.
	Value *string
}

func (v *VirtualNetworkUsageName) GetLocalizedValue() (rv string) {
	if v != nil && v.LocalizedValue != nil {
		return *v.LocalizedValue
	}
	return
}

func (v *VirtualNetworkUsageName) GetValue() (rv string) {
	if v != nil && v.Value != nil {
		return *v.Value
	}
	return
}

// VirtualRouter Resource.
type VirtualRouter struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the Virtual Router.
	Properties *VirtualRouterPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VirtualRouter) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualRouter) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualRouter) GetProperties() (rv *VirtualRouterPropertiesFormat) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualRouter) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualRouter) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VirtualRouter) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualRouter) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualRouterAutoScaleConfiguration - The VirtualHub Router autoscale configuration.
type VirtualRouterAutoScaleConfiguration struct {
	// The minimum number of scale units for VirtualHub Router.
	MinCapacity *int32
}

func (v *VirtualRouterAutoScaleConfiguration) GetMinCapacity() (rv int32) {
	if v != nil && v.MinCapacity != nil {
		return *v.MinCapacity
	}
	return
}

// VirtualRouterListResult - Response for ListVirtualRouters API service call.
type VirtualRouterListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of Virtual Routers.
	Value []*VirtualRouter
}

func (v *VirtualRouterListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

func (v *VirtualRouterListResult) GetValue() (rv []*VirtualRouter) {
	if v != nil {
		return v.Value
	}
	return
}

// VirtualRouterPeering - Virtual Router Peering resource.
type VirtualRouterPeering struct {
	// Resource ID.
	ID *string

	// Name of the virtual router peering that is unique within a virtual router.
	Name *string

	// The properties of the Virtual Router Peering.
	Properties *VirtualRouterPeeringProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Peering type.
	Type *string
}

func (v *VirtualRouterPeering) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualRouterPeering) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualRouterPeering) GetProperties() (rv *VirtualRouterPeeringProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualRouterPeering) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VirtualRouterPeering) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualRouterPeeringListResult - Response for ListVirtualRouterPeerings API service call.
type VirtualRouterPeeringListResult struct {
	// URL to get the next set of results.
	NextLink *string

	// List of VirtualRouterPeerings in a VirtualRouter.
	Value []*VirtualRouterPeering
}

func (v *VirtualRouterPeeringListResult) GetNextLink() (rv string) {
	if v != nil && v.NextLink != nil {
		return *v.NextLink
	}
	return
}

func (v *VirtualRouterPeeringListResult) GetValue() (rv []*VirtualRouterPeering) {
	if v != nil {
		return v.Value
	}
	return
}

// VirtualRouterPeeringProperties - Properties of the rule group.
type VirtualRouterPeeringProperties struct {
	// Peer ASN.
	PeerAsn *int64

	// Peer IP.
	PeerIP *string

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

func (v *VirtualRouterPeeringProperties) GetPeerAsn() (rv int64) {
	if v != nil && v.PeerAsn != nil {
		return *v.PeerAsn
	}
	return
}

func (v *VirtualRouterPeeringProperties) GetPeerIP() (rv string) {
	if v != nil && v.PeerIP != nil {
		return *v.PeerIP
	}
	return
}

func (v *VirtualRouterPeeringProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VirtualRouterPropertiesFormat - Virtual Router definition.
type VirtualRouterPropertiesFormat struct {
	// The Gateway on which VirtualRouter is hosted.
	HostedGateway *SubResource

	// The Subnet on which VirtualRouter is hosted.
	HostedSubnet *SubResource

	// VirtualRouter ASN.
	VirtualRouterAsn *int64

	// VirtualRouter IPs.
	VirtualRouterIPs []*string

	// READ-ONLY; List of references to VirtualRouterPeerings.
	Peerings []*SubResource

	// READ-ONLY; The provisioning state of the resource.
	ProvisioningState *ProvisioningState
}

func (v *VirtualRouterPropertiesFormat) GetHostedGateway() (rv *SubResource) {
	if v != nil {
		return v.HostedGateway
	}
	return
}

func (v *VirtualRouterPropertiesFormat) GetHostedSubnet() (rv *SubResource) {
	if v != nil {
		return v.HostedSubnet
	}
	return
}

func (v *VirtualRouterPropertiesFormat) GetVirtualRouterAsn() (rv int64) {
	if v != nil && v.VirtualRouterAsn != nil {
		return *v.VirtualRouterAsn
	}
	return
}

func (v *VirtualRouterPropertiesFormat) GetVirtualRouterIPs() (rv []*string) {
	if v != nil {
		return v.VirtualRouterIPs
	}
	return
}

func (v *VirtualRouterPropertiesFormat) GetPeerings() (rv []*SubResource) {
	if v != nil {
		return v.Peerings
	}
	return
}

func (v *VirtualRouterPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// VirtualWAN Resource.
type VirtualWAN struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the virtual WAN.
	Properties *VirtualWanProperties

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (v *VirtualWAN) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VirtualWAN) GetLocation() (rv string) {
	if v != nil && v.Location != nil {
		return *v.Location
	}
	return
}

func (v *VirtualWAN) GetProperties() (rv *VirtualWanProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VirtualWAN) GetTags() (rv map[string]*string) {
	if v != nil {
		return v.Tags
	}
	return
}

func (v *VirtualWAN) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

func (v *VirtualWAN) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualWAN) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

// VirtualWanProperties - Parameters for VirtualWAN.
type VirtualWanProperties struct {
	// True if branch to branch traffic is allowed.
	AllowBranchToBranchTraffic *bool

	// True if Vnet to Vnet traffic is allowed.
	AllowVnetToVnetTraffic *bool

	// Vpn encryption to be disabled or not.
	DisableVPNEncryption *bool

	// The type of the VirtualWAN.
	Type *string

	// READ-ONLY; The office local breakout category.
	Office365LocalBreakoutCategory *OfficeTrafficCategory

	// READ-ONLY; The provisioning state of the virtual WAN resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; List of VpnSites in the VirtualWAN.
	VPNSites []*SubResource

	// READ-ONLY; List of VirtualHubs in the VirtualWAN.
	VirtualHubs []*SubResource
}

func (v *VirtualWanProperties) GetAllowBranchToBranchTraffic() (rv bool) {
	if v != nil && v.AllowBranchToBranchTraffic != nil {
		return *v.AllowBranchToBranchTraffic
	}
	return
}

func (v *VirtualWanProperties) GetAllowVnetToVnetTraffic() (rv bool) {
	if v != nil && v.AllowVnetToVnetTraffic != nil {
		return *v.AllowVnetToVnetTraffic
	}
	return
}

func (v *VirtualWanProperties) GetDisableVPNEncryption() (rv bool) {
	if v != nil && v.DisableVPNEncryption != nil {
		return *v.DisableVPNEncryption
	}
	return
}

func (v *VirtualWanProperties) GetType() (rv string) {
	if v != nil && v.Type != nil {
		return *v.Type
	}
	return
}

func (v *VirtualWanProperties) GetOffice365LocalBreakoutCategory() (rv *OfficeTrafficCategory) {
	if v != nil {
		return v.Office365LocalBreakoutCategory
	}
	return
}

func (v *VirtualWanProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

func (v *VirtualWanProperties) GetVPNSites() (rv []*SubResource) {
	if v != nil {
		return v.VPNSites
	}
	return
}

func (v *VirtualWanProperties) GetVirtualHubs() (rv []*SubResource) {
	if v != nil {
		return v.VirtualHubs
	}
	return
}

// VirtualWanSecurityProvider - Collection of SecurityProviders.
type VirtualWanSecurityProvider struct {
	// Name of the security provider.
	Name *string

	// Url of the security provider.
	URL *string

	// READ-ONLY; Name of the security provider.
	Type *VirtualWanSecurityProviderType
}

func (v *VirtualWanSecurityProvider) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VirtualWanSecurityProvider) GetURL() (rv string) {
	if v != nil && v.URL != nil {
		return *v.URL
	}
	return
}

func (v *VirtualWanSecurityProvider) GetType() (rv *VirtualWanSecurityProviderType) {
	if v != nil {
		return v.Type
	}
	return
}

// VirtualWanSecurityProviders - Collection of SecurityProviders.
type VirtualWanSecurityProviders struct {
	// List of VirtualWAN security providers.
	SupportedProviders []*VirtualWanSecurityProvider
}

func (v *VirtualWanSecurityProviders) GetSupportedProviders() (rv []*VirtualWanSecurityProvider) {
	if v != nil {
		return v.SupportedProviders
	}
	return
}

// VirtualWanVPNProfileParameters - Virtual Wan Vpn profile parameters Vpn profile generation.
type VirtualWanVPNProfileParameters struct {
	// VPN client authentication method.
	AuthenticationMethod *AuthenticationMethod

	// VpnServerConfiguration partial resource uri with which VirtualWan is associated to.
	VPNServerConfigurationResourceID *string
}

func (v *VirtualWanVPNProfileParameters) GetAuthenticationMethod() (rv *AuthenticationMethod) {
	if v != nil {
		return v.AuthenticationMethod
	}
	return
}

func (v *VirtualWanVPNProfileParameters) GetVPNServerConfigurationResourceID() (rv string) {
	if v != nil && v.VPNServerConfigurationResourceID != nil {
		return *v.VPNServerConfigurationResourceID
	}
	return
}

// VnetRoute - List of routes that control routing from VirtualHub into a virtual network connection.
type VnetRoute struct {
	// List of all Static Routes.
	StaticRoutes []*StaticRoute

	// Configuration for static routes on this HubVnetConnection.
	StaticRoutesConfig *StaticRoutesConfig

	// READ-ONLY; The list of references to HubBgpConnection objects.
	BgpConnections []*SubResource
}

func (v *VnetRoute) GetStaticRoutes() (rv []*StaticRoute) {
	if v != nil {
		return v.StaticRoutes
	}
	return
}

func (v *VnetRoute) GetStaticRoutesConfig() (rv *StaticRoutesConfig) {
	if v != nil {
		return v.StaticRoutesConfig
	}
	return
}

func (v *VnetRoute) GetBgpConnections() (rv []*SubResource) {
	if v != nil {
		return v.BgpConnections
	}
	return
}

// VngClientConnectionConfiguration - A vpn client connection configuration for client connection configuration.
type VngClientConnectionConfiguration struct {
	// Resource ID.
	ID *string

	// The name of the resource that is unique within a resource group. This name can be used to access the resource.
	Name *string

	// Properties of the vpn client root certificate.
	Properties *VngClientConnectionConfigurationProperties

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (v *VngClientConnectionConfiguration) GetID() (rv string) {
	if v != nil && v.ID != nil {
		return *v.ID
	}
	return
}

func (v *VngClientConnectionConfiguration) GetName() (rv string) {
	if v != nil && v.Name != nil {
		return *v.Name
	}
	return
}

func (v *VngClientConnectionConfiguration) GetProperties() (rv *VngClientConnectionConfigurationProperties) {
	if v != nil {
		return v.Properties
	}
	return
}

func (v *VngClientConnectionConfiguration) GetEtag() (rv string) {
	if v != nil && v.Etag != nil {
		return *v.Etag
	}
	return
}

// VngClientConnectionConfigurationProperties - Properties of VngClientConnectionConfiguration.
type VngClientConnectionConfigurationProperties struct {
	// REQUIRED; The reference to the address space resource which represents Address space for P2S VpnClient.
	VPNClientAddressPool *AddressSpace

	// REQUIRED; List of references to virtualNetworkGatewayPolicyGroups
	VirtualNetworkGatewayPolicyGroups []*SubResource

	// READ-ONLY; The provisioning state of the VngClientConnectionConfiguration resource.
	ProvisioningState *ProvisioningState
}

func (v *VngClientConnectionConfigurationProperties) GetVPNClientAddressPool() (rv *AddressSpace) {
	if v != nil {
		return v.VPNClientAddressPool
	}
	return
}

func (v *VngClientConnectionConfigurationProperties) GetVirtualNetworkGatewayPolicyGroups() (rv []*SubResource) {
	if v != nil {
		return v.VirtualNetworkGatewayPolicyGroups
	}
	return
}

func (v *VngClientConnectionConfigurationProperties) GetProvisioningState() (rv *ProvisioningState) {
	if v != nil {
		return v.ProvisioningState
	}
	return
}

// Watcher - Network watcher in a resource group.
type Watcher struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the network watcher.
	Properties *WatcherPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (w *Watcher) GetID() (rv string) {
	if w != nil && w.ID != nil {
		return *w.ID
	}
	return
}

func (w *Watcher) GetLocation() (rv string) {
	if w != nil && w.Location != nil {
		return *w.Location
	}
	return
}

func (w *Watcher) GetProperties() (rv *WatcherPropertiesFormat) {
	if w != nil {
		return w.Properties
	}
	return
}

func (w *Watcher) GetTags() (rv map[string]*string) {
	if w != nil {
		return w.Tags
	}
	return
}

func (w *Watcher) GetEtag() (rv string) {
	if w != nil && w.Etag != nil {
		return *w.Etag
	}
	return
}

func (w *Watcher) GetName() (rv string) {
	if w != nil && w.Name != nil {
		return *w.Name
	}
	return
}

func (w *Watcher) GetType() (rv string) {
	if w != nil && w.Type != nil {
		return *w.Type
	}
	return
}

// WatcherListResult - Response for ListNetworkWatchers API service call.
type WatcherListResult struct {
	// List of network watcher resources.
	Value []*Watcher
}

func (w *WatcherListResult) GetValue() (rv []*Watcher) {
	if w != nil {
		return w.Value
	}
	return
}

// WatcherPropertiesFormat - The network watcher properties.
type WatcherPropertiesFormat struct {
	// READ-ONLY; The provisioning state of the network watcher resource.
	ProvisioningState *ProvisioningState
}

func (w *WatcherPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if w != nil {
		return w.ProvisioningState
	}
	return
}

// WebApplicationFirewallCustomRule - Defines contents of a web application rule.
type WebApplicationFirewallCustomRule struct {
	// REQUIRED; Type of Actions.
	Action *WebApplicationFirewallAction

	// REQUIRED; List of match conditions.
	MatchConditions []*MatchCondition

	// REQUIRED; Priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.
	Priority *int32

	// REQUIRED; The rule type.
	RuleType *WebApplicationFirewallRuleType

	// The name of the resource that is unique within a policy. This name can be used to access the resource.
	Name *string

	// Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.
	State *WebApplicationFirewallState

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string
}

func (w *WebApplicationFirewallCustomRule) GetAction() (rv *WebApplicationFirewallAction) {
	if w != nil {
		return w.Action
	}
	return
}

func (w *WebApplicationFirewallCustomRule) GetMatchConditions() (rv []*MatchCondition) {
	if w != nil {
		return w.MatchConditions
	}
	return
}

func (w *WebApplicationFirewallCustomRule) GetPriority() (rv int32) {
	if w != nil && w.Priority != nil {
		return *w.Priority
	}
	return
}

func (w *WebApplicationFirewallCustomRule) GetRuleType() (rv *WebApplicationFirewallRuleType) {
	if w != nil {
		return w.RuleType
	}
	return
}

func (w *WebApplicationFirewallCustomRule) GetName() (rv string) {
	if w != nil && w.Name != nil {
		return *w.Name
	}
	return
}

func (w *WebApplicationFirewallCustomRule) GetState() (rv *WebApplicationFirewallState) {
	if w != nil {
		return w.State
	}
	return
}

func (w *WebApplicationFirewallCustomRule) GetEtag() (rv string) {
	if w != nil && w.Etag != nil {
		return *w.Etag
	}
	return
}

// WebApplicationFirewallPolicy - Defines web application firewall policy.
type WebApplicationFirewallPolicy struct {
	// Resource ID.
	ID *string

	// Resource location.
	Location *string

	// Properties of the web application firewall policy.
	Properties *WebApplicationFirewallPolicyPropertiesFormat

	// Resource tags.
	Tags map[string]*string

	// READ-ONLY; A unique read-only string that changes whenever the resource is updated.
	Etag *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (w *WebApplicationFirewallPolicy) GetID() (rv string) {
	if w != nil && w.ID != nil {
		return *w.ID
	}
	return
}

func (w *WebApplicationFirewallPolicy) GetLocation() (rv string) {
	if w != nil && w.Location != nil {
		return *w.Location
	}
	return
}

func (w *WebApplicationFirewallPolicy) GetProperties() (rv *WebApplicationFirewallPolicyPropertiesFormat) {
	if w != nil {
		return w.Properties
	}
	return
}

func (w *WebApplicationFirewallPolicy) GetTags() (rv map[string]*string) {
	if w != nil {
		return w.Tags
	}
	return
}

func (w *WebApplicationFirewallPolicy) GetEtag() (rv string) {
	if w != nil && w.Etag != nil {
		return *w.Etag
	}
	return
}

func (w *WebApplicationFirewallPolicy) GetName() (rv string) {
	if w != nil && w.Name != nil {
		return *w.Name
	}
	return
}

func (w *WebApplicationFirewallPolicy) GetType() (rv string) {
	if w != nil && w.Type != nil {
		return *w.Type
	}
	return
}

// WebApplicationFirewallPolicyListResult - Result of the request to list WebApplicationFirewallPolicies. It contains a list
// of WebApplicationFirewallPolicy objects and a URL link to get the next set of results.
type WebApplicationFirewallPolicyListResult struct {
	// READ-ONLY; URL to get the next set of WebApplicationFirewallPolicy objects if there are any.
	NextLink *string

	// READ-ONLY; List of WebApplicationFirewallPolicies within a resource group.
	Value []*WebApplicationFirewallPolicy
}

func (w *WebApplicationFirewallPolicyListResult) GetNextLink() (rv string) {
	if w != nil && w.NextLink != nil {
		return *w.NextLink
	}
	return
}

func (w *WebApplicationFirewallPolicyListResult) GetValue() (rv []*WebApplicationFirewallPolicy) {
	if w != nil {
		return w.Value
	}
	return
}

// WebApplicationFirewallPolicyPropertiesFormat - Defines web application firewall policy properties.
type WebApplicationFirewallPolicyPropertiesFormat struct {
	// REQUIRED; Describes the managedRules structure.
	ManagedRules *ManagedRulesDefinition

	// The custom rules inside the policy.
	CustomRules []*WebApplicationFirewallCustomRule

	// The PolicySettings for policy.
	PolicySettings *PolicySettings

	// READ-ONLY; A collection of references to application gateways.
	ApplicationGateways []*ApplicationGateway

	// READ-ONLY; A collection of references to application gateway http listeners.
	HTTPListeners []*SubResource

	// READ-ONLY; A collection of references to application gateway path rules.
	PathBasedRules []*SubResource

	// READ-ONLY; The provisioning state of the web application firewall policy resource.
	ProvisioningState *ProvisioningState

	// READ-ONLY; Resource status of the policy.
	ResourceState *WebApplicationFirewallPolicyResourceState
}

func (w *WebApplicationFirewallPolicyPropertiesFormat) GetManagedRules() (rv *ManagedRulesDefinition) {
	if w != nil {
		return w.ManagedRules
	}
	return
}

func (w *WebApplicationFirewallPolicyPropertiesFormat) GetCustomRules() (rv []*WebApplicationFirewallCustomRule) {
	if w != nil {
		return w.CustomRules
	}
	return
}

func (w *WebApplicationFirewallPolicyPropertiesFormat) GetPolicySettings() (rv *PolicySettings) {
	if w != nil {
		return w.PolicySettings
	}
	return
}

func (w *WebApplicationFirewallPolicyPropertiesFormat) GetApplicationGateways() (rv []*ApplicationGateway) {
	if w != nil {
		return w.ApplicationGateways
	}
	return
}

func (w *WebApplicationFirewallPolicyPropertiesFormat) GetHTTPListeners() (rv []*SubResource) {
	if w != nil {
		return w.HTTPListeners
	}
	return
}

func (w *WebApplicationFirewallPolicyPropertiesFormat) GetPathBasedRules() (rv []*SubResource) {
	if w != nil {
		return w.PathBasedRules
	}
	return
}

func (w *WebApplicationFirewallPolicyPropertiesFormat) GetProvisioningState() (rv *ProvisioningState) {
	if w != nil {
		return w.ProvisioningState
	}
	return
}

func (w *WebApplicationFirewallPolicyPropertiesFormat) GetResourceState() (rv *WebApplicationFirewallPolicyResourceState) {
	if w != nil {
		return w.ResourceState
	}
	return
}
