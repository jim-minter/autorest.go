//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armconsumption

import "time"

// Amount - The amount plus currency .
type Amount struct {
	// READ-ONLY; Amount currency.
	Currency *string

	// READ-ONLY; Amount.
	Value *float64
}

func (a *Amount) GetCurrency() (rv string) {
	if a != nil && a.Currency != nil {
		return *a.Currency
	}
	return
}

func (a *Amount) GetValue() (rv float64) {
	if a != nil && a.Value != nil {
		return *a.Value
	}
	return
}

// AmountWithExchangeRate - Reseller details
type AmountWithExchangeRate struct {
	// READ-ONLY; Amount currency.
	Currency *string

	// READ-ONLY; Exchange Rate.
	ExchangeRate *float64

	// READ-ONLY; Exchange rate month.
	ExchangeRateMonth *float32

	// READ-ONLY; Amount.
	Value *float64
}

func (a *AmountWithExchangeRate) GetCurrency() (rv string) {
	if a != nil && a.Currency != nil {
		return *a.Currency
	}
	return
}

func (a *AmountWithExchangeRate) GetExchangeRate() (rv float64) {
	if a != nil && a.ExchangeRate != nil {
		return *a.ExchangeRate
	}
	return
}

func (a *AmountWithExchangeRate) GetExchangeRateMonth() (rv float32) {
	if a != nil && a.ExchangeRateMonth != nil {
		return *a.ExchangeRateMonth
	}
	return
}

func (a *AmountWithExchangeRate) GetValue() (rv float64) {
	if a != nil && a.Value != nil {
		return *a.Value
	}
	return
}

// Balance - A balance resource.
type Balance struct {
	// The properties of the balance.
	Properties *BalanceProperties

	// READ-ONLY; Resource etag.
	Etag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (b *Balance) GetProperties() (rv *BalanceProperties) {
	if b != nil {
		return b.Properties
	}
	return
}

func (b *Balance) GetEtag() (rv string) {
	if b != nil && b.Etag != nil {
		return *b.Etag
	}
	return
}

func (b *Balance) GetID() (rv string) {
	if b != nil && b.ID != nil {
		return *b.ID
	}
	return
}

func (b *Balance) GetName() (rv string) {
	if b != nil && b.Name != nil {
		return *b.Name
	}
	return
}

func (b *Balance) GetTags() (rv map[string]*string) {
	if b != nil {
		return b.Tags
	}
	return
}

func (b *Balance) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

// BalanceProperties - The properties of the balance.
type BalanceProperties struct {
	// The billing frequency.
	BillingFrequency *BillingFrequency

	// READ-ONLY; List of Adjustments (Promo credit, SIE credit etc.).
	AdjustmentDetails []*BalancePropertiesAdjustmentDetailsItem

	// READ-ONLY; Total adjustment amount.
	Adjustments *float64

	// READ-ONLY; Total charges for Azure Marketplace.
	AzureMarketplaceServiceCharges *float64

	// READ-ONLY; The beginning balance for the billing period.
	BeginningBalance *float64

	// READ-ONLY; Charges Billed separately.
	ChargesBilledSeparately *float64

	// READ-ONLY; The ISO currency in which the meter is charged, for example, USD.
	Currency *string

	// READ-ONLY; The ending balance for the billing period (for open periods this will be updated daily).
	EndingBalance *float64

	// READ-ONLY; Total new purchase amount.
	NewPurchases *float64

	// READ-ONLY; List of new purchases.
	NewPurchasesDetails []*BalancePropertiesNewPurchasesDetailsItem

	// READ-ONLY; Price is hidden or not.
	PriceHidden *bool

	// READ-ONLY; Overage for Azure services.
	ServiceOverage *float64

	// READ-ONLY; serviceOverage + chargesBilledSeparately.
	TotalOverage *float64

	// READ-ONLY; Azure service commitment + total Overage.
	TotalUsage *float64

	// READ-ONLY; Total Commitment usage.
	Utilized *float64
}

func (b *BalanceProperties) GetBillingFrequency() (rv *BillingFrequency) {
	if b != nil {
		return b.BillingFrequency
	}
	return
}

func (b *BalanceProperties) GetAdjustmentDetails() (rv []*BalancePropertiesAdjustmentDetailsItem) {
	if b != nil {
		return b.AdjustmentDetails
	}
	return
}

func (b *BalanceProperties) GetAdjustments() (rv float64) {
	if b != nil && b.Adjustments != nil {
		return *b.Adjustments
	}
	return
}

func (b *BalanceProperties) GetAzureMarketplaceServiceCharges() (rv float64) {
	if b != nil && b.AzureMarketplaceServiceCharges != nil {
		return *b.AzureMarketplaceServiceCharges
	}
	return
}

func (b *BalanceProperties) GetBeginningBalance() (rv float64) {
	if b != nil && b.BeginningBalance != nil {
		return *b.BeginningBalance
	}
	return
}

func (b *BalanceProperties) GetChargesBilledSeparately() (rv float64) {
	if b != nil && b.ChargesBilledSeparately != nil {
		return *b.ChargesBilledSeparately
	}
	return
}

func (b *BalanceProperties) GetCurrency() (rv string) {
	if b != nil && b.Currency != nil {
		return *b.Currency
	}
	return
}

func (b *BalanceProperties) GetEndingBalance() (rv float64) {
	if b != nil && b.EndingBalance != nil {
		return *b.EndingBalance
	}
	return
}

func (b *BalanceProperties) GetNewPurchases() (rv float64) {
	if b != nil && b.NewPurchases != nil {
		return *b.NewPurchases
	}
	return
}

func (b *BalanceProperties) GetNewPurchasesDetails() (rv []*BalancePropertiesNewPurchasesDetailsItem) {
	if b != nil {
		return b.NewPurchasesDetails
	}
	return
}

func (b *BalanceProperties) GetPriceHidden() (rv bool) {
	if b != nil && b.PriceHidden != nil {
		return *b.PriceHidden
	}
	return
}

func (b *BalanceProperties) GetServiceOverage() (rv float64) {
	if b != nil && b.ServiceOverage != nil {
		return *b.ServiceOverage
	}
	return
}

func (b *BalanceProperties) GetTotalOverage() (rv float64) {
	if b != nil && b.TotalOverage != nil {
		return *b.TotalOverage
	}
	return
}

func (b *BalanceProperties) GetTotalUsage() (rv float64) {
	if b != nil && b.TotalUsage != nil {
		return *b.TotalUsage
	}
	return
}

func (b *BalanceProperties) GetUtilized() (rv float64) {
	if b != nil && b.Utilized != nil {
		return *b.Utilized
	}
	return
}

type BalancePropertiesAdjustmentDetailsItem struct {
	// READ-ONLY; the name of new adjustment.
	Name *string

	// READ-ONLY; the value of new adjustment.
	Value *float64
}

func (b *BalancePropertiesAdjustmentDetailsItem) GetName() (rv string) {
	if b != nil && b.Name != nil {
		return *b.Name
	}
	return
}

func (b *BalancePropertiesAdjustmentDetailsItem) GetValue() (rv float64) {
	if b != nil && b.Value != nil {
		return *b.Value
	}
	return
}

type BalancePropertiesNewPurchasesDetailsItem struct {
	// READ-ONLY; the name of new purchase.
	Name *string

	// READ-ONLY; the value of new purchase.
	Value *float64
}

func (b *BalancePropertiesNewPurchasesDetailsItem) GetName() (rv string) {
	if b != nil && b.Name != nil {
		return *b.Name
	}
	return
}

func (b *BalancePropertiesNewPurchasesDetailsItem) GetValue() (rv float64) {
	if b != nil && b.Value != nil {
		return *b.Value
	}
	return
}

// Budget - A budget resource.
type Budget struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating
	// the latest version or not.
	ETag *string

	// The properties of the budget.
	Properties *BudgetProperties

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (b *Budget) GetETag() (rv string) {
	if b != nil && b.ETag != nil {
		return *b.ETag
	}
	return
}

func (b *Budget) GetProperties() (rv *BudgetProperties) {
	if b != nil {
		return b.Properties
	}
	return
}

func (b *Budget) GetID() (rv string) {
	if b != nil && b.ID != nil {
		return *b.ID
	}
	return
}

func (b *Budget) GetName() (rv string) {
	if b != nil && b.Name != nil {
		return *b.Name
	}
	return
}

func (b *Budget) GetType() (rv string) {
	if b != nil && b.Type != nil {
		return *b.Type
	}
	return
}

// BudgetComparisonExpression - The comparison expression to be used in the budgets.
type BudgetComparisonExpression struct {
	// REQUIRED; The name of the column to use in comparison.
	Name *string

	// REQUIRED; The operator to use for comparison.
	Operator *BudgetOperatorType

	// REQUIRED; Array of values to use for comparison
	Values []*string
}

func (b *BudgetComparisonExpression) GetName() (rv string) {
	if b != nil && b.Name != nil {
		return *b.Name
	}
	return
}

func (b *BudgetComparisonExpression) GetOperator() (rv *BudgetOperatorType) {
	if b != nil {
		return b.Operator
	}
	return
}

func (b *BudgetComparisonExpression) GetValues() (rv []*string) {
	if b != nil {
		return b.Values
	}
	return
}

// BudgetFilter - May be used to filter budgets by resource group, resource, or meter.
type BudgetFilter struct {
	// The logical "AND" expression. Must have at least 2 items.
	And []*BudgetFilterProperties

	// Has comparison expression for a dimension
	Dimensions *BudgetComparisonExpression

	// The logical "NOT" expression.
	Not *BudgetFilterProperties

	// Has comparison expression for a tag
	Tags *BudgetComparisonExpression
}

func (b *BudgetFilter) GetAnd() (rv []*BudgetFilterProperties) {
	if b != nil {
		return b.And
	}
	return
}

func (b *BudgetFilter) GetDimensions() (rv *BudgetComparisonExpression) {
	if b != nil {
		return b.Dimensions
	}
	return
}

func (b *BudgetFilter) GetNot() (rv *BudgetFilterProperties) {
	if b != nil {
		return b.Not
	}
	return
}

func (b *BudgetFilter) GetTags() (rv *BudgetComparisonExpression) {
	if b != nil {
		return b.Tags
	}
	return
}

// BudgetFilterProperties - The Dimensions or Tags to filter a budget by.
type BudgetFilterProperties struct {
	// Has comparison expression for a dimension
	Dimensions *BudgetComparisonExpression

	// Has comparison expression for a tag
	Tags *BudgetComparisonExpression
}

func (b *BudgetFilterProperties) GetDimensions() (rv *BudgetComparisonExpression) {
	if b != nil {
		return b.Dimensions
	}
	return
}

func (b *BudgetFilterProperties) GetTags() (rv *BudgetComparisonExpression) {
	if b != nil {
		return b.Tags
	}
	return
}

// BudgetProperties - The properties of the budget.
type BudgetProperties struct {
	// REQUIRED; The total amount of cost to track with the budget
	Amount *float64

	// REQUIRED; The category of the budget, whether the budget tracks cost or usage.
	Category *CategoryType

	// REQUIRED; The time covered by a budget. Tracking of the amount will be reset based on the time grain. BillingMonth, BillingQuarter,
	// and BillingAnnual are only supported by WD customers
	TimeGrain *TimeGrainType

	// REQUIRED; Has start and end date of the budget. The start date must be first of the month and should be less than the end
	// date. Budget start date must be on or after June 1, 2017. Future start date should not
	// be more than twelve months. Past start date should be selected within the timegrain period. There are no restrictions on
	// the end date.
	TimePeriod *BudgetTimePeriod

	// May be used to filter budgets by user-specified dimensions and/or tags.
	Filter *BudgetFilter

	// Dictionary of notifications associated with the budget. Budget can have up to five notifications.
	Notifications map[string]*Notification

	// READ-ONLY; The current amount of cost which is being tracked for a budget.
	CurrentSpend *CurrentSpend

	// READ-ONLY; The forecasted cost which is being tracked for a budget.
	ForecastSpend *ForecastSpend
}

func (b *BudgetProperties) GetAmount() (rv float64) {
	if b != nil && b.Amount != nil {
		return *b.Amount
	}
	return
}

func (b *BudgetProperties) GetCategory() (rv *CategoryType) {
	if b != nil {
		return b.Category
	}
	return
}

func (b *BudgetProperties) GetTimeGrain() (rv *TimeGrainType) {
	if b != nil {
		return b.TimeGrain
	}
	return
}

func (b *BudgetProperties) GetTimePeriod() (rv *BudgetTimePeriod) {
	if b != nil {
		return b.TimePeriod
	}
	return
}

func (b *BudgetProperties) GetFilter() (rv *BudgetFilter) {
	if b != nil {
		return b.Filter
	}
	return
}

func (b *BudgetProperties) GetNotifications() (rv map[string]*Notification) {
	if b != nil {
		return b.Notifications
	}
	return
}

func (b *BudgetProperties) GetCurrentSpend() (rv *CurrentSpend) {
	if b != nil {
		return b.CurrentSpend
	}
	return
}

func (b *BudgetProperties) GetForecastSpend() (rv *ForecastSpend) {
	if b != nil {
		return b.ForecastSpend
	}
	return
}

// BudgetTimePeriod - The start and end date for a budget.
type BudgetTimePeriod struct {
	// REQUIRED; The start date for the budget.
	StartDate *time.Time

	// The end date for the budget. If not provided, we default this to 10 years from the start date.
	EndDate *time.Time
}

func (b *BudgetTimePeriod) GetStartDate() (rv *time.Time) {
	if b != nil {
		return b.StartDate
	}
	return
}

func (b *BudgetTimePeriod) GetEndDate() (rv *time.Time) {
	if b != nil {
		return b.EndDate
	}
	return
}

// BudgetsListResult - Result of listing budgets. It contains a list of available budgets in the scope provided.
type BudgetsListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string

	// READ-ONLY; The list of budgets.
	Value []*Budget
}

func (b *BudgetsListResult) GetNextLink() (rv string) {
	if b != nil && b.NextLink != nil {
		return *b.NextLink
	}
	return
}

func (b *BudgetsListResult) GetValue() (rv []*Budget) {
	if b != nil {
		return b.Value
	}
	return
}

// ChargeSummary - A charge summary resource.
type ChargeSummary struct {
	// REQUIRED; Specifies the kind of charge summary.
	Kind *ChargeSummaryKind

	// READ-ONLY; Resource eTag.
	ETag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (c *ChargeSummary) GetKind() (rv *ChargeSummaryKind) {
	if c != nil {
		return c.Kind
	}
	return
}

func (c *ChargeSummary) GetETag() (rv string) {
	if c != nil && c.ETag != nil {
		return *c.ETag
	}
	return
}

func (c *ChargeSummary) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *ChargeSummary) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *ChargeSummary) GetTags() (rv map[string]*string) {
	if c != nil {
		return c.Tags
	}
	return
}

func (c *ChargeSummary) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// GetChargeSummary implements the ChargeSummaryClassification interface for type ChargeSummary.
func (c *ChargeSummary) GetChargeSummary() *ChargeSummary { return c }

// ChargesListResult - Result of listing charge summary.
type ChargesListResult struct {
	// READ-ONLY; The list of charge summary
	Value []ChargeSummaryClassification
}

func (c *ChargesListResult) GetValue() (rv []ChargeSummaryClassification) {
	if c != nil {
		return c.Value
	}
	return
}

// CreditBalanceSummary - Summary of credit balances.
type CreditBalanceSummary struct {
	// READ-ONLY; Current balance.
	CurrentBalance *Amount

	// READ-ONLY; Current balance.
	CurrentBalanceInBillingCurrency *AmountWithExchangeRate

	// READ-ONLY; Estimated balance.
	EstimatedBalance *Amount

	// READ-ONLY; Current balance.
	EstimatedBalanceInBillingCurrency *AmountWithExchangeRate
}

func (c *CreditBalanceSummary) GetCurrentBalance() (rv *Amount) {
	if c != nil {
		return c.CurrentBalance
	}
	return
}

func (c *CreditBalanceSummary) GetCurrentBalanceInBillingCurrency() (rv *AmountWithExchangeRate) {
	if c != nil {
		return c.CurrentBalanceInBillingCurrency
	}
	return
}

func (c *CreditBalanceSummary) GetEstimatedBalance() (rv *Amount) {
	if c != nil {
		return c.EstimatedBalance
	}
	return
}

func (c *CreditBalanceSummary) GetEstimatedBalanceInBillingCurrency() (rv *AmountWithExchangeRate) {
	if c != nil {
		return c.EstimatedBalanceInBillingCurrency
	}
	return
}

// CreditSummary - A credit summary resource.
type CreditSummary struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating
	// the latest version or not.
	ETag *string

	// The properties of the credit summary.
	Properties *CreditSummaryProperties

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (c *CreditSummary) GetETag() (rv string) {
	if c != nil && c.ETag != nil {
		return *c.ETag
	}
	return
}

func (c *CreditSummary) GetProperties() (rv *CreditSummaryProperties) {
	if c != nil {
		return c.Properties
	}
	return
}

func (c *CreditSummary) GetID() (rv string) {
	if c != nil && c.ID != nil {
		return *c.ID
	}
	return
}

func (c *CreditSummary) GetName() (rv string) {
	if c != nil && c.Name != nil {
		return *c.Name
	}
	return
}

func (c *CreditSummary) GetType() (rv string) {
	if c != nil && c.Type != nil {
		return *c.Type
	}
	return
}

// CreditSummaryProperties - The properties of the credit summary.
type CreditSummaryProperties struct {
	// READ-ONLY; Summary of balances associated with this credit summary.
	BalanceSummary *CreditBalanceSummary

	// READ-ONLY; Billing Currency.
	BillingCurrency *string

	// READ-ONLY; Credit Currency
	CreditCurrency *string

	// READ-ONLY; Expired credit.
	ExpiredCredit *Amount

	// READ-ONLY; Pending credit adjustments.
	PendingCreditAdjustments *Amount

	// READ-ONLY; Pending eligible charges.
	PendingEligibleCharges *Amount

	// READ-ONLY; Reseller details.
	Reseller *Reseller
}

func (c *CreditSummaryProperties) GetBalanceSummary() (rv *CreditBalanceSummary) {
	if c != nil {
		return c.BalanceSummary
	}
	return
}

func (c *CreditSummaryProperties) GetBillingCurrency() (rv string) {
	if c != nil && c.BillingCurrency != nil {
		return *c.BillingCurrency
	}
	return
}

func (c *CreditSummaryProperties) GetCreditCurrency() (rv string) {
	if c != nil && c.CreditCurrency != nil {
		return *c.CreditCurrency
	}
	return
}

func (c *CreditSummaryProperties) GetExpiredCredit() (rv *Amount) {
	if c != nil {
		return c.ExpiredCredit
	}
	return
}

func (c *CreditSummaryProperties) GetPendingCreditAdjustments() (rv *Amount) {
	if c != nil {
		return c.PendingCreditAdjustments
	}
	return
}

func (c *CreditSummaryProperties) GetPendingEligibleCharges() (rv *Amount) {
	if c != nil {
		return c.PendingEligibleCharges
	}
	return
}

func (c *CreditSummaryProperties) GetReseller() (rv *Reseller) {
	if c != nil {
		return c.Reseller
	}
	return
}

// CurrentSpend - The current amount of cost which is being tracked for a budget.
type CurrentSpend struct {
	// READ-ONLY; The total amount of cost which is being tracked by the budget.
	Amount *float64

	// READ-ONLY; The unit of measure for the budget amount.
	Unit *string
}

func (c *CurrentSpend) GetAmount() (rv float64) {
	if c != nil && c.Amount != nil {
		return *c.Amount
	}
	return
}

func (c *CurrentSpend) GetUnit() (rv string) {
	if c != nil && c.Unit != nil {
		return *c.Unit
	}
	return
}

// EventProperties - The event properties.
type EventProperties struct {
	// The type of event.
	EventType *EventType

	// READ-ONLY; Adjustments amount.
	Adjustments *Amount

	// READ-ONLY; Current balance.
	AdjustmentsInBillingCurrency *AmountWithExchangeRate

	// READ-ONLY; Billing Currency.
	BillingCurrency *string

	// READ-ONLY; Charges amount.
	Charges *Amount

	// READ-ONLY; Current balance.
	ChargesInBillingCurrency *AmountWithExchangeRate

	// READ-ONLY; Closed balance.
	ClosedBalance *Amount

	// READ-ONLY; Current balance.
	ClosedBalanceInBillingCurrency *AmountWithExchangeRate

	// READ-ONLY; Credit Currency
	CreditCurrency *string

	// READ-ONLY; Credit expired.
	CreditExpired *Amount

	// READ-ONLY; Current balance.
	CreditExpiredInBillingCurrency *AmountWithExchangeRate

	// READ-ONLY; Transaction description.
	Description *string

	// READ-ONLY; Invoice number.
	InvoiceNumber *string

	// READ-ONLY; New Credit.
	NewCredit *Amount

	// READ-ONLY; Current balance.
	NewCreditInBillingCurrency *AmountWithExchangeRate

	// READ-ONLY; Reseller details.
	Reseller *Reseller

	// READ-ONLY; Transaction date.
	TransactionDate *time.Time
}

func (e *EventProperties) GetEventType() (rv *EventType) {
	if e != nil {
		return e.EventType
	}
	return
}

func (e *EventProperties) GetAdjustments() (rv *Amount) {
	if e != nil {
		return e.Adjustments
	}
	return
}

func (e *EventProperties) GetAdjustmentsInBillingCurrency() (rv *AmountWithExchangeRate) {
	if e != nil {
		return e.AdjustmentsInBillingCurrency
	}
	return
}

func (e *EventProperties) GetBillingCurrency() (rv string) {
	if e != nil && e.BillingCurrency != nil {
		return *e.BillingCurrency
	}
	return
}

func (e *EventProperties) GetCharges() (rv *Amount) {
	if e != nil {
		return e.Charges
	}
	return
}

func (e *EventProperties) GetChargesInBillingCurrency() (rv *AmountWithExchangeRate) {
	if e != nil {
		return e.ChargesInBillingCurrency
	}
	return
}

func (e *EventProperties) GetClosedBalance() (rv *Amount) {
	if e != nil {
		return e.ClosedBalance
	}
	return
}

func (e *EventProperties) GetClosedBalanceInBillingCurrency() (rv *AmountWithExchangeRate) {
	if e != nil {
		return e.ClosedBalanceInBillingCurrency
	}
	return
}

func (e *EventProperties) GetCreditCurrency() (rv string) {
	if e != nil && e.CreditCurrency != nil {
		return *e.CreditCurrency
	}
	return
}

func (e *EventProperties) GetCreditExpired() (rv *Amount) {
	if e != nil {
		return e.CreditExpired
	}
	return
}

func (e *EventProperties) GetCreditExpiredInBillingCurrency() (rv *AmountWithExchangeRate) {
	if e != nil {
		return e.CreditExpiredInBillingCurrency
	}
	return
}

func (e *EventProperties) GetDescription() (rv string) {
	if e != nil && e.Description != nil {
		return *e.Description
	}
	return
}

func (e *EventProperties) GetInvoiceNumber() (rv string) {
	if e != nil && e.InvoiceNumber != nil {
		return *e.InvoiceNumber
	}
	return
}

func (e *EventProperties) GetNewCredit() (rv *Amount) {
	if e != nil {
		return e.NewCredit
	}
	return
}

func (e *EventProperties) GetNewCreditInBillingCurrency() (rv *AmountWithExchangeRate) {
	if e != nil {
		return e.NewCreditInBillingCurrency
	}
	return
}

func (e *EventProperties) GetReseller() (rv *Reseller) {
	if e != nil {
		return e.Reseller
	}
	return
}

func (e *EventProperties) GetTransactionDate() (rv *time.Time) {
	if e != nil {
		return e.TransactionDate
	}
	return
}

// EventSummary - An event summary resource.
type EventSummary struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating
	// the latest version or not.
	ETag *string

	// The event properties.
	Properties *EventProperties

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (e *EventSummary) GetETag() (rv string) {
	if e != nil && e.ETag != nil {
		return *e.ETag
	}
	return
}

func (e *EventSummary) GetProperties() (rv *EventProperties) {
	if e != nil {
		return e.Properties
	}
	return
}

func (e *EventSummary) GetID() (rv string) {
	if e != nil && e.ID != nil {
		return *e.ID
	}
	return
}

func (e *EventSummary) GetName() (rv string) {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return
}

func (e *EventSummary) GetType() (rv string) {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return
}

// Events - Result of listing event summary.
type Events struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string

	// READ-ONLY; The list of event summary.
	Value []*EventSummary
}

func (e *Events) GetNextLink() (rv string) {
	if e != nil && e.NextLink != nil {
		return *e.NextLink
	}
	return
}

func (e *Events) GetValue() (rv []*EventSummary) {
	if e != nil {
		return e.Value
	}
	return
}

// Forecast - A forecast resource.
type Forecast struct {
	// The properties of the forecast charge.
	Properties *ForecastProperties

	// READ-ONLY; Resource etag.
	Etag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (f *Forecast) GetProperties() (rv *ForecastProperties) {
	if f != nil {
		return f.Properties
	}
	return
}

func (f *Forecast) GetEtag() (rv string) {
	if f != nil && f.Etag != nil {
		return *f.Etag
	}
	return
}

func (f *Forecast) GetID() (rv string) {
	if f != nil && f.ID != nil {
		return *f.ID
	}
	return
}

func (f *Forecast) GetName() (rv string) {
	if f != nil && f.Name != nil {
		return *f.Name
	}
	return
}

func (f *Forecast) GetTags() (rv map[string]*string) {
	if f != nil {
		return f.Tags
	}
	return
}

func (f *Forecast) GetType() (rv string) {
	if f != nil && f.Type != nil {
		return *f.Type
	}
	return
}

// ForecastProperties - The properties of the forecast charge.
type ForecastProperties struct {
	// The type of the charge. Could be actual or forecast
	ChargeType *ChargeType

	// The granularity of forecast. Please note that Yearly is not currently supported in this API. The API will provide responses
	// in the Monthly grain if Yearly is selected. To get yearly grain data, please
	// use our newer Forecast API.
	Grain *Grain

	// READ-ONLY; The amount of charge
	Charge *float64

	// READ-ONLY; The details about the forecast confidence levels. This is populated only when chargeType is Forecast.
	ConfidenceLevels []*ForecastPropertiesConfidenceLevelsItem

	// READ-ONLY; The ISO currency in which the meter is charged, for example, USD.
	Currency *string

	// READ-ONLY; The usage date of the forecast.
	UsageDate *string
}

func (f *ForecastProperties) GetChargeType() (rv *ChargeType) {
	if f != nil {
		return f.ChargeType
	}
	return
}

func (f *ForecastProperties) GetGrain() (rv *Grain) {
	if f != nil {
		return f.Grain
	}
	return
}

func (f *ForecastProperties) GetCharge() (rv float64) {
	if f != nil && f.Charge != nil {
		return *f.Charge
	}
	return
}

func (f *ForecastProperties) GetConfidenceLevels() (rv []*ForecastPropertiesConfidenceLevelsItem) {
	if f != nil {
		return f.ConfidenceLevels
	}
	return
}

func (f *ForecastProperties) GetCurrency() (rv string) {
	if f != nil && f.Currency != nil {
		return *f.Currency
	}
	return
}

func (f *ForecastProperties) GetUsageDate() (rv string) {
	if f != nil && f.UsageDate != nil {
		return *f.UsageDate
	}
	return
}

type ForecastPropertiesConfidenceLevelsItem struct {
	// The boundary of the percentage, values could be 'Upper' or 'Lower'
	Bound *Bound

	// READ-ONLY; The percentage level of the confidence
	Percentage *float64

	// READ-ONLY; The amount of forecast within the percentage level
	Value *float64
}

func (f *ForecastPropertiesConfidenceLevelsItem) GetBound() (rv *Bound) {
	if f != nil {
		return f.Bound
	}
	return
}

func (f *ForecastPropertiesConfidenceLevelsItem) GetPercentage() (rv float64) {
	if f != nil && f.Percentage != nil {
		return *f.Percentage
	}
	return
}

func (f *ForecastPropertiesConfidenceLevelsItem) GetValue() (rv float64) {
	if f != nil && f.Value != nil {
		return *f.Value
	}
	return
}

// ForecastSpend - The forecasted cost which is being tracked for a budget.
type ForecastSpend struct {
	// READ-ONLY; The forecasted cost for the total time period which is being tracked by the budget. This value is only provided
	// if the budget contains a forecast alert type.
	Amount *float64

	// READ-ONLY; The unit of measure for the budget amount.
	Unit *string
}

func (f *ForecastSpend) GetAmount() (rv float64) {
	if f != nil && f.Amount != nil {
		return *f.Amount
	}
	return
}

func (f *ForecastSpend) GetUnit() (rv string) {
	if f != nil && f.Unit != nil {
		return *f.Unit
	}
	return
}

// ForecastsListResult - Result of listing forecasts. It contains a list of available forecasts.
type ForecastsListResult struct {
	// READ-ONLY; The list of forecasts.
	Value []*Forecast
}

func (f *ForecastsListResult) GetValue() (rv []*Forecast) {
	if f != nil {
		return f.Value
	}
	return
}

// LegacyChargeSummary - Legacy charge summary.
type LegacyChargeSummary struct {
	// REQUIRED; Specifies the kind of charge summary.
	Kind *ChargeSummaryKind

	// REQUIRED; Properties for legacy charge summary
	Properties *LegacyChargeSummaryProperties

	// READ-ONLY; Resource eTag.
	ETag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (l *LegacyChargeSummary) GetKind() (rv *ChargeSummaryKind) {
	if l != nil {
		return l.Kind
	}
	return
}

func (l *LegacyChargeSummary) GetProperties() (rv *LegacyChargeSummaryProperties) {
	if l != nil {
		return l.Properties
	}
	return
}

func (l *LegacyChargeSummary) GetETag() (rv string) {
	if l != nil && l.ETag != nil {
		return *l.ETag
	}
	return
}

func (l *LegacyChargeSummary) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LegacyChargeSummary) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LegacyChargeSummary) GetTags() (rv map[string]*string) {
	if l != nil {
		return l.Tags
	}
	return
}

func (l *LegacyChargeSummary) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

// GetChargeSummary implements the ChargeSummaryClassification interface for type LegacyChargeSummary.
func (l *LegacyChargeSummary) GetChargeSummary() *ChargeSummary {
	return &ChargeSummary{
		ETag: l.ETag,
		ID:   l.ID,
		Kind: l.Kind,
		Name: l.Name,
		Tags: l.Tags,
		Type: l.Type,
	}
}

// LegacyChargeSummaryProperties - The properties of legacy charge summary.
type LegacyChargeSummaryProperties struct {
	// READ-ONLY; Azure Charges.
	AzureCharges *float64

	// READ-ONLY; Marketplace Charges.
	AzureMarketplaceCharges *float64

	// READ-ONLY; The id of the billing period resource that the charge belongs to.
	BillingPeriodID *string

	// READ-ONLY; Charges Billed separately.
	ChargesBilledSeparately *float64

	// READ-ONLY; Currency Code
	Currency *string

	// READ-ONLY; Usage end date.
	UsageEnd *string

	// READ-ONLY; Usage start date.
	UsageStart *string
}

func (l *LegacyChargeSummaryProperties) GetAzureCharges() (rv float64) {
	if l != nil && l.AzureCharges != nil {
		return *l.AzureCharges
	}
	return
}

func (l *LegacyChargeSummaryProperties) GetAzureMarketplaceCharges() (rv float64) {
	if l != nil && l.AzureMarketplaceCharges != nil {
		return *l.AzureMarketplaceCharges
	}
	return
}

func (l *LegacyChargeSummaryProperties) GetBillingPeriodID() (rv string) {
	if l != nil && l.BillingPeriodID != nil {
		return *l.BillingPeriodID
	}
	return
}

func (l *LegacyChargeSummaryProperties) GetChargesBilledSeparately() (rv float64) {
	if l != nil && l.ChargesBilledSeparately != nil {
		return *l.ChargesBilledSeparately
	}
	return
}

func (l *LegacyChargeSummaryProperties) GetCurrency() (rv string) {
	if l != nil && l.Currency != nil {
		return *l.Currency
	}
	return
}

func (l *LegacyChargeSummaryProperties) GetUsageEnd() (rv string) {
	if l != nil && l.UsageEnd != nil {
		return *l.UsageEnd
	}
	return
}

func (l *LegacyChargeSummaryProperties) GetUsageStart() (rv string) {
	if l != nil && l.UsageStart != nil {
		return *l.UsageStart
	}
	return
}

// LegacyReservationRecommendation - Legacy reservation recommendation.
type LegacyReservationRecommendation struct {
	// REQUIRED; Specifies the kind of reservation recommendation.
	Kind *ReservationRecommendationKind

	// REQUIRED; Properties for legacy reservation recommendation
	Properties *LegacyReservationRecommendationProperties

	// READ-ONLY; Resource eTag.
	ETag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource location
	Location *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource sku
	SKU *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (l *LegacyReservationRecommendation) GetKind() (rv *ReservationRecommendationKind) {
	if l != nil {
		return l.Kind
	}
	return
}

func (l *LegacyReservationRecommendation) GetProperties() (rv *LegacyReservationRecommendationProperties) {
	if l != nil {
		return l.Properties
	}
	return
}

func (l *LegacyReservationRecommendation) GetETag() (rv string) {
	if l != nil && l.ETag != nil {
		return *l.ETag
	}
	return
}

func (l *LegacyReservationRecommendation) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LegacyReservationRecommendation) GetLocation() (rv string) {
	if l != nil && l.Location != nil {
		return *l.Location
	}
	return
}

func (l *LegacyReservationRecommendation) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LegacyReservationRecommendation) GetSKU() (rv string) {
	if l != nil && l.SKU != nil {
		return *l.SKU
	}
	return
}

func (l *LegacyReservationRecommendation) GetTags() (rv map[string]*string) {
	if l != nil {
		return l.Tags
	}
	return
}

func (l *LegacyReservationRecommendation) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

// GetReservationRecommendation implements the ReservationRecommendationClassification interface for type LegacyReservationRecommendation.
func (l *LegacyReservationRecommendation) GetReservationRecommendation() *ReservationRecommendation {
	return &ReservationRecommendation{
		ETag:     l.ETag,
		ID:       l.ID,
		Kind:     l.Kind,
		Location: l.Location,
		Name:     l.Name,
		SKU:      l.SKU,
		Tags:     l.Tags,
		Type:     l.Type,
	}
}

// LegacyReservationRecommendationProperties - The properties of the reservation recommendation.
type LegacyReservationRecommendationProperties struct {
	// READ-ONLY; The total amount of cost without reserved instances.
	CostWithNoReservedInstances *float64

	// READ-ONLY; The usage date for looking back.
	FirstUsageDate *time.Time

	// READ-ONLY; The instance Flexibility Group.
	InstanceFlexibilityGroup *string

	// READ-ONLY; The instance Flexibility Ratio.
	InstanceFlexibilityRatio *float32

	// READ-ONLY; The number of days of usage to look back for recommendation.
	LookBackPeriod *string

	// READ-ONLY; The meter id (GUID)
	MeterID *string

	// READ-ONLY; Total estimated savings with reserved instances.
	NetSavings *float64

	// READ-ONLY; The normalized Size.
	NormalizedSize *string

	// READ-ONLY; Recommended quality for reserved instances.
	RecommendedQuantity *float64

	// READ-ONLY; The recommended Quantity Normalized.
	RecommendedQuantityNormalized *float32

	// READ-ONLY; The azure resource type.
	ResourceType *string

	// READ-ONLY; List of sku properties
	SKUProperties []*SKUProperty

	// READ-ONLY; Shared or single recommendation.
	Scope *string

	// READ-ONLY; RI recommendations in one or three year terms.
	Term *string

	// READ-ONLY; The total amount of cost with reserved instances.
	TotalCostWithReservedInstances *float64
}

func (l *LegacyReservationRecommendationProperties) GetCostWithNoReservedInstances() (rv float64) {
	if l != nil && l.CostWithNoReservedInstances != nil {
		return *l.CostWithNoReservedInstances
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetFirstUsageDate() (rv *time.Time) {
	if l != nil {
		return l.FirstUsageDate
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetInstanceFlexibilityGroup() (rv string) {
	if l != nil && l.InstanceFlexibilityGroup != nil {
		return *l.InstanceFlexibilityGroup
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetInstanceFlexibilityRatio() (rv float32) {
	if l != nil && l.InstanceFlexibilityRatio != nil {
		return *l.InstanceFlexibilityRatio
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetLookBackPeriod() (rv string) {
	if l != nil && l.LookBackPeriod != nil {
		return *l.LookBackPeriod
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetMeterID() (rv string) {
	if l != nil && l.MeterID != nil {
		return *l.MeterID
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetNetSavings() (rv float64) {
	if l != nil && l.NetSavings != nil {
		return *l.NetSavings
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetNormalizedSize() (rv string) {
	if l != nil && l.NormalizedSize != nil {
		return *l.NormalizedSize
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetRecommendedQuantity() (rv float64) {
	if l != nil && l.RecommendedQuantity != nil {
		return *l.RecommendedQuantity
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetRecommendedQuantityNormalized() (rv float32) {
	if l != nil && l.RecommendedQuantityNormalized != nil {
		return *l.RecommendedQuantityNormalized
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetResourceType() (rv string) {
	if l != nil && l.ResourceType != nil {
		return *l.ResourceType
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetSKUProperties() (rv []*SKUProperty) {
	if l != nil {
		return l.SKUProperties
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetScope() (rv string) {
	if l != nil && l.Scope != nil {
		return *l.Scope
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetTerm() (rv string) {
	if l != nil && l.Term != nil {
		return *l.Term
	}
	return
}

func (l *LegacyReservationRecommendationProperties) GetTotalCostWithReservedInstances() (rv float64) {
	if l != nil && l.TotalCostWithReservedInstances != nil {
		return *l.TotalCostWithReservedInstances
	}
	return
}

// LegacyReservationTransactionProperties - The properties of a legacy reservation transaction.
type LegacyReservationTransactionProperties struct {
	// READ-ONLY; The name of the account that makes the transaction.
	AccountName *string

	// READ-ONLY; The email of the account owner that makes the transaction.
	AccountOwnerEmail *string

	// READ-ONLY; The charge of the transaction.
	Amount *float64

	// READ-ONLY; This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
	ArmSKUName *string

	// READ-ONLY; The billing frequency, which can be either one-time or recurring.
	BillingFrequency *string

	// READ-ONLY; The cost center of this department if it is a department and a cost center is provided.
	CostCenter *string

	// READ-ONLY; The ISO currency in which the transaction is charged, for example, USD.
	Currency *string

	// READ-ONLY; The current enrollment.
	CurrentEnrollment *string

	// READ-ONLY; The department name.
	DepartmentName *string

	// READ-ONLY; The description of the transaction.
	Description *string

	// READ-ONLY; The date of the transaction
	EventDate *time.Time

	// READ-ONLY; The type of the transaction (Purchase, Cancel, etc.)
	EventType *string

	// READ-ONLY; The purchasing enrollment.
	PurchasingEnrollment *string

	// READ-ONLY; The subscription guid that makes the transaction.
	PurchasingSubscriptionGUID *string

	// READ-ONLY; The subscription name that makes the transaction.
	PurchasingSubscriptionName *string

	// READ-ONLY; The quantity of the transaction.
	Quantity *float64

	// READ-ONLY; The region of the transaction.
	Region *string

	// READ-ONLY; The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents
	// a single purchase transaction. A reservation order contains reservations. The reservation
	// order specifies the VM size and region for the reservations.
	ReservationOrderID *string

	// READ-ONLY; The name of the reservation order.
	ReservationOrderName *string

	// READ-ONLY; This is the term of the transaction.
	Term *string
}

func (l *LegacyReservationTransactionProperties) GetAccountName() (rv string) {
	if l != nil && l.AccountName != nil {
		return *l.AccountName
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetAccountOwnerEmail() (rv string) {
	if l != nil && l.AccountOwnerEmail != nil {
		return *l.AccountOwnerEmail
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetAmount() (rv float64) {
	if l != nil && l.Amount != nil {
		return *l.Amount
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetArmSKUName() (rv string) {
	if l != nil && l.ArmSKUName != nil {
		return *l.ArmSKUName
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetBillingFrequency() (rv string) {
	if l != nil && l.BillingFrequency != nil {
		return *l.BillingFrequency
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetCostCenter() (rv string) {
	if l != nil && l.CostCenter != nil {
		return *l.CostCenter
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetCurrency() (rv string) {
	if l != nil && l.Currency != nil {
		return *l.Currency
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetCurrentEnrollment() (rv string) {
	if l != nil && l.CurrentEnrollment != nil {
		return *l.CurrentEnrollment
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetDepartmentName() (rv string) {
	if l != nil && l.DepartmentName != nil {
		return *l.DepartmentName
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetDescription() (rv string) {
	if l != nil && l.Description != nil {
		return *l.Description
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetEventDate() (rv *time.Time) {
	if l != nil {
		return l.EventDate
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetEventType() (rv string) {
	if l != nil && l.EventType != nil {
		return *l.EventType
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetPurchasingEnrollment() (rv string) {
	if l != nil && l.PurchasingEnrollment != nil {
		return *l.PurchasingEnrollment
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetPurchasingSubscriptionGUID() (rv string) {
	if l != nil && l.PurchasingSubscriptionGUID != nil {
		return *l.PurchasingSubscriptionGUID
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetPurchasingSubscriptionName() (rv string) {
	if l != nil && l.PurchasingSubscriptionName != nil {
		return *l.PurchasingSubscriptionName
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetQuantity() (rv float64) {
	if l != nil && l.Quantity != nil {
		return *l.Quantity
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetRegion() (rv string) {
	if l != nil && l.Region != nil {
		return *l.Region
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetReservationOrderID() (rv string) {
	if l != nil && l.ReservationOrderID != nil {
		return *l.ReservationOrderID
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetReservationOrderName() (rv string) {
	if l != nil && l.ReservationOrderName != nil {
		return *l.ReservationOrderName
	}
	return
}

func (l *LegacyReservationTransactionProperties) GetTerm() (rv string) {
	if l != nil && l.Term != nil {
		return *l.Term
	}
	return
}

// LegacyUsageDetail - Legacy usage detail.
type LegacyUsageDetail struct {
	// REQUIRED; Specifies the kind of usage details.
	Kind *UsageDetailsKind

	// REQUIRED; Properties for legacy usage details
	Properties *LegacyUsageDetailProperties

	// READ-ONLY; Resource etag.
	Etag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (l *LegacyUsageDetail) GetKind() (rv *UsageDetailsKind) {
	if l != nil {
		return l.Kind
	}
	return
}

func (l *LegacyUsageDetail) GetProperties() (rv *LegacyUsageDetailProperties) {
	if l != nil {
		return l.Properties
	}
	return
}

func (l *LegacyUsageDetail) GetEtag() (rv string) {
	if l != nil && l.Etag != nil {
		return *l.Etag
	}
	return
}

func (l *LegacyUsageDetail) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LegacyUsageDetail) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LegacyUsageDetail) GetTags() (rv map[string]*string) {
	if l != nil {
		return l.Tags
	}
	return
}

func (l *LegacyUsageDetail) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

// GetUsageDetail implements the UsageDetailClassification interface for type LegacyUsageDetail.
func (l *LegacyUsageDetail) GetUsageDetail() *UsageDetail {
	return &UsageDetail{
		Etag: l.Etag,
		ID:   l.ID,
		Kind: l.Kind,
		Name: l.Name,
		Tags: l.Tags,
		Type: l.Type,
	}
}

// LegacyUsageDetailProperties - The properties of the legacy usage detail.
type LegacyUsageDetailProperties struct {
	// READ-ONLY; Account Name.
	AccountName *string

	// READ-ONLY; Account Owner Id.
	AccountOwnerID *string

	// READ-ONLY; Additional details of this usage item. By default this is not populated, unless it's specified in $expand. Use
	// this field to get usage line item specific details such as the actual VM Size
	// (ServiceType) or the ratio in which the reservation discount is applied.
	AdditionalInfo *string

	// READ-ONLY; Billing Account identifier.
	BillingAccountID *string

	// READ-ONLY; Billing Account Name.
	BillingAccountName *string

	// READ-ONLY; Billing Currency.
	BillingCurrency *string

	// READ-ONLY; The billing period end date.
	BillingPeriodEndDate *time.Time

	// READ-ONLY; The billing period start date.
	BillingPeriodStartDate *time.Time

	// READ-ONLY; Billing Profile identifier.
	BillingProfileID *string

	// READ-ONLY; Billing Profile Name.
	BillingProfileName *string

	// READ-ONLY; Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a refund.
	ChargeType *string

	// READ-ONLY; Consumed service name. Name of the azure resource provider that emits the usage or was purchased. This value
	// is not provided for marketplace usage.
	ConsumedService *string

	// READ-ONLY; The amount of cost before tax.
	Cost *float64

	// READ-ONLY; The cost center of this department if it is a department and a cost center is provided.
	CostCenter *string

	// READ-ONLY; Date for the usage record.
	Date *time.Time

	// READ-ONLY; Effective Price that's charged for the usage.
	EffectivePrice *float64

	// READ-ONLY; Indicates how frequently this charge will occur. OneTime for purchases which only happen once, Monthly for fees
	// which recur every month, and UsageBased for charges based on how much a service is used.
	Frequency *string

	// READ-ONLY; Invoice Section Name.
	InvoiceSection *string

	// READ-ONLY; Is Azure Credit Eligible.
	IsAzureCreditEligible *bool

	// READ-ONLY; The details about the meter. By default this is not populated, unless it's specified in $expand.
	MeterDetails *MeterDetailsResponse

	// READ-ONLY; The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter
	// for which the reservation was purchased. For the actual VM Size for which the reservation is
	// purchased see productOrderName.
	MeterID *string

	// READ-ONLY; Offer Id. Ex: MS-AZR-0017P, MS-AZR-0148P.
	OfferID *string

	// READ-ONLY; Part Number of the service used. Can be used to join with the price sheet. Not available for marketplace.
	PartNumber *string

	// READ-ONLY; Plan Name.
	PlanName *string

	// READ-ONLY; Product name for the consumed service or purchase. Not available for Marketplace.
	Product *string

	// READ-ONLY; Product Order Id. For reservations this is the Reservation Order ID.
	ProductOrderID *string

	// READ-ONLY; Product Order Name. For reservations this is the SKU that was purchased.
	ProductOrderName *string

	// READ-ONLY; Publisher Name.
	PublisherName *string

	// READ-ONLY; Publisher Type.
	PublisherType *string

	// READ-ONLY; The usage quantity.
	Quantity *float64

	// READ-ONLY; ARM resource id of the reservation. Only applies to records relevant to reservations.
	ReservationID *string

	// READ-ONLY; User provided display name of the reservation. Last known name for a particular day is populated in the daily
	// data. Only applies to records relevant to reservations.
	ReservationName *string

	// READ-ONLY; Resource Group Name.
	ResourceGroup *string

	// READ-ONLY; Azure resource manager resource identifier.
	ResourceID *string

	// READ-ONLY; Resource Location.
	ResourceLocation *string

	// READ-ONLY; Resource Name.
	ResourceName *string

	// READ-ONLY; Service Info 1.
	ServiceInfo1 *string

	// READ-ONLY; Service Info 2.
	ServiceInfo2 *string

	// READ-ONLY; Subscription guid.
	SubscriptionID *string

	// READ-ONLY; Subscription name.
	SubscriptionName *string

	// READ-ONLY; Term (in months). 1 month for monthly recurring purchase. 12 months for a 1 year reservation. 36 months for
	// a 3 year reservation.
	Term *string

	// READ-ONLY; Unit Price is the price applicable to you. (your EA or other contract price).
	UnitPrice *float64
}

func (l *LegacyUsageDetailProperties) GetAccountName() (rv string) {
	if l != nil && l.AccountName != nil {
		return *l.AccountName
	}
	return
}

func (l *LegacyUsageDetailProperties) GetAccountOwnerID() (rv string) {
	if l != nil && l.AccountOwnerID != nil {
		return *l.AccountOwnerID
	}
	return
}

func (l *LegacyUsageDetailProperties) GetAdditionalInfo() (rv string) {
	if l != nil && l.AdditionalInfo != nil {
		return *l.AdditionalInfo
	}
	return
}

func (l *LegacyUsageDetailProperties) GetBillingAccountID() (rv string) {
	if l != nil && l.BillingAccountID != nil {
		return *l.BillingAccountID
	}
	return
}

func (l *LegacyUsageDetailProperties) GetBillingAccountName() (rv string) {
	if l != nil && l.BillingAccountName != nil {
		return *l.BillingAccountName
	}
	return
}

func (l *LegacyUsageDetailProperties) GetBillingCurrency() (rv string) {
	if l != nil && l.BillingCurrency != nil {
		return *l.BillingCurrency
	}
	return
}

func (l *LegacyUsageDetailProperties) GetBillingPeriodEndDate() (rv *time.Time) {
	if l != nil {
		return l.BillingPeriodEndDate
	}
	return
}

func (l *LegacyUsageDetailProperties) GetBillingPeriodStartDate() (rv *time.Time) {
	if l != nil {
		return l.BillingPeriodStartDate
	}
	return
}

func (l *LegacyUsageDetailProperties) GetBillingProfileID() (rv string) {
	if l != nil && l.BillingProfileID != nil {
		return *l.BillingProfileID
	}
	return
}

func (l *LegacyUsageDetailProperties) GetBillingProfileName() (rv string) {
	if l != nil && l.BillingProfileName != nil {
		return *l.BillingProfileName
	}
	return
}

func (l *LegacyUsageDetailProperties) GetChargeType() (rv string) {
	if l != nil && l.ChargeType != nil {
		return *l.ChargeType
	}
	return
}

func (l *LegacyUsageDetailProperties) GetConsumedService() (rv string) {
	if l != nil && l.ConsumedService != nil {
		return *l.ConsumedService
	}
	return
}

func (l *LegacyUsageDetailProperties) GetCost() (rv float64) {
	if l != nil && l.Cost != nil {
		return *l.Cost
	}
	return
}

func (l *LegacyUsageDetailProperties) GetCostCenter() (rv string) {
	if l != nil && l.CostCenter != nil {
		return *l.CostCenter
	}
	return
}

func (l *LegacyUsageDetailProperties) GetDate() (rv *time.Time) {
	if l != nil {
		return l.Date
	}
	return
}

func (l *LegacyUsageDetailProperties) GetEffectivePrice() (rv float64) {
	if l != nil && l.EffectivePrice != nil {
		return *l.EffectivePrice
	}
	return
}

func (l *LegacyUsageDetailProperties) GetFrequency() (rv string) {
	if l != nil && l.Frequency != nil {
		return *l.Frequency
	}
	return
}

func (l *LegacyUsageDetailProperties) GetInvoiceSection() (rv string) {
	if l != nil && l.InvoiceSection != nil {
		return *l.InvoiceSection
	}
	return
}

func (l *LegacyUsageDetailProperties) GetIsAzureCreditEligible() (rv bool) {
	if l != nil && l.IsAzureCreditEligible != nil {
		return *l.IsAzureCreditEligible
	}
	return
}

func (l *LegacyUsageDetailProperties) GetMeterDetails() (rv *MeterDetailsResponse) {
	if l != nil {
		return l.MeterDetails
	}
	return
}

func (l *LegacyUsageDetailProperties) GetMeterID() (rv string) {
	if l != nil && l.MeterID != nil {
		return *l.MeterID
	}
	return
}

func (l *LegacyUsageDetailProperties) GetOfferID() (rv string) {
	if l != nil && l.OfferID != nil {
		return *l.OfferID
	}
	return
}

func (l *LegacyUsageDetailProperties) GetPartNumber() (rv string) {
	if l != nil && l.PartNumber != nil {
		return *l.PartNumber
	}
	return
}

func (l *LegacyUsageDetailProperties) GetPlanName() (rv string) {
	if l != nil && l.PlanName != nil {
		return *l.PlanName
	}
	return
}

func (l *LegacyUsageDetailProperties) GetProduct() (rv string) {
	if l != nil && l.Product != nil {
		return *l.Product
	}
	return
}

func (l *LegacyUsageDetailProperties) GetProductOrderID() (rv string) {
	if l != nil && l.ProductOrderID != nil {
		return *l.ProductOrderID
	}
	return
}

func (l *LegacyUsageDetailProperties) GetProductOrderName() (rv string) {
	if l != nil && l.ProductOrderName != nil {
		return *l.ProductOrderName
	}
	return
}

func (l *LegacyUsageDetailProperties) GetPublisherName() (rv string) {
	if l != nil && l.PublisherName != nil {
		return *l.PublisherName
	}
	return
}

func (l *LegacyUsageDetailProperties) GetPublisherType() (rv string) {
	if l != nil && l.PublisherType != nil {
		return *l.PublisherType
	}
	return
}

func (l *LegacyUsageDetailProperties) GetQuantity() (rv float64) {
	if l != nil && l.Quantity != nil {
		return *l.Quantity
	}
	return
}

func (l *LegacyUsageDetailProperties) GetReservationID() (rv string) {
	if l != nil && l.ReservationID != nil {
		return *l.ReservationID
	}
	return
}

func (l *LegacyUsageDetailProperties) GetReservationName() (rv string) {
	if l != nil && l.ReservationName != nil {
		return *l.ReservationName
	}
	return
}

func (l *LegacyUsageDetailProperties) GetResourceGroup() (rv string) {
	if l != nil && l.ResourceGroup != nil {
		return *l.ResourceGroup
	}
	return
}

func (l *LegacyUsageDetailProperties) GetResourceID() (rv string) {
	if l != nil && l.ResourceID != nil {
		return *l.ResourceID
	}
	return
}

func (l *LegacyUsageDetailProperties) GetResourceLocation() (rv string) {
	if l != nil && l.ResourceLocation != nil {
		return *l.ResourceLocation
	}
	return
}

func (l *LegacyUsageDetailProperties) GetResourceName() (rv string) {
	if l != nil && l.ResourceName != nil {
		return *l.ResourceName
	}
	return
}

func (l *LegacyUsageDetailProperties) GetServiceInfo1() (rv string) {
	if l != nil && l.ServiceInfo1 != nil {
		return *l.ServiceInfo1
	}
	return
}

func (l *LegacyUsageDetailProperties) GetServiceInfo2() (rv string) {
	if l != nil && l.ServiceInfo2 != nil {
		return *l.ServiceInfo2
	}
	return
}

func (l *LegacyUsageDetailProperties) GetSubscriptionID() (rv string) {
	if l != nil && l.SubscriptionID != nil {
		return *l.SubscriptionID
	}
	return
}

func (l *LegacyUsageDetailProperties) GetSubscriptionName() (rv string) {
	if l != nil && l.SubscriptionName != nil {
		return *l.SubscriptionName
	}
	return
}

func (l *LegacyUsageDetailProperties) GetTerm() (rv string) {
	if l != nil && l.Term != nil {
		return *l.Term
	}
	return
}

func (l *LegacyUsageDetailProperties) GetUnitPrice() (rv float64) {
	if l != nil && l.UnitPrice != nil {
		return *l.UnitPrice
	}
	return
}

// LotProperties - The lot properties.
type LotProperties struct {
	// READ-ONLY; Billing Currency.
	BillingCurrency *string

	// READ-ONLY; Closed balance.
	ClosedBalance *Amount

	// READ-ONLY; Current balance.
	ClosedBalanceInBillingCurrency *AmountWithExchangeRate

	// READ-ONLY; Credit Currency
	CreditCurrency *string

	// READ-ONLY; Expiration date.
	ExpirationDate *time.Time

	// READ-ONLY; Original amount.
	OriginalAmount *Amount

	// READ-ONLY; Current balance.
	OriginalAmountInBillingCurrency *AmountWithExchangeRate

	// READ-ONLY; PO number.
	PoNumber *string

	// READ-ONLY; Reseller details.
	Reseller *Reseller

	// READ-ONLY; Lot source.
	Source *LotSource

	// READ-ONLY; Start date.
	StartDate *time.Time
}

func (l *LotProperties) GetBillingCurrency() (rv string) {
	if l != nil && l.BillingCurrency != nil {
		return *l.BillingCurrency
	}
	return
}

func (l *LotProperties) GetClosedBalance() (rv *Amount) {
	if l != nil {
		return l.ClosedBalance
	}
	return
}

func (l *LotProperties) GetClosedBalanceInBillingCurrency() (rv *AmountWithExchangeRate) {
	if l != nil {
		return l.ClosedBalanceInBillingCurrency
	}
	return
}

func (l *LotProperties) GetCreditCurrency() (rv string) {
	if l != nil && l.CreditCurrency != nil {
		return *l.CreditCurrency
	}
	return
}

func (l *LotProperties) GetExpirationDate() (rv *time.Time) {
	if l != nil {
		return l.ExpirationDate
	}
	return
}

func (l *LotProperties) GetOriginalAmount() (rv *Amount) {
	if l != nil {
		return l.OriginalAmount
	}
	return
}

func (l *LotProperties) GetOriginalAmountInBillingCurrency() (rv *AmountWithExchangeRate) {
	if l != nil {
		return l.OriginalAmountInBillingCurrency
	}
	return
}

func (l *LotProperties) GetPoNumber() (rv string) {
	if l != nil && l.PoNumber != nil {
		return *l.PoNumber
	}
	return
}

func (l *LotProperties) GetReseller() (rv *Reseller) {
	if l != nil {
		return l.Reseller
	}
	return
}

func (l *LotProperties) GetSource() (rv *LotSource) {
	if l != nil {
		return l.Source
	}
	return
}

func (l *LotProperties) GetStartDate() (rv *time.Time) {
	if l != nil {
		return l.StartDate
	}
	return
}

// LotSummary - A lot summary resource.
type LotSummary struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating
	// the latest version or not.
	ETag *string

	// The lot properties.
	Properties *LotProperties

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (l *LotSummary) GetETag() (rv string) {
	if l != nil && l.ETag != nil {
		return *l.ETag
	}
	return
}

func (l *LotSummary) GetProperties() (rv *LotProperties) {
	if l != nil {
		return l.Properties
	}
	return
}

func (l *LotSummary) GetID() (rv string) {
	if l != nil && l.ID != nil {
		return *l.ID
	}
	return
}

func (l *LotSummary) GetName() (rv string) {
	if l != nil && l.Name != nil {
		return *l.Name
	}
	return
}

func (l *LotSummary) GetType() (rv string) {
	if l != nil && l.Type != nil {
		return *l.Type
	}
	return
}

// Lots - Result of listing lot summary.
type Lots struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string

	// READ-ONLY; The list of lot summary.
	Value []*LotSummary
}

func (l *Lots) GetNextLink() (rv string) {
	if l != nil && l.NextLink != nil {
		return *l.NextLink
	}
	return
}

func (l *Lots) GetValue() (rv []*LotSummary) {
	if l != nil {
		return l.Value
	}
	return
}

// ManagementGroupAggregatedCostProperties - The properties of the Management Group Aggregated Cost.
type ManagementGroupAggregatedCostProperties struct {
	// Children of a management group
	Children []*ManagementGroupAggregatedCostResult

	// List of subscription Guids excluded from the calculation of aggregated cost
	ExcludedSubscriptions []*string

	// List of subscription Guids included in the calculation of aggregated cost
	IncludedSubscriptions []*string

	// READ-ONLY; Azure Charges.
	AzureCharges *float64

	// READ-ONLY; The id of the billing period resource that the aggregated cost belongs to.
	BillingPeriodID *string

	// READ-ONLY; Charges Billed Separately.
	ChargesBilledSeparately *float64

	// READ-ONLY; The ISO currency in which the meter is charged, for example, USD.
	Currency *string

	// READ-ONLY; Marketplace Charges.
	MarketplaceCharges *float64

	// READ-ONLY; The end of the date time range covered by the aggregated cost.
	UsageEnd *time.Time

	// READ-ONLY; The start of the date time range covered by aggregated cost.
	UsageStart *time.Time
}

func (m *ManagementGroupAggregatedCostProperties) GetChildren() (rv []*ManagementGroupAggregatedCostResult) {
	if m != nil {
		return m.Children
	}
	return
}

func (m *ManagementGroupAggregatedCostProperties) GetExcludedSubscriptions() (rv []*string) {
	if m != nil {
		return m.ExcludedSubscriptions
	}
	return
}

func (m *ManagementGroupAggregatedCostProperties) GetIncludedSubscriptions() (rv []*string) {
	if m != nil {
		return m.IncludedSubscriptions
	}
	return
}

func (m *ManagementGroupAggregatedCostProperties) GetAzureCharges() (rv float64) {
	if m != nil && m.AzureCharges != nil {
		return *m.AzureCharges
	}
	return
}

func (m *ManagementGroupAggregatedCostProperties) GetBillingPeriodID() (rv string) {
	if m != nil && m.BillingPeriodID != nil {
		return *m.BillingPeriodID
	}
	return
}

func (m *ManagementGroupAggregatedCostProperties) GetChargesBilledSeparately() (rv float64) {
	if m != nil && m.ChargesBilledSeparately != nil {
		return *m.ChargesBilledSeparately
	}
	return
}

func (m *ManagementGroupAggregatedCostProperties) GetCurrency() (rv string) {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return
}

func (m *ManagementGroupAggregatedCostProperties) GetMarketplaceCharges() (rv float64) {
	if m != nil && m.MarketplaceCharges != nil {
		return *m.MarketplaceCharges
	}
	return
}

func (m *ManagementGroupAggregatedCostProperties) GetUsageEnd() (rv *time.Time) {
	if m != nil {
		return m.UsageEnd
	}
	return
}

func (m *ManagementGroupAggregatedCostProperties) GetUsageStart() (rv *time.Time) {
	if m != nil {
		return m.UsageStart
	}
	return
}

// ManagementGroupAggregatedCostResult - A management group aggregated cost resource.
type ManagementGroupAggregatedCostResult struct {
	// The properties of the Management Group Aggregated Cost.
	Properties *ManagementGroupAggregatedCostProperties

	// READ-ONLY; Resource etag.
	Etag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (m *ManagementGroupAggregatedCostResult) GetProperties() (rv *ManagementGroupAggregatedCostProperties) {
	if m != nil {
		return m.Properties
	}
	return
}

func (m *ManagementGroupAggregatedCostResult) GetEtag() (rv string) {
	if m != nil && m.Etag != nil {
		return *m.Etag
	}
	return
}

func (m *ManagementGroupAggregatedCostResult) GetID() (rv string) {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return
}

func (m *ManagementGroupAggregatedCostResult) GetName() (rv string) {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return
}

func (m *ManagementGroupAggregatedCostResult) GetTags() (rv map[string]*string) {
	if m != nil {
		return m.Tags
	}
	return
}

func (m *ManagementGroupAggregatedCostResult) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

// Marketplace - An marketplace resource.
type Marketplace struct {
	// The properties of the marketplace usage detail.
	Properties *MarketplaceProperties

	// READ-ONLY; Resource etag.
	Etag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (m *Marketplace) GetProperties() (rv *MarketplaceProperties) {
	if m != nil {
		return m.Properties
	}
	return
}

func (m *Marketplace) GetEtag() (rv string) {
	if m != nil && m.Etag != nil {
		return *m.Etag
	}
	return
}

func (m *Marketplace) GetID() (rv string) {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return
}

func (m *Marketplace) GetName() (rv string) {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return
}

func (m *Marketplace) GetTags() (rv map[string]*string) {
	if m != nil {
		return m.Tags
	}
	return
}

func (m *Marketplace) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

// MarketplaceProperties - The properties of the marketplace usage detail.
type MarketplaceProperties struct {
	// READ-ONLY; Account name.
	AccountName *string

	// READ-ONLY; Additional information.
	AdditionalInfo *string

	// READ-ONLY; Additional details of this usage item. By default this is not populated, unless it's specified in $expand.
	AdditionalProperties *string

	// READ-ONLY; The id of the billing period resource that the usage belongs to.
	BillingPeriodID *string

	// READ-ONLY; The quantity of usage.
	ConsumedQuantity *float64

	// READ-ONLY; Consumed service name.
	ConsumedService *string

	// READ-ONLY; The cost center of this department if it is a department and a costcenter exists
	CostCenter *string

	// READ-ONLY; The ISO currency in which the meter is charged, for example, USD.
	Currency *string

	// READ-ONLY; Department name.
	DepartmentName *string

	// READ-ONLY; The uri of the resource instance that the usage is about.
	InstanceID *string

	// READ-ONLY; The name of the resource instance that the usage is about.
	InstanceName *string

	// READ-ONLY; The estimated usage is subject to change.
	IsEstimated *bool

	// READ-ONLY; Flag indicating whether this is a recurring charge or not.
	IsRecurringCharge *bool

	// READ-ONLY; The meter id (GUID).
	MeterID *string

	// READ-ONLY; The type of offer.
	OfferName *string

	// READ-ONLY; The order number.
	OrderNumber *string

	// READ-ONLY; The name of plan.
	PlanName *string

	// READ-ONLY; The amount of cost before tax.
	PretaxCost *float64

	// READ-ONLY; The name of publisher.
	PublisherName *string

	// READ-ONLY; The name of resource group.
	ResourceGroup *string

	// READ-ONLY; The marketplace resource rate.
	ResourceRate *float64

	// READ-ONLY; Subscription guid.
	SubscriptionGUID *string

	// READ-ONLY; Subscription name.
	SubscriptionName *string

	// READ-ONLY; The unit of measure.
	UnitOfMeasure *string

	// READ-ONLY; The end of the date time range covered by the usage detail.
	UsageEnd *time.Time

	// READ-ONLY; The start of the date time range covered by the usage detail.
	UsageStart *time.Time
}

func (m *MarketplaceProperties) GetAccountName() (rv string) {
	if m != nil && m.AccountName != nil {
		return *m.AccountName
	}
	return
}

func (m *MarketplaceProperties) GetAdditionalInfo() (rv string) {
	if m != nil && m.AdditionalInfo != nil {
		return *m.AdditionalInfo
	}
	return
}

func (m *MarketplaceProperties) GetAdditionalProperties() (rv string) {
	if m != nil && m.AdditionalProperties != nil {
		return *m.AdditionalProperties
	}
	return
}

func (m *MarketplaceProperties) GetBillingPeriodID() (rv string) {
	if m != nil && m.BillingPeriodID != nil {
		return *m.BillingPeriodID
	}
	return
}

func (m *MarketplaceProperties) GetConsumedQuantity() (rv float64) {
	if m != nil && m.ConsumedQuantity != nil {
		return *m.ConsumedQuantity
	}
	return
}

func (m *MarketplaceProperties) GetConsumedService() (rv string) {
	if m != nil && m.ConsumedService != nil {
		return *m.ConsumedService
	}
	return
}

func (m *MarketplaceProperties) GetCostCenter() (rv string) {
	if m != nil && m.CostCenter != nil {
		return *m.CostCenter
	}
	return
}

func (m *MarketplaceProperties) GetCurrency() (rv string) {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return
}

func (m *MarketplaceProperties) GetDepartmentName() (rv string) {
	if m != nil && m.DepartmentName != nil {
		return *m.DepartmentName
	}
	return
}

func (m *MarketplaceProperties) GetInstanceID() (rv string) {
	if m != nil && m.InstanceID != nil {
		return *m.InstanceID
	}
	return
}

func (m *MarketplaceProperties) GetInstanceName() (rv string) {
	if m != nil && m.InstanceName != nil {
		return *m.InstanceName
	}
	return
}

func (m *MarketplaceProperties) GetIsEstimated() (rv bool) {
	if m != nil && m.IsEstimated != nil {
		return *m.IsEstimated
	}
	return
}

func (m *MarketplaceProperties) GetIsRecurringCharge() (rv bool) {
	if m != nil && m.IsRecurringCharge != nil {
		return *m.IsRecurringCharge
	}
	return
}

func (m *MarketplaceProperties) GetMeterID() (rv string) {
	if m != nil && m.MeterID != nil {
		return *m.MeterID
	}
	return
}

func (m *MarketplaceProperties) GetOfferName() (rv string) {
	if m != nil && m.OfferName != nil {
		return *m.OfferName
	}
	return
}

func (m *MarketplaceProperties) GetOrderNumber() (rv string) {
	if m != nil && m.OrderNumber != nil {
		return *m.OrderNumber
	}
	return
}

func (m *MarketplaceProperties) GetPlanName() (rv string) {
	if m != nil && m.PlanName != nil {
		return *m.PlanName
	}
	return
}

func (m *MarketplaceProperties) GetPretaxCost() (rv float64) {
	if m != nil && m.PretaxCost != nil {
		return *m.PretaxCost
	}
	return
}

func (m *MarketplaceProperties) GetPublisherName() (rv string) {
	if m != nil && m.PublisherName != nil {
		return *m.PublisherName
	}
	return
}

func (m *MarketplaceProperties) GetResourceGroup() (rv string) {
	if m != nil && m.ResourceGroup != nil {
		return *m.ResourceGroup
	}
	return
}

func (m *MarketplaceProperties) GetResourceRate() (rv float64) {
	if m != nil && m.ResourceRate != nil {
		return *m.ResourceRate
	}
	return
}

func (m *MarketplaceProperties) GetSubscriptionGUID() (rv string) {
	if m != nil && m.SubscriptionGUID != nil {
		return *m.SubscriptionGUID
	}
	return
}

func (m *MarketplaceProperties) GetSubscriptionName() (rv string) {
	if m != nil && m.SubscriptionName != nil {
		return *m.SubscriptionName
	}
	return
}

func (m *MarketplaceProperties) GetUnitOfMeasure() (rv string) {
	if m != nil && m.UnitOfMeasure != nil {
		return *m.UnitOfMeasure
	}
	return
}

func (m *MarketplaceProperties) GetUsageEnd() (rv *time.Time) {
	if m != nil {
		return m.UsageEnd
	}
	return
}

func (m *MarketplaceProperties) GetUsageStart() (rv *time.Time) {
	if m != nil {
		return m.UsageStart
	}
	return
}

// MarketplacesListResult - Result of listing marketplaces. It contains a list of available marketplaces in reverse chronological
// order by billing period.
type MarketplacesListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string

	// READ-ONLY; The list of marketplaces.
	Value []*Marketplace
}

func (m *MarketplacesListResult) GetNextLink() (rv string) {
	if m != nil && m.NextLink != nil {
		return *m.NextLink
	}
	return
}

func (m *MarketplacesListResult) GetValue() (rv []*Marketplace) {
	if m != nil {
		return m.Value
	}
	return
}

// MeterDetails - The properties of the meter detail.
type MeterDetails struct {
	// READ-ONLY; The category of the meter, for example, 'Cloud services', 'Networking', etc..
	MeterCategory *string

	// READ-ONLY; The location in which the Azure service is available.
	MeterLocation *string

	// READ-ONLY; The name of the meter, within the given meter category
	MeterName *string

	// READ-ONLY; The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
	MeterSubCategory *string

	// READ-ONLY; The pretax listing price.
	PretaxStandardRate *float64

	// READ-ONLY; The name of the service.
	ServiceName *string

	// READ-ONLY; The service tier.
	ServiceTier *string

	// READ-ONLY; The total included quantity associated with the offer.
	TotalIncludedQuantity *float64

	// READ-ONLY; The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.
	Unit *string
}

func (m *MeterDetails) GetMeterCategory() (rv string) {
	if m != nil && m.MeterCategory != nil {
		return *m.MeterCategory
	}
	return
}

func (m *MeterDetails) GetMeterLocation() (rv string) {
	if m != nil && m.MeterLocation != nil {
		return *m.MeterLocation
	}
	return
}

func (m *MeterDetails) GetMeterName() (rv string) {
	if m != nil && m.MeterName != nil {
		return *m.MeterName
	}
	return
}

func (m *MeterDetails) GetMeterSubCategory() (rv string) {
	if m != nil && m.MeterSubCategory != nil {
		return *m.MeterSubCategory
	}
	return
}

func (m *MeterDetails) GetPretaxStandardRate() (rv float64) {
	if m != nil && m.PretaxStandardRate != nil {
		return *m.PretaxStandardRate
	}
	return
}

func (m *MeterDetails) GetServiceName() (rv string) {
	if m != nil && m.ServiceName != nil {
		return *m.ServiceName
	}
	return
}

func (m *MeterDetails) GetServiceTier() (rv string) {
	if m != nil && m.ServiceTier != nil {
		return *m.ServiceTier
	}
	return
}

func (m *MeterDetails) GetTotalIncludedQuantity() (rv float64) {
	if m != nil && m.TotalIncludedQuantity != nil {
		return *m.TotalIncludedQuantity
	}
	return
}

func (m *MeterDetails) GetUnit() (rv string) {
	if m != nil && m.Unit != nil {
		return *m.Unit
	}
	return
}

// MeterDetailsResponse - The properties of the meter detail.
type MeterDetailsResponse struct {
	// READ-ONLY; The category of the meter, for example, 'Cloud services', 'Networking', etc..
	MeterCategory *string

	// READ-ONLY; The name of the meter, within the given meter category
	MeterName *string

	// READ-ONLY; The subcategory of the meter, for example, 'A6 Cloud services', 'ExpressRoute (IXP)', etc..
	MeterSubCategory *string

	// READ-ONLY; The service family.
	ServiceFamily *string

	// READ-ONLY; The unit in which the meter consumption is charged, for example, 'Hours', 'GB', etc.
	UnitOfMeasure *string
}

func (m *MeterDetailsResponse) GetMeterCategory() (rv string) {
	if m != nil && m.MeterCategory != nil {
		return *m.MeterCategory
	}
	return
}

func (m *MeterDetailsResponse) GetMeterName() (rv string) {
	if m != nil && m.MeterName != nil {
		return *m.MeterName
	}
	return
}

func (m *MeterDetailsResponse) GetMeterSubCategory() (rv string) {
	if m != nil && m.MeterSubCategory != nil {
		return *m.MeterSubCategory
	}
	return
}

func (m *MeterDetailsResponse) GetServiceFamily() (rv string) {
	if m != nil && m.ServiceFamily != nil {
		return *m.ServiceFamily
	}
	return
}

func (m *MeterDetailsResponse) GetUnitOfMeasure() (rv string) {
	if m != nil && m.UnitOfMeasure != nil {
		return *m.UnitOfMeasure
	}
	return
}

// ModernChargeSummary - Modern charge summary.
type ModernChargeSummary struct {
	// REQUIRED; Specifies the kind of charge summary.
	Kind *ChargeSummaryKind

	// REQUIRED; Properties for modern charge summary
	Properties *ModernChargeSummaryProperties

	// READ-ONLY; Resource eTag.
	ETag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (m *ModernChargeSummary) GetKind() (rv *ChargeSummaryKind) {
	if m != nil {
		return m.Kind
	}
	return
}

func (m *ModernChargeSummary) GetProperties() (rv *ModernChargeSummaryProperties) {
	if m != nil {
		return m.Properties
	}
	return
}

func (m *ModernChargeSummary) GetETag() (rv string) {
	if m != nil && m.ETag != nil {
		return *m.ETag
	}
	return
}

func (m *ModernChargeSummary) GetID() (rv string) {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return
}

func (m *ModernChargeSummary) GetName() (rv string) {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return
}

func (m *ModernChargeSummary) GetTags() (rv map[string]*string) {
	if m != nil {
		return m.Tags
	}
	return
}

func (m *ModernChargeSummary) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

// GetChargeSummary implements the ChargeSummaryClassification interface for type ModernChargeSummary.
func (m *ModernChargeSummary) GetChargeSummary() *ChargeSummary {
	return &ChargeSummary{
		ETag: m.ETag,
		ID:   m.ID,
		Kind: m.Kind,
		Name: m.Name,
		Tags: m.Tags,
		Type: m.Type,
	}
}

// ModernChargeSummaryProperties - The properties of modern charge summary.
type ModernChargeSummaryProperties struct {
	// READ-ONLY; Azure Charges.
	AzureCharges *Amount

	// READ-ONLY; Billing Account Id
	BillingAccountID *string

	// READ-ONLY; The id of the billing period resource that the charge belongs to.
	BillingPeriodID *string

	// READ-ONLY; Billing Profile Id
	BillingProfileID *string

	// READ-ONLY; Charges Billed separately.
	ChargesBilledSeparately *Amount

	// READ-ONLY; Customer Id
	CustomerID *string

	// READ-ONLY; Invoice Section Id
	InvoiceSectionID *string

	// READ-ONLY; Is charge Invoiced
	IsInvoiced *bool

	// READ-ONLY; Marketplace Charges.
	MarketplaceCharges *Amount

	// READ-ONLY; Subscription guid.
	SubscriptionID *string

	// READ-ONLY; Usage end date.
	UsageEnd *string

	// READ-ONLY; Usage start date.
	UsageStart *string
}

func (m *ModernChargeSummaryProperties) GetAzureCharges() (rv *Amount) {
	if m != nil {
		return m.AzureCharges
	}
	return
}

func (m *ModernChargeSummaryProperties) GetBillingAccountID() (rv string) {
	if m != nil && m.BillingAccountID != nil {
		return *m.BillingAccountID
	}
	return
}

func (m *ModernChargeSummaryProperties) GetBillingPeriodID() (rv string) {
	if m != nil && m.BillingPeriodID != nil {
		return *m.BillingPeriodID
	}
	return
}

func (m *ModernChargeSummaryProperties) GetBillingProfileID() (rv string) {
	if m != nil && m.BillingProfileID != nil {
		return *m.BillingProfileID
	}
	return
}

func (m *ModernChargeSummaryProperties) GetChargesBilledSeparately() (rv *Amount) {
	if m != nil {
		return m.ChargesBilledSeparately
	}
	return
}

func (m *ModernChargeSummaryProperties) GetCustomerID() (rv string) {
	if m != nil && m.CustomerID != nil {
		return *m.CustomerID
	}
	return
}

func (m *ModernChargeSummaryProperties) GetInvoiceSectionID() (rv string) {
	if m != nil && m.InvoiceSectionID != nil {
		return *m.InvoiceSectionID
	}
	return
}

func (m *ModernChargeSummaryProperties) GetIsInvoiced() (rv bool) {
	if m != nil && m.IsInvoiced != nil {
		return *m.IsInvoiced
	}
	return
}

func (m *ModernChargeSummaryProperties) GetMarketplaceCharges() (rv *Amount) {
	if m != nil {
		return m.MarketplaceCharges
	}
	return
}

func (m *ModernChargeSummaryProperties) GetSubscriptionID() (rv string) {
	if m != nil && m.SubscriptionID != nil {
		return *m.SubscriptionID
	}
	return
}

func (m *ModernChargeSummaryProperties) GetUsageEnd() (rv string) {
	if m != nil && m.UsageEnd != nil {
		return *m.UsageEnd
	}
	return
}

func (m *ModernChargeSummaryProperties) GetUsageStart() (rv string) {
	if m != nil && m.UsageStart != nil {
		return *m.UsageStart
	}
	return
}

// ModernReservationRecommendation - Modern reservation recommendation.
type ModernReservationRecommendation struct {
	// REQUIRED; Specifies the kind of reservation recommendation.
	Kind *ReservationRecommendationKind

	// REQUIRED; Properties for modern reservation recommendation
	Properties *ModernReservationRecommendationProperties

	// READ-ONLY; Resource eTag.
	ETag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource location
	Location *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource sku
	SKU *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (m *ModernReservationRecommendation) GetKind() (rv *ReservationRecommendationKind) {
	if m != nil {
		return m.Kind
	}
	return
}

func (m *ModernReservationRecommendation) GetProperties() (rv *ModernReservationRecommendationProperties) {
	if m != nil {
		return m.Properties
	}
	return
}

func (m *ModernReservationRecommendation) GetETag() (rv string) {
	if m != nil && m.ETag != nil {
		return *m.ETag
	}
	return
}

func (m *ModernReservationRecommendation) GetID() (rv string) {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return
}

func (m *ModernReservationRecommendation) GetLocation() (rv string) {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return
}

func (m *ModernReservationRecommendation) GetName() (rv string) {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return
}

func (m *ModernReservationRecommendation) GetSKU() (rv string) {
	if m != nil && m.SKU != nil {
		return *m.SKU
	}
	return
}

func (m *ModernReservationRecommendation) GetTags() (rv map[string]*string) {
	if m != nil {
		return m.Tags
	}
	return
}

func (m *ModernReservationRecommendation) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

// GetReservationRecommendation implements the ReservationRecommendationClassification interface for type ModernReservationRecommendation.
func (m *ModernReservationRecommendation) GetReservationRecommendation() *ReservationRecommendation {
	return &ReservationRecommendation{
		ETag:     m.ETag,
		ID:       m.ID,
		Kind:     m.Kind,
		Location: m.Location,
		Name:     m.Name,
		SKU:      m.SKU,
		Tags:     m.Tags,
		Type:     m.Type,
	}
}

// ModernReservationRecommendationProperties - The properties of the reservation recommendation.
type ModernReservationRecommendationProperties struct {
	// READ-ONLY; The total amount of cost without reserved instances.
	CostWithNoReservedInstances *Amount

	// READ-ONLY; The usage date for looking back.
	FirstUsageDate *time.Time

	// READ-ONLY; The instance Flexibility Group.
	InstanceFlexibilityGroup *string

	// READ-ONLY; The instance Flexibility Ratio.
	InstanceFlexibilityRatio *float32

	// READ-ONLY; Resource Location.
	Location *string

	// READ-ONLY; The number of days of usage to look back for recommendation.
	LookBackPeriod *int32

	// READ-ONLY; The meter id (GUID)
	MeterID *string

	// READ-ONLY; Total estimated savings with reserved instances.
	NetSavings *Amount

	// READ-ONLY; The normalized Size.
	NormalizedSize *string

	// READ-ONLY; Recommended quality for reserved instances.
	RecommendedQuantity *float64

	// READ-ONLY; The recommended Quantity Normalized.
	RecommendedQuantityNormalized *float32

	// READ-ONLY; Resource type.
	ResourceType *string

	// READ-ONLY; This is the ARM Sku name.
	SKUName *string

	// READ-ONLY; List of sku properties
	SKUProperties []*SKUProperty

	// READ-ONLY; Shared (corresponds to integer 2) or single (corresponds to integer 1) recommendation.
	Scope *int32

	// READ-ONLY; Subscription ID
	SubscriptionID *string

	// READ-ONLY; RI recommendations in one or three year terms.
	Term *string

	// READ-ONLY; The total amount of cost with reserved instances.
	TotalCostWithReservedInstances *Amount
}

func (m *ModernReservationRecommendationProperties) GetCostWithNoReservedInstances() (rv *Amount) {
	if m != nil {
		return m.CostWithNoReservedInstances
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetFirstUsageDate() (rv *time.Time) {
	if m != nil {
		return m.FirstUsageDate
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetInstanceFlexibilityGroup() (rv string) {
	if m != nil && m.InstanceFlexibilityGroup != nil {
		return *m.InstanceFlexibilityGroup
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetInstanceFlexibilityRatio() (rv float32) {
	if m != nil && m.InstanceFlexibilityRatio != nil {
		return *m.InstanceFlexibilityRatio
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetLocation() (rv string) {
	if m != nil && m.Location != nil {
		return *m.Location
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetLookBackPeriod() (rv int32) {
	if m != nil && m.LookBackPeriod != nil {
		return *m.LookBackPeriod
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetMeterID() (rv string) {
	if m != nil && m.MeterID != nil {
		return *m.MeterID
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetNetSavings() (rv *Amount) {
	if m != nil {
		return m.NetSavings
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetNormalizedSize() (rv string) {
	if m != nil && m.NormalizedSize != nil {
		return *m.NormalizedSize
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetRecommendedQuantity() (rv float64) {
	if m != nil && m.RecommendedQuantity != nil {
		return *m.RecommendedQuantity
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetRecommendedQuantityNormalized() (rv float32) {
	if m != nil && m.RecommendedQuantityNormalized != nil {
		return *m.RecommendedQuantityNormalized
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetResourceType() (rv string) {
	if m != nil && m.ResourceType != nil {
		return *m.ResourceType
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetSKUName() (rv string) {
	if m != nil && m.SKUName != nil {
		return *m.SKUName
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetSKUProperties() (rv []*SKUProperty) {
	if m != nil {
		return m.SKUProperties
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetScope() (rv int32) {
	if m != nil && m.Scope != nil {
		return *m.Scope
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetSubscriptionID() (rv string) {
	if m != nil && m.SubscriptionID != nil {
		return *m.SubscriptionID
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetTerm() (rv string) {
	if m != nil && m.Term != nil {
		return *m.Term
	}
	return
}

func (m *ModernReservationRecommendationProperties) GetTotalCostWithReservedInstances() (rv *Amount) {
	if m != nil {
		return m.TotalCostWithReservedInstances
	}
	return
}

// ModernReservationTransaction - Modern Reservation transaction resource.
type ModernReservationTransaction struct {
	// REQUIRED; The properties of a modern reservation transaction.
	Properties *ModernReservationTransactionProperties

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags []*string

	// READ-ONLY; Resource type.
	Type *string
}

func (m *ModernReservationTransaction) GetProperties() (rv *ModernReservationTransactionProperties) {
	if m != nil {
		return m.Properties
	}
	return
}

func (m *ModernReservationTransaction) GetID() (rv string) {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return
}

func (m *ModernReservationTransaction) GetName() (rv string) {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return
}

func (m *ModernReservationTransaction) GetTags() (rv []*string) {
	if m != nil {
		return m.Tags
	}
	return
}

func (m *ModernReservationTransaction) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

// ModernReservationTransactionProperties - The properties of a modern reservation transaction.
type ModernReservationTransactionProperties struct {
	// READ-ONLY; The charge of the transaction.
	Amount *float64

	// READ-ONLY; This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
	ArmSKUName *string

	// READ-ONLY; The billing frequency, which can be either one-time or recurring.
	BillingFrequency *string

	// READ-ONLY; Billing profile Id.
	BillingProfileID *string

	// READ-ONLY; Billing profile name.
	BillingProfileName *string

	// READ-ONLY; The ISO currency in which the transaction is charged, for example, USD.
	Currency *string

	// READ-ONLY; The description of the transaction.
	Description *string

	// READ-ONLY; The date of the transaction
	EventDate *time.Time

	// READ-ONLY; The type of the transaction (Purchase, Cancel, etc.)
	EventType *string

	// READ-ONLY; Invoice Number
	Invoice *string

	// READ-ONLY; Invoice Id as on the invoice where the specific transaction appears.
	InvoiceID *string

	// READ-ONLY; Invoice Section Id
	InvoiceSectionID *string

	// READ-ONLY; Invoice Section Name.
	InvoiceSectionName *string

	// READ-ONLY; The subscription guid that makes the transaction.
	PurchasingSubscriptionGUID *string

	// READ-ONLY; The subscription name that makes the transaction.
	PurchasingSubscriptionName *string

	// READ-ONLY; The quantity of the transaction.
	Quantity *float64

	// READ-ONLY; The region of the transaction.
	Region *string

	// READ-ONLY; The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents
	// a single purchase transaction. A reservation order contains reservations. The reservation
	// order specifies the VM size and region for the reservations.
	ReservationOrderID *string

	// READ-ONLY; The name of the reservation order.
	ReservationOrderName *string

	// READ-ONLY; This is the term of the transaction.
	Term *string
}

func (m *ModernReservationTransactionProperties) GetAmount() (rv float64) {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return
}

func (m *ModernReservationTransactionProperties) GetArmSKUName() (rv string) {
	if m != nil && m.ArmSKUName != nil {
		return *m.ArmSKUName
	}
	return
}

func (m *ModernReservationTransactionProperties) GetBillingFrequency() (rv string) {
	if m != nil && m.BillingFrequency != nil {
		return *m.BillingFrequency
	}
	return
}

func (m *ModernReservationTransactionProperties) GetBillingProfileID() (rv string) {
	if m != nil && m.BillingProfileID != nil {
		return *m.BillingProfileID
	}
	return
}

func (m *ModernReservationTransactionProperties) GetBillingProfileName() (rv string) {
	if m != nil && m.BillingProfileName != nil {
		return *m.BillingProfileName
	}
	return
}

func (m *ModernReservationTransactionProperties) GetCurrency() (rv string) {
	if m != nil && m.Currency != nil {
		return *m.Currency
	}
	return
}

func (m *ModernReservationTransactionProperties) GetDescription() (rv string) {
	if m != nil && m.Description != nil {
		return *m.Description
	}
	return
}

func (m *ModernReservationTransactionProperties) GetEventDate() (rv *time.Time) {
	if m != nil {
		return m.EventDate
	}
	return
}

func (m *ModernReservationTransactionProperties) GetEventType() (rv string) {
	if m != nil && m.EventType != nil {
		return *m.EventType
	}
	return
}

func (m *ModernReservationTransactionProperties) GetInvoice() (rv string) {
	if m != nil && m.Invoice != nil {
		return *m.Invoice
	}
	return
}

func (m *ModernReservationTransactionProperties) GetInvoiceID() (rv string) {
	if m != nil && m.InvoiceID != nil {
		return *m.InvoiceID
	}
	return
}

func (m *ModernReservationTransactionProperties) GetInvoiceSectionID() (rv string) {
	if m != nil && m.InvoiceSectionID != nil {
		return *m.InvoiceSectionID
	}
	return
}

func (m *ModernReservationTransactionProperties) GetInvoiceSectionName() (rv string) {
	if m != nil && m.InvoiceSectionName != nil {
		return *m.InvoiceSectionName
	}
	return
}

func (m *ModernReservationTransactionProperties) GetPurchasingSubscriptionGUID() (rv string) {
	if m != nil && m.PurchasingSubscriptionGUID != nil {
		return *m.PurchasingSubscriptionGUID
	}
	return
}

func (m *ModernReservationTransactionProperties) GetPurchasingSubscriptionName() (rv string) {
	if m != nil && m.PurchasingSubscriptionName != nil {
		return *m.PurchasingSubscriptionName
	}
	return
}

func (m *ModernReservationTransactionProperties) GetQuantity() (rv float64) {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return
}

func (m *ModernReservationTransactionProperties) GetRegion() (rv string) {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return
}

func (m *ModernReservationTransactionProperties) GetReservationOrderID() (rv string) {
	if m != nil && m.ReservationOrderID != nil {
		return *m.ReservationOrderID
	}
	return
}

func (m *ModernReservationTransactionProperties) GetReservationOrderName() (rv string) {
	if m != nil && m.ReservationOrderName != nil {
		return *m.ReservationOrderName
	}
	return
}

func (m *ModernReservationTransactionProperties) GetTerm() (rv string) {
	if m != nil && m.Term != nil {
		return *m.Term
	}
	return
}

// ModernReservationTransactionsListResult - Result of listing reservation recommendations.
type ModernReservationTransactionsListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string

	// READ-ONLY; The list of reservation recommendations.
	Value []*ModernReservationTransaction
}

func (m *ModernReservationTransactionsListResult) GetNextLink() (rv string) {
	if m != nil && m.NextLink != nil {
		return *m.NextLink
	}
	return
}

func (m *ModernReservationTransactionsListResult) GetValue() (rv []*ModernReservationTransaction) {
	if m != nil {
		return m.Value
	}
	return
}

// ModernUsageDetail - Modern usage detail.
type ModernUsageDetail struct {
	// REQUIRED; Specifies the kind of usage details.
	Kind *UsageDetailsKind

	// REQUIRED; Properties for modern usage details
	Properties *ModernUsageDetailProperties

	// READ-ONLY; Resource etag.
	Etag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (m *ModernUsageDetail) GetKind() (rv *UsageDetailsKind) {
	if m != nil {
		return m.Kind
	}
	return
}

func (m *ModernUsageDetail) GetProperties() (rv *ModernUsageDetailProperties) {
	if m != nil {
		return m.Properties
	}
	return
}

func (m *ModernUsageDetail) GetEtag() (rv string) {
	if m != nil && m.Etag != nil {
		return *m.Etag
	}
	return
}

func (m *ModernUsageDetail) GetID() (rv string) {
	if m != nil && m.ID != nil {
		return *m.ID
	}
	return
}

func (m *ModernUsageDetail) GetName() (rv string) {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return
}

func (m *ModernUsageDetail) GetTags() (rv map[string]*string) {
	if m != nil {
		return m.Tags
	}
	return
}

func (m *ModernUsageDetail) GetType() (rv string) {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return
}

// GetUsageDetail implements the UsageDetailClassification interface for type ModernUsageDetail.
func (m *ModernUsageDetail) GetUsageDetail() *UsageDetail {
	return &UsageDetail{
		Etag: m.Etag,
		ID:   m.ID,
		Kind: m.Kind,
		Name: m.Name,
		Tags: m.Tags,
		Type: m.Type,
	}
}

// ModernUsageDetailProperties - The properties of the usage detail.
type ModernUsageDetailProperties struct {
	// READ-ONLY; Additional details of this usage item. Use this field to get usage line item specific details such as the actual
	// VM Size (ServiceType) or the ratio in which the reservation discount is applied.
	AdditionalInfo *string

	// READ-ONLY; Billing Account identifier.
	BillingAccountID *string

	// READ-ONLY; Name of the Billing Account.
	BillingAccountName *string

	// READ-ONLY; The currency defining the billed cost.
	BillingCurrencyCode *string

	// READ-ONLY; Billing Period End Date as in the invoice.
	BillingPeriodEndDate *time.Time

	// READ-ONLY; Billing Period Start Date as in the invoice.
	BillingPeriodStartDate *time.Time

	// READ-ONLY; Identifier for the billing profile that groups costs across invoices in the a singular billing currency across
	// across the customers who have onboarded the Microsoft customer agreement and the
	// customers in CSP who have made entitlement purchases like SaaS, Marketplace, RI, etc.
	BillingProfileID *string

	// READ-ONLY; Name of the billing profile that groups costs across invoices in the a singular billing currency across across
	// the customers who have onboarded the Microsoft customer agreement and the customers in
	// CSP who have made entitlement purchases like SaaS, Marketplace, RI, etc.
	BillingProfileName *string

	// READ-ONLY; Indicates a charge represents credits, usage, a Marketplace purchase, a reservation fee, or a refund.
	ChargeType *string

	// READ-ONLY; Consumed service name. Name of the azure resource provider that emits the usage or was purchased. This value
	// is not provided for marketplace usage.
	ConsumedService *string

	// READ-ONLY; The cost center of this department if it is a department and a cost center is provided.
	CostCenter *string

	// READ-ONLY; ExtendedCost or blended cost before tax in billed currency.
	CostInBillingCurrency *float64

	// READ-ONLY; ExtendedCost or blended cost before tax in pricing currency to correlate with prices.
	CostInPricingCurrency *float64

	// READ-ONLY; Estimated extendedCost or blended cost before tax in USD.
	CostInUSD *float64

	// READ-ONLY; Name of the customer's AAD tenant.
	CustomerName *string

	// READ-ONLY; Identifier of the customer's AAD tenant.
	CustomerTenantID *string

	// READ-ONLY; Date for the usage record.
	Date *time.Time

	// READ-ONLY; Exchange rate used in conversion from pricing currency to billing currency.
	ExchangeRate *string

	// READ-ONLY; Date on which exchange rate used in conversion from pricing currency to billing currency.
	ExchangeRateDate *time.Time

	// READ-ONLY; Exchange Rate from pricing currency to billing currency.
	ExchangeRatePricingToBilling *float64

	// READ-ONLY; Indicates how frequently this charge will occur. OneTime for purchases which only happen once, Monthly for fees
	// which recur every month, and UsageBased for charges based on how much a service is used.
	Frequency *string

	// READ-ONLY; Instance Name.
	InstanceName *string

	// READ-ONLY; Invoice ID as on the invoice where the specific transaction appears.
	InvoiceID *string

	// READ-ONLY; Identifier of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements
	// onboarded by partners.
	InvoiceSectionID *string

	// READ-ONLY; Name of the project that is being charged in the invoice. Not applicable for Microsoft Customer Agreements onboarded
	// by partners.
	InvoiceSectionName *string

	// READ-ONLY; Determines if the cost is eligible to be paid for using Azure credits.
	IsAzureCreditEligible *bool

	// READ-ONLY; Market Price that's charged for the usage.
	MarketPrice *float64

	// READ-ONLY; Identifies the top-level service for the usage.
	MeterCategory *string

	// READ-ONLY; The meter id (GUID). Not available for marketplace. For reserved instance this represents the primary meter
	// for which the reservation was purchased. For the actual VM Size for which the reservation is
	// purchased see productOrderName.
	MeterID *string

	// READ-ONLY; Identifies the name of the meter against which consumption is measured.
	MeterName *string

	// READ-ONLY; Identifies the location of the datacenter for certain services that are priced based on datacenter location.
	MeterRegion *string

	// READ-ONLY; Defines the type or sub-category of Azure service that can affect the rate.
	MeterSubCategory *string

	// READ-ONLY; Flag to indicate if partner earned credit has been applied or not.
	PartnerEarnedCreditApplied *string

	// READ-ONLY; Rate of discount applied if there is a partner earned credit (PEC) based on partner admin link access.
	PartnerEarnedCreditRate *float64

	// READ-ONLY; Name of the partner' AAD tenant.
	PartnerName *string

	// READ-ONLY; Identifier for the partner's AAD tenant.
	PartnerTenantID *string

	// READ-ONLY; Retail price for the resource.
	PayGPrice *float64

	// READ-ONLY; The amount of PayG cost before tax in billing currency.
	PaygCostInBillingCurrency *float64

	// READ-ONLY; The amount of PayG cost before tax in US Dollar currency.
	PaygCostInUSD *float64

	// READ-ONLY; Reference to an original invoice there is a refund (negative cost). This is populated only when there is a refund.
	PreviousInvoiceID *string

	// READ-ONLY; Pricing Billing Currency.
	PricingCurrencyCode *string

	// READ-ONLY; Name of the product that has accrued charges by consumption or purchase as listed in the invoice. Not available
	// for Marketplace.
	Product *string

	// READ-ONLY; Identifier for the product that has accrued charges by consumption or purchase . This is the concatenated key
	// of productId and SkuId in partner center.
	ProductIdentifier *string

	// READ-ONLY; The identifier for the asset or Azure plan name that the subscription belongs to. For example: Azure Plan. For
	// reservations this is the Reservation Order ID.
	ProductOrderID *string

	// READ-ONLY; Product Order Name. For reservations this is the SKU that was purchased.
	ProductOrderName *string

	// READ-ONLY; Publisher Id.
	PublisherID *string

	// READ-ONLY; Name of the publisher of the service including Microsoft or Third Party publishers.
	PublisherName *string

	// READ-ONLY; Type of publisher that identifies if the publisher is first party, third party reseller or third party agency.
	PublisherType *string

	// READ-ONLY; Measure the quantity purchased or consumed.The amount of the meter used during the billing period.
	Quantity *float64

	// READ-ONLY; MPNId for the reseller associated with the subscription.
	ResellerMpnID *string

	// READ-ONLY; Reseller Name.
	ResellerName *string

	// READ-ONLY; ARM resource id of the reservation. Only applies to records relevant to reservations.
	ReservationID *string

	// READ-ONLY; User provided display name of the reservation. Last known name for a particular day is populated in the daily
	// data. Only applies to records relevant to reservations.
	ReservationName *string

	// READ-ONLY; Name of the Azure resource group used for cohesive lifecycle management of resources.
	ResourceGroup *string

	// READ-ONLY; Name of the resource location.
	ResourceLocation *string

	// READ-ONLY; Resource Location Normalized.
	ResourceLocationNormalized *string

	// READ-ONLY; List the service family for the product purchased or charged (Example: Storage ; Compute).
	ServiceFamily *string

	// READ-ONLY; Service Info 1.
	ServiceInfo1 *string

	// READ-ONLY; Service Info 2.
	ServiceInfo2 *string

	// READ-ONLY; End date for the period when the service usage was rated for charges. The prices for Azure services are determined
	// based on the rating period.
	ServicePeriodEndDate *time.Time

	// READ-ONLY; Start date for the rating period when the service usage was rated for charges. The prices for Azure services
	// are determined for the rating period.
	ServicePeriodStartDate *time.Time

	// READ-ONLY; Unique Microsoft generated identifier for the Azure Subscription.
	SubscriptionGUID *string

	// READ-ONLY; Name of the Azure Subscription.
	SubscriptionName *string

	// READ-ONLY; Term (in months). Displays the term for the validity of the offer. For example. In case of reserved instances
	// it displays 12 months for yearly term of reserved instance. For one time purchases or
	// recurring purchases, the terms displays 1 month; This is not applicable for Azure consumption.
	Term *string

	// READ-ONLY; Identifies the Unit that the service is charged in. For example, GB, hours, 10,000 s.
	UnitOfMeasure *string

	// READ-ONLY; Unit Price is the price applicable to you. (your EA or other contract price).
	UnitPrice *float64
}

func (m *ModernUsageDetailProperties) GetAdditionalInfo() (rv string) {
	if m != nil && m.AdditionalInfo != nil {
		return *m.AdditionalInfo
	}
	return
}

func (m *ModernUsageDetailProperties) GetBillingAccountID() (rv string) {
	if m != nil && m.BillingAccountID != nil {
		return *m.BillingAccountID
	}
	return
}

func (m *ModernUsageDetailProperties) GetBillingAccountName() (rv string) {
	if m != nil && m.BillingAccountName != nil {
		return *m.BillingAccountName
	}
	return
}

func (m *ModernUsageDetailProperties) GetBillingCurrencyCode() (rv string) {
	if m != nil && m.BillingCurrencyCode != nil {
		return *m.BillingCurrencyCode
	}
	return
}

func (m *ModernUsageDetailProperties) GetBillingPeriodEndDate() (rv *time.Time) {
	if m != nil {
		return m.BillingPeriodEndDate
	}
	return
}

func (m *ModernUsageDetailProperties) GetBillingPeriodStartDate() (rv *time.Time) {
	if m != nil {
		return m.BillingPeriodStartDate
	}
	return
}

func (m *ModernUsageDetailProperties) GetBillingProfileID() (rv string) {
	if m != nil && m.BillingProfileID != nil {
		return *m.BillingProfileID
	}
	return
}

func (m *ModernUsageDetailProperties) GetBillingProfileName() (rv string) {
	if m != nil && m.BillingProfileName != nil {
		return *m.BillingProfileName
	}
	return
}

func (m *ModernUsageDetailProperties) GetChargeType() (rv string) {
	if m != nil && m.ChargeType != nil {
		return *m.ChargeType
	}
	return
}

func (m *ModernUsageDetailProperties) GetConsumedService() (rv string) {
	if m != nil && m.ConsumedService != nil {
		return *m.ConsumedService
	}
	return
}

func (m *ModernUsageDetailProperties) GetCostCenter() (rv string) {
	if m != nil && m.CostCenter != nil {
		return *m.CostCenter
	}
	return
}

func (m *ModernUsageDetailProperties) GetCostInBillingCurrency() (rv float64) {
	if m != nil && m.CostInBillingCurrency != nil {
		return *m.CostInBillingCurrency
	}
	return
}

func (m *ModernUsageDetailProperties) GetCostInPricingCurrency() (rv float64) {
	if m != nil && m.CostInPricingCurrency != nil {
		return *m.CostInPricingCurrency
	}
	return
}

func (m *ModernUsageDetailProperties) GetCostInUSD() (rv float64) {
	if m != nil && m.CostInUSD != nil {
		return *m.CostInUSD
	}
	return
}

func (m *ModernUsageDetailProperties) GetCustomerName() (rv string) {
	if m != nil && m.CustomerName != nil {
		return *m.CustomerName
	}
	return
}

func (m *ModernUsageDetailProperties) GetCustomerTenantID() (rv string) {
	if m != nil && m.CustomerTenantID != nil {
		return *m.CustomerTenantID
	}
	return
}

func (m *ModernUsageDetailProperties) GetDate() (rv *time.Time) {
	if m != nil {
		return m.Date
	}
	return
}

func (m *ModernUsageDetailProperties) GetExchangeRate() (rv string) {
	if m != nil && m.ExchangeRate != nil {
		return *m.ExchangeRate
	}
	return
}

func (m *ModernUsageDetailProperties) GetExchangeRateDate() (rv *time.Time) {
	if m != nil {
		return m.ExchangeRateDate
	}
	return
}

func (m *ModernUsageDetailProperties) GetExchangeRatePricingToBilling() (rv float64) {
	if m != nil && m.ExchangeRatePricingToBilling != nil {
		return *m.ExchangeRatePricingToBilling
	}
	return
}

func (m *ModernUsageDetailProperties) GetFrequency() (rv string) {
	if m != nil && m.Frequency != nil {
		return *m.Frequency
	}
	return
}

func (m *ModernUsageDetailProperties) GetInstanceName() (rv string) {
	if m != nil && m.InstanceName != nil {
		return *m.InstanceName
	}
	return
}

func (m *ModernUsageDetailProperties) GetInvoiceID() (rv string) {
	if m != nil && m.InvoiceID != nil {
		return *m.InvoiceID
	}
	return
}

func (m *ModernUsageDetailProperties) GetInvoiceSectionID() (rv string) {
	if m != nil && m.InvoiceSectionID != nil {
		return *m.InvoiceSectionID
	}
	return
}

func (m *ModernUsageDetailProperties) GetInvoiceSectionName() (rv string) {
	if m != nil && m.InvoiceSectionName != nil {
		return *m.InvoiceSectionName
	}
	return
}

func (m *ModernUsageDetailProperties) GetIsAzureCreditEligible() (rv bool) {
	if m != nil && m.IsAzureCreditEligible != nil {
		return *m.IsAzureCreditEligible
	}
	return
}

func (m *ModernUsageDetailProperties) GetMarketPrice() (rv float64) {
	if m != nil && m.MarketPrice != nil {
		return *m.MarketPrice
	}
	return
}

func (m *ModernUsageDetailProperties) GetMeterCategory() (rv string) {
	if m != nil && m.MeterCategory != nil {
		return *m.MeterCategory
	}
	return
}

func (m *ModernUsageDetailProperties) GetMeterID() (rv string) {
	if m != nil && m.MeterID != nil {
		return *m.MeterID
	}
	return
}

func (m *ModernUsageDetailProperties) GetMeterName() (rv string) {
	if m != nil && m.MeterName != nil {
		return *m.MeterName
	}
	return
}

func (m *ModernUsageDetailProperties) GetMeterRegion() (rv string) {
	if m != nil && m.MeterRegion != nil {
		return *m.MeterRegion
	}
	return
}

func (m *ModernUsageDetailProperties) GetMeterSubCategory() (rv string) {
	if m != nil && m.MeterSubCategory != nil {
		return *m.MeterSubCategory
	}
	return
}

func (m *ModernUsageDetailProperties) GetPartnerEarnedCreditApplied() (rv string) {
	if m != nil && m.PartnerEarnedCreditApplied != nil {
		return *m.PartnerEarnedCreditApplied
	}
	return
}

func (m *ModernUsageDetailProperties) GetPartnerEarnedCreditRate() (rv float64) {
	if m != nil && m.PartnerEarnedCreditRate != nil {
		return *m.PartnerEarnedCreditRate
	}
	return
}

func (m *ModernUsageDetailProperties) GetPartnerName() (rv string) {
	if m != nil && m.PartnerName != nil {
		return *m.PartnerName
	}
	return
}

func (m *ModernUsageDetailProperties) GetPartnerTenantID() (rv string) {
	if m != nil && m.PartnerTenantID != nil {
		return *m.PartnerTenantID
	}
	return
}

func (m *ModernUsageDetailProperties) GetPayGPrice() (rv float64) {
	if m != nil && m.PayGPrice != nil {
		return *m.PayGPrice
	}
	return
}

func (m *ModernUsageDetailProperties) GetPaygCostInBillingCurrency() (rv float64) {
	if m != nil && m.PaygCostInBillingCurrency != nil {
		return *m.PaygCostInBillingCurrency
	}
	return
}

func (m *ModernUsageDetailProperties) GetPaygCostInUSD() (rv float64) {
	if m != nil && m.PaygCostInUSD != nil {
		return *m.PaygCostInUSD
	}
	return
}

func (m *ModernUsageDetailProperties) GetPreviousInvoiceID() (rv string) {
	if m != nil && m.PreviousInvoiceID != nil {
		return *m.PreviousInvoiceID
	}
	return
}

func (m *ModernUsageDetailProperties) GetPricingCurrencyCode() (rv string) {
	if m != nil && m.PricingCurrencyCode != nil {
		return *m.PricingCurrencyCode
	}
	return
}

func (m *ModernUsageDetailProperties) GetProduct() (rv string) {
	if m != nil && m.Product != nil {
		return *m.Product
	}
	return
}

func (m *ModernUsageDetailProperties) GetProductIdentifier() (rv string) {
	if m != nil && m.ProductIdentifier != nil {
		return *m.ProductIdentifier
	}
	return
}

func (m *ModernUsageDetailProperties) GetProductOrderID() (rv string) {
	if m != nil && m.ProductOrderID != nil {
		return *m.ProductOrderID
	}
	return
}

func (m *ModernUsageDetailProperties) GetProductOrderName() (rv string) {
	if m != nil && m.ProductOrderName != nil {
		return *m.ProductOrderName
	}
	return
}

func (m *ModernUsageDetailProperties) GetPublisherID() (rv string) {
	if m != nil && m.PublisherID != nil {
		return *m.PublisherID
	}
	return
}

func (m *ModernUsageDetailProperties) GetPublisherName() (rv string) {
	if m != nil && m.PublisherName != nil {
		return *m.PublisherName
	}
	return
}

func (m *ModernUsageDetailProperties) GetPublisherType() (rv string) {
	if m != nil && m.PublisherType != nil {
		return *m.PublisherType
	}
	return
}

func (m *ModernUsageDetailProperties) GetQuantity() (rv float64) {
	if m != nil && m.Quantity != nil {
		return *m.Quantity
	}
	return
}

func (m *ModernUsageDetailProperties) GetResellerMpnID() (rv string) {
	if m != nil && m.ResellerMpnID != nil {
		return *m.ResellerMpnID
	}
	return
}

func (m *ModernUsageDetailProperties) GetResellerName() (rv string) {
	if m != nil && m.ResellerName != nil {
		return *m.ResellerName
	}
	return
}

func (m *ModernUsageDetailProperties) GetReservationID() (rv string) {
	if m != nil && m.ReservationID != nil {
		return *m.ReservationID
	}
	return
}

func (m *ModernUsageDetailProperties) GetReservationName() (rv string) {
	if m != nil && m.ReservationName != nil {
		return *m.ReservationName
	}
	return
}

func (m *ModernUsageDetailProperties) GetResourceGroup() (rv string) {
	if m != nil && m.ResourceGroup != nil {
		return *m.ResourceGroup
	}
	return
}

func (m *ModernUsageDetailProperties) GetResourceLocation() (rv string) {
	if m != nil && m.ResourceLocation != nil {
		return *m.ResourceLocation
	}
	return
}

func (m *ModernUsageDetailProperties) GetResourceLocationNormalized() (rv string) {
	if m != nil && m.ResourceLocationNormalized != nil {
		return *m.ResourceLocationNormalized
	}
	return
}

func (m *ModernUsageDetailProperties) GetServiceFamily() (rv string) {
	if m != nil && m.ServiceFamily != nil {
		return *m.ServiceFamily
	}
	return
}

func (m *ModernUsageDetailProperties) GetServiceInfo1() (rv string) {
	if m != nil && m.ServiceInfo1 != nil {
		return *m.ServiceInfo1
	}
	return
}

func (m *ModernUsageDetailProperties) GetServiceInfo2() (rv string) {
	if m != nil && m.ServiceInfo2 != nil {
		return *m.ServiceInfo2
	}
	return
}

func (m *ModernUsageDetailProperties) GetServicePeriodEndDate() (rv *time.Time) {
	if m != nil {
		return m.ServicePeriodEndDate
	}
	return
}

func (m *ModernUsageDetailProperties) GetServicePeriodStartDate() (rv *time.Time) {
	if m != nil {
		return m.ServicePeriodStartDate
	}
	return
}

func (m *ModernUsageDetailProperties) GetSubscriptionGUID() (rv string) {
	if m != nil && m.SubscriptionGUID != nil {
		return *m.SubscriptionGUID
	}
	return
}

func (m *ModernUsageDetailProperties) GetSubscriptionName() (rv string) {
	if m != nil && m.SubscriptionName != nil {
		return *m.SubscriptionName
	}
	return
}

func (m *ModernUsageDetailProperties) GetTerm() (rv string) {
	if m != nil && m.Term != nil {
		return *m.Term
	}
	return
}

func (m *ModernUsageDetailProperties) GetUnitOfMeasure() (rv string) {
	if m != nil && m.UnitOfMeasure != nil {
		return *m.UnitOfMeasure
	}
	return
}

func (m *ModernUsageDetailProperties) GetUnitPrice() (rv float64) {
	if m != nil && m.UnitPrice != nil {
		return *m.UnitPrice
	}
	return
}

// Notification - The notification associated with a budget.
type Notification struct {
	// REQUIRED; Email addresses to send the budget notification to when the threshold is exceeded. Must have at least one contact
	// email or contact group specified at the Subscription or Resource Group scopes. All
	// other scopes must have at least one contact email specified.
	ContactEmails []*string

	// REQUIRED; The notification is enabled or not.
	Enabled *bool

	// REQUIRED; The comparison operator.
	Operator *OperatorType

	// REQUIRED; Threshold value associated with a notification. Notification is sent when the cost exceeded the threshold. It
	// is always percent and has to be between 0 and 1000.
	Threshold *float64

	// Action groups to send the budget notification to when the threshold is exceeded. Must be provided as a fully qualified
	// Azure resource id. Only supported at Subscription or Resource Group scopes.
	ContactGroups []*string

	// Contact roles to send the budget notification to when the threshold is exceeded.
	ContactRoles []*string

	// Language in which the recipient will receive the notification
	Locale *CultureCode

	// The type of threshold
	ThresholdType *ThresholdType
}

func (n *Notification) GetContactEmails() (rv []*string) {
	if n != nil {
		return n.ContactEmails
	}
	return
}

func (n *Notification) GetEnabled() (rv bool) {
	if n != nil && n.Enabled != nil {
		return *n.Enabled
	}
	return
}

func (n *Notification) GetOperator() (rv *OperatorType) {
	if n != nil {
		return n.Operator
	}
	return
}

func (n *Notification) GetThreshold() (rv float64) {
	if n != nil && n.Threshold != nil {
		return *n.Threshold
	}
	return
}

func (n *Notification) GetContactGroups() (rv []*string) {
	if n != nil {
		return n.ContactGroups
	}
	return
}

func (n *Notification) GetContactRoles() (rv []*string) {
	if n != nil {
		return n.ContactRoles
	}
	return
}

func (n *Notification) GetLocale() (rv *CultureCode) {
	if n != nil {
		return n.Locale
	}
	return
}

func (n *Notification) GetThresholdType() (rv *ThresholdType) {
	if n != nil {
		return n.ThresholdType
	}
	return
}

// Operation - A Consumption REST API operation.
type Operation struct {
	// The object that represents the operation.
	Display *OperationDisplay

	// READ-ONLY; Operation Id.
	ID *string

	// READ-ONLY; Operation name: {provider}/{resource}/{operation}.
	Name *string
}

func (o *Operation) GetDisplay() (rv *OperationDisplay) {
	if o != nil {
		return o.Display
	}
	return
}

func (o *Operation) GetID() (rv string) {
	if o != nil && o.ID != nil {
		return *o.ID
	}
	return
}

func (o *Operation) GetName() (rv string) {
	if o != nil && o.Name != nil {
		return *o.Name
	}
	return
}

// OperationDisplay - The object that represents the operation.
type OperationDisplay struct {
	// READ-ONLY; Description of the operation.
	Description *string

	// READ-ONLY; Operation type: Read, write, delete, etc.
	Operation *string

	// READ-ONLY; Service provider: Microsoft.Consumption.
	Provider *string

	// READ-ONLY; Resource on which the operation is performed: UsageDetail, etc.
	Resource *string
}

func (o *OperationDisplay) GetDescription() (rv string) {
	if o != nil && o.Description != nil {
		return *o.Description
	}
	return
}

func (o *OperationDisplay) GetOperation() (rv string) {
	if o != nil && o.Operation != nil {
		return *o.Operation
	}
	return
}

func (o *OperationDisplay) GetProvider() (rv string) {
	if o != nil && o.Provider != nil {
		return *o.Provider
	}
	return
}

func (o *OperationDisplay) GetResource() (rv string) {
	if o != nil && o.Resource != nil {
		return *o.Resource
	}
	return
}

// OperationListResult - Result of listing consumption operations. It contains a list of operations and a URL link to get
// the next set of results.
type OperationListResult struct {
	// READ-ONLY; URL to get the next set of operation list results if there are any.
	NextLink *string

	// READ-ONLY; List of consumption operations supported by the Microsoft.Consumption resource provider.
	Value []*Operation
}

func (o *OperationListResult) GetNextLink() (rv string) {
	if o != nil && o.NextLink != nil {
		return *o.NextLink
	}
	return
}

func (o *OperationListResult) GetValue() (rv []*Operation) {
	if o != nil {
		return o.Value
	}
	return
}

// PriceSheetModel - price sheet result. It contains the pricesheet associated with billing period
type PriceSheetModel struct {
	// READ-ONLY; Pricesheet download details.
	Download *MeterDetails

	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string

	// READ-ONLY; Price sheet
	Pricesheets []*PriceSheetProperties
}

func (p *PriceSheetModel) GetDownload() (rv *MeterDetails) {
	if p != nil {
		return p.Download
	}
	return
}

func (p *PriceSheetModel) GetNextLink() (rv string) {
	if p != nil && p.NextLink != nil {
		return *p.NextLink
	}
	return
}

func (p *PriceSheetModel) GetPricesheets() (rv []*PriceSheetProperties) {
	if p != nil {
		return p.Pricesheets
	}
	return
}

// PriceSheetProperties - The properties of the price sheet.
type PriceSheetProperties struct {
	// READ-ONLY; The id of the billing period resource that the usage belongs to.
	BillingPeriodID *string

	// READ-ONLY; Currency Code
	CurrencyCode *string

	// READ-ONLY; Included quality for an offer
	IncludedQuantity *float64

	// READ-ONLY; The details about the meter. By default this is not populated, unless it's specified in $expand.
	MeterDetails *MeterDetails

	// READ-ONLY; The meter id (GUID)
	MeterID *string

	// READ-ONLY; Offer Id
	OfferID *string

	// READ-ONLY; Part Number
	PartNumber *string

	// READ-ONLY; Unit of measure
	UnitOfMeasure *string

	// READ-ONLY; Unit Price
	UnitPrice *float64
}

func (p *PriceSheetProperties) GetBillingPeriodID() (rv string) {
	if p != nil && p.BillingPeriodID != nil {
		return *p.BillingPeriodID
	}
	return
}

func (p *PriceSheetProperties) GetCurrencyCode() (rv string) {
	if p != nil && p.CurrencyCode != nil {
		return *p.CurrencyCode
	}
	return
}

func (p *PriceSheetProperties) GetIncludedQuantity() (rv float64) {
	if p != nil && p.IncludedQuantity != nil {
		return *p.IncludedQuantity
	}
	return
}

func (p *PriceSheetProperties) GetMeterDetails() (rv *MeterDetails) {
	if p != nil {
		return p.MeterDetails
	}
	return
}

func (p *PriceSheetProperties) GetMeterID() (rv string) {
	if p != nil && p.MeterID != nil {
		return *p.MeterID
	}
	return
}

func (p *PriceSheetProperties) GetOfferID() (rv string) {
	if p != nil && p.OfferID != nil {
		return *p.OfferID
	}
	return
}

func (p *PriceSheetProperties) GetPartNumber() (rv string) {
	if p != nil && p.PartNumber != nil {
		return *p.PartNumber
	}
	return
}

func (p *PriceSheetProperties) GetUnitOfMeasure() (rv string) {
	if p != nil && p.UnitOfMeasure != nil {
		return *p.UnitOfMeasure
	}
	return
}

func (p *PriceSheetProperties) GetUnitPrice() (rv float64) {
	if p != nil && p.UnitPrice != nil {
		return *p.UnitPrice
	}
	return
}

// PriceSheetResult - An pricesheet resource.
type PriceSheetResult struct {
	// price sheet result. It contains the pricesheet associated with billing period
	Properties *PriceSheetModel

	// READ-ONLY; Resource etag.
	Etag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (p *PriceSheetResult) GetProperties() (rv *PriceSheetModel) {
	if p != nil {
		return p.Properties
	}
	return
}

func (p *PriceSheetResult) GetEtag() (rv string) {
	if p != nil && p.Etag != nil {
		return *p.Etag
	}
	return
}

func (p *PriceSheetResult) GetID() (rv string) {
	if p != nil && p.ID != nil {
		return *p.ID
	}
	return
}

func (p *PriceSheetResult) GetName() (rv string) {
	if p != nil && p.Name != nil {
		return *p.Name
	}
	return
}

func (p *PriceSheetResult) GetTags() (rv map[string]*string) {
	if p != nil {
		return p.Tags
	}
	return
}

func (p *PriceSheetResult) GetType() (rv string) {
	if p != nil && p.Type != nil {
		return *p.Type
	}
	return
}

// Reseller details
type Reseller struct {
	// READ-ONLY; Reseller Description.
	ResellerDescription *string

	// READ-ONLY; Reseller id.
	ResellerID *string
}

func (r *Reseller) GetResellerDescription() (rv string) {
	if r != nil && r.ResellerDescription != nil {
		return *r.ResellerDescription
	}
	return
}

func (r *Reseller) GetResellerID() (rv string) {
	if r != nil && r.ResellerID != nil {
		return *r.ResellerID
	}
	return
}

// ReservationDetail - reservation detail resource.
type ReservationDetail struct {
	// The properties of the reservation detail.
	Properties *ReservationDetailProperties

	// READ-ONLY; Resource eTag.
	ETag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (r *ReservationDetail) GetProperties() (rv *ReservationDetailProperties) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *ReservationDetail) GetETag() (rv string) {
	if r != nil && r.ETag != nil {
		return *r.ETag
	}
	return
}

func (r *ReservationDetail) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *ReservationDetail) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *ReservationDetail) GetTags() (rv map[string]*string) {
	if r != nil {
		return r.Tags
	}
	return
}

func (r *ReservationDetail) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// ReservationDetailProperties - The properties of the reservation detail.
type ReservationDetailProperties struct {
	// READ-ONLY; The instance Flexibility Group.
	InstanceFlexibilityGroup *string

	// READ-ONLY; The instance Flexibility Ratio.
	InstanceFlexibilityRatio *string

	// READ-ONLY; This identifier is the name of the resource or the fully qualified Resource ID.
	InstanceID *string

	// READ-ONLY; The reservation kind.
	Kind *string

	// READ-ONLY; The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping
	// for applying the benefit scope and also specifies the number of instances to which
	// the reservation benefit can be applied to.
	ReservationID *string

	// READ-ONLY; The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents
	// a single purchase transaction. A reservation order contains reservations. The reservation
	// order specifies the VM size and region for the reservations.
	ReservationOrderID *string

	// READ-ONLY; This is the total hours reserved for the day. E.g. if reservation for 1 instance was made on 1 PM, this will
	// be 11 hours for that day and 24 hours from subsequent days.
	ReservedHours *float64

	// READ-ONLY; This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
	SKUName *string

	// READ-ONLY; This is the total count of instances that are reserved for the reservationId.
	TotalReservedQuantity *float64

	// READ-ONLY; The date on which consumption occurred.
	UsageDate *time.Time

	// READ-ONLY; This is the total hours used by the instance.
	UsedHours *float64
}

func (r *ReservationDetailProperties) GetInstanceFlexibilityGroup() (rv string) {
	if r != nil && r.InstanceFlexibilityGroup != nil {
		return *r.InstanceFlexibilityGroup
	}
	return
}

func (r *ReservationDetailProperties) GetInstanceFlexibilityRatio() (rv string) {
	if r != nil && r.InstanceFlexibilityRatio != nil {
		return *r.InstanceFlexibilityRatio
	}
	return
}

func (r *ReservationDetailProperties) GetInstanceID() (rv string) {
	if r != nil && r.InstanceID != nil {
		return *r.InstanceID
	}
	return
}

func (r *ReservationDetailProperties) GetKind() (rv string) {
	if r != nil && r.Kind != nil {
		return *r.Kind
	}
	return
}

func (r *ReservationDetailProperties) GetReservationID() (rv string) {
	if r != nil && r.ReservationID != nil {
		return *r.ReservationID
	}
	return
}

func (r *ReservationDetailProperties) GetReservationOrderID() (rv string) {
	if r != nil && r.ReservationOrderID != nil {
		return *r.ReservationOrderID
	}
	return
}

func (r *ReservationDetailProperties) GetReservedHours() (rv float64) {
	if r != nil && r.ReservedHours != nil {
		return *r.ReservedHours
	}
	return
}

func (r *ReservationDetailProperties) GetSKUName() (rv string) {
	if r != nil && r.SKUName != nil {
		return *r.SKUName
	}
	return
}

func (r *ReservationDetailProperties) GetTotalReservedQuantity() (rv float64) {
	if r != nil && r.TotalReservedQuantity != nil {
		return *r.TotalReservedQuantity
	}
	return
}

func (r *ReservationDetailProperties) GetUsageDate() (rv *time.Time) {
	if r != nil {
		return r.UsageDate
	}
	return
}

func (r *ReservationDetailProperties) GetUsedHours() (rv float64) {
	if r != nil && r.UsedHours != nil {
		return *r.UsedHours
	}
	return
}

// ReservationDetailsListResult - Result of listing reservation details.
type ReservationDetailsListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string

	// READ-ONLY; The list of reservation details.
	Value []*ReservationDetail
}

func (r *ReservationDetailsListResult) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

func (r *ReservationDetailsListResult) GetValue() (rv []*ReservationDetail) {
	if r != nil {
		return r.Value
	}
	return
}

// ReservationRecommendation - A reservation recommendation resource.
type ReservationRecommendation struct {
	// REQUIRED; Specifies the kind of reservation recommendation.
	Kind *ReservationRecommendationKind

	// READ-ONLY; Resource eTag.
	ETag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource location
	Location *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource sku
	SKU *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (r *ReservationRecommendation) GetKind() (rv *ReservationRecommendationKind) {
	if r != nil {
		return r.Kind
	}
	return
}

func (r *ReservationRecommendation) GetETag() (rv string) {
	if r != nil && r.ETag != nil {
		return *r.ETag
	}
	return
}

func (r *ReservationRecommendation) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *ReservationRecommendation) GetLocation() (rv string) {
	if r != nil && r.Location != nil {
		return *r.Location
	}
	return
}

func (r *ReservationRecommendation) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *ReservationRecommendation) GetSKU() (rv string) {
	if r != nil && r.SKU != nil {
		return *r.SKU
	}
	return
}

func (r *ReservationRecommendation) GetTags() (rv map[string]*string) {
	if r != nil {
		return r.Tags
	}
	return
}

func (r *ReservationRecommendation) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// GetReservationRecommendation implements the ReservationRecommendationClassification interface for type ReservationRecommendation.
func (r *ReservationRecommendation) GetReservationRecommendation() *ReservationRecommendation {
	return r
}

// ReservationRecommendationDetailsCalculatedSavingsProperties - Details of estimated savings.
type ReservationRecommendationDetailsCalculatedSavingsProperties struct {
	// The number of reserved units used to calculate savings. Always 1 for virtual machines.
	ReservedUnitCount *float32

	// READ-ONLY; The cost without reservation.
	OnDemandCost *float32

	// READ-ONLY; The difference between total reservation cost and reservation cost.
	OverageCost *float32

	// READ-ONLY; The quantity for calculated savings.
	Quantity *float32

	// READ-ONLY; The exact cost of the estimated usage using reservation.
	ReservationCost *float32

	// READ-ONLY; The amount saved by purchasing the recommended quantity of reservation.
	Savings *float32

	// READ-ONLY; The cost of the suggested quantity.
	TotalReservationCost *float32
}

func (r *ReservationRecommendationDetailsCalculatedSavingsProperties) GetReservedUnitCount() (rv float32) {
	if r != nil && r.ReservedUnitCount != nil {
		return *r.ReservedUnitCount
	}
	return
}

func (r *ReservationRecommendationDetailsCalculatedSavingsProperties) GetOnDemandCost() (rv float32) {
	if r != nil && r.OnDemandCost != nil {
		return *r.OnDemandCost
	}
	return
}

func (r *ReservationRecommendationDetailsCalculatedSavingsProperties) GetOverageCost() (rv float32) {
	if r != nil && r.OverageCost != nil {
		return *r.OverageCost
	}
	return
}

func (r *ReservationRecommendationDetailsCalculatedSavingsProperties) GetQuantity() (rv float32) {
	if r != nil && r.Quantity != nil {
		return *r.Quantity
	}
	return
}

func (r *ReservationRecommendationDetailsCalculatedSavingsProperties) GetReservationCost() (rv float32) {
	if r != nil && r.ReservationCost != nil {
		return *r.ReservationCost
	}
	return
}

func (r *ReservationRecommendationDetailsCalculatedSavingsProperties) GetSavings() (rv float32) {
	if r != nil && r.Savings != nil {
		return *r.Savings
	}
	return
}

func (r *ReservationRecommendationDetailsCalculatedSavingsProperties) GetTotalReservationCost() (rv float32) {
	if r != nil && r.TotalReservationCost != nil {
		return *r.TotalReservationCost
	}
	return
}

// ReservationRecommendationDetailsModel - Reservation recommendation details.
type ReservationRecommendationDetailsModel struct {
	// Resource Location.
	Location *string

	// The properties of the reservation recommendation.
	Properties *ReservationRecommendationDetailsProperties

	// Resource sku
	SKU *string

	// READ-ONLY; Resource etag.
	Etag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (r *ReservationRecommendationDetailsModel) GetLocation() (rv string) {
	if r != nil && r.Location != nil {
		return *r.Location
	}
	return
}

func (r *ReservationRecommendationDetailsModel) GetProperties() (rv *ReservationRecommendationDetailsProperties) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *ReservationRecommendationDetailsModel) GetSKU() (rv string) {
	if r != nil && r.SKU != nil {
		return *r.SKU
	}
	return
}

func (r *ReservationRecommendationDetailsModel) GetEtag() (rv string) {
	if r != nil && r.Etag != nil {
		return *r.Etag
	}
	return
}

func (r *ReservationRecommendationDetailsModel) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *ReservationRecommendationDetailsModel) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *ReservationRecommendationDetailsModel) GetTags() (rv map[string]*string) {
	if r != nil {
		return r.Tags
	}
	return
}

func (r *ReservationRecommendationDetailsModel) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// ReservationRecommendationDetailsProperties - The properties of the reservation recommendation.
type ReservationRecommendationDetailsProperties struct {
	// READ-ONLY; An ISO 4217 currency code identifier for the costs and savings
	Currency *string

	// READ-ONLY; Resource specific properties.
	Resource *ReservationRecommendationDetailsResourceProperties

	// READ-ONLY; Resource Group.
	ResourceGroup *string

	// READ-ONLY; Savings information for the recommendation.
	Savings *ReservationRecommendationDetailsSavingsProperties

	// READ-ONLY; Scope of the reservation, ex: Single or Shared.
	Scope *string

	// READ-ONLY; Historical usage details used to calculate the estimated savings.
	Usage *ReservationRecommendationDetailsUsageProperties
}

func (r *ReservationRecommendationDetailsProperties) GetCurrency() (rv string) {
	if r != nil && r.Currency != nil {
		return *r.Currency
	}
	return
}

func (r *ReservationRecommendationDetailsProperties) GetResource() (rv *ReservationRecommendationDetailsResourceProperties) {
	if r != nil {
		return r.Resource
	}
	return
}

func (r *ReservationRecommendationDetailsProperties) GetResourceGroup() (rv string) {
	if r != nil && r.ResourceGroup != nil {
		return *r.ResourceGroup
	}
	return
}

func (r *ReservationRecommendationDetailsProperties) GetSavings() (rv *ReservationRecommendationDetailsSavingsProperties) {
	if r != nil {
		return r.Savings
	}
	return
}

func (r *ReservationRecommendationDetailsProperties) GetScope() (rv string) {
	if r != nil && r.Scope != nil {
		return *r.Scope
	}
	return
}

func (r *ReservationRecommendationDetailsProperties) GetUsage() (rv *ReservationRecommendationDetailsUsageProperties) {
	if r != nil {
		return r.Usage
	}
	return
}

// ReservationRecommendationDetailsResourceProperties - Details of the resource.
type ReservationRecommendationDetailsResourceProperties struct {
	// READ-ONLY; List of subscriptions for which the reservation is applied.
	AppliedScopes []*string

	// READ-ONLY; On demand rate of the resource.
	OnDemandRate *float32

	// READ-ONLY; Azure product ex: StandardE8sv3 etc.
	Product *string

	// READ-ONLY; Azure resource region ex:EastUS, WestUS etc.
	Region *string

	// READ-ONLY; Reservation rate of the resource.
	ReservationRate *float32

	// READ-ONLY; The azure resource type.
	ResourceType *string
}

func (r *ReservationRecommendationDetailsResourceProperties) GetAppliedScopes() (rv []*string) {
	if r != nil {
		return r.AppliedScopes
	}
	return
}

func (r *ReservationRecommendationDetailsResourceProperties) GetOnDemandRate() (rv float32) {
	if r != nil && r.OnDemandRate != nil {
		return *r.OnDemandRate
	}
	return
}

func (r *ReservationRecommendationDetailsResourceProperties) GetProduct() (rv string) {
	if r != nil && r.Product != nil {
		return *r.Product
	}
	return
}

func (r *ReservationRecommendationDetailsResourceProperties) GetRegion() (rv string) {
	if r != nil && r.Region != nil {
		return *r.Region
	}
	return
}

func (r *ReservationRecommendationDetailsResourceProperties) GetReservationRate() (rv float32) {
	if r != nil && r.ReservationRate != nil {
		return *r.ReservationRate
	}
	return
}

func (r *ReservationRecommendationDetailsResourceProperties) GetResourceType() (rv string) {
	if r != nil && r.ResourceType != nil {
		return *r.ResourceType
	}
	return
}

// ReservationRecommendationDetailsSavingsProperties - Details of the estimated savings.
type ReservationRecommendationDetailsSavingsProperties struct {
	// List of calculated savings.
	CalculatedSavings []*ReservationRecommendationDetailsCalculatedSavingsProperties

	// READ-ONLY; Number of days of usage to look back used for computing the recommendation.
	LookBackPeriod *int32

	// READ-ONLY; Number of recommended units of the resource.
	RecommendedQuantity *float32

	// READ-ONLY; Term period of the reservation, ex: P1Y or P3Y.
	ReservationOrderTerm *string

	// READ-ONLY; Type of savings, ex: instance.
	SavingsType *string

	// READ-ONLY; Measurement unit ex: hour etc.
	UnitOfMeasure *string
}

func (r *ReservationRecommendationDetailsSavingsProperties) GetCalculatedSavings() (rv []*ReservationRecommendationDetailsCalculatedSavingsProperties) {
	if r != nil {
		return r.CalculatedSavings
	}
	return
}

func (r *ReservationRecommendationDetailsSavingsProperties) GetLookBackPeriod() (rv int32) {
	if r != nil && r.LookBackPeriod != nil {
		return *r.LookBackPeriod
	}
	return
}

func (r *ReservationRecommendationDetailsSavingsProperties) GetRecommendedQuantity() (rv float32) {
	if r != nil && r.RecommendedQuantity != nil {
		return *r.RecommendedQuantity
	}
	return
}

func (r *ReservationRecommendationDetailsSavingsProperties) GetReservationOrderTerm() (rv string) {
	if r != nil && r.ReservationOrderTerm != nil {
		return *r.ReservationOrderTerm
	}
	return
}

func (r *ReservationRecommendationDetailsSavingsProperties) GetSavingsType() (rv string) {
	if r != nil && r.SavingsType != nil {
		return *r.SavingsType
	}
	return
}

func (r *ReservationRecommendationDetailsSavingsProperties) GetUnitOfMeasure() (rv string) {
	if r != nil && r.UnitOfMeasure != nil {
		return *r.UnitOfMeasure
	}
	return
}

// ReservationRecommendationDetailsUsageProperties - Details about historical usage data that has been used for computing
// the recommendation.
type ReservationRecommendationDetailsUsageProperties struct {
	// READ-ONLY; The first usage date used for looking back for computing the recommendation.
	FirstConsumptionDate *string

	// READ-ONLY; The last usage date used for looking back for computing the recommendation.
	LastConsumptionDate *string

	// READ-ONLY; What the usage data values represent ex: virtual machine instance.
	LookBackUnitType *string

	// READ-ONLY; The breakdown of historical resource usage. The values are in the order of usage between the firstConsumptionDate
	// and the lastConsumptionDate.
	UsageData []*float32

	// READ-ONLY; The grain of the values represented in the usage data ex: hourly.
	UsageGrain *string
}

func (r *ReservationRecommendationDetailsUsageProperties) GetFirstConsumptionDate() (rv string) {
	if r != nil && r.FirstConsumptionDate != nil {
		return *r.FirstConsumptionDate
	}
	return
}

func (r *ReservationRecommendationDetailsUsageProperties) GetLastConsumptionDate() (rv string) {
	if r != nil && r.LastConsumptionDate != nil {
		return *r.LastConsumptionDate
	}
	return
}

func (r *ReservationRecommendationDetailsUsageProperties) GetLookBackUnitType() (rv string) {
	if r != nil && r.LookBackUnitType != nil {
		return *r.LookBackUnitType
	}
	return
}

func (r *ReservationRecommendationDetailsUsageProperties) GetUsageData() (rv []*float32) {
	if r != nil {
		return r.UsageData
	}
	return
}

func (r *ReservationRecommendationDetailsUsageProperties) GetUsageGrain() (rv string) {
	if r != nil && r.UsageGrain != nil {
		return *r.UsageGrain
	}
	return
}

// ReservationRecommendationsListResult - Result of listing reservation recommendations.
type ReservationRecommendationsListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string

	// READ-ONLY; The link (url) to the previous page of results.
	PreviousLink *string

	// READ-ONLY; The total amount of cost.
	TotalCost *string

	// READ-ONLY; The list of reservation recommendations.
	Value []ReservationRecommendationClassification
}

func (r *ReservationRecommendationsListResult) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

func (r *ReservationRecommendationsListResult) GetPreviousLink() (rv string) {
	if r != nil && r.PreviousLink != nil {
		return *r.PreviousLink
	}
	return
}

func (r *ReservationRecommendationsListResult) GetTotalCost() (rv string) {
	if r != nil && r.TotalCost != nil {
		return *r.TotalCost
	}
	return
}

func (r *ReservationRecommendationsListResult) GetValue() (rv []ReservationRecommendationClassification) {
	if r != nil {
		return r.Value
	}
	return
}

// ReservationSummariesListResult - Result of listing reservation summaries.
type ReservationSummariesListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string

	// READ-ONLY; The list of reservation summaries.
	Value []*ReservationSummary
}

func (r *ReservationSummariesListResult) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

func (r *ReservationSummariesListResult) GetValue() (rv []*ReservationSummary) {
	if r != nil {
		return r.Value
	}
	return
}

// ReservationSummary - reservation summary resource.
type ReservationSummary struct {
	// The properties of the reservation summary.
	Properties *ReservationSummaryProperties

	// READ-ONLY; Resource eTag.
	ETag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (r *ReservationSummary) GetProperties() (rv *ReservationSummaryProperties) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *ReservationSummary) GetETag() (rv string) {
	if r != nil && r.ETag != nil {
		return *r.ETag
	}
	return
}

func (r *ReservationSummary) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *ReservationSummary) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *ReservationSummary) GetTags() (rv map[string]*string) {
	if r != nil {
		return r.Tags
	}
	return
}

func (r *ReservationSummary) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// ReservationSummaryProperties - The properties of the reservation summary.
type ReservationSummaryProperties struct {
	// READ-ONLY; This is average utilization for the entire time range. (day or month depending on the grain)
	AvgUtilizationPercentage *float64

	// READ-ONLY; The reservation kind.
	Kind *string

	// READ-ONLY; This is the maximum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to
	// 12/10/2017 and on that for hour 4 and 5, utilization was 100%, this field will return 100%
	// for that day.
	MaxUtilizationPercentage *float64

	// READ-ONLY; This is the minimum hourly utilization in the usage time (day or month). E.g. if usage record corresponds to
	// 12/10/2017 and on that for hour 4 and 5, utilization was 10%, this field will return 10%
	// for that day
	MinUtilizationPercentage *float64

	// READ-ONLY; This is the purchased quantity for the reservationId.
	PurchasedQuantity *float64

	// READ-ONLY; This is the remaining quantity for the reservationId.
	RemainingQuantity *float64

	// READ-ONLY; The reservation ID is the identifier of a reservation within a reservation order. Each reservation is the grouping
	// for applying the benefit scope and also specifies the number of instances to which
	// the reservation benefit can be applied to.
	ReservationID *string

	// READ-ONLY; The reservation order ID is the identifier for a reservation purchase. Each reservation order ID represents
	// a single purchase transaction. A reservation order contains reservations. The reservation
	// order specifies the VM size and region for the reservations.
	ReservationOrderID *string

	// READ-ONLY; This is the total hours reserved. E.g. if reservation for 1 instance was made on 1 PM, this will be 11 hours
	// for that day and 24 hours from subsequent days
	ReservedHours *float64

	// READ-ONLY; This is the ARM Sku name. It can be used to join with the serviceType field in additional info in usage records.
	SKUName *string

	// READ-ONLY; This is the total count of instances that are reserved for the reservationId.
	TotalReservedQuantity *float64

	// READ-ONLY; Data corresponding to the utilization record. If the grain of data is monthly, it will be first day of month.
	UsageDate *time.Time

	// READ-ONLY; Total used hours by the reservation
	UsedHours *float64

	// READ-ONLY; This is the used quantity for the reservationId.
	UsedQuantity *float64

	// READ-ONLY; This is the utilized percentage for the reservation Id.
	UtilizedPercentage *float64
}

func (r *ReservationSummaryProperties) GetAvgUtilizationPercentage() (rv float64) {
	if r != nil && r.AvgUtilizationPercentage != nil {
		return *r.AvgUtilizationPercentage
	}
	return
}

func (r *ReservationSummaryProperties) GetKind() (rv string) {
	if r != nil && r.Kind != nil {
		return *r.Kind
	}
	return
}

func (r *ReservationSummaryProperties) GetMaxUtilizationPercentage() (rv float64) {
	if r != nil && r.MaxUtilizationPercentage != nil {
		return *r.MaxUtilizationPercentage
	}
	return
}

func (r *ReservationSummaryProperties) GetMinUtilizationPercentage() (rv float64) {
	if r != nil && r.MinUtilizationPercentage != nil {
		return *r.MinUtilizationPercentage
	}
	return
}

func (r *ReservationSummaryProperties) GetPurchasedQuantity() (rv float64) {
	if r != nil && r.PurchasedQuantity != nil {
		return *r.PurchasedQuantity
	}
	return
}

func (r *ReservationSummaryProperties) GetRemainingQuantity() (rv float64) {
	if r != nil && r.RemainingQuantity != nil {
		return *r.RemainingQuantity
	}
	return
}

func (r *ReservationSummaryProperties) GetReservationID() (rv string) {
	if r != nil && r.ReservationID != nil {
		return *r.ReservationID
	}
	return
}

func (r *ReservationSummaryProperties) GetReservationOrderID() (rv string) {
	if r != nil && r.ReservationOrderID != nil {
		return *r.ReservationOrderID
	}
	return
}

func (r *ReservationSummaryProperties) GetReservedHours() (rv float64) {
	if r != nil && r.ReservedHours != nil {
		return *r.ReservedHours
	}
	return
}

func (r *ReservationSummaryProperties) GetSKUName() (rv string) {
	if r != nil && r.SKUName != nil {
		return *r.SKUName
	}
	return
}

func (r *ReservationSummaryProperties) GetTotalReservedQuantity() (rv float64) {
	if r != nil && r.TotalReservedQuantity != nil {
		return *r.TotalReservedQuantity
	}
	return
}

func (r *ReservationSummaryProperties) GetUsageDate() (rv *time.Time) {
	if r != nil {
		return r.UsageDate
	}
	return
}

func (r *ReservationSummaryProperties) GetUsedHours() (rv float64) {
	if r != nil && r.UsedHours != nil {
		return *r.UsedHours
	}
	return
}

func (r *ReservationSummaryProperties) GetUsedQuantity() (rv float64) {
	if r != nil && r.UsedQuantity != nil {
		return *r.UsedQuantity
	}
	return
}

func (r *ReservationSummaryProperties) GetUtilizedPercentage() (rv float64) {
	if r != nil && r.UtilizedPercentage != nil {
		return *r.UtilizedPercentage
	}
	return
}

// ReservationTransaction - Reservation transaction resource.
type ReservationTransaction struct {
	// The properties of a legacy reservation transaction.
	Properties *LegacyReservationTransactionProperties

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags []*string

	// READ-ONLY; Resource type.
	Type *string
}

func (r *ReservationTransaction) GetProperties() (rv *LegacyReservationTransactionProperties) {
	if r != nil {
		return r.Properties
	}
	return
}

func (r *ReservationTransaction) GetID() (rv string) {
	if r != nil && r.ID != nil {
		return *r.ID
	}
	return
}

func (r *ReservationTransaction) GetName() (rv string) {
	if r != nil && r.Name != nil {
		return *r.Name
	}
	return
}

func (r *ReservationTransaction) GetTags() (rv []*string) {
	if r != nil {
		return r.Tags
	}
	return
}

func (r *ReservationTransaction) GetType() (rv string) {
	if r != nil && r.Type != nil {
		return *r.Type
	}
	return
}

// ReservationTransactionsListResult - Result of listing reservation recommendations.
type ReservationTransactionsListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string

	// READ-ONLY; The list of reservation recommendations.
	Value []*ReservationTransaction
}

func (r *ReservationTransactionsListResult) GetNextLink() (rv string) {
	if r != nil && r.NextLink != nil {
		return *r.NextLink
	}
	return
}

func (r *ReservationTransactionsListResult) GetValue() (rv []*ReservationTransaction) {
	if r != nil {
		return r.Value
	}
	return
}

// SKUProperty - The Sku property
type SKUProperty struct {
	// READ-ONLY; The name of sku property.
	Name *string

	// READ-ONLY; The value of sku property.
	Value *string
}

func (s *SKUProperty) GetName() (rv string) {
	if s != nil && s.Name != nil {
		return *s.Name
	}
	return
}

func (s *SKUProperty) GetValue() (rv string) {
	if s != nil && s.Value != nil {
		return *s.Value
	}
	return
}

// Tag - The tag resource.
type Tag struct {
	// Tag key.
	Key *string

	// Tag values.
	Value []*string
}

func (t *Tag) GetKey() (rv string) {
	if t != nil && t.Key != nil {
		return *t.Key
	}
	return
}

func (t *Tag) GetValue() (rv []*string) {
	if t != nil {
		return t.Value
	}
	return
}

// TagProperties - The properties of the tag.
type TagProperties struct {
	// A list of Tag.
	Tags []*Tag

	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string

	// READ-ONLY; The link (url) to the previous page of results.
	PreviousLink *string
}

func (t *TagProperties) GetTags() (rv []*Tag) {
	if t != nil {
		return t.Tags
	}
	return
}

func (t *TagProperties) GetNextLink() (rv string) {
	if t != nil && t.NextLink != nil {
		return *t.NextLink
	}
	return
}

func (t *TagProperties) GetPreviousLink() (rv string) {
	if t != nil && t.PreviousLink != nil {
		return *t.PreviousLink
	}
	return
}

// TagsResult - A resource listing all tags.
type TagsResult struct {
	// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating
	// the latest version or not.
	ETag *string

	// The properties of the tag.
	Properties *TagProperties

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource type.
	Type *string
}

func (t *TagsResult) GetETag() (rv string) {
	if t != nil && t.ETag != nil {
		return *t.ETag
	}
	return
}

func (t *TagsResult) GetProperties() (rv *TagProperties) {
	if t != nil {
		return t.Properties
	}
	return
}

func (t *TagsResult) GetID() (rv string) {
	if t != nil && t.ID != nil {
		return *t.ID
	}
	return
}

func (t *TagsResult) GetName() (rv string) {
	if t != nil && t.Name != nil {
		return *t.Name
	}
	return
}

func (t *TagsResult) GetType() (rv string) {
	if t != nil && t.Type != nil {
		return *t.Type
	}
	return
}

// UsageDetail - An usage detail resource.
type UsageDetail struct {
	// REQUIRED; Specifies the kind of usage details.
	Kind *UsageDetailsKind

	// READ-ONLY; Resource etag.
	Etag *string

	// READ-ONLY; Resource Id.
	ID *string

	// READ-ONLY; Resource name.
	Name *string

	// READ-ONLY; Resource tags.
	Tags map[string]*string

	// READ-ONLY; Resource type.
	Type *string
}

func (u *UsageDetail) GetKind() (rv *UsageDetailsKind) {
	if u != nil {
		return u.Kind
	}
	return
}

func (u *UsageDetail) GetEtag() (rv string) {
	if u != nil && u.Etag != nil {
		return *u.Etag
	}
	return
}

func (u *UsageDetail) GetID() (rv string) {
	if u != nil && u.ID != nil {
		return *u.ID
	}
	return
}

func (u *UsageDetail) GetName() (rv string) {
	if u != nil && u.Name != nil {
		return *u.Name
	}
	return
}

func (u *UsageDetail) GetTags() (rv map[string]*string) {
	if u != nil {
		return u.Tags
	}
	return
}

func (u *UsageDetail) GetType() (rv string) {
	if u != nil && u.Type != nil {
		return *u.Type
	}
	return
}

// GetUsageDetail implements the UsageDetailClassification interface for type UsageDetail.
func (u *UsageDetail) GetUsageDetail() *UsageDetail { return u }

// UsageDetailsListResult - Result of listing usage details. It contains a list of available usage details in reverse chronological
// order by billing period.
type UsageDetailsListResult struct {
	// READ-ONLY; The link (url) to the next page of results.
	NextLink *string

	// READ-ONLY; The list of usage details.
	Value []UsageDetailClassification
}

func (u *UsageDetailsListResult) GetNextLink() (rv string) {
	if u != nil && u.NextLink != nil {
		return *u.NextLink
	}
	return
}

func (u *UsageDetailsListResult) GetValue() (rv []UsageDetailClassification) {
	if u != nil {
		return u.Value
	}
	return
}
